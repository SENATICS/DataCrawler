/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDBus.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qdbuserror.sip"
#include <qdbuserror.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusError.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusError.cpp"


PyDoc_STRVAR(doc_QDBusError_type, "QDBusError.type() -> QDBusError.ErrorType");

extern "C" {static PyObject *meth_QDBusError_type(PyObject *, PyObject *);}
static PyObject *meth_QDBusError_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusError, &sipCpp))
        {
            QDBusError::ErrorType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDBusError_ErrorType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusError, sipName_type, doc_QDBusError_type);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusError_name, "QDBusError.name() -> QString");

extern "C" {static PyObject *meth_QDBusError_name(PyObject *, PyObject *);}
static PyObject *meth_QDBusError_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusError, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusError, sipName_name, doc_QDBusError_name);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusError_message, "QDBusError.message() -> QString");

extern "C" {static PyObject *meth_QDBusError_message(PyObject *, PyObject *);}
static PyObject *meth_QDBusError_message(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusError, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->message());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusError, sipName_message, doc_QDBusError_message);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusError_isValid, "QDBusError.isValid() -> bool");

extern "C" {static PyObject *meth_QDBusError_isValid(PyObject *, PyObject *);}
static PyObject *meth_QDBusError_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusError, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusError, sipName_isValid, doc_QDBusError_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusError_errorString, "QDBusError.errorString(QDBusError.ErrorType) -> QString");

extern "C" {static PyObject *meth_QDBusError_errorString(PyObject *, PyObject *);}
static PyObject *meth_QDBusError_errorString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDBusError::ErrorType a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QDBusError_ErrorType, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QDBusError::errorString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusError, sipName_errorString, doc_QDBusError_errorString);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDBusError(void *, const sipTypeDef *);}
static void *cast_QDBusError(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDBusError)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDBusError(void *, int);}
static void release_QDBusError(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QDBusError *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDBusError(sipSimpleWrapper *);}
static void dealloc_QDBusError(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDBusError(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QDBusError(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDBusError(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDBusError *sipCpp = 0;

    {
        const QDBusError* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDBusError, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDBusError(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QDBusError[] = {
    {SIP_MLNAME_CAST(sipName_errorString), meth_QDBusError_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusError_errorString)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QDBusError_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusError_isValid)},
    {SIP_MLNAME_CAST(sipName_message), meth_QDBusError_message, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusError_message)},
    {SIP_MLNAME_CAST(sipName_name), meth_QDBusError_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusError_name)},
    {SIP_MLNAME_CAST(sipName_type), meth_QDBusError_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusError_type)}
};

static sipEnumMemberDef enummembers_QDBusError[] = {
    {sipName_AccessDenied, static_cast<int>(QDBusError::AccessDenied), 17},
    {sipName_AddressInUse, static_cast<int>(QDBusError::AddressInUse), 17},
    {sipName_BadAddress, static_cast<int>(QDBusError::BadAddress), 17},
    {sipName_Disconnected, static_cast<int>(QDBusError::Disconnected), 17},
    {sipName_Failed, static_cast<int>(QDBusError::Failed), 17},
    {sipName_InternalError, static_cast<int>(QDBusError::InternalError), 17},
    {sipName_InvalidArgs, static_cast<int>(QDBusError::InvalidArgs), 17},
    {sipName_InvalidInterface, static_cast<int>(QDBusError::InvalidInterface), 17},
    {sipName_InvalidMember, static_cast<int>(QDBusError::InvalidMember), 17},
    {sipName_InvalidObjectPath, static_cast<int>(QDBusError::InvalidObjectPath), 17},
    {sipName_InvalidService, static_cast<int>(QDBusError::InvalidService), 17},
    {sipName_InvalidSignature, static_cast<int>(QDBusError::InvalidSignature), 17},
    {sipName_LimitsExceeded, static_cast<int>(QDBusError::LimitsExceeded), 17},
    {sipName_NoError, static_cast<int>(QDBusError::NoError), 17},
    {sipName_NoMemory, static_cast<int>(QDBusError::NoMemory), 17},
    {sipName_NoNetwork, static_cast<int>(QDBusError::NoNetwork), 17},
    {sipName_NoReply, static_cast<int>(QDBusError::NoReply), 17},
    {sipName_NoServer, static_cast<int>(QDBusError::NoServer), 17},
    {sipName_NotSupported, static_cast<int>(QDBusError::NotSupported), 17},
    {sipName_Other, static_cast<int>(QDBusError::Other), 17},
    {sipName_ServiceUnknown, static_cast<int>(QDBusError::ServiceUnknown), 17},
    {sipName_TimedOut, static_cast<int>(QDBusError::TimedOut), 17},
    {sipName_Timeout, static_cast<int>(QDBusError::Timeout), 17},
    {sipName_UnknownInterface, static_cast<int>(QDBusError::UnknownInterface), 17},
    {sipName_UnknownMethod, static_cast<int>(QDBusError::UnknownMethod), 17},
    {sipName_UnknownObject, static_cast<int>(QDBusError::UnknownObject), 17},
};

PyDoc_STRVAR(doc_QDBusError, "\1QDBusError(QDBusError)");


pyqt4ClassTypeDef sipTypeDef_QtDBus_QDBusError = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDBusError,
        {0}
    },
    {
        sipNameNr_QDBusError,
        {0, 0, 1},
        5, methods_QDBusError,
        26, enummembers_QDBusError,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDBusError,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QDBusError,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDBusError,
    0,
    0,
    0,
    release_QDBusError,
    cast_QDBusError,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
