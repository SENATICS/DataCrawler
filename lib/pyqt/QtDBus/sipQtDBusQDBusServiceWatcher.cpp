/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDBus.h"

#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qdbusservicewatcher.sip"
#include <qdbusservicewatcher.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 57 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qdbusservicewatcher.sip"
#include <qdbusservicewatcher.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"


class sipQDBusServiceWatcher : public QDBusServiceWatcher
{
public:
    sipQDBusServiceWatcher(QObject*);
    sipQDBusServiceWatcher(const QString&,const QDBusConnection&,QDBusServiceWatcher::WatchMode,QObject*);
    virtual ~sipQDBusServiceWatcher();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDBusServiceWatcher(const sipQDBusServiceWatcher &);
    sipQDBusServiceWatcher &operator = (const sipQDBusServiceWatcher &);

    char sipPyMethods[7];
};

sipQDBusServiceWatcher::sipQDBusServiceWatcher(QObject*a0): QDBusServiceWatcher(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDBusServiceWatcher::sipQDBusServiceWatcher(const QString& a0,const QDBusConnection& a1,QDBusServiceWatcher::WatchMode a2,QObject*a3): QDBusServiceWatcher(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDBusServiceWatcher::~sipQDBusServiceWatcher()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDBusServiceWatcher::metaObject() const
{
    return sip_QtDBus_qt_metaobject(sipPySelf,sipType_QDBusServiceWatcher);
}

int sipQDBusServiceWatcher::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDBusServiceWatcher::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtDBus_qt_metacall(sipPySelf,sipType_QDBusServiceWatcher,_c,_id,_a);

    return _id;
}

void *sipQDBusServiceWatcher::qt_metacast(const char *_clname)
{
    return (sip_QtDBus_qt_metacast(sipPySelf, sipType_QDBusServiceWatcher, _clname)) ? this : QDBusServiceWatcher::qt_metacast(_clname);
}

void sipQDBusServiceWatcher::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QDBusServiceWatcher::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDBusServiceWatcher::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QDBusServiceWatcher::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDBusServiceWatcher::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QDBusServiceWatcher::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDBusServiceWatcher::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QDBusServiceWatcher::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDBusServiceWatcher::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QDBusServiceWatcher::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDBusServiceWatcher::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QDBusServiceWatcher::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDBusServiceWatcher::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QDBusServiceWatcher::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_watchedServices, "QDBusServiceWatcher.watchedServices() -> QStringList");

extern "C" {static PyObject *meth_QDBusServiceWatcher_watchedServices(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_watchedServices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->watchedServices());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_watchedServices, doc_QDBusServiceWatcher_watchedServices);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_setWatchedServices, "QDBusServiceWatcher.setWatchedServices(QStringList)");

extern "C" {static PyObject *meth_QDBusServiceWatcher_setWatchedServices(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_setWatchedServices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWatchedServices(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_setWatchedServices, doc_QDBusServiceWatcher_setWatchedServices);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_addWatchedService, "QDBusServiceWatcher.addWatchedService(QString)");

extern "C" {static PyObject *meth_QDBusServiceWatcher_addWatchedService(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_addWatchedService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addWatchedService(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_addWatchedService, doc_QDBusServiceWatcher_addWatchedService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_removeWatchedService, "QDBusServiceWatcher.removeWatchedService(QString) -> bool");

extern "C" {static PyObject *meth_QDBusServiceWatcher_removeWatchedService(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_removeWatchedService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->removeWatchedService(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_removeWatchedService, doc_QDBusServiceWatcher_removeWatchedService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_watchMode, "QDBusServiceWatcher.watchMode() -> QDBusServiceWatcher.WatchMode");

extern "C" {static PyObject *meth_QDBusServiceWatcher_watchMode(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_watchMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp))
        {
            QDBusServiceWatcher::WatchMode*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusServiceWatcher::WatchMode(sipCpp->watchMode());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDBusServiceWatcher_WatchMode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_watchMode, doc_QDBusServiceWatcher_watchMode);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_setWatchMode, "QDBusServiceWatcher.setWatchMode(QDBusServiceWatcher.WatchMode)");

extern "C" {static PyObject *meth_QDBusServiceWatcher_setWatchMode(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_setWatchMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDBusServiceWatcher::WatchMode* a0;
        int a0State = 0;
        QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp, sipType_QDBusServiceWatcher_WatchMode, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWatchMode(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDBusServiceWatcher_WatchMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_setWatchMode, doc_QDBusServiceWatcher_setWatchMode);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_connection, "QDBusServiceWatcher.connection() -> QDBusConnection");

extern "C" {static PyObject *meth_QDBusServiceWatcher_connection(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_connection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp))
        {
            QDBusConnection*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusConnection(sipCpp->connection());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDBusConnection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_connection, doc_QDBusServiceWatcher_connection);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_setConnection, "QDBusServiceWatcher.setConnection(QDBusConnection)");

extern "C" {static PyObject *meth_QDBusServiceWatcher_setConnection(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_setConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusConnection* a0;
        QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp, sipType_QDBusConnection, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setConnection(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_setConnection, doc_QDBusServiceWatcher_setConnection);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDBusServiceWatcher(void *, const sipTypeDef *);}
static void *cast_QDBusServiceWatcher(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDBusServiceWatcher)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QDBusServiceWatcher *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDBusServiceWatcher(void *, int);}
static void release_QDBusServiceWatcher(void *sipCppV,int)
{
    QDBusServiceWatcher *sipCpp = reinterpret_cast<QDBusServiceWatcher *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDBusServiceWatcher(sipSimpleWrapper *);}
static void dealloc_QDBusServiceWatcher(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDBusServiceWatcher *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDBusServiceWatcher(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QDBusServiceWatcher(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDBusServiceWatcher(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDBusServiceWatcher *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDBusServiceWatcher(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QDBusConnection* a1;
        QDBusServiceWatcher::WatchMode a2def = QDBusServiceWatcher::WatchForOwnerChange;
        QDBusServiceWatcher::WatchMode* a2 = &a2def;
        int a2State = 0;
        QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_watchMode,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J9|J1JH", sipType_QString,&a0, &a0State, sipType_QDBusConnection, &a1, sipType_QDBusServiceWatcher_WatchMode, &a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDBusServiceWatcher(*a0,*a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QDBusServiceWatcher_WatchMode,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDBusServiceWatcher[] = {{141, 0, 1}};


static PyMethodDef methods_QDBusServiceWatcher[] = {
    {SIP_MLNAME_CAST(sipName_addWatchedService), meth_QDBusServiceWatcher_addWatchedService, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusServiceWatcher_addWatchedService)},
    {SIP_MLNAME_CAST(sipName_connection), meth_QDBusServiceWatcher_connection, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusServiceWatcher_connection)},
    {SIP_MLNAME_CAST(sipName_removeWatchedService), meth_QDBusServiceWatcher_removeWatchedService, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusServiceWatcher_removeWatchedService)},
    {SIP_MLNAME_CAST(sipName_setConnection), meth_QDBusServiceWatcher_setConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusServiceWatcher_setConnection)},
    {SIP_MLNAME_CAST(sipName_setWatchMode), meth_QDBusServiceWatcher_setWatchMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusServiceWatcher_setWatchMode)},
    {SIP_MLNAME_CAST(sipName_setWatchedServices), meth_QDBusServiceWatcher_setWatchedServices, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusServiceWatcher_setWatchedServices)},
    {SIP_MLNAME_CAST(sipName_watchMode), meth_QDBusServiceWatcher_watchMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusServiceWatcher_watchMode)},
    {SIP_MLNAME_CAST(sipName_watchedServices), meth_QDBusServiceWatcher_watchedServices, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusServiceWatcher_watchedServices)}
};

static sipEnumMemberDef enummembers_QDBusServiceWatcher[] = {
    {sipName_WatchForOwnerChange, static_cast<int>(QDBusServiceWatcher::WatchForOwnerChange), 32},
    {sipName_WatchForRegistration, static_cast<int>(QDBusServiceWatcher::WatchForRegistration), 32},
    {sipName_WatchForUnregistration, static_cast<int>(QDBusServiceWatcher::WatchForUnregistration), 32},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDBusServiceWatcher[] = {
    {"serviceOwnerChanged(QString,QString,QString)", "\1QDBusServiceWatcher.serviceOwnerChanged[QString, QString, QString]", 0, 0},
    {"serviceUnregistered(QString)", "\1QDBusServiceWatcher.serviceUnregistered[QString]", 0, 0},
    {"serviceRegistered(QString)", "\1QDBusServiceWatcher.serviceRegistered[QString]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QDBusServiceWatcher, "\1QDBusServiceWatcher(QObject parent=None)\n"
    "QDBusServiceWatcher(QString, QDBusConnection, QDBusServiceWatcher.WatchMode watchMode=QDBusServiceWatcher.WatchForOwnerChange, QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtDBus_QDBusServiceWatcher = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDBusServiceWatcher,
        {0}
    },
    {
        sipNameNr_QDBusServiceWatcher,
        {0, 0, 1},
        8, methods_QDBusServiceWatcher,
        3, enummembers_QDBusServiceWatcher,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDBusServiceWatcher,
    -1,
    -1,
    supers_QDBusServiceWatcher,
    0,
    init_type_QDBusServiceWatcher,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDBusServiceWatcher,
    0,
    0,
    0,
    release_QDBusServiceWatcher,
    cast_QDBusServiceWatcher,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QDBusServiceWatcher::staticMetaObject,
    0,
    signals_QDBusServiceWatcher,
};
