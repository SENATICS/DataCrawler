/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDBus.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qdbusconnectioninterface.sip"
#include <qdbusconnectioninterface.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"

#line 57 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qdbuserror.sip"
#include <qdbuserror.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qdbusmessage.sip"
#include <qdbusmessage.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 54 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 169 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 58 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 210 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 66 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 51 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 70 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 73 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 51 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qdbuspendingcall.sip"
#include <qdbuspendingcall.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"


PyDoc_STRVAR(doc_QDBusConnectionInterface_registeredServiceNames, "QDBusConnectionInterface.registeredServiceNames() -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_registeredServiceNames(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_registeredServiceNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp))
        {
            QDBusReply<QStringList>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply<QStringList>(sipCpp->registeredServiceNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0100QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_registeredServiceNames, doc_QDBusConnectionInterface_registeredServiceNames);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_isServiceRegistered, "QDBusConnectionInterface.isServiceRegistered(QString) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_isServiceRegistered(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_isServiceRegistered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDBusReply<bool>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply<bool>(sipCpp->isServiceRegistered(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_2600,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_isServiceRegistered, doc_QDBusConnectionInterface_isServiceRegistered);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_serviceOwner, "QDBusConnectionInterface.serviceOwner(QString) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_serviceOwner(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_serviceOwner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDBusReply<QString>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply<QString>(sipCpp->serviceOwner(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_serviceOwner, doc_QDBusConnectionInterface_serviceOwner);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_unregisterService, "QDBusConnectionInterface.unregisterService(QString) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_unregisterService(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_unregisterService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDBusReply<bool>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply<bool>(sipCpp->unregisterService(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_2600,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_unregisterService, doc_QDBusConnectionInterface_unregisterService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_registerService, "QDBusConnectionInterface.registerService(QString, QDBusConnectionInterface.ServiceQueueOptions qoption=QDBusConnectionInterface.DontQueueService, QDBusConnectionInterface.ServiceReplacementOptions roption=QDBusConnectionInterface.DontAllowReplacement) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_registerService(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_registerService(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDBusConnectionInterface::ServiceQueueOptions a1 = QDBusConnectionInterface::DontQueueService;
        QDBusConnectionInterface::ServiceReplacementOptions a2 = QDBusConnectionInterface::DontAllowReplacement;
        QDBusConnectionInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_qoption,
            sipName_roption,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EE", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State, sipType_QDBusConnectionInterface_ServiceQueueOptions, &a1, sipType_QDBusConnectionInterface_ServiceReplacementOptions, &a2))
        {
            QDBusReply<QDBusConnectionInterface::RegisterServiceReply>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply<QDBusConnectionInterface::RegisterServiceReply>(sipCpp->registerService(*a0,a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0100QDBusConnectionInterface_RegisterServiceReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_registerService, doc_QDBusConnectionInterface_registerService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_servicePid, "QDBusConnectionInterface.servicePid(QString) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_servicePid(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_servicePid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDBusReply<uint>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply<uint>(sipCpp->servicePid(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_1900,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_servicePid, doc_QDBusConnectionInterface_servicePid);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_serviceUid, "QDBusConnectionInterface.serviceUid(QString) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_serviceUid(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_serviceUid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDBusReply<uint>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply<uint>(sipCpp->serviceUid(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_1900,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_serviceUid, doc_QDBusConnectionInterface_serviceUid);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_startService, "QDBusConnectionInterface.startService(QString) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_startService(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_startService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDBusReply<void>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply<void>(sipCpp->startService(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0400,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_startService, doc_QDBusConnectionInterface_startService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_connectNotify, "QDBusConnectionInterface.connectNotify(SIGNAL())");

extern "C" {static PyObject *meth_QDBusConnectionInterface_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char* a0;
        QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pG", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QDBusConnectionInterface::connectNotify(a0) : sipCpp->connectNotify(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_connectNotify, doc_QDBusConnectionInterface_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_disconnectNotify, "QDBusConnectionInterface.disconnectNotify(SIGNAL())");

extern "C" {static PyObject *meth_QDBusConnectionInterface_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char* a0;
        QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pG", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QDBusConnectionInterface::disconnectNotify(a0) : sipCpp->disconnectNotify(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_disconnectNotify, doc_QDBusConnectionInterface_disconnectNotify);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDBusConnectionInterface(void *, const sipTypeDef *);}
static void *cast_QDBusConnectionInterface(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDBusConnectionInterface)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QDBusAbstractInterface)->ctd_cast((QDBusAbstractInterface *)(QDBusConnectionInterface *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDBusConnectionInterface(void *, int);}
static void release_QDBusConnectionInterface(void *,int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDBusConnectionInterface[] = {{3, 255, 1}};


static PyMethodDef methods_QDBusConnectionInterface[] = {
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QDBusConnectionInterface_connectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_connectNotify)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QDBusConnectionInterface_disconnectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_disconnectNotify)},
    {SIP_MLNAME_CAST(sipName_isServiceRegistered), meth_QDBusConnectionInterface_isServiceRegistered, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_isServiceRegistered)},
    {SIP_MLNAME_CAST(sipName_registerService), (PyCFunction)meth_QDBusConnectionInterface_registerService, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_registerService)},
    {SIP_MLNAME_CAST(sipName_registeredServiceNames), meth_QDBusConnectionInterface_registeredServiceNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_registeredServiceNames)},
    {SIP_MLNAME_CAST(sipName_serviceOwner), meth_QDBusConnectionInterface_serviceOwner, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_serviceOwner)},
    {SIP_MLNAME_CAST(sipName_servicePid), meth_QDBusConnectionInterface_servicePid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_servicePid)},
    {SIP_MLNAME_CAST(sipName_serviceUid), meth_QDBusConnectionInterface_serviceUid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_serviceUid)},
    {SIP_MLNAME_CAST(sipName_startService), meth_QDBusConnectionInterface_startService, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_startService)},
    {SIP_MLNAME_CAST(sipName_unregisterService), meth_QDBusConnectionInterface_unregisterService, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_unregisterService)}
};

static sipEnumMemberDef enummembers_QDBusConnectionInterface[] = {
    {sipName_AllowReplacement, static_cast<int>(QDBusConnectionInterface::AllowReplacement), 15},
    {sipName_DontAllowReplacement, static_cast<int>(QDBusConnectionInterface::DontAllowReplacement), 15},
    {sipName_DontQueueService, static_cast<int>(QDBusConnectionInterface::DontQueueService), 14},
    {sipName_QueueService, static_cast<int>(QDBusConnectionInterface::QueueService), 14},
    {sipName_ReplaceExistingService, static_cast<int>(QDBusConnectionInterface::ReplaceExistingService), 14},
    {sipName_ServiceNotRegistered, static_cast<int>(QDBusConnectionInterface::ServiceNotRegistered), 13},
    {sipName_ServiceQueued, static_cast<int>(QDBusConnectionInterface::ServiceQueued), 13},
    {sipName_ServiceRegistered, static_cast<int>(QDBusConnectionInterface::ServiceRegistered), 13},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDBusConnectionInterface[] = {
    {"callWithCallbackFailed(QDBusError,QDBusMessage)", "\1QDBusConnectionInterface.callWithCallbackFailed[QDBusError, QDBusMessage]", 0, 0},
    {"serviceOwnerChanged(QString,QString,QString)", "\1QDBusConnectionInterface.serviceOwnerChanged[QString, QString, QString]", 0, 0},
    {"serviceUnregistered(QString)", "\1QDBusConnectionInterface.serviceUnregistered[QString]", 0, 0},
    {"serviceRegistered(QString)", "\1QDBusConnectionInterface.serviceRegistered[QString]", 0, 0},
    {0, 0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtDBus_QDBusConnectionInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDBusConnectionInterface,
        {0}
    },
    {
        sipNameNr_QDBusConnectionInterface,
        {0, 0, 1},
        10, methods_QDBusConnectionInterface,
        8, enummembers_QDBusConnectionInterface,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QDBusConnectionInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QDBusConnectionInterface,
    cast_QDBusConnectionInterface,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QDBusConnectionInterface::staticMetaObject,
    0,
    signals_QDBusConnectionInterface,
};
