/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDBus.h"

#line 51 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusReply0100QString.cpp"

#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusReply0100QString.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusReply0100QString.cpp"


extern "C" {static void assign_QDBusReply_0100QString(void *, SIP_SSIZE_T, const void *);}
static void assign_QDBusReply_0100QString(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDBusReply<QString> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDBusReply<QString> *>(sipSrc);
}


extern "C" {static void *array_QDBusReply_0100QString(SIP_SSIZE_T);}
static void *array_QDBusReply_0100QString(SIP_SSIZE_T sipNrElem)
{
    return new QDBusReply<QString>[sipNrElem];
}


extern "C" {static void *copy_QDBusReply_0100QString(const void *, SIP_SSIZE_T);}
static void *copy_QDBusReply_0100QString(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDBusReply<QString>(reinterpret_cast<const QDBusReply<QString> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QDBusReply_0100QString(void *, int);}
static void release_QDBusReply_0100QString(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QDBusReply<QString> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QDBusReply_0100QString(PyObject *, void **, int *, PyObject *);}
static int convertTo_QDBusReply_0100QString(PyObject *,void **,int *,PyObject *)
{
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qpydbusreply.sip"
    // We never create a QDBusReply from Python.
    return 0;
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusReply0100QString.cpp"
}


extern "C" {static PyObject *convertFrom_QDBusReply_0100QString(void *, PyObject *);}
static PyObject *convertFrom_QDBusReply_0100QString(void *sipCppV, PyObject *sipTransferObj)
{
   QDBusReply<QString> *sipCpp = reinterpret_cast<QDBusReply<QString> *>(sipCppV);

#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDBus/qpydbusreply.sip"
    PyObject *value_obj;

    if (sipCpp->isValid())
    {
        // Convert the value to a Python object.
        QString *value = new QString(sipCpp->value());

        if ((value_obj = sipConvertFromNewType(value, sipType_QString, NULL)) == NULL)
        {
            delete value;
            return NULL;
        }
    }
    else
    {
        value_obj = 0;
    }

    QPyDBusReply *reply = new QPyDBusReply(value_obj,
            sipCpp->isValid(), sipCpp->error());

    PyObject *reply_obj = sipConvertFromNewType(reply, sipType_QPyDBusReply, sipTransferObj);

    if (reply_obj == NULL)
    {
        delete reply;
        return NULL;
    }

    return reply_obj;
#line 123 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDBus/sipQtDBusQDBusReply0100QString.cpp"
}


sipMappedTypeDef sipTypeDef_QtDBus_QDBusReply_0100QString = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_1225,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QDBusReply_0100QString,
    array_QDBusReply_0100QString,
    copy_QDBusReply_0100QString,
    release_QDBusReply_0100QString,
    convertTo_QDBusReply_0100QString,
    convertFrom_QDBusReply_0100QString
};
