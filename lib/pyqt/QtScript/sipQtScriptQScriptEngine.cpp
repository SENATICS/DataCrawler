/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:27 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtScript.h"

#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 45 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptvalue.sip"
#include <qscriptvalue.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 281 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptstring.sip"
#include <qscriptstring.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptengineagent.sip"
#include <qscriptengineagent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 406 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptclass.sip"
#include <qscriptclass.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptcontext.sip"
#include <qscriptcontext.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
#line 43 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptengine.sip"
#if QT_VERSION >= 0x040400

// Save a Python callable in a QScriptValue so that it can be retrieved later
// by the handler.
static void qtscript_func_wrapper(QScriptEngine *eng, QScriptValue *qsv, PyObject *py)
{
    QString addr = QString::number((qulonglong)py);
    qsv->setData(QScriptValue(eng, addr));

    // Make sure that the callable isn't garbage collected.  This shouldn't be
    // a problem as we wouldn't normally be called in a loop.
    Py_INCREF(py);
}


// Invoke the saved Python callable on behalf of C++.
static QScriptValue qtscript_func_handler(QScriptContext *context, QScriptEngine *eng)
{
    QScriptValue qsv;

    QString addr = context->callee().data().toString();
    PyObject *py = (PyObject *)addr.toULongLong();

    SIP_BLOCK_THREADS

    PyObject *res_obj = sipCallMethod(0, py, "DD", context, sipType_QScriptContext, NULL, eng, sipType_QScriptEngine, NULL);

    if (!res_obj)
        PyErr_Print();
    else
    {
        QScriptValue *res;

        if (sipParseResult(0, py, res_obj, "D5", sipType_QScriptValue, &res) < 0)
            PyErr_Print();
        else
            qsv = *res;
    }

    Py_XDECREF(res_obj);

    SIP_UNBLOCK_THREADS

    return qsv;
}

#endif
#line 150 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"


class sipQScriptEngine : public QScriptEngine
{
public:
    sipQScriptEngine();
    sipQScriptEngine(QObject*);
    virtual ~sipQScriptEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQScriptEngine(const sipQScriptEngine &);
    sipQScriptEngine &operator = (const sipQScriptEngine &);

    char sipPyMethods[7];
};

sipQScriptEngine::sipQScriptEngine(): QScriptEngine(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQScriptEngine::sipQScriptEngine(QObject*a0): QScriptEngine(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQScriptEngine::~sipQScriptEngine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQScriptEngine::metaObject() const
{
    return sip_QtScript_qt_metaobject(sipPySelf,sipType_QScriptEngine);
}

int sipQScriptEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QScriptEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtScript_qt_metacall(sipPySelf,sipType_QScriptEngine,_c,_id,_a);

    return _id;
}

void *sipQScriptEngine::qt_metacast(const char *_clname)
{
    return (sip_QtScript_qt_metacast(sipPySelf, sipType_QScriptEngine, _clname)) ? this : QScriptEngine::qt_metacast(_clname);
}

void sipQScriptEngine::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QScriptEngine::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtScript_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQScriptEngine::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QScriptEngine::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtScript_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQScriptEngine::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QScriptEngine::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtScript_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQScriptEngine::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QScriptEngine::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtScript_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQScriptEngine::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QScriptEngine::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtScript_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQScriptEngine::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QScriptEngine::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtScript_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQScriptEngine::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QScriptEngine::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtScript_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QScriptEngine_globalObject, "QScriptEngine.globalObject() -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_globalObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_globalObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->globalObject());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_globalObject, doc_QScriptEngine_globalObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_currentContext, "QScriptEngine.currentContext() -> QScriptContext");

extern "C" {static PyObject *meth_QScriptEngine_currentContext(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_currentContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptContext*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentContext();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_currentContext, doc_QScriptEngine_currentContext);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_pushContext, "QScriptEngine.pushContext() -> QScriptContext");

extern "C" {static PyObject *meth_QScriptEngine_pushContext(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_pushContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptContext*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pushContext();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_pushContext, doc_QScriptEngine_pushContext);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_popContext, "QScriptEngine.popContext()");

extern "C" {static PyObject *meth_QScriptEngine_popContext(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_popContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->popContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_popContext, doc_QScriptEngine_popContext);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_canEvaluate, "QScriptEngine.canEvaluate(QString) -> bool");

extern "C" {static PyObject *meth_QScriptEngine_canEvaluate(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_canEvaluate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canEvaluate(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_canEvaluate, doc_QScriptEngine_canEvaluate);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_evaluate, "QScriptEngine.evaluate(QString, QString fileName=QString(), int lineNumber=1) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_evaluate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_evaluate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        int a2 = 1;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fileName,
            sipName_lineNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1i", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->evaluate(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_evaluate, doc_QScriptEngine_evaluate);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_hasUncaughtException, "QScriptEngine.hasUncaughtException() -> bool");

extern "C" {static PyObject *meth_QScriptEngine_hasUncaughtException(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_hasUncaughtException(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasUncaughtException();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_hasUncaughtException, doc_QScriptEngine_hasUncaughtException);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_uncaughtExceptionBacktrace, "QScriptEngine.uncaughtExceptionBacktrace() -> QStringList");

extern "C" {static PyObject *meth_QScriptEngine_uncaughtExceptionBacktrace(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_uncaughtExceptionBacktrace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->uncaughtExceptionBacktrace());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_uncaughtExceptionBacktrace, doc_QScriptEngine_uncaughtExceptionBacktrace);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_uncaughtException, "QScriptEngine.uncaughtException() -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_uncaughtException(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_uncaughtException(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->uncaughtException());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_uncaughtException, doc_QScriptEngine_uncaughtException);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_uncaughtExceptionLineNumber, "QScriptEngine.uncaughtExceptionLineNumber() -> int");

extern "C" {static PyObject *meth_QScriptEngine_uncaughtExceptionLineNumber(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_uncaughtExceptionLineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->uncaughtExceptionLineNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_uncaughtExceptionLineNumber, doc_QScriptEngine_uncaughtExceptionLineNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_nullValue, "QScriptEngine.nullValue() -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_nullValue(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_nullValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->nullValue());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_nullValue, doc_QScriptEngine_nullValue);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_undefinedValue, "QScriptEngine.undefinedValue() -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_undefinedValue(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_undefinedValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->undefinedValue());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_undefinedValue, doc_QScriptEngine_undefinedValue);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_newFunction, "QScriptEngine.newFunction(callable, int length=0) -> QScriptValue\n"
    "QScriptEngine.newFunction(callable, QScriptValue, int length=0) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_newFunction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newFunction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        int a1 = 0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BF|i", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0, &a1))
        {
            QScriptValue*sipRes = 0;

#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptengine.sip"
        // This is implemented for Qt v4.4 and later because we rely on the
        // QScriptValue::setData() support.
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newFunction(qtscript_func_handler, a1));
        Py_END_ALLOW_THREADS
        
        qtscript_func_wrapper(sipCpp, sipRes, a0);
#line 738 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        PyObject * a0;
        const QScriptValue* a1;
        int a2 = 0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BFJ9|i", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0, sipType_QScriptValue, &a1, &a2))
        {
            QScriptValue*sipRes = 0;

#line 160 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptengine.sip"
        // This is implemented for Qt v4.4 and later because we rely on the
        // QScriptValue::setData() support.
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newFunction(qtscript_func_handler, *a1, a2));
        Py_END_ALLOW_THREADS
        
        qtscript_func_wrapper(sipCpp, sipRes, a0);
#line 769 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newFunction, doc_QScriptEngine_newFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_newVariant, "QScriptEngine.newVariant(QVariant) -> QScriptValue\n"
    "QScriptEngine.newVariant(QScriptValue, QVariant) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_newVariant(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QVariant,&a0, &a0State))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newVariant(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QScriptValue* a0;
        const QVariant* a1;
        int a1State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0, sipType_QVariant,&a1, &a1State))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newVariant(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newVariant, doc_QScriptEngine_newVariant);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_newRegExp, "QScriptEngine.newRegExp(QRegExp) -> QScriptValue\n"
    "QScriptEngine.newRegExp(QString, QString) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_newRegExp(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegExp* a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QRegExp, &a0))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newRegExp(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newRegExp(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newRegExp, doc_QScriptEngine_newRegExp);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_newObject, "QScriptEngine.newObject() -> QScriptValue\n"
    "QScriptEngine.newObject(QScriptClass, QScriptValue data=QScriptValue()) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_newObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newObject());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        QScriptClass* a0;
        const QScriptValue& a1def = QScriptValue();
        const QScriptValue* a1 = &a1def;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptClass, &a0, sipType_QScriptValue, &a1))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newObject(a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newObject, doc_QScriptEngine_newObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_newArray, "QScriptEngine.newArray(int length=0) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_newArray(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newArray(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0 = 0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|u", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newArray(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newArray, doc_QScriptEngine_newArray);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_newDate, "QScriptEngine.newDate(float) -> QScriptValue\n"
    "QScriptEngine.newDate(QDateTime) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_newDate(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qsreal a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newDate(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QDateTime* a0;
        int a0State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newDate(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newDate, doc_QScriptEngine_newDate);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_newQObject, "QScriptEngine.newQObject(QObject, QScriptEngine.ValueOwnership ownership=QScriptEngine.QtOwnership, QScriptEngine.QObjectWrapOptions options=0) -> QScriptValue\n"
    "QScriptEngine.newQObject(QScriptValue, QObject, QScriptEngine.ValueOwnership ownership=QScriptEngine.QtOwnership, QScriptEngine.QObjectWrapOptions options=0) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_newQObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newQObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        PyObject *a0Wrapper;
        QScriptEngine::ValueOwnership a1 = QScriptEngine::QtOwnership;
        const QScriptEngine::QObjectWrapOptions& a2def = 0;
        const QScriptEngine::QObjectWrapOptions* a2 = &a2def;
        int a2State = 0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ownership,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B@J8|EJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0Wrapper, sipType_QObject, &a0, sipType_QScriptEngine_ValueOwnership, &a1, sipType_QScriptEngine_QObjectWrapOptions, &a2, &a2State))
        {
            QScriptValue*sipRes = 0;

#line 186 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptengine.sip"
        // We have to handle the object ownership manually.
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newQObject(a0, a1, *a2));
        Py_END_ALLOW_THREADS
        
        if (a1 == QScriptEngine::ScriptOwnership || (a1 == QScriptEngine::AutoOwnership && !a0->parent()))
            sipTransferTo(a0Wrapper, sipSelf);
#line 1057 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
            sipReleaseType(const_cast<QScriptEngine::QObjectWrapOptions *>(a2),sipType_QScriptEngine_QObjectWrapOptions,a2State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QScriptValue* a0;
        QObject* a1;
        PyObject *a1Wrapper;
        QScriptEngine::ValueOwnership a2 = QScriptEngine::QtOwnership;
        const QScriptEngine::QObjectWrapOptions& a3def = 0;
        const QScriptEngine::QObjectWrapOptions* a3 = &a3def;
        int a3State = 0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_ownership,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9@J8|EJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0, &a1Wrapper, sipType_QObject, &a1, sipType_QScriptEngine_ValueOwnership, &a2, sipType_QScriptEngine_QObjectWrapOptions, &a3, &a3State))
        {
            QScriptValue*sipRes = 0;

#line 198 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptengine.sip"
        // We have to handle the object ownership manually.
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newQObject(*a0, a1, a2, *a3));
        Py_END_ALLOW_THREADS
        
        if (a2 == QScriptEngine::ScriptOwnership || (a2 == QScriptEngine::AutoOwnership && !a1->parent()))
            sipTransferTo(a1Wrapper, sipSelf);
#line 1093 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptEngine.cpp"
            sipReleaseType(const_cast<QScriptEngine::QObjectWrapOptions *>(a3),sipType_QScriptEngine_QObjectWrapOptions,a3State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newQObject, doc_QScriptEngine_newQObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_newQMetaObject, "QScriptEngine.newQMetaObject(QMetaObject, QScriptValue ctor=QScriptValue()) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_newQMetaObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newQMetaObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject* a0;
        const QScriptValue& a1def = QScriptValue();
        const QScriptValue* a1 = &a1def;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ctor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QMetaObject, &a0, sipType_QScriptValue, &a1))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newQMetaObject(a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newQMetaObject, doc_QScriptEngine_newQMetaObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_defaultPrototype, "QScriptEngine.defaultPrototype(int) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_defaultPrototype(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_defaultPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->defaultPrototype(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_defaultPrototype, doc_QScriptEngine_defaultPrototype);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_setDefaultPrototype, "QScriptEngine.setDefaultPrototype(int, QScriptValue)");

extern "C" {static PyObject *meth_QScriptEngine_setDefaultPrototype(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_setDefaultPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QScriptValue* a1;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0, sipType_QScriptValue, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultPrototype(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_setDefaultPrototype, doc_QScriptEngine_setDefaultPrototype);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_importExtension, "QScriptEngine.importExtension(QString) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_importExtension(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_importExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->importExtension(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_importExtension, doc_QScriptEngine_importExtension);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_collectGarbage, "QScriptEngine.collectGarbage()");

extern "C" {static PyObject *meth_QScriptEngine_collectGarbage(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_collectGarbage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->collectGarbage();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_collectGarbage, doc_QScriptEngine_collectGarbage);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_setProcessEventsInterval, "QScriptEngine.setProcessEventsInterval(int)");

extern "C" {static PyObject *meth_QScriptEngine_setProcessEventsInterval(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_setProcessEventsInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProcessEventsInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_setProcessEventsInterval, doc_QScriptEngine_setProcessEventsInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_processEventsInterval, "QScriptEngine.processEventsInterval() -> int");

extern "C" {static PyObject *meth_QScriptEngine_processEventsInterval(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_processEventsInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processEventsInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_processEventsInterval, doc_QScriptEngine_processEventsInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_isEvaluating, "QScriptEngine.isEvaluating() -> bool");

extern "C" {static PyObject *meth_QScriptEngine_isEvaluating(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_isEvaluating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEvaluating();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_isEvaluating, doc_QScriptEngine_isEvaluating);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_abortEvaluation, "QScriptEngine.abortEvaluation(QScriptValue result=QScriptValue())");

extern "C" {static PyObject *meth_QScriptEngine_abortEvaluation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_abortEvaluation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue& a0def = QScriptValue();
        const QScriptValue* a0 = &a0def;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_result,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->abortEvaluation(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_abortEvaluation, doc_QScriptEngine_abortEvaluation);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_clearExceptions, "QScriptEngine.clearExceptions()");

extern "C" {static PyObject *meth_QScriptEngine_clearExceptions(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_clearExceptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearExceptions();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_clearExceptions, doc_QScriptEngine_clearExceptions);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_availableExtensions, "QScriptEngine.availableExtensions() -> QStringList");

extern "C" {static PyObject *meth_QScriptEngine_availableExtensions(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_availableExtensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->availableExtensions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_availableExtensions, doc_QScriptEngine_availableExtensions);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_importedExtensions, "QScriptEngine.importedExtensions() -> QStringList");

extern "C" {static PyObject *meth_QScriptEngine_importedExtensions(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_importedExtensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->importedExtensions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_importedExtensions, doc_QScriptEngine_importedExtensions);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_setAgent, "QScriptEngine.setAgent(QScriptEngineAgent)");

extern "C" {static PyObject *meth_QScriptEngine_setAgent(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_setAgent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngineAgent* a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptEngineAgent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAgent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_setAgent, doc_QScriptEngine_setAgent);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_agent, "QScriptEngine.agent() -> QScriptEngineAgent");

extern "C" {static PyObject *meth_QScriptEngine_agent(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_agent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptEngineAgent*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->agent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptEngineAgent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_agent, doc_QScriptEngine_agent);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_toStringHandle, "QScriptEngine.toStringHandle(QString) -> QScriptString");

extern "C" {static PyObject *meth_QScriptEngine_toStringHandle(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_toStringHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QScriptString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptString(sipCpp->toStringHandle(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_toStringHandle, doc_QScriptEngine_toStringHandle);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_setGlobalObject, "QScriptEngine.setGlobalObject(QScriptValue)");

extern "C" {static PyObject *meth_QScriptEngine_setGlobalObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_setGlobalObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue* a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGlobalObject(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_setGlobalObject, doc_QScriptEngine_setGlobalObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_checkSyntax, "QScriptEngine.checkSyntax(QString) -> QScriptSyntaxCheckResult");

extern "C" {static PyObject *meth_QScriptEngine_checkSyntax(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_checkSyntax(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QScriptSyntaxCheckResult*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptSyntaxCheckResult(QScriptEngine::checkSyntax(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptSyntaxCheckResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_checkSyntax, doc_QScriptEngine_checkSyntax);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_installTranslatorFunctions, "QScriptEngine.installTranslatorFunctions(QScriptValue object=QScriptValue())");

extern "C" {static PyObject *meth_QScriptEngine_installTranslatorFunctions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_installTranslatorFunctions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue& a0def = QScriptValue();
        const QScriptValue* a0 = &a0def;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->installTranslatorFunctions(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_installTranslatorFunctions, doc_QScriptEngine_installTranslatorFunctions);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_toObject, "QScriptEngine.toObject(QScriptValue) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptEngine_toObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_toObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue* a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->toObject(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_toObject, doc_QScriptEngine_toObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngine_reportAdditionalMemoryCost, "QScriptEngine.reportAdditionalMemoryCost(int)");

extern "C" {static PyObject *meth_QScriptEngine_reportAdditionalMemoryCost(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_reportAdditionalMemoryCost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reportAdditionalMemoryCost(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_reportAdditionalMemoryCost, doc_QScriptEngine_reportAdditionalMemoryCost);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QScriptEngine(void *, const sipTypeDef *);}
static void *cast_QScriptEngine(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QScriptEngine)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QScriptEngine *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScriptEngine(void *, int);}
static void release_QScriptEngine(void *sipCppV,int)
{
    QScriptEngine *sipCpp = reinterpret_cast<QScriptEngine *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QScriptEngine(sipSimpleWrapper *);}
static void dealloc_QScriptEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQScriptEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QScriptEngine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QScriptEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QScriptEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQScriptEngine *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQScriptEngine();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQScriptEngine(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QScriptEngine[] = {{141, 0, 1}};


static PyMethodDef methods_QScriptEngine[] = {
    {SIP_MLNAME_CAST(sipName_abortEvaluation), (PyCFunction)meth_QScriptEngine_abortEvaluation, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngine_abortEvaluation)},
    {SIP_MLNAME_CAST(sipName_agent), meth_QScriptEngine_agent, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_agent)},
    {SIP_MLNAME_CAST(sipName_availableExtensions), meth_QScriptEngine_availableExtensions, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_availableExtensions)},
    {SIP_MLNAME_CAST(sipName_canEvaluate), meth_QScriptEngine_canEvaluate, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_canEvaluate)},
    {SIP_MLNAME_CAST(sipName_checkSyntax), meth_QScriptEngine_checkSyntax, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_checkSyntax)},
    {SIP_MLNAME_CAST(sipName_clearExceptions), meth_QScriptEngine_clearExceptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_clearExceptions)},
    {SIP_MLNAME_CAST(sipName_collectGarbage), meth_QScriptEngine_collectGarbage, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_collectGarbage)},
    {SIP_MLNAME_CAST(sipName_currentContext), meth_QScriptEngine_currentContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_currentContext)},
    {SIP_MLNAME_CAST(sipName_defaultPrototype), meth_QScriptEngine_defaultPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_defaultPrototype)},
    {SIP_MLNAME_CAST(sipName_evaluate), (PyCFunction)meth_QScriptEngine_evaluate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngine_evaluate)},
    {SIP_MLNAME_CAST(sipName_globalObject), meth_QScriptEngine_globalObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_globalObject)},
    {SIP_MLNAME_CAST(sipName_hasUncaughtException), meth_QScriptEngine_hasUncaughtException, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_hasUncaughtException)},
    {SIP_MLNAME_CAST(sipName_importExtension), meth_QScriptEngine_importExtension, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_importExtension)},
    {SIP_MLNAME_CAST(sipName_importedExtensions), meth_QScriptEngine_importedExtensions, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_importedExtensions)},
    {SIP_MLNAME_CAST(sipName_installTranslatorFunctions), (PyCFunction)meth_QScriptEngine_installTranslatorFunctions, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngine_installTranslatorFunctions)},
    {SIP_MLNAME_CAST(sipName_isEvaluating), meth_QScriptEngine_isEvaluating, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_isEvaluating)},
    {SIP_MLNAME_CAST(sipName_newArray), (PyCFunction)meth_QScriptEngine_newArray, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngine_newArray)},
    {SIP_MLNAME_CAST(sipName_newDate), meth_QScriptEngine_newDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_newDate)},
    {SIP_MLNAME_CAST(sipName_newFunction), (PyCFunction)meth_QScriptEngine_newFunction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngine_newFunction)},
    {SIP_MLNAME_CAST(sipName_newObject), (PyCFunction)meth_QScriptEngine_newObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngine_newObject)},
    {SIP_MLNAME_CAST(sipName_newQMetaObject), (PyCFunction)meth_QScriptEngine_newQMetaObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngine_newQMetaObject)},
    {SIP_MLNAME_CAST(sipName_newQObject), (PyCFunction)meth_QScriptEngine_newQObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngine_newQObject)},
    {SIP_MLNAME_CAST(sipName_newRegExp), meth_QScriptEngine_newRegExp, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_newRegExp)},
    {SIP_MLNAME_CAST(sipName_newVariant), meth_QScriptEngine_newVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_newVariant)},
    {SIP_MLNAME_CAST(sipName_nullValue), meth_QScriptEngine_nullValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_nullValue)},
    {SIP_MLNAME_CAST(sipName_popContext), meth_QScriptEngine_popContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_popContext)},
    {SIP_MLNAME_CAST(sipName_processEventsInterval), meth_QScriptEngine_processEventsInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_processEventsInterval)},
    {SIP_MLNAME_CAST(sipName_pushContext), meth_QScriptEngine_pushContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_pushContext)},
    {SIP_MLNAME_CAST(sipName_reportAdditionalMemoryCost), meth_QScriptEngine_reportAdditionalMemoryCost, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_reportAdditionalMemoryCost)},
    {SIP_MLNAME_CAST(sipName_setAgent), meth_QScriptEngine_setAgent, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_setAgent)},
    {SIP_MLNAME_CAST(sipName_setDefaultPrototype), meth_QScriptEngine_setDefaultPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_setDefaultPrototype)},
    {SIP_MLNAME_CAST(sipName_setGlobalObject), meth_QScriptEngine_setGlobalObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_setGlobalObject)},
    {SIP_MLNAME_CAST(sipName_setProcessEventsInterval), meth_QScriptEngine_setProcessEventsInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_setProcessEventsInterval)},
    {SIP_MLNAME_CAST(sipName_toObject), meth_QScriptEngine_toObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_toObject)},
    {SIP_MLNAME_CAST(sipName_toStringHandle), meth_QScriptEngine_toStringHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_toStringHandle)},
    {SIP_MLNAME_CAST(sipName_uncaughtException), meth_QScriptEngine_uncaughtException, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_uncaughtException)},
    {SIP_MLNAME_CAST(sipName_uncaughtExceptionBacktrace), meth_QScriptEngine_uncaughtExceptionBacktrace, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_uncaughtExceptionBacktrace)},
    {SIP_MLNAME_CAST(sipName_uncaughtExceptionLineNumber), meth_QScriptEngine_uncaughtExceptionLineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_uncaughtExceptionLineNumber)},
    {SIP_MLNAME_CAST(sipName_undefinedValue), meth_QScriptEngine_undefinedValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngine_undefinedValue)}
};

static sipEnumMemberDef enummembers_QScriptEngine[] = {
    {sipName_AutoCreateDynamicProperties, static_cast<int>(QScriptEngine::AutoCreateDynamicProperties), 13},
    {sipName_AutoOwnership, static_cast<int>(QScriptEngine::AutoOwnership), 15},
    {sipName_ExcludeChildObjects, static_cast<int>(QScriptEngine::ExcludeChildObjects), 13},
    {sipName_ExcludeDeleteLater, static_cast<int>(QScriptEngine::ExcludeDeleteLater), 13},
    {sipName_ExcludeSlots, static_cast<int>(QScriptEngine::ExcludeSlots), 13},
    {sipName_ExcludeSuperClassContents, static_cast<int>(QScriptEngine::ExcludeSuperClassContents), 13},
    {sipName_ExcludeSuperClassMethods, static_cast<int>(QScriptEngine::ExcludeSuperClassMethods), 13},
    {sipName_ExcludeSuperClassProperties, static_cast<int>(QScriptEngine::ExcludeSuperClassProperties), 13},
    {sipName_PreferExistingWrapperObject, static_cast<int>(QScriptEngine::PreferExistingWrapperObject), 13},
    {sipName_QtOwnership, static_cast<int>(QScriptEngine::QtOwnership), 15},
    {sipName_ScriptOwnership, static_cast<int>(QScriptEngine::ScriptOwnership), 15},
    {sipName_SkipMethodsInEnumeration, static_cast<int>(QScriptEngine::SkipMethodsInEnumeration), 13},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QScriptEngine[] = {
    {"signalHandlerException(QScriptValue)", "\1QScriptEngine.signalHandlerException[QScriptValue]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QScriptEngine, "\1QScriptEngine()\n"
    "QScriptEngine(QObject)");


pyqt4ClassTypeDef sipTypeDef_QtScript_QScriptEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QScriptEngine,
        {0}
    },
    {
        sipNameNr_QScriptEngine,
        {0, 0, 1},
        39, methods_QScriptEngine,
        12, enummembers_QScriptEngine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QScriptEngine,
    -1,
    -1,
    supers_QScriptEngine,
    0,
    init_type_QScriptEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QScriptEngine,
    0,
    0,
    0,
    release_QScriptEngine,
    cast_QScriptEngine,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QScriptEngine::staticMetaObject,
    0,
    signals_QScriptEngine,
};
