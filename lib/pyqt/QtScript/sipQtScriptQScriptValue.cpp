/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:27 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtScript.h"

#line 45 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptvalue.sip"
#include <qscriptvalue.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"

#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptclass.sip"
#include <qscriptclass.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 45 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptvalue.sip"
#include <qscriptvalue.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 45 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptvalue.sip"
#include <qscriptvalue.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtScript/qscriptstring.sip"
#include <qscriptstring.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 406 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtScript/sipQtScriptQScriptValue.cpp"


PyDoc_STRVAR(doc_QScriptValue_engine, "QScriptValue.engine() -> QScriptEngine");

extern "C" {static PyObject *meth_QScriptValue_engine(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            QScriptEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->engine();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_engine, doc_QScriptValue_engine);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isValid, "QScriptValue.isValid() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isValid(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isValid, doc_QScriptValue_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isBool, "QScriptValue.isBool() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isBool(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isBool();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isBool, doc_QScriptValue_isBool);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isBoolean, "QScriptValue.isBoolean() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isBoolean(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isBoolean(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isBoolean();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isBoolean, doc_QScriptValue_isBoolean);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isNumber, "QScriptValue.isNumber() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isNumber(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNumber();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isNumber, doc_QScriptValue_isNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isFunction, "QScriptValue.isFunction() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isFunction(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFunction();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isFunction, doc_QScriptValue_isFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isNull, "QScriptValue.isNull() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isNull(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isNull, doc_QScriptValue_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isString, "QScriptValue.isString() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isString(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isString();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isString, doc_QScriptValue_isString);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isUndefined, "QScriptValue.isUndefined() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isUndefined(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isUndefined(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isUndefined();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isUndefined, doc_QScriptValue_isUndefined);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isVariant, "QScriptValue.isVariant() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isVariant(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isVariant();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isVariant, doc_QScriptValue_isVariant);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isQObject, "QScriptValue.isQObject() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isQObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isQObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isQObject();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isQObject, doc_QScriptValue_isQObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isQMetaObject, "QScriptValue.isQMetaObject() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isQMetaObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isQMetaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isQMetaObject();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isQMetaObject, doc_QScriptValue_isQMetaObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isObject, "QScriptValue.isObject() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isObject();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isObject, doc_QScriptValue_isObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isDate, "QScriptValue.isDate() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isDate(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDate();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isDate, doc_QScriptValue_isDate);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isRegExp, "QScriptValue.isRegExp() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isRegExp(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRegExp();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isRegExp, doc_QScriptValue_isRegExp);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isArray, "QScriptValue.isArray() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isArray(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isArray();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isArray, doc_QScriptValue_isArray);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_isError, "QScriptValue.isError() -> bool");

extern "C" {static PyObject *meth_QScriptValue_isError(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_isError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_isError, doc_QScriptValue_isError);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toString, "QScriptValue.toString() -> QString");

extern "C" {static PyObject *meth_QScriptValue_toString(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toString, doc_QScriptValue_toString);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toNumber, "QScriptValue.toNumber() -> float");

extern "C" {static PyObject *meth_QScriptValue_toNumber(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            qsreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toNumber();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toNumber, doc_QScriptValue_toNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toBool, "QScriptValue.toBool() -> bool");

extern "C" {static PyObject *meth_QScriptValue_toBool(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toBool();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toBool, doc_QScriptValue_toBool);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toBoolean, "QScriptValue.toBoolean() -> bool");

extern "C" {static PyObject *meth_QScriptValue_toBoolean(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toBoolean(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toBoolean();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toBoolean, doc_QScriptValue_toBoolean);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toInteger, "QScriptValue.toInteger() -> float");

extern "C" {static PyObject *meth_QScriptValue_toInteger(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toInteger(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            qsreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInteger();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toInteger, doc_QScriptValue_toInteger);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toInt32, "QScriptValue.toInt32() -> int");

extern "C" {static PyObject *meth_QScriptValue_toInt32(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            qint32 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInt32();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toInt32, doc_QScriptValue_toInt32);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toUInt32, "QScriptValue.toUInt32() -> int");

extern "C" {static PyObject *meth_QScriptValue_toUInt32(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            quint32 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUInt32();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toUInt32, doc_QScriptValue_toUInt32);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toUInt16, "QScriptValue.toUInt16() -> int");

extern "C" {static PyObject *meth_QScriptValue_toUInt16(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toUInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            quint16 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUInt16();
            Py_END_ALLOW_THREADS

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toUInt16, doc_QScriptValue_toUInt16);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toVariant, "QScriptValue.toVariant() -> QVariant");

extern "C" {static PyObject *meth_QScriptValue_toVariant(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->toVariant());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toVariant, doc_QScriptValue_toVariant);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toQObject, "QScriptValue.toQObject() -> QObject");

extern "C" {static PyObject *meth_QScriptValue_toQObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toQObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toQObject();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toQObject, doc_QScriptValue_toQObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toQMetaObject, "QScriptValue.toQMetaObject() -> QMetaObject");

extern "C" {static PyObject *meth_QScriptValue_toQMetaObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toQMetaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            const QMetaObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toQMetaObject();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QMetaObject *>(sipRes),sipType_QMetaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toQMetaObject, doc_QScriptValue_toQMetaObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toObject, "QScriptValue.toObject() -> QScriptValue");

extern "C" {static PyObject *meth_QScriptValue_toObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->toObject());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toObject, doc_QScriptValue_toObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toDateTime, "QScriptValue.toDateTime() -> QDateTime");

extern "C" {static PyObject *meth_QScriptValue_toDateTime(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->toDateTime());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toDateTime, doc_QScriptValue_toDateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_toRegExp, "QScriptValue.toRegExp() -> QRegExp");

extern "C" {static PyObject *meth_QScriptValue_toRegExp(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_toRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            QRegExp*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegExp(sipCpp->toRegExp());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegExp,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_toRegExp, doc_QScriptValue_toRegExp);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_instanceOf, "QScriptValue.instanceOf(QScriptValue) -> bool");

extern "C" {static PyObject *meth_QScriptValue_instanceOf(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_instanceOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue* a0;
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptValue, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->instanceOf(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_instanceOf, doc_QScriptValue_instanceOf);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_lessThan, "QScriptValue.lessThan(QScriptValue) -> bool");

extern "C" {static PyObject *meth_QScriptValue_lessThan(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_lessThan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue* a0;
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptValue, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lessThan(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_lessThan, doc_QScriptValue_lessThan);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_equals, "QScriptValue.equals(QScriptValue) -> bool");

extern "C" {static PyObject *meth_QScriptValue_equals(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_equals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue* a0;
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptValue, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->equals(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_equals, doc_QScriptValue_equals);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_strictlyEquals, "QScriptValue.strictlyEquals(QScriptValue) -> bool");

extern "C" {static PyObject *meth_QScriptValue_strictlyEquals(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_strictlyEquals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue* a0;
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptValue, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->strictlyEquals(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_strictlyEquals, doc_QScriptValue_strictlyEquals);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_prototype, "QScriptValue.prototype() -> QScriptValue");

extern "C" {static PyObject *meth_QScriptValue_prototype(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_prototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->prototype());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_prototype, doc_QScriptValue_prototype);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_setPrototype, "QScriptValue.setPrototype(QScriptValue)");

extern "C" {static PyObject *meth_QScriptValue_setPrototype(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_setPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue* a0;
        QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrototype(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_setPrototype, doc_QScriptValue_setPrototype);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_property, "QScriptValue.property(QString, QScriptValue.ResolveFlags mode=QScriptValue.ResolvePrototype) -> QScriptValue\n"
    "QScriptValue.property(QScriptString, QScriptValue.ResolveFlags mode=QScriptValue.ResolvePrototype) -> QScriptValue\n"
    "QScriptValue.property(int, QScriptValue.ResolveFlags mode=QScriptValue.ResolvePrototype) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptValue_property(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_property(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QScriptValue::ResolveFlags& a1def = QScriptValue::ResolvePrototype;
        const QScriptValue::ResolveFlags* a1 = &a1def;
        int a1State = 0;
        const QScriptValue *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QString,&a0, &a0State, sipType_QScriptValue_ResolveFlags, &a1, &a1State))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->property(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QScriptValue::ResolveFlags *>(a1),sipType_QScriptValue_ResolveFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QScriptString* a0;
        const QScriptValue::ResolveFlags& a1def = QScriptValue::ResolvePrototype;
        const QScriptValue::ResolveFlags* a1 = &a1def;
        int a1State = 0;
        const QScriptValue *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptString, &a0, sipType_QScriptValue_ResolveFlags, &a1, &a1State))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->property(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QScriptValue::ResolveFlags *>(a1),sipType_QScriptValue_ResolveFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        quint32 a0;
        const QScriptValue::ResolveFlags& a1def = QScriptValue::ResolvePrototype;
        const QScriptValue::ResolveFlags* a1 = &a1def;
        int a1State = 0;
        const QScriptValue *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu|J1", &sipSelf, sipType_QScriptValue, &sipCpp, &a0, sipType_QScriptValue_ResolveFlags, &a1, &a1State))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->property(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QScriptValue::ResolveFlags *>(a1),sipType_QScriptValue_ResolveFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_property, doc_QScriptValue_property);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_setProperty, "QScriptValue.setProperty(QString, QScriptValue, QScriptValue.PropertyFlags flags=QScriptValue.KeepExistingFlags)\n"
    "QScriptValue.setProperty(QScriptString, QScriptValue, QScriptValue.PropertyFlags flags=QScriptValue.KeepExistingFlags)\n"
    "QScriptValue.setProperty(int, QScriptValue, QScriptValue.PropertyFlags flags=QScriptValue.KeepExistingFlags)");

extern "C" {static PyObject *meth_QScriptValue_setProperty(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_setProperty(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QScriptValue* a1;
        const QScriptValue::PropertyFlags& a2def = QScriptValue::KeepExistingFlags;
        const QScriptValue::PropertyFlags* a2 = &a2def;
        int a2State = 0;
        QScriptValue *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J9|J1", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QString,&a0, &a0State, sipType_QScriptValue, &a1, sipType_QScriptValue_PropertyFlags, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProperty(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QScriptValue::PropertyFlags *>(a2),sipType_QScriptValue_PropertyFlags,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QScriptString* a0;
        const QScriptValue* a1;
        const QScriptValue::PropertyFlags& a2def = QScriptValue::KeepExistingFlags;
        const QScriptValue::PropertyFlags* a2 = &a2def;
        int a2State = 0;
        QScriptValue *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J1", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptString, &a0, sipType_QScriptValue, &a1, sipType_QScriptValue_PropertyFlags, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProperty(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QScriptValue::PropertyFlags *>(a2),sipType_QScriptValue_PropertyFlags,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        quint32 a0;
        const QScriptValue* a1;
        const QScriptValue::PropertyFlags& a2def = QScriptValue::KeepExistingFlags;
        const QScriptValue::PropertyFlags* a2 = &a2def;
        int a2State = 0;
        QScriptValue *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BuJ9|J1", &sipSelf, sipType_QScriptValue, &sipCpp, &a0, sipType_QScriptValue, &a1, sipType_QScriptValue_PropertyFlags, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProperty(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QScriptValue::PropertyFlags *>(a2),sipType_QScriptValue_PropertyFlags,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_setProperty, doc_QScriptValue_setProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_propertyFlags, "QScriptValue.propertyFlags(QString, QScriptValue.ResolveFlags mode=QScriptValue.ResolvePrototype) -> QScriptValue.PropertyFlags\n"
    "QScriptValue.propertyFlags(QScriptString, QScriptValue.ResolveFlags mode=QScriptValue.ResolvePrototype) -> QScriptValue.PropertyFlags");

extern "C" {static PyObject *meth_QScriptValue_propertyFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_propertyFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QScriptValue::ResolveFlags& a1def = QScriptValue::ResolvePrototype;
        const QScriptValue::ResolveFlags* a1 = &a1def;
        int a1State = 0;
        const QScriptValue *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QString,&a0, &a0State, sipType_QScriptValue_ResolveFlags, &a1, &a1State))
        {
            QScriptValue::PropertyFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue::PropertyFlags(sipCpp->propertyFlags(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QScriptValue::ResolveFlags *>(a1),sipType_QScriptValue_ResolveFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue_PropertyFlags,NULL);
        }
    }

    {
        const QScriptString* a0;
        const QScriptValue::ResolveFlags& a1def = QScriptValue::ResolvePrototype;
        const QScriptValue::ResolveFlags* a1 = &a1def;
        int a1State = 0;
        const QScriptValue *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptString, &a0, sipType_QScriptValue_ResolveFlags, &a1, &a1State))
        {
            QScriptValue::PropertyFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue::PropertyFlags(sipCpp->propertyFlags(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QScriptValue::ResolveFlags *>(a1),sipType_QScriptValue_ResolveFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue_PropertyFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_propertyFlags, doc_QScriptValue_propertyFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_call, "QScriptValue.call(QScriptValue thisObject=QScriptValue(), list-of-QScriptValue args=QScriptValueList()) -> QScriptValue\n"
    "QScriptValue.call(QScriptValue, QScriptValue) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptValue_call(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_call(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue& a0def = QScriptValue();
        const QScriptValue* a0 = &a0def;
        const QScriptValueList& a1def = QScriptValueList();
        const QScriptValueList* a1 = &a1def;
        int a1State = 0;
        QScriptValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_thisObject,
            sipName_args,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9J1", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptValue, &a0, sipType_QList_0100QScriptValue,&a1, &a1State))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->call(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QScriptValueList *>(a1),sipType_QList_0100QScriptValue,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QScriptValue* a0;
        const QScriptValue* a1;
        QScriptValue *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptValue, &a0, sipType_QScriptValue, &a1))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->call(*a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_call, doc_QScriptValue_call);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_construct, "QScriptValue.construct(list-of-QScriptValue args=QScriptValueList()) -> QScriptValue\n"
    "QScriptValue.construct(QScriptValue) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptValue_construct(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_construct(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValueList& a0def = QScriptValueList();
        const QScriptValueList* a0 = &a0def;
        int a0State = 0;
        QScriptValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_args,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QList_0100QScriptValue,&a0, &a0State))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->construct(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QScriptValueList *>(a0),sipType_QList_0100QScriptValue,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QScriptValue* a0;
        QScriptValue *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptValue, &a0))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->construct(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_construct, doc_QScriptValue_construct);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_data, "QScriptValue.data() -> QScriptValue");

extern "C" {static PyObject *meth_QScriptValue_data(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->data());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_data, doc_QScriptValue_data);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_setData, "QScriptValue.setData(QScriptValue)");

extern "C" {static PyObject *meth_QScriptValue_setData(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue* a0;
        QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptValue, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setData(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_setData, doc_QScriptValue_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_scriptClass, "QScriptValue.scriptClass() -> QScriptClass");

extern "C" {static PyObject *meth_QScriptValue_scriptClass(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_scriptClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValue, &sipCpp))
        {
            QScriptClass*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scriptClass();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptClass,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_scriptClass, doc_QScriptValue_scriptClass);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValue_setScriptClass, "QScriptValue.setScriptClass(QScriptClass)");

extern "C" {static PyObject *meth_QScriptValue_setScriptClass(PyObject *, PyObject *);}
static PyObject *meth_QScriptValue_setScriptClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptClass* a0;
        PyObject *a0Keep;
        QScriptValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QScriptValue, &sipCpp, &a0Keep, sipType_QScriptClass, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScriptClass(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValue, sipName_setScriptClass, doc_QScriptValue_setScriptClass);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QScriptValue(void *, const sipTypeDef *);}
static void *cast_QScriptValue(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QScriptValue)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScriptValue(void *, int);}
static void release_QScriptValue(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QScriptValue *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QScriptValue(void *, SIP_SSIZE_T, const void *);}
static void assign_QScriptValue(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QScriptValue *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QScriptValue *>(sipSrc);
}


extern "C" {static void *array_QScriptValue(SIP_SSIZE_T);}
static void *array_QScriptValue(SIP_SSIZE_T sipNrElem)
{
    return new QScriptValue[sipNrElem];
}


extern "C" {static void *copy_QScriptValue(const void *, SIP_SSIZE_T);}
static void *copy_QScriptValue(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QScriptValue(reinterpret_cast<const QScriptValue *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QScriptValue(sipSimpleWrapper *);}
static void dealloc_QScriptValue(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QScriptValue(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QScriptValue(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QScriptValue(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QScriptValue *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QScriptValue* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QScriptValue::SpecialValue a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "XE", sipType_QScriptValue_SpecialValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QScriptEngine* a0;
        QScriptValue::SpecialValue a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8XE", sipType_QScriptEngine, &a0, sipType_QScriptValue_SpecialValue, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        bool a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "Xb", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QScriptEngine* a0;
        bool a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8Xb", sipType_QScriptEngine, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "Xi", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QScriptEngine* a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8Xi", sipType_QScriptEngine, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        qsreal a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "Xd", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QScriptEngine* a0;
        qsreal a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8Xd", sipType_QScriptEngine, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        QScriptEngine* a0;
        const QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J1", sipType_QScriptEngine, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QScriptValue(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QScriptValue[] = {
    {SIP_MLNAME_CAST(sipName_call), (PyCFunction)meth_QScriptValue_call, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptValue_call)},
    {SIP_MLNAME_CAST(sipName_construct), (PyCFunction)meth_QScriptValue_construct, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptValue_construct)},
    {SIP_MLNAME_CAST(sipName_data), meth_QScriptValue_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_data)},
    {SIP_MLNAME_CAST(sipName_engine), meth_QScriptValue_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_engine)},
    {SIP_MLNAME_CAST(sipName_equals), meth_QScriptValue_equals, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_equals)},
    {SIP_MLNAME_CAST(sipName_instanceOf), meth_QScriptValue_instanceOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_instanceOf)},
    {SIP_MLNAME_CAST(sipName_isArray), meth_QScriptValue_isArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isArray)},
    {SIP_MLNAME_CAST(sipName_isBool), meth_QScriptValue_isBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isBool)},
    {SIP_MLNAME_CAST(sipName_isBoolean), meth_QScriptValue_isBoolean, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isBoolean)},
    {SIP_MLNAME_CAST(sipName_isDate), meth_QScriptValue_isDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isDate)},
    {SIP_MLNAME_CAST(sipName_isError), meth_QScriptValue_isError, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isError)},
    {SIP_MLNAME_CAST(sipName_isFunction), meth_QScriptValue_isFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isFunction)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QScriptValue_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isNull)},
    {SIP_MLNAME_CAST(sipName_isNumber), meth_QScriptValue_isNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isNumber)},
    {SIP_MLNAME_CAST(sipName_isObject), meth_QScriptValue_isObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isObject)},
    {SIP_MLNAME_CAST(sipName_isQMetaObject), meth_QScriptValue_isQMetaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isQMetaObject)},
    {SIP_MLNAME_CAST(sipName_isQObject), meth_QScriptValue_isQObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isQObject)},
    {SIP_MLNAME_CAST(sipName_isRegExp), meth_QScriptValue_isRegExp, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isRegExp)},
    {SIP_MLNAME_CAST(sipName_isString), meth_QScriptValue_isString, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isString)},
    {SIP_MLNAME_CAST(sipName_isUndefined), meth_QScriptValue_isUndefined, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isUndefined)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QScriptValue_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isValid)},
    {SIP_MLNAME_CAST(sipName_isVariant), meth_QScriptValue_isVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_isVariant)},
    {SIP_MLNAME_CAST(sipName_lessThan), meth_QScriptValue_lessThan, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_lessThan)},
    {SIP_MLNAME_CAST(sipName_property), (PyCFunction)meth_QScriptValue_property, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptValue_property)},
    {SIP_MLNAME_CAST(sipName_propertyFlags), (PyCFunction)meth_QScriptValue_propertyFlags, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptValue_propertyFlags)},
    {SIP_MLNAME_CAST(sipName_prototype), meth_QScriptValue_prototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_prototype)},
    {SIP_MLNAME_CAST(sipName_scriptClass), meth_QScriptValue_scriptClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_scriptClass)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QScriptValue_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_setData)},
    {SIP_MLNAME_CAST(sipName_setProperty), (PyCFunction)meth_QScriptValue_setProperty, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptValue_setProperty)},
    {SIP_MLNAME_CAST(sipName_setPrototype), meth_QScriptValue_setPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_setPrototype)},
    {SIP_MLNAME_CAST(sipName_setScriptClass), meth_QScriptValue_setScriptClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_setScriptClass)},
    {SIP_MLNAME_CAST(sipName_strictlyEquals), meth_QScriptValue_strictlyEquals, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_strictlyEquals)},
    {SIP_MLNAME_CAST(sipName_toBool), meth_QScriptValue_toBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toBool)},
    {SIP_MLNAME_CAST(sipName_toBoolean), meth_QScriptValue_toBoolean, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toBoolean)},
    {SIP_MLNAME_CAST(sipName_toDateTime), meth_QScriptValue_toDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toDateTime)},
    {SIP_MLNAME_CAST(sipName_toInt32), meth_QScriptValue_toInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toInt32)},
    {SIP_MLNAME_CAST(sipName_toInteger), meth_QScriptValue_toInteger, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toInteger)},
    {SIP_MLNAME_CAST(sipName_toNumber), meth_QScriptValue_toNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toNumber)},
    {SIP_MLNAME_CAST(sipName_toObject), meth_QScriptValue_toObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toObject)},
    {SIP_MLNAME_CAST(sipName_toQMetaObject), meth_QScriptValue_toQMetaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toQMetaObject)},
    {SIP_MLNAME_CAST(sipName_toQObject), meth_QScriptValue_toQObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toQObject)},
    {SIP_MLNAME_CAST(sipName_toRegExp), meth_QScriptValue_toRegExp, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toRegExp)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QScriptValue_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toString)},
    {SIP_MLNAME_CAST(sipName_toUInt16), meth_QScriptValue_toUInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toUInt16)},
    {SIP_MLNAME_CAST(sipName_toUInt32), meth_QScriptValue_toUInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toUInt32)},
    {SIP_MLNAME_CAST(sipName_toVariant), meth_QScriptValue_toVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValue_toVariant)}
};

static sipEnumMemberDef enummembers_QScriptValue[] = {
    {sipName_KeepExistingFlags, static_cast<int>(QScriptValue::KeepExistingFlags), 22},
    {sipName_NullValue, static_cast<int>(QScriptValue::NullValue), 26},
    {sipName_PropertyGetter, static_cast<int>(QScriptValue::PropertyGetter), 22},
    {sipName_PropertySetter, static_cast<int>(QScriptValue::PropertySetter), 22},
    {sipName_QObjectMember, static_cast<int>(QScriptValue::QObjectMember), 22},
    {sipName_ReadOnly, static_cast<int>(QScriptValue::ReadOnly), 22},
    {sipName_ResolveFull, static_cast<int>(QScriptValue::ResolveFull), 24},
    {sipName_ResolveLocal, static_cast<int>(QScriptValue::ResolveLocal), 24},
    {sipName_ResolvePrototype, static_cast<int>(QScriptValue::ResolvePrototype), 24},
    {sipName_ResolveScope, static_cast<int>(QScriptValue::ResolveScope), 24},
    {sipName_SkipInEnumeration, static_cast<int>(QScriptValue::SkipInEnumeration), 22},
    {sipName_UndefinedValue, static_cast<int>(QScriptValue::UndefinedValue), 26},
    {sipName_Undeletable, static_cast<int>(QScriptValue::Undeletable), 22},
    {sipName_UserRange, static_cast<int>(QScriptValue::UserRange), 22},
};

PyDoc_STRVAR(doc_QScriptValue, "\1QScriptValue()\n"
    "QScriptValue(QScriptValue)\n"
    "QScriptValue(QScriptValue.SpecialValue)\n"
    "QScriptValue(QScriptEngine, QScriptValue.SpecialValue)\n"
    "QScriptValue(bool)\n"
    "QScriptValue(QScriptEngine, bool)\n"
    "QScriptValue(int)\n"
    "QScriptValue(QScriptEngine, int)\n"
    "QScriptValue(float)\n"
    "QScriptValue(QScriptEngine, float)\n"
    "QScriptValue(QString)\n"
    "QScriptValue(QScriptEngine, QString)");


pyqt4ClassTypeDef sipTypeDef_QtScript_QScriptValue = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QScriptValue,
        {0}
    },
    {
        sipNameNr_QScriptValue,
        {0, 0, 1},
        46, methods_QScriptValue,
        14, enummembers_QScriptValue,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QScriptValue,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QScriptValue,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QScriptValue,
    assign_QScriptValue,
    array_QScriptValue,
    copy_QScriptValue,
    release_QScriptValue,
    cast_QScriptValue,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
