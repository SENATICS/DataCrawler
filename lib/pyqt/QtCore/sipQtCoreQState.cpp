/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsignaltransition.sip"
#include <qsignaltransition.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"


class sipQState : public QState
{
public:
    sipQState(QState*);
    sipQState(QState::ChildMode,QState*);
    virtual ~sipQState();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void onExit(QEvent*);
    void onEntry(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQState(const sipQState &);
    sipQState &operator = (const sipQState &);

    char sipPyMethods[9];
};

sipQState::sipQState(QState*a0): QState(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQState::sipQState(QState::ChildMode a0,QState*a1): QState(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQState::~sipQState()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQState::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QState);
}

int sipQState::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QState::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QState,_c,_id,_a);

    return _id;
}

void *sipQState::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QState, _clname)) ? this : QState::qt_metacast(_clname);
}

void sipQState::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QState::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQState::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QState::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQState::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QState::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQState::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QState::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQState::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QState::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQState::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QState::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQState::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QState::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQState::onExit(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_onExit);

    if (!sipMeth)
    {
        QState::onExit(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQState::onEntry(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_onEntry);

    if (!sipMeth)
    {
        QState::onEntry(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QState_errorState, "QState.errorState() -> QAbstractState");

extern "C" {static PyObject *meth_QState_errorState(PyObject *, PyObject *);}
static PyObject *meth_QState_errorState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QState, &sipCpp))
        {
            QAbstractState*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->errorState();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractState,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_errorState, doc_QState_errorState);

    return NULL;
}


PyDoc_STRVAR(doc_QState_setErrorState, "QState.setErrorState(QAbstractState)");

extern "C" {static PyObject *meth_QState_setErrorState(PyObject *, PyObject *);}
static PyObject *meth_QState_setErrorState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractState* a0;
        PyObject *a0Keep;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QState, &sipCpp, &a0Keep, sipType_QAbstractState, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setErrorState(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_setErrorState, doc_QState_setErrorState);

    return NULL;
}


PyDoc_STRVAR(doc_QState_addTransition, "QState.addTransition(QAbstractTransition)\n"
    "QState.addTransition(QObject, SIGNAL(), QAbstractState) -> QSignalTransition\n"
    "QState.addTransition(signal, QAbstractState) -> QSignalTransition\n"
    "QState.addTransition(QAbstractState) -> QAbstractTransition");

extern "C" {static PyObject *meth_QState_addTransition(PyObject *, PyObject *);}
static PyObject *meth_QState_addTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractTransition* a0;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QState, &sipCpp, sipType_QAbstractTransition, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addTransition(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QObject* a0;
        char* a1;
        QAbstractState* a2;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8GJ8", &sipSelf, sipType_QState, &sipCpp, sipType_QObject, &a0, &a1, sipType_QAbstractState, &a2))
        {
            QSignalTransition*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addTransition(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QSignalTransition,NULL);
        }
    }

    {
        PyObject * a0;
        QAbstractState* a1;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0J8", &sipSelf, sipType_QState, &sipCpp, &a0, sipType_QAbstractState, &a1))
        {
            QSignalTransition*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 66 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstate.sip"
        QObject *sender;
        const char *signal = qpycore_pyqtsignal_get_parts(a0, &sender);
        
        if (signal)
        {
            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addTransition(sender, signal, a1);
            Py_END_ALLOW_THREADS
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 448 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQState.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromType(sipRes,sipType_QSignalTransition,NULL);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        QAbstractState* a0;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QState, &sipCpp, sipType_QAbstractState, &a0))
        {
            QAbstractTransition*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addTransition(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractTransition,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_addTransition, doc_QState_addTransition);

    return NULL;
}


PyDoc_STRVAR(doc_QState_removeTransition, "QState.removeTransition(QAbstractTransition)");

extern "C" {static PyObject *meth_QState_removeTransition(PyObject *, PyObject *);}
static PyObject *meth_QState_removeTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractTransition* a0;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QState, &sipCpp, sipType_QAbstractTransition, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeTransition(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_removeTransition, doc_QState_removeTransition);

    return NULL;
}


PyDoc_STRVAR(doc_QState_transitions, "QState.transitions() -> list-of-QAbstractTransition");

extern "C" {static PyObject *meth_QState_transitions(PyObject *, PyObject *);}
static PyObject *meth_QState_transitions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QState, &sipCpp))
        {
            QList<QAbstractTransition*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QAbstractTransition*>(sipCpp->transitions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractTransition,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_transitions, doc_QState_transitions);

    return NULL;
}


PyDoc_STRVAR(doc_QState_initialState, "QState.initialState() -> QAbstractState");

extern "C" {static PyObject *meth_QState_initialState(PyObject *, PyObject *);}
static PyObject *meth_QState_initialState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QState, &sipCpp))
        {
            QAbstractState*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->initialState();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractState,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_initialState, doc_QState_initialState);

    return NULL;
}


PyDoc_STRVAR(doc_QState_setInitialState, "QState.setInitialState(QAbstractState)");

extern "C" {static PyObject *meth_QState_setInitialState(PyObject *, PyObject *);}
static PyObject *meth_QState_setInitialState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractState* a0;
        PyObject *a0Keep;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QState, &sipCpp, &a0Keep, sipType_QAbstractState, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setInitialState(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -5, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_setInitialState, doc_QState_setInitialState);

    return NULL;
}


PyDoc_STRVAR(doc_QState_childMode, "QState.childMode() -> QState.ChildMode");

extern "C" {static PyObject *meth_QState_childMode(PyObject *, PyObject *);}
static PyObject *meth_QState_childMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QState, &sipCpp))
        {
            QState::ChildMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->childMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QState_ChildMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_childMode, doc_QState_childMode);

    return NULL;
}


PyDoc_STRVAR(doc_QState_setChildMode, "QState.setChildMode(QState.ChildMode)");

extern "C" {static PyObject *meth_QState_setChildMode(PyObject *, PyObject *);}
static PyObject *meth_QState_setChildMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QState::ChildMode a0;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QState, &sipCpp, sipType_QState_ChildMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setChildMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_setChildMode, doc_QState_setChildMode);

    return NULL;
}


PyDoc_STRVAR(doc_QState_assignProperty, "QState.assignProperty(QObject, str, QVariant)");

extern "C" {static PyObject *meth_QState_assignProperty(PyObject *, PyObject *);}
static PyObject *meth_QState_assignProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        const char* a1;
        const QVariant* a2;
        int a2State = 0;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8sJ1", &sipSelf, sipType_QState, &sipCpp, sipType_QObject, &a0, &a1, sipType_QVariant,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->assignProperty(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_assignProperty, doc_QState_assignProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QState_onEntry, "QState.onEntry(QEvent)");

extern "C" {static PyObject *meth_QState_onEntry(PyObject *, PyObject *);}
static PyObject *meth_QState_onEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QState, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QState::onEntry(a0) : sipCpp->onEntry(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_onEntry, doc_QState_onEntry);

    return NULL;
}


PyDoc_STRVAR(doc_QState_onExit, "QState.onExit(QEvent)");

extern "C" {static PyObject *meth_QState_onExit(PyObject *, PyObject *);}
static PyObject *meth_QState_onExit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QState, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QState::onExit(a0) : sipCpp->onExit(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_onExit, doc_QState_onExit);

    return NULL;
}


PyDoc_STRVAR(doc_QState_event, "QState.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QState_event(PyObject *, PyObject *);}
static PyObject *meth_QState_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QState, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QState::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_event, doc_QState_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QState(void *, const sipTypeDef *);}
static void *cast_QState(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QState)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractState)->ctd_cast((QAbstractState *)(QState *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QState(void *, int);}
static void release_QState(void *sipCppV,int)
{
    QState *sipCpp = reinterpret_cast<QState *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QState(sipSimpleWrapper *);}
static void dealloc_QState(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQState *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QState(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QState(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQState *sipCpp = 0;

    {
        QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQState(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QState::ChildMode a0;
        QState* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QState_ChildMode, &a0, sipType_QState, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQState(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QState[] = {{15, 255, 1}};


static PyMethodDef methods_QState[] = {
    {SIP_MLNAME_CAST(sipName_addTransition), meth_QState_addTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_addTransition)},
    {SIP_MLNAME_CAST(sipName_assignProperty), meth_QState_assignProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_assignProperty)},
    {SIP_MLNAME_CAST(sipName_childMode), meth_QState_childMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_childMode)},
    {SIP_MLNAME_CAST(sipName_errorState), meth_QState_errorState, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_errorState)},
    {SIP_MLNAME_CAST(sipName_event), meth_QState_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_event)},
    {SIP_MLNAME_CAST(sipName_initialState), meth_QState_initialState, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_initialState)},
    {SIP_MLNAME_CAST(sipName_onEntry), meth_QState_onEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_onEntry)},
    {SIP_MLNAME_CAST(sipName_onExit), meth_QState_onExit, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_onExit)},
    {SIP_MLNAME_CAST(sipName_removeTransition), meth_QState_removeTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_removeTransition)},
    {SIP_MLNAME_CAST(sipName_setChildMode), meth_QState_setChildMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_setChildMode)},
    {SIP_MLNAME_CAST(sipName_setErrorState), meth_QState_setErrorState, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_setErrorState)},
    {SIP_MLNAME_CAST(sipName_setInitialState), meth_QState_setInitialState, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_setInitialState)},
    {SIP_MLNAME_CAST(sipName_transitions), meth_QState_transitions, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_transitions)}
};

static sipEnumMemberDef enummembers_QState[] = {
    {sipName_ExclusiveStates, static_cast<int>(QState::ExclusiveStates), 190},
    {sipName_ParallelStates, static_cast<int>(QState::ParallelStates), 190},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QState[] = {
    {"propertiesAssigned()", "\1QState.propertiesAssigned", 0, 0},
    {"finished()", "\1QState.finished", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QState, "\1QState(QState parent=None)\n"
    "QState(QState.ChildMode, QState parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QState = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QState,
        {0}
    },
    {
        sipNameNr_QState,
        {0, 0, 1},
        13, methods_QState,
        2, enummembers_QState,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QState,
    -1,
    -1,
    supers_QState,
    0,
    init_type_QState,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QState,
    0,
    0,
    0,
    release_QState,
    cast_QState,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QState::staticMetaObject,
    0,
    signals_QState,
};
