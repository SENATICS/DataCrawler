/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbasictimer.sip"
#include <qbasictimer.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQBasicTimer.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQBasicTimer.cpp"


PyDoc_STRVAR(doc_QBasicTimer_isActive, "QBasicTimer.isActive() -> bool");

extern "C" {static PyObject *meth_QBasicTimer_isActive(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBasicTimer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isActive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_isActive, doc_QBasicTimer_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QBasicTimer_timerId, "QBasicTimer.timerId() -> int");

extern "C" {static PyObject *meth_QBasicTimer_timerId(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_timerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBasicTimer, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->timerId();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_timerId, doc_QBasicTimer_timerId);

    return NULL;
}


PyDoc_STRVAR(doc_QBasicTimer_start, "QBasicTimer.start(int, QObject)");

extern "C" {static PyObject *meth_QBasicTimer_start(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QObject* a1;
        QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_QBasicTimer, &sipCpp, &a0, sipType_QObject, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->start(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_start, doc_QBasicTimer_start);

    return NULL;
}


PyDoc_STRVAR(doc_QBasicTimer_stop, "QBasicTimer.stop()");

extern "C" {static PyObject *meth_QBasicTimer_stop(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBasicTimer, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_stop, doc_QBasicTimer_stop);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QBasicTimer(void *, const sipTypeDef *);}
static void *cast_QBasicTimer(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QBasicTimer)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBasicTimer(void *, int);}
static void release_QBasicTimer(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QBasicTimer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QBasicTimer(void *, SIP_SSIZE_T, const void *);}
static void assign_QBasicTimer(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QBasicTimer *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QBasicTimer *>(sipSrc);
}


extern "C" {static void *array_QBasicTimer(SIP_SSIZE_T);}
static void *array_QBasicTimer(SIP_SSIZE_T sipNrElem)
{
    return new QBasicTimer[sipNrElem];
}


extern "C" {static void *copy_QBasicTimer(const void *, SIP_SSIZE_T);}
static void *copy_QBasicTimer(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QBasicTimer(reinterpret_cast<const QBasicTimer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBasicTimer(sipSimpleWrapper *);}
static void dealloc_QBasicTimer(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QBasicTimer(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QBasicTimer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBasicTimer(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QBasicTimer *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QBasicTimer();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QBasicTimer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QBasicTimer, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QBasicTimer(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QBasicTimer[] = {
    {SIP_MLNAME_CAST(sipName_isActive), meth_QBasicTimer_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QBasicTimer_isActive)},
    {SIP_MLNAME_CAST(sipName_start), meth_QBasicTimer_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QBasicTimer_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QBasicTimer_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QBasicTimer_stop)},
    {SIP_MLNAME_CAST(sipName_timerId), meth_QBasicTimer_timerId, METH_VARARGS, SIP_MLDOC_CAST(doc_QBasicTimer_timerId)}
};

PyDoc_STRVAR(doc_QBasicTimer, "\1QBasicTimer()\n"
    "QBasicTimer(QBasicTimer)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QBasicTimer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QBasicTimer,
        {0}
    },
    {
        sipNameNr_QBasicTimer,
        {0, 0, 1},
        4, methods_QBasicTimer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QBasicTimer,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QBasicTimer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBasicTimer,
    assign_QBasicTimer,
    array_QBasicTimer,
    copy_QBasicTimer,
    release_QBasicTimer,
    cast_QBasicTimer,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
