/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 477 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQXmlStreamWriter.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQXmlStreamWriter.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQXmlStreamWriter.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQXmlStreamWriter.cpp"
#line 342 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQXmlStreamWriter.cpp"
#line 58 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQXmlStreamWriter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQXmlStreamWriter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQXmlStreamWriter.cpp"


PyDoc_STRVAR(doc_QXmlStreamWriter_setDevice, "QXmlStreamWriter.setDevice(QIODevice)");

extern "C" {static PyObject *meth_QXmlStreamWriter_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setDevice, doc_QXmlStreamWriter_setDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_device, "QXmlStreamWriter.device() -> QIODevice");

extern "C" {static PyObject *meth_QXmlStreamWriter_device(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            QIODevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_device, doc_QXmlStreamWriter_device);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_setCodec, "QXmlStreamWriter.setCodec(QTextCodec)\n"
    "QXmlStreamWriter.setCodec(str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_setCodec(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCodec* a0;
        PyObject *a0Keep;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCodec(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -12, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCodec(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setCodec, doc_QXmlStreamWriter_setCodec);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_codec, "QXmlStreamWriter.codec() -> QTextCodec");

extern "C" {static PyObject *meth_QXmlStreamWriter_codec(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_codec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            QTextCodec*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->codec();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextCodec,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_codec, doc_QXmlStreamWriter_codec);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_setAutoFormatting, "QXmlStreamWriter.setAutoFormatting(bool)");

extern "C" {static PyObject *meth_QXmlStreamWriter_setAutoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setAutoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoFormatting(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setAutoFormatting, doc_QXmlStreamWriter_setAutoFormatting);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_autoFormatting, "QXmlStreamWriter.autoFormatting() -> bool");

extern "C" {static PyObject *meth_QXmlStreamWriter_autoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_autoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoFormatting();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_autoFormatting, doc_QXmlStreamWriter_autoFormatting);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_setAutoFormattingIndent, "QXmlStreamWriter.setAutoFormattingIndent(int)");

extern "C" {static PyObject *meth_QXmlStreamWriter_setAutoFormattingIndent(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setAutoFormattingIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoFormattingIndent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setAutoFormattingIndent, doc_QXmlStreamWriter_setAutoFormattingIndent);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_autoFormattingIndent, "QXmlStreamWriter.autoFormattingIndent() -> int");

extern "C" {static PyObject *meth_QXmlStreamWriter_autoFormattingIndent(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_autoFormattingIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoFormattingIndent();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_autoFormattingIndent, doc_QXmlStreamWriter_autoFormattingIndent);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeAttribute, "QXmlStreamWriter.writeAttribute(QString, QString)\n"
    "QXmlStreamWriter.writeAttribute(QString, QString, QString)\n"
    "QXmlStreamWriter.writeAttribute(QXmlStreamAttribute)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeAttribute(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeAttribute(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeAttribute(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QXmlStreamAttribute* a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeAttribute(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeAttribute, doc_QXmlStreamWriter_writeAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeAttributes, "QXmlStreamWriter.writeAttributes(QXmlStreamAttributes)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeAttributes(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamAttributes* a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QXmlStreamAttributes, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeAttributes(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeAttributes, doc_QXmlStreamWriter_writeAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeCDATA, "QXmlStreamWriter.writeCDATA(QString)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeCDATA(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeCDATA, doc_QXmlStreamWriter_writeCDATA);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeCharacters, "QXmlStreamWriter.writeCharacters(QString)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeCharacters(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeCharacters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeCharacters(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeCharacters, doc_QXmlStreamWriter_writeCharacters);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeComment, "QXmlStreamWriter.writeComment(QString)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeComment(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeComment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeComment, doc_QXmlStreamWriter_writeComment);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeDTD, "QXmlStreamWriter.writeDTD(QString)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeDTD(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeDTD, doc_QXmlStreamWriter_writeDTD);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeEmptyElement, "QXmlStreamWriter.writeEmptyElement(QString)\n"
    "QXmlStreamWriter.writeEmptyElement(QString, QString)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeEmptyElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEmptyElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeEmptyElement(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeEmptyElement(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEmptyElement, doc_QXmlStreamWriter_writeEmptyElement);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeTextElement, "QXmlStreamWriter.writeTextElement(QString, QString)\n"
    "QXmlStreamWriter.writeTextElement(QString, QString, QString)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeTextElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeTextElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeTextElement(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeTextElement(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeTextElement, doc_QXmlStreamWriter_writeTextElement);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeEndDocument, "QXmlStreamWriter.writeEndDocument()");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeEndDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEndDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeEndDocument();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEndDocument, doc_QXmlStreamWriter_writeEndDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeEndElement, "QXmlStreamWriter.writeEndElement()");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeEndElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEndElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeEndElement();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEndElement, doc_QXmlStreamWriter_writeEndElement);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeEntityReference, "QXmlStreamWriter.writeEntityReference(QString)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeEntityReference(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEntityReference, doc_QXmlStreamWriter_writeEntityReference);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeNamespace, "QXmlStreamWriter.writeNamespace(QString, QString prefix=QString())");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeNamespace(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeNamespace(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeNamespace(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeNamespace, doc_QXmlStreamWriter_writeNamespace);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeDefaultNamespace, "QXmlStreamWriter.writeDefaultNamespace(QString)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeDefaultNamespace(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeDefaultNamespace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeDefaultNamespace(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeDefaultNamespace, doc_QXmlStreamWriter_writeDefaultNamespace);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeProcessingInstruction, "QXmlStreamWriter.writeProcessingInstruction(QString, QString data=QString())");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeProcessingInstruction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeProcessingInstruction(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeProcessingInstruction, doc_QXmlStreamWriter_writeProcessingInstruction);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeStartDocument, "QXmlStreamWriter.writeStartDocument()\n"
    "QXmlStreamWriter.writeStartDocument(QString)\n"
    "QXmlStreamWriter.writeStartDocument(QString, bool)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeStartDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeStartDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeStartDocument();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeStartDocument(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1b", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeStartDocument(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeStartDocument, doc_QXmlStreamWriter_writeStartDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeStartElement, "QXmlStreamWriter.writeStartElement(QString)\n"
    "QXmlStreamWriter.writeStartElement(QString, QString)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeStartElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeStartElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeStartElement(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeStartElement(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeStartElement, doc_QXmlStreamWriter_writeStartElement);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeCurrentToken, "QXmlStreamWriter.writeCurrentToken(QXmlStreamReader)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeCurrentToken(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeCurrentToken(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader* a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QXmlStreamReader, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeCurrentToken(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeCurrentToken, doc_QXmlStreamWriter_writeCurrentToken);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_hasError, "QXmlStreamWriter.hasError() -> bool");

extern "C" {static PyObject *meth_QXmlStreamWriter_hasError(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_hasError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_hasError, doc_QXmlStreamWriter_hasError);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QXmlStreamWriter(void *, const sipTypeDef *);}
static void *cast_QXmlStreamWriter(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QXmlStreamWriter)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamWriter(void *, int);}
static void release_QXmlStreamWriter(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QXmlStreamWriter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QXmlStreamWriter(sipSimpleWrapper *);}
static void dealloc_QXmlStreamWriter(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QXmlStreamWriter(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QXmlStreamWriter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamWriter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QXmlStreamWriter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamWriter();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamWriter(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J0", sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamWriter(a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QString* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QString,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamWriter(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QXmlStreamWriter[] = {
    {SIP_MLNAME_CAST(sipName_autoFormatting), meth_QXmlStreamWriter_autoFormatting, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_autoFormatting)},
    {SIP_MLNAME_CAST(sipName_autoFormattingIndent), meth_QXmlStreamWriter_autoFormattingIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_autoFormattingIndent)},
    {SIP_MLNAME_CAST(sipName_codec), meth_QXmlStreamWriter_codec, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_codec)},
    {SIP_MLNAME_CAST(sipName_device), meth_QXmlStreamWriter_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_device)},
    {SIP_MLNAME_CAST(sipName_hasError), meth_QXmlStreamWriter_hasError, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_hasError)},
    {SIP_MLNAME_CAST(sipName_setAutoFormatting), meth_QXmlStreamWriter_setAutoFormatting, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_setAutoFormatting)},
    {SIP_MLNAME_CAST(sipName_setAutoFormattingIndent), meth_QXmlStreamWriter_setAutoFormattingIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_setAutoFormattingIndent)},
    {SIP_MLNAME_CAST(sipName_setCodec), meth_QXmlStreamWriter_setCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_setCodec)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QXmlStreamWriter_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_setDevice)},
    {SIP_MLNAME_CAST(sipName_writeAttribute), meth_QXmlStreamWriter_writeAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeAttribute)},
    {SIP_MLNAME_CAST(sipName_writeAttributes), meth_QXmlStreamWriter_writeAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeAttributes)},
    {SIP_MLNAME_CAST(sipName_writeCDATA), meth_QXmlStreamWriter_writeCDATA, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeCDATA)},
    {SIP_MLNAME_CAST(sipName_writeCharacters), meth_QXmlStreamWriter_writeCharacters, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeCharacters)},
    {SIP_MLNAME_CAST(sipName_writeComment), meth_QXmlStreamWriter_writeComment, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeComment)},
    {SIP_MLNAME_CAST(sipName_writeCurrentToken), meth_QXmlStreamWriter_writeCurrentToken, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeCurrentToken)},
    {SIP_MLNAME_CAST(sipName_writeDTD), meth_QXmlStreamWriter_writeDTD, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeDTD)},
    {SIP_MLNAME_CAST(sipName_writeDefaultNamespace), meth_QXmlStreamWriter_writeDefaultNamespace, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeDefaultNamespace)},
    {SIP_MLNAME_CAST(sipName_writeEmptyElement), meth_QXmlStreamWriter_writeEmptyElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeEmptyElement)},
    {SIP_MLNAME_CAST(sipName_writeEndDocument), meth_QXmlStreamWriter_writeEndDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeEndDocument)},
    {SIP_MLNAME_CAST(sipName_writeEndElement), meth_QXmlStreamWriter_writeEndElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeEndElement)},
    {SIP_MLNAME_CAST(sipName_writeEntityReference), meth_QXmlStreamWriter_writeEntityReference, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeEntityReference)},
    {SIP_MLNAME_CAST(sipName_writeNamespace), (PyCFunction)meth_QXmlStreamWriter_writeNamespace, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeNamespace)},
    {SIP_MLNAME_CAST(sipName_writeProcessingInstruction), (PyCFunction)meth_QXmlStreamWriter_writeProcessingInstruction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeProcessingInstruction)},
    {SIP_MLNAME_CAST(sipName_writeStartDocument), meth_QXmlStreamWriter_writeStartDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeStartDocument)},
    {SIP_MLNAME_CAST(sipName_writeStartElement), meth_QXmlStreamWriter_writeStartElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeStartElement)},
    {SIP_MLNAME_CAST(sipName_writeTextElement), meth_QXmlStreamWriter_writeTextElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeTextElement)}
};

PyDoc_STRVAR(doc_QXmlStreamWriter, "\1QXmlStreamWriter()\n"
    "QXmlStreamWriter(QIODevice)\n"
    "QXmlStreamWriter(QByteArray)\n"
    "QXmlStreamWriter(QString)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QXmlStreamWriter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamWriter,
        {0}
    },
    {
        sipNameNr_QXmlStreamWriter,
        {0, 0, 1},
        26, methods_QXmlStreamWriter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QXmlStreamWriter,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QXmlStreamWriter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlStreamWriter,
    0,
    0,
    0,
    release_QXmlStreamWriter,
    cast_QXmlStreamWriter,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
