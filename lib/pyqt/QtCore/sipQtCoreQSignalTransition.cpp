/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsignaltransition.sip"
#include <qsignaltransition.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"


class sipQSignalTransition : public QSignalTransition
{
public:
    sipQSignalTransition(QState*);
    sipQSignalTransition(QObject*,const char*,QState*);
    virtual ~sipQSignalTransition();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void onTransition(QEvent*);
    bool eventTest(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSignalTransition(const sipQSignalTransition &);
    sipQSignalTransition &operator = (const sipQSignalTransition &);

    char sipPyMethods[9];
};

sipQSignalTransition::sipQSignalTransition(QState*a0): QSignalTransition(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSignalTransition::sipQSignalTransition(QObject*a0,const char*a1,QState*a2): QSignalTransition(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSignalTransition::~sipQSignalTransition()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSignalTransition::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QSignalTransition);
}

int sipQSignalTransition::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSignalTransition::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSignalTransition,_c,_id,_a);

    return _id;
}

void *sipQSignalTransition::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSignalTransition, _clname)) ? this : QSignalTransition::qt_metacast(_clname);
}

void sipQSignalTransition::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSignalTransition::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSignalTransition::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSignalTransition::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSignalTransition::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSignalTransition::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSignalTransition::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSignalTransition::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSignalTransition::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSignalTransition::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSignalTransition::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSignalTransition::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQSignalTransition::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSignalTransition::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSignalTransition::onTransition(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_onTransition);

    if (!sipMeth)
    {
        QSignalTransition::onTransition(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSignalTransition::eventTest(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_eventTest);

    if (!sipMeth)
        return QSignalTransition::eventTest(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSignalTransition_senderObject, "QSignalTransition.senderObject() -> QObject");

extern "C" {static PyObject *meth_QSignalTransition_senderObject(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_senderObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSignalTransition, &sipCpp))
        {
            QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->senderObject();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_senderObject, doc_QSignalTransition_senderObject);

    return NULL;
}


PyDoc_STRVAR(doc_QSignalTransition_setSenderObject, "QSignalTransition.setSenderObject(QObject)");

extern "C" {static PyObject *meth_QSignalTransition_setSenderObject(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_setSenderObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSignalTransition, &sipCpp, sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSenderObject(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_setSenderObject, doc_QSignalTransition_setSenderObject);

    return NULL;
}


PyDoc_STRVAR(doc_QSignalTransition_signal, "QSignalTransition.signal() -> QByteArray");

extern "C" {static PyObject *meth_QSignalTransition_signal(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_signal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSignalTransition, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->signal());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_signal, doc_QSignalTransition_signal);

    return NULL;
}


PyDoc_STRVAR(doc_QSignalTransition_setSignal, "QSignalTransition.setSignal(QByteArray)");

extern "C" {static PyObject *meth_QSignalTransition_setSignal(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_setSignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSignalTransition, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSignal(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_setSignal, doc_QSignalTransition_setSignal);

    return NULL;
}


PyDoc_STRVAR(doc_QSignalTransition_eventTest, "QSignalTransition.eventTest(QEvent) -> bool");

extern "C" {static PyObject *meth_QSignalTransition_eventTest(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_eventTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSignalTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSignalTransition::eventTest(a0) : sipCpp->eventTest(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_eventTest, doc_QSignalTransition_eventTest);

    return NULL;
}


PyDoc_STRVAR(doc_QSignalTransition_onTransition, "QSignalTransition.onTransition(QEvent)");

extern "C" {static PyObject *meth_QSignalTransition_onTransition(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_onTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSignalTransition, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSignalTransition::onTransition(a0) : sipCpp->onTransition(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_onTransition, doc_QSignalTransition_onTransition);

    return NULL;
}


PyDoc_STRVAR(doc_QSignalTransition_event, "QSignalTransition.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QSignalTransition_event(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSignalTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSignalTransition::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_event, doc_QSignalTransition_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSignalTransition(void *, const sipTypeDef *);}
static void *cast_QSignalTransition(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSignalTransition)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractTransition)->ctd_cast((QAbstractTransition *)(QSignalTransition *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSignalTransition(void *, int);}
static void release_QSignalTransition(void *sipCppV,int)
{
    QSignalTransition *sipCpp = reinterpret_cast<QSignalTransition *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSignalTransition(sipSimpleWrapper *);}
static void dealloc_QSignalTransition(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSignalTransition *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSignalTransition(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSignalTransition(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSignalTransition(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSignalTransition *sipCpp = 0;

    {
        QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSignalTransition(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0;
        char* a1;
        QState* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8G|JH", sipType_QObject, &a0, &a1, sipType_QState, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSignalTransition(a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        PyObject * a0;
        QState* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "P0|JH", &a0, sipType_QState, &a1, sipOwner))
        {
            sipErrorState sipError = sipErrorNone;

#line 46 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsignaltransition.sip"
        QObject *sender;
        const char *signal = qpycore_pyqtsignal_get_parts(a0, &sender);
        
        if (signal)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSignalTransition(sender, signal, a1);
            Py_END_ALLOW_THREADS
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 650 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQSignalTransition.cpp"

            if (sipError == sipErrorNone)
            {
                sipCpp->sipPySelf = sipSelf;

                return sipCpp;
            }

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return NULL;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSignalTransition[] = {{17, 255, 1}};


static PyMethodDef methods_QSignalTransition[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QSignalTransition_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_event)},
    {SIP_MLNAME_CAST(sipName_eventTest), meth_QSignalTransition_eventTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_eventTest)},
    {SIP_MLNAME_CAST(sipName_onTransition), meth_QSignalTransition_onTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_onTransition)},
    {SIP_MLNAME_CAST(sipName_senderObject), meth_QSignalTransition_senderObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_senderObject)},
    {SIP_MLNAME_CAST(sipName_setSenderObject), meth_QSignalTransition_setSenderObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_setSenderObject)},
    {SIP_MLNAME_CAST(sipName_setSignal), meth_QSignalTransition_setSignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_setSignal)},
    {SIP_MLNAME_CAST(sipName_signal), meth_QSignalTransition_signal, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_signal)}
};

PyDoc_STRVAR(doc_QSignalTransition, "\1QSignalTransition(QState sourceState=None)\n"
    "QSignalTransition(QObject, SIGNAL(), QState sourceState=None)\n"
    "QSignalTransition(signal, QState sourceState=None)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QSignalTransition = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSignalTransition,
        {0}
    },
    {
        sipNameNr_QSignalTransition,
        {0, 0, 1},
        7, methods_QSignalTransition,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSignalTransition,
    -1,
    -1,
    supers_QSignalTransition,
    0,
    init_type_QSignalTransition,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSignalTransition,
    0,
    0,
    0,
    release_QSignalTransition,
    cast_QSignalTransition,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSignalTransition::staticMetaObject,
    0,
    0
};
