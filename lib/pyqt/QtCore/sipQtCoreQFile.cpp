/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 84 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractfileengine.sip"
#include <qabstractfileengine.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 84 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 84 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"


class sipQFile : public QFile
{
public:
    sipQFile();
    sipQFile(const QString&);
    sipQFile(QObject*);
    sipQFile(const QString&,QObject*);
    virtual ~sipQFile();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;
    bool reset();
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readLineData(char*,qint64);
    qint64 readData(char*,qint64);
    QAbstractFileEngine* fileEngine() const;
    bool atEnd() const;
    bool seek(qint64);
    qint64 pos() const;
    qint64 size() const;
    void close();
    bool open(QIODevice::OpenMode);
    bool isSequential() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFile(const sipQFile &);
    sipQFile &operator = (const sipQFile &);

    char sipPyMethods[24];
};

sipQFile::sipQFile(): QFile(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFile::sipQFile(const QString& a0): QFile(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFile::sipQFile(QObject*a0): QFile(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFile::sipQFile(const QString& a0,QObject*a1): QFile(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFile::~sipQFile()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQFile::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QFile);
}

int sipQFile::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QFile::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QFile,_c,_id,_a);

    return _id;
}

void *sipQFile::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QFile, _clname)) ? this : QFile::qt_metacast(_clname);
}

void sipQFile::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QFile::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFile::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QFile::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFile::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QFile::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFile::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QFile::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFile::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QFile::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQFile::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QFile::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQFile::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QFile::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQFile::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QFile::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQFile::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QFile::waitForReadyRead(a0);

    extern bool sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQFile::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QFile::canReadLine();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQFile::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QFile::bytesToWrite();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQFile::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QFile::bytesAvailable();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQFile::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QFile::reset();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQFile::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QFile::writeData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtCore_20(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQFile::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QFile::readLineData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return sipVH_QtCore_21(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQFile::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QFile::readData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return sipVH_QtCore_21(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QAbstractFileEngine* sipQFile::fileEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_fileEngine);

    if (!sipMeth)
        return QFile::fileEngine();

    extern QAbstractFileEngine* sipVH_QtCore_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQFile::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QFile::atEnd();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQFile::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QFile::seek(a0);

    extern bool sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return sipVH_QtCore_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQFile::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QFile::pos();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQFile::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QFile::size();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQFile::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QFile::close();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_11(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQFile::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QFile::open(a0);

    extern bool sipVH_QtCore_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return sipVH_QtCore_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQFile::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QFile::isSequential();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QFile_error, "QFile.error() -> QFile.FileError");

extern "C" {static PyObject *meth_QFile_error(PyObject *, PyObject *);}
static PyObject *meth_QFile_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            QFile::FileError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFile_FileError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_error, doc_QFile_error);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_unsetError, "QFile.unsetError()");

extern "C" {static PyObject *meth_QFile_unsetError(PyObject *, PyObject *);}
static PyObject *meth_QFile_unsetError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->unsetError();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_unsetError, doc_QFile_unsetError);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_fileName, "QFile.fileName() -> QString");

extern "C" {static PyObject *meth_QFile_fileName(PyObject *, PyObject *);}
static PyObject *meth_QFile_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_fileName, doc_QFile_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_setFileName, "QFile.setFileName(QString)");

extern "C" {static PyObject *meth_QFile_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QFile_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFileName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_setFileName, doc_QFile_setFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_encodeName, "QFile.encodeName(QString) -> QByteArray");

extern "C" {static PyObject *meth_QFile_encodeName(PyObject *, PyObject *);}
static PyObject *meth_QFile_encodeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QFile::encodeName(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_encodeName, doc_QFile_encodeName);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_decodeName, "QFile.decodeName(QByteArray) -> QString\n"
    "QFile.decodeName(str) -> QString");

extern "C" {static PyObject *meth_QFile_decodeName(PyObject *, PyObject *);}
static PyObject *meth_QFile_decodeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QFile::decodeName(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QFile::decodeName(a0));
            Py_END_ALLOW_THREADS
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_decodeName, doc_QFile_decodeName);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_exists, "QFile.exists() -> bool\n"
    "QFile.exists(QString) -> bool");

extern "C" {static PyObject *meth_QFile_exists(PyObject *, PyObject *);}
static PyObject *meth_QFile_exists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exists();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QFile::exists(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_exists, doc_QFile_exists);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_readLink, "QFile.readLink() -> QString\n"
    "QFile.readLink(QString) -> QString");

extern "C" {static PyObject *meth_QFile_readLink(PyObject *, PyObject *);}
static PyObject *meth_QFile_readLink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->readLink());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QFile::readLink(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_readLink, doc_QFile_readLink);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_remove, "QFile.remove() -> bool\n"
    "QFile.remove(QString) -> bool");

extern "C" {static PyObject *meth_QFile_remove(PyObject *, PyObject *);}
static PyObject *meth_QFile_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remove();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QFile::remove(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_remove, doc_QFile_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_rename, "QFile.rename(QString) -> bool\n"
    "QFile.rename(QString, QString) -> bool");

extern "C" {static PyObject *meth_QFile_rename(PyObject *, PyObject *);}
static PyObject *meth_QFile_rename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rename(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QFile::rename(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_rename, doc_QFile_rename);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_link, "QFile.link(QString) -> bool\n"
    "QFile.link(QString, QString) -> bool");

extern "C" {static PyObject *meth_QFile_link(PyObject *, PyObject *);}
static PyObject *meth_QFile_link(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->link(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QFile::link(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_link, doc_QFile_link);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_copy, "QFile.copy(QString) -> bool\n"
    "QFile.copy(QString, QString) -> bool");

extern "C" {static PyObject *meth_QFile_copy(PyObject *, PyObject *);}
static PyObject *meth_QFile_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->copy(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QFile::copy(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_copy, doc_QFile_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_isSequential, "QFile.isSequential() -> bool");

extern "C" {static PyObject *meth_QFile_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QFile_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFile::isSequential() : sipCpp->isSequential());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_isSequential, doc_QFile_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_open, "QFile.open(QIODevice.OpenMode) -> bool\n"
    "QFile.open(int, QIODevice.OpenMode) -> bool\n"
    "QFile.open(int, QIODevice.OpenMode, QFile.FileHandleFlags) -> bool");

extern "C" {static PyObject *meth_QFile_open(PyObject *, PyObject *);}
static PyObject *meth_QFile_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice::OpenMode* a0;
        int a0State = 0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFile::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        QIODevice::OpenMode* a1;
        int a1State = 0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QFile, &sipCpp, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        QIODevice::OpenMode* a1;
        int a1State = 0;
        QFile::FileHandleFlags* a2;
        int a2State = 0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J1", &sipSelf, sipType_QFile, &sipCpp, &a0, sipType_QIODevice_OpenMode, &a1, &a1State, sipType_QFile_FileHandleFlags, &a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);
            sipReleaseType(a2,sipType_QFile_FileHandleFlags,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_open, doc_QFile_open);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_close, "QFile.close()");

extern "C" {static PyObject *meth_QFile_close(PyObject *, PyObject *);}
static PyObject *meth_QFile_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QFile::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_close, doc_QFile_close);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_size, "QFile.size() -> int");

extern "C" {static PyObject *meth_QFile_size(PyObject *, PyObject *);}
static PyObject *meth_QFile_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFile::size() : sipCpp->size());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_size, doc_QFile_size);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_pos, "QFile.pos() -> int");

extern "C" {static PyObject *meth_QFile_pos(PyObject *, PyObject *);}
static PyObject *meth_QFile_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFile::pos() : sipCpp->pos());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_pos, doc_QFile_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_seek, "QFile.seek(int) -> bool");

extern "C" {static PyObject *meth_QFile_seek(PyObject *, PyObject *);}
static PyObject *meth_QFile_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QFile, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFile::seek(a0) : sipCpp->seek(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_seek, doc_QFile_seek);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_atEnd, "QFile.atEnd() -> bool");

extern "C" {static PyObject *meth_QFile_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QFile_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFile::atEnd() : sipCpp->atEnd());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_atEnd, doc_QFile_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_flush, "QFile.flush() -> bool");

extern "C" {static PyObject *meth_QFile_flush(PyObject *, PyObject *);}
static PyObject *meth_QFile_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flush();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_flush, doc_QFile_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_resize, "QFile.resize(int) -> bool\n"
    "QFile.resize(QString, int) -> bool");

extern "C" {static PyObject *meth_QFile_resize(PyObject *, PyObject *);}
static PyObject *meth_QFile_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QFile, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resize(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        qint64 a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1n", sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QFile::resize(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_resize, doc_QFile_resize);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_permissions, "QFile.permissions() -> QFile.Permissions\n"
    "QFile.permissions(QString) -> QFile.Permissions");

extern "C" {static PyObject *meth_QFile_permissions(PyObject *, PyObject *);}
static PyObject *meth_QFile_permissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            QFile::Permissions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFile::Permissions(sipCpp->permissions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFile_Permissions,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QFile::Permissions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFile::Permissions(QFile::permissions(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QFile_Permissions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_permissions, doc_QFile_permissions);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_setPermissions, "QFile.setPermissions(QFile.Permissions) -> bool\n"
    "QFile.setPermissions(QString, QFile.Permissions) -> bool");

extern "C" {static PyObject *meth_QFile_setPermissions(PyObject *, PyObject *);}
static PyObject *meth_QFile_setPermissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFile::Permissions* a0;
        int a0State = 0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QFile_Permissions, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setPermissions(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QFile_Permissions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QFile::Permissions* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QFile_Permissions, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QFile::setPermissions(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QFile_Permissions,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_setPermissions, doc_QFile_setPermissions);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_handle, "QFile.handle() -> int");

extern "C" {static PyObject *meth_QFile_handle(PyObject *, PyObject *);}
static PyObject *meth_QFile_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->handle();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_handle, doc_QFile_handle);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_fileEngine, "QFile.fileEngine() -> QAbstractFileEngine");

extern "C" {static PyObject *meth_QFile_fileEngine(PyObject *, PyObject *);}
static PyObject *meth_QFile_fileEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            QAbstractFileEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFile::fileEngine() : sipCpp->fileEngine());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractFileEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_fileEngine, doc_QFile_fileEngine);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_symLinkTarget, "QFile.symLinkTarget() -> QString\n"
    "QFile.symLinkTarget(QString) -> QString");

extern "C" {static PyObject *meth_QFile_symLinkTarget(PyObject *, PyObject *);}
static PyObject *meth_QFile_symLinkTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->symLinkTarget());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QFile::symLinkTarget(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_symLinkTarget, doc_QFile_symLinkTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_map, "QFile.map(int, int, QFile.MemoryMapFlags flags=QFile.NoOptions) -> sip.voidptr");

extern "C" {static PyObject *meth_QFile_map(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFile_map(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        qint64 a1;
        QFile::MemoryMapFlags a2 = QFile::NoOptions;
        QFile *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bnn|E", &sipSelf, sipType_QFile, &sipCpp, &a0, &a1, sipType_QFile_MemoryMapFlags, &a2))
        {
            void*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->map(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtrAndSize(sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_map, doc_QFile_map);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_unmap, "QFile.unmap(sip.voidptr) -> bool");

extern "C" {static PyObject *meth_QFile_unmap(PyObject *, PyObject *);}
static PyObject *meth_QFile_unmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        void* a0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_QFile, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unmap(reinterpret_cast<uchar *>(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_unmap, doc_QFile_unmap);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_readData, "QFile.readData(int) -> str");

extern "C" {static PyObject *meth_QFile_readData(PyObject *, PyObject *);}
static PyObject *meth_QFile_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QFile, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 205 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qfile.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QFile::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1723 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_readData, doc_QFile_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_readLineData, "QFile.readLineData(int) -> str");

extern "C" {static PyObject *meth_QFile_readLineData(PyObject *, PyObject *);}
static PyObject *meth_QFile_readLineData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QFile, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 243 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qfile.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QFile::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1791 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQFile.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_readLineData, doc_QFile_readLineData);

    return NULL;
}


PyDoc_STRVAR(doc_QFile_writeData, "QFile.writeData(str) -> int");

extern "C" {static PyObject *meth_QFile_writeData(PyObject *, PyObject *);}
static PyObject *meth_QFile_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QFile, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFile::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_writeData, doc_QFile_writeData);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFile(void *, const sipTypeDef *);}
static void *cast_QFile(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QFile)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QIODevice)->ctd_cast((QIODevice *)(QFile *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFile(void *, int);}
static void release_QFile(void *sipCppV,int)
{
    QFile *sipCpp = reinterpret_cast<QFile *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QFile(sipSimpleWrapper *);}
static void dealloc_QFile(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQFile *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QFile(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QFile(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFile(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFile *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQFile();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQFile(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQFile(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQFile(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFile[] = {{81, 255, 1}};


static PyMethodDef methods_QFile[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QFile_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_atEnd)},
    {SIP_MLNAME_CAST(sipName_close), meth_QFile_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_close)},
    {SIP_MLNAME_CAST(sipName_copy), meth_QFile_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_copy)},
    {SIP_MLNAME_CAST(sipName_decodeName), meth_QFile_decodeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_decodeName)},
    {SIP_MLNAME_CAST(sipName_encodeName), meth_QFile_encodeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_encodeName)},
    {SIP_MLNAME_CAST(sipName_error), meth_QFile_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_error)},
    {SIP_MLNAME_CAST(sipName_exists), meth_QFile_exists, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_exists)},
    {SIP_MLNAME_CAST(sipName_fileEngine), meth_QFile_fileEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_fileEngine)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QFile_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_fileName)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QFile_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_flush)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QFile_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_handle)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QFile_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_isSequential)},
    {SIP_MLNAME_CAST(sipName_link), meth_QFile_link, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_link)},
    {SIP_MLNAME_CAST(sipName_map), (PyCFunction)meth_QFile_map, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFile_map)},
    {SIP_MLNAME_CAST(sipName_open), meth_QFile_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_open)},
    {SIP_MLNAME_CAST(sipName_permissions), meth_QFile_permissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_permissions)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QFile_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_pos)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QFile_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_readData)},
    {SIP_MLNAME_CAST(sipName_readLineData), meth_QFile_readLineData, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_readLineData)},
    {SIP_MLNAME_CAST(sipName_readLink), meth_QFile_readLink, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_readLink)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QFile_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_remove)},
    {SIP_MLNAME_CAST(sipName_rename), meth_QFile_rename, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_rename)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QFile_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_resize)},
    {SIP_MLNAME_CAST(sipName_seek), meth_QFile_seek, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_seek)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QFile_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_setFileName)},
    {SIP_MLNAME_CAST(sipName_setPermissions), meth_QFile_setPermissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_setPermissions)},
    {SIP_MLNAME_CAST(sipName_size), meth_QFile_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_size)},
    {SIP_MLNAME_CAST(sipName_symLinkTarget), meth_QFile_symLinkTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_symLinkTarget)},
    {SIP_MLNAME_CAST(sipName_unmap), meth_QFile_unmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_unmap)},
    {SIP_MLNAME_CAST(sipName_unsetError), meth_QFile_unsetError, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_unsetError)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QFile_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_writeData)}
};

static sipEnumMemberDef enummembers_QFile[] = {
    {sipName_AbortError, static_cast<int>(QFile::AbortError), 66},
    {sipName_AutoCloseHandle, static_cast<int>(QFile::AutoCloseHandle), 67},
    {sipName_CopyError, static_cast<int>(QFile::CopyError), 66},
    {sipName_DontCloseHandle, static_cast<int>(QFile::DontCloseHandle), 67},
    {sipName_ExeGroup, static_cast<int>(QFile::ExeGroup), 70},
    {sipName_ExeOther, static_cast<int>(QFile::ExeOther), 70},
    {sipName_ExeOwner, static_cast<int>(QFile::ExeOwner), 70},
    {sipName_ExeUser, static_cast<int>(QFile::ExeUser), 70},
    {sipName_FatalError, static_cast<int>(QFile::FatalError), 66},
    {sipName_NoError, static_cast<int>(QFile::NoError), 66},
    {sipName_NoOptions, static_cast<int>(QFile::NoOptions), 69},
    {sipName_OpenError, static_cast<int>(QFile::OpenError), 66},
    {sipName_PermissionsError, static_cast<int>(QFile::PermissionsError), 66},
    {sipName_PositionError, static_cast<int>(QFile::PositionError), 66},
    {sipName_ReadError, static_cast<int>(QFile::ReadError), 66},
    {sipName_ReadGroup, static_cast<int>(QFile::ReadGroup), 70},
    {sipName_ReadOther, static_cast<int>(QFile::ReadOther), 70},
    {sipName_ReadOwner, static_cast<int>(QFile::ReadOwner), 70},
    {sipName_ReadUser, static_cast<int>(QFile::ReadUser), 70},
    {sipName_RemoveError, static_cast<int>(QFile::RemoveError), 66},
    {sipName_RenameError, static_cast<int>(QFile::RenameError), 66},
    {sipName_ResizeError, static_cast<int>(QFile::ResizeError), 66},
    {sipName_ResourceError, static_cast<int>(QFile::ResourceError), 66},
    {sipName_TimeOutError, static_cast<int>(QFile::TimeOutError), 66},
    {sipName_UnspecifiedError, static_cast<int>(QFile::UnspecifiedError), 66},
    {sipName_WriteError, static_cast<int>(QFile::WriteError), 66},
    {sipName_WriteGroup, static_cast<int>(QFile::WriteGroup), 70},
    {sipName_WriteOther, static_cast<int>(QFile::WriteOther), 70},
    {sipName_WriteOwner, static_cast<int>(QFile::WriteOwner), 70},
    {sipName_WriteUser, static_cast<int>(QFile::WriteUser), 70},
};

PyDoc_STRVAR(doc_QFile, "\1QFile()\n"
    "QFile(QString)\n"
    "QFile(QObject)\n"
    "QFile(QString, QObject)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QFile = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QFile,
        {0}
    },
    {
        sipNameNr_QFile,
        {0, 0, 1},
        31, methods_QFile,
        30, enummembers_QFile,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QFile,
    -1,
    -1,
    supers_QFile,
    0,
    init_type_QFile,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFile,
    0,
    0,
    0,
    release_QFile,
    cast_QFile,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QFile::staticMetaObject,
    0,
    0
};
