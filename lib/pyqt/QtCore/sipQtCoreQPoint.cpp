/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPoint.cpp"



PyDoc_STRVAR(doc_QPoint_manhattanLength, "QPoint.manhattanLength() -> int");

extern "C" {static PyObject *meth_QPoint_manhattanLength(PyObject *, PyObject *);}
static PyObject *meth_QPoint_manhattanLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPoint, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->manhattanLength();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_manhattanLength, doc_QPoint_manhattanLength);

    return NULL;
}


PyDoc_STRVAR(doc_QPoint_isNull, "QPoint.isNull() -> bool");

extern "C" {static PyObject *meth_QPoint_isNull(PyObject *, PyObject *);}
static PyObject *meth_QPoint_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPoint, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_isNull, doc_QPoint_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QPoint_x, "QPoint.x() -> int");

extern "C" {static PyObject *meth_QPoint_x(PyObject *, PyObject *);}
static PyObject *meth_QPoint_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPoint, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_x, doc_QPoint_x);

    return NULL;
}


PyDoc_STRVAR(doc_QPoint_y, "QPoint.y() -> int");

extern "C" {static PyObject *meth_QPoint_y(PyObject *, PyObject *);}
static PyObject *meth_QPoint_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPoint, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->y();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_y, doc_QPoint_y);

    return NULL;
}


PyDoc_STRVAR(doc_QPoint_setX, "QPoint.setX(int)");

extern "C" {static PyObject *meth_QPoint_setX(PyObject *, PyObject *);}
static PyObject *meth_QPoint_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPoint, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setX(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_setX, doc_QPoint_setX);

    return NULL;
}


PyDoc_STRVAR(doc_QPoint_setY, "QPoint.setY(int)");

extern "C" {static PyObject *meth_QPoint_setY(PyObject *, PyObject *);}
static PyObject *meth_QPoint_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPoint, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setY(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_setY, doc_QPoint_setY);

    return NULL;
}


extern "C" {static PyObject *slot_QPoint___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPoint *sipCpp = reinterpret_cast<QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QPoint,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPoint___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPoint *sipCpp = reinterpret_cast<QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QPoint,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPoint___add__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint((*a0 + *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPoint___sub__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint((*a0 - *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPoint___mul__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9Xi", sipType_QPoint, &a0, &a1))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint((*a0 * a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        int a0;
        const QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "XiJ9", &a0, sipType_QPoint, &a1))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint((a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        const QPoint* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QPoint, &a0, &a1))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint((*a0 * a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        double a0;
        const QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_QPoint, &a1))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint((a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPoint___neg__(PyObject *);}
static PyObject *slot_QPoint___neg__(PyObject *sipSelf)
{
    QPoint *sipCpp = reinterpret_cast<QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return 0;


    {
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(-(*sipCpp));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPoint___div__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QPoint, &a0, &a1))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint((*a0 / a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPoint___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPoint)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QPoint *sipCpp = reinterpret_cast<QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QPoint::operator/=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPoint___imul__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPoint)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QPoint *sipCpp = reinterpret_cast<QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1Xi", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QPoint::operator*=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QPoint::operator*=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPoint___isub__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPoint)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QPoint *sipCpp = reinterpret_cast<QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QPoint::operator-=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPoint___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPoint)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QPoint *sipCpp = reinterpret_cast<QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QPoint::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QPoint___bool__(PyObject *);}
static int slot_QPoint___bool__(PyObject *sipSelf)
{
    QPoint *sipCpp = reinterpret_cast<QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
        sipRes = !sipCpp->isNull();
#line 670 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPoint.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPoint___repr__(PyObject *);}
static PyObject *slot_QPoint___repr__(PyObject *sipSelf)
{
    QPoint *sipCpp = reinterpret_cast<QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 48 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt4.QtCore.QPoint()");
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QPoint()");
        #endif
        }
        else
        {
            sipRes =
        #if PY_MAJOR_VERSION >= 3
                PyUnicode_FromFormat
        #else
                PyString_FromFormat
        #endif
                    ("PyQt4.QtCore.QPoint(%i, %i)", sipCpp->x(), sipCpp->y());
        }
#line 712 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPoint.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPoint(void *, const sipTypeDef *);}
static void *cast_QPoint(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPoint)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPoint(void *, int);}
static void release_QPoint(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QPoint *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QPoint(void *);}
static PyObject *pickle_QPoint(void *sipCppV)
{
    QPoint *sipCpp = reinterpret_cast<QPoint *>(sipCppV);
    PyObject *sipRes;

#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
    sipRes = Py_BuildValue((char *)"ii", sipCpp->x(), sipCpp->y());
#line 753 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPoint.cpp"

    return sipRes;
}


extern "C" {static void assign_QPoint(void *, SIP_SSIZE_T, const void *);}
static void assign_QPoint(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPoint *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPoint *>(sipSrc);
}


extern "C" {static void *array_QPoint(SIP_SSIZE_T);}
static void *array_QPoint(SIP_SSIZE_T sipNrElem)
{
    return new QPoint[sipNrElem];
}


extern "C" {static void *copy_QPoint(const void *, SIP_SSIZE_T);}
static void *copy_QPoint(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPoint(reinterpret_cast<const QPoint *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPoint(sipSimpleWrapper *);}
static void dealloc_QPoint(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPoint(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPoint(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPoint(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPoint *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPoint();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "ii", &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPoint(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QPoint* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPoint(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPoint[] = {
    {(void *)slot_QPoint___eq__, eq_slot},
    {(void *)slot_QPoint___ne__, ne_slot},
    {(void *)slot_QPoint___add__, add_slot},
    {(void *)slot_QPoint___sub__, sub_slot},
    {(void *)slot_QPoint___mul__, mul_slot},
    {(void *)slot_QPoint___neg__, neg_slot},
    {(void *)slot_QPoint___div__, div_slot},
    {(void *)slot_QPoint___idiv__, idiv_slot},
    {(void *)slot_QPoint___imul__, imul_slot},
    {(void *)slot_QPoint___isub__, isub_slot},
    {(void *)slot_QPoint___iadd__, iadd_slot},
    {(void *)slot_QPoint___bool__, bool_slot},
    {(void *)slot_QPoint___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPoint[] = {
    {SIP_MLNAME_CAST(sipName_isNull), meth_QPoint_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_isNull)},
    {SIP_MLNAME_CAST(sipName_manhattanLength), meth_QPoint_manhattanLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_manhattanLength)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QPoint_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QPoint_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_setY)},
    {SIP_MLNAME_CAST(sipName_x), meth_QPoint_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QPoint_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_y)}
};

PyDoc_STRVAR(doc_QPoint, "\1QPoint()\n"
    "QPoint(int, int)\n"
    "QPoint(QPoint)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QPoint = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QPoint,
        {0}
    },
    {
        sipNameNr_QPoint,
        {0, 0, 1},
        6, methods_QPoint,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPoint,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPoint,
    init_type_QPoint,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPoint,
    assign_QPoint,
    array_QPoint,
    copy_QPoint,
    release_QPoint,
    cast_QPoint,
    0,
    0,
    0,
    pickle_QPoint,
    0,
    0
},
    0,
    0,
    0
};
