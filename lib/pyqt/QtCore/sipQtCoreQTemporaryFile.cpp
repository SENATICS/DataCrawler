/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qtemporaryfile.sip"
#include <qtemporaryfile.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractfileengine.sip"
#include <qabstractfileengine.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 84 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 84 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTemporaryFile.cpp"


class sipQTemporaryFile : public QTemporaryFile
{
public:
    sipQTemporaryFile();
    sipQTemporaryFile(const QString&);
    sipQTemporaryFile(QObject*);
    sipQTemporaryFile(const QString&,QObject*);
    virtual ~sipQTemporaryFile();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;
    bool reset();
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readLineData(char*,qint64);
    qint64 readData(char*,qint64);
    bool atEnd() const;
    bool seek(qint64);
    qint64 pos() const;
    qint64 size() const;
    void close();
    bool isSequential() const;
    bool open(QIODevice::OpenMode);
    QAbstractFileEngine* fileEngine() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTemporaryFile(const sipQTemporaryFile &);
    sipQTemporaryFile &operator = (const sipQTemporaryFile &);

    char sipPyMethods[24];
};

sipQTemporaryFile::sipQTemporaryFile(): QTemporaryFile(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTemporaryFile::sipQTemporaryFile(const QString& a0): QTemporaryFile(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTemporaryFile::sipQTemporaryFile(QObject*a0): QTemporaryFile(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTemporaryFile::sipQTemporaryFile(const QString& a0,QObject*a1): QTemporaryFile(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTemporaryFile::~sipQTemporaryFile()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTemporaryFile::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QTemporaryFile);
}

int sipQTemporaryFile::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTemporaryFile::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QTemporaryFile,_c,_id,_a);

    return _id;
}

void *sipQTemporaryFile::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QTemporaryFile, _clname)) ? this : QTemporaryFile::qt_metacast(_clname);
}

void sipQTemporaryFile::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTemporaryFile::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTemporaryFile::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTemporaryFile::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTemporaryFile::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTemporaryFile::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTemporaryFile::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTemporaryFile::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTemporaryFile::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTemporaryFile::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTemporaryFile::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTemporaryFile::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTemporaryFile::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTemporaryFile::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTemporaryFile::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QTemporaryFile::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTemporaryFile::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QTemporaryFile::waitForReadyRead(a0);

    extern bool sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTemporaryFile::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QTemporaryFile::canReadLine();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQTemporaryFile::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QTemporaryFile::bytesToWrite();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQTemporaryFile::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QTemporaryFile::bytesAvailable();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTemporaryFile::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QTemporaryFile::reset();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQTemporaryFile::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QTemporaryFile::writeData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtCore_20(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQTemporaryFile::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QTemporaryFile::readLineData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return sipVH_QtCore_21(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQTemporaryFile::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QTemporaryFile::readData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return sipVH_QtCore_21(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTemporaryFile::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QTemporaryFile::atEnd();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTemporaryFile::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QTemporaryFile::seek(a0);

    extern bool sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return sipVH_QtCore_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQTemporaryFile::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QTemporaryFile::pos();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQTemporaryFile::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QTemporaryFile::size();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTemporaryFile::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QTemporaryFile::close();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_11(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTemporaryFile::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QTemporaryFile::isSequential();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTemporaryFile::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QTemporaryFile::open(a0);

    extern bool sipVH_QtCore_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return sipVH_QtCore_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QAbstractFileEngine* sipQTemporaryFile::fileEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_fileEngine);

    if (!sipMeth)
        return QTemporaryFile::fileEngine();

    extern QAbstractFileEngine* sipVH_QtCore_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_16(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QTemporaryFile_autoRemove, "QTemporaryFile.autoRemove() -> bool");

extern "C" {static PyObject *meth_QTemporaryFile_autoRemove(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_autoRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoRemove();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_autoRemove, doc_QTemporaryFile_autoRemove);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryFile_setAutoRemove, "QTemporaryFile.setAutoRemove(bool)");

extern "C" {static PyObject *meth_QTemporaryFile_setAutoRemove(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_setAutoRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTemporaryFile, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoRemove(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_setAutoRemove, doc_QTemporaryFile_setAutoRemove);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryFile_open, "QTemporaryFile.open() -> bool\n"
    "QTemporaryFile.open(QIODevice.OpenMode) -> bool");

extern "C" {static PyObject *meth_QTemporaryFile_open(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QIODevice::OpenMode* a0;
        int a0State = 0;
        QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QTemporaryFile, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTemporaryFile::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_open, doc_QTemporaryFile_open);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryFile_fileName, "QTemporaryFile.fileName() -> QString");

extern "C" {static PyObject *meth_QTemporaryFile_fileName(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryFile, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_fileName, doc_QTemporaryFile_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryFile_fileTemplate, "QTemporaryFile.fileTemplate() -> QString");

extern "C" {static PyObject *meth_QTemporaryFile_fileTemplate(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_fileTemplate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryFile, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileTemplate());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_fileTemplate, doc_QTemporaryFile_fileTemplate);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryFile_setFileTemplate, "QTemporaryFile.setFileTemplate(QString)");

extern "C" {static PyObject *meth_QTemporaryFile_setFileTemplate(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_setFileTemplate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTemporaryFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFileTemplate(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_setFileTemplate, doc_QTemporaryFile_setFileTemplate);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryFile_createLocalFile, "QTemporaryFile.createLocalFile(QString) -> QTemporaryFile\n"
    "QTemporaryFile.createLocalFile(QFile) -> QTemporaryFile");

extern "C" {static PyObject *meth_QTemporaryFile_createLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_createLocalFile(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QTemporaryFile*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QTemporaryFile::createLocalFile(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTemporaryFile,NULL);
        }
    }

    {
        QFile* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QFile, &a0))
        {
            QTemporaryFile*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QTemporaryFile::createLocalFile(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTemporaryFile,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_createLocalFile, doc_QTemporaryFile_createLocalFile);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryFile_fileEngine, "QTemporaryFile.fileEngine() -> QAbstractFileEngine");

extern "C" {static PyObject *meth_QTemporaryFile_fileEngine(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_fileEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryFile, &sipCpp))
        {
            QAbstractFileEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTemporaryFile::fileEngine() : sipCpp->fileEngine());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractFileEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_fileEngine, doc_QTemporaryFile_fileEngine);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTemporaryFile(void *, const sipTypeDef *);}
static void *cast_QTemporaryFile(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTemporaryFile)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QFile)->ctd_cast((QFile *)(QTemporaryFile *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTemporaryFile(void *, int);}
static void release_QTemporaryFile(void *sipCppV,int)
{
    QTemporaryFile *sipCpp = reinterpret_cast<QTemporaryFile *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTemporaryFile(sipSimpleWrapper *);}
static void dealloc_QTemporaryFile(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTemporaryFile *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTemporaryFile(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTemporaryFile(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTemporaryFile(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTemporaryFile *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTemporaryFile();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTemporaryFile(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTemporaryFile(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTemporaryFile(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTemporaryFile[] = {{65, 255, 1}};


static PyMethodDef methods_QTemporaryFile[] = {
    {SIP_MLNAME_CAST(sipName_autoRemove), meth_QTemporaryFile_autoRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_autoRemove)},
    {SIP_MLNAME_CAST(sipName_createLocalFile), meth_QTemporaryFile_createLocalFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_createLocalFile)},
    {SIP_MLNAME_CAST(sipName_fileEngine), meth_QTemporaryFile_fileEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_fileEngine)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QTemporaryFile_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_fileName)},
    {SIP_MLNAME_CAST(sipName_fileTemplate), meth_QTemporaryFile_fileTemplate, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_fileTemplate)},
    {SIP_MLNAME_CAST(sipName_open), meth_QTemporaryFile_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_open)},
    {SIP_MLNAME_CAST(sipName_setAutoRemove), meth_QTemporaryFile_setAutoRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_setAutoRemove)},
    {SIP_MLNAME_CAST(sipName_setFileTemplate), meth_QTemporaryFile_setFileTemplate, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_setFileTemplate)}
};

PyDoc_STRVAR(doc_QTemporaryFile, "\1QTemporaryFile()\n"
    "QTemporaryFile(QString)\n"
    "QTemporaryFile(QObject)\n"
    "QTemporaryFile(QString, QObject)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QTemporaryFile = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTemporaryFile,
        {0}
    },
    {
        sipNameNr_QTemporaryFile,
        {0, 0, 1},
        8, methods_QTemporaryFile,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTemporaryFile,
    -1,
    -1,
    supers_QTemporaryFile,
    0,
    init_type_QTemporaryFile,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTemporaryFile,
    0,
    0,
    0,
    release_QTemporaryFile,
    cast_QTemporaryFile,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTemporaryFile::staticMetaObject,
    0,
    0
};
