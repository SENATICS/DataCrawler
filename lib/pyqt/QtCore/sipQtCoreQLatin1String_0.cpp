/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 718 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLatin1String_0.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLatin1String_0.cpp"
#line 808 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLatin1String_0.cpp"


PyDoc_STRVAR(doc_QLatin1String_0_latin1, "QLatin1String.latin1() -> str");

extern "C" {static PyObject *meth_QLatin1String_0_latin1(PyObject *, PyObject *);}
static PyObject *meth_QLatin1String_0_latin1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLatin1String *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLatin1String, &sipCpp))
        {
            const char*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->latin1();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLatin1String, sipName_latin1, doc_QLatin1String_0_latin1);

    return NULL;
}


extern "C" {static PyObject *slot_QLatin1String_0___le__(PyObject *,PyObject *);}
static PyObject *slot_QLatin1String_0___le__(PyObject *sipSelf,PyObject *sipArg)
{
    QLatin1String *sipCpp = reinterpret_cast<QLatin1String *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLatin1String));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLatin1String::operator<=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator<=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,le_slot,sipType_QLatin1String,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLatin1String_0___ge__(PyObject *,PyObject *);}
static PyObject *slot_QLatin1String_0___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QLatin1String *sipCpp = reinterpret_cast<QLatin1String *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLatin1String));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLatin1String::operator>=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator>=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ge_slot,sipType_QLatin1String,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLatin1String_0___lt__(PyObject *,PyObject *);}
static PyObject *slot_QLatin1String_0___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QLatin1String *sipCpp = reinterpret_cast<QLatin1String *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLatin1String));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLatin1String::operator<(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator<((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,lt_slot,sipType_QLatin1String,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLatin1String_0___gt__(PyObject *,PyObject *);}
static PyObject *slot_QLatin1String_0___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    QLatin1String *sipCpp = reinterpret_cast<QLatin1String *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLatin1String));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLatin1String::operator>(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator>((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,gt_slot,sipType_QLatin1String,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLatin1String_0___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLatin1String_0___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QLatin1String *sipCpp = reinterpret_cast<QLatin1String *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLatin1String));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLatin1String::operator!=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStringRef,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QLatin1String,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLatin1String_0___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLatin1String_0___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QLatin1String *sipCpp = reinterpret_cast<QLatin1String *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLatin1String));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLatin1String::operator==(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStringRef,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QLatin1String,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLatin1String_0___repr__(PyObject *);}
static PyObject *slot_QLatin1String_0___repr__(PyObject *sipSelf)
{
    QLatin1String *sipCpp = reinterpret_cast<QLatin1String *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLatin1String));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 729 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        PyObject *str = SIPBytes_FromString(sipCpp->latin1());
        
        if (str)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QLatin1String(%R)", str);
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QLatin1String(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(str));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(str);
        }
#line 447 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLatin1String_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QLatin1String_0(void *, const sipTypeDef *);}
static void *cast_QLatin1String_0(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QLatin1String)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLatin1String_0(void *, int);}
static void release_QLatin1String_0(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QLatin1String *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QLatin1String(void *);}
static PyObject *pickle_QLatin1String(void *sipCppV)
{
    QLatin1String *sipCpp = reinterpret_cast<QLatin1String *>(sipCppV);
    PyObject *sipRes;

#line 722 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
    sipRes = Py_BuildValue((char *)"(s)", sipCpp->latin1());
#line 488 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLatin1String_0.cpp"

    return sipRes;
}


extern "C" {static void dealloc_QLatin1String_0(sipSimpleWrapper *);}
static void dealloc_QLatin1String_0(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QLatin1String_0(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QLatin1String_0(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLatin1String_0(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QLatin1String *sipCpp = 0;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "AL", &a0Keep, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLatin1String(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference((PyObject *)sipSelf, -6, a0Keep);
            Py_DECREF(a0Keep);

            return sipCpp;
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLatin1String, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLatin1String(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLatin1String_0[] = {
    {(void *)slot_QLatin1String_0___le__, le_slot},
    {(void *)slot_QLatin1String_0___ge__, ge_slot},
    {(void *)slot_QLatin1String_0___lt__, lt_slot},
    {(void *)slot_QLatin1String_0___gt__, gt_slot},
    {(void *)slot_QLatin1String_0___ne__, ne_slot},
    {(void *)slot_QLatin1String_0___eq__, eq_slot},
    {(void *)slot_QLatin1String_0___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLatin1String_0[] = {
    {SIP_MLNAME_CAST(sipName_latin1), meth_QLatin1String_0_latin1, METH_VARARGS, SIP_MLDOC_CAST(doc_QLatin1String_0_latin1)}
};

PyDoc_STRVAR(doc_QLatin1String_0, "\1QLatin1String(str)\n"
    "QLatin1String(QLatin1String)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QLatin1String_0 = {
{
    {
        0,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QLatin1String,
        {0}
    },
    {
        sipNameNr_QLatin1String,
        {0, 0, 1},
        1, methods_QLatin1String_0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLatin1String_0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QLatin1String_0,
    init_type_QLatin1String_0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLatin1String_0,
    0,
    0,
    0,
    release_QLatin1String_0,
    cast_QLatin1String_0,
    0,
    0,
    0,
    pickle_QLatin1String,
    0,
    0
},
    0,
    0,
    0
};
