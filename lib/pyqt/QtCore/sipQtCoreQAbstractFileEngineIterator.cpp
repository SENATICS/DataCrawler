/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 310 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractfileengine.sip"
#include <qabstractfileengine.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngineIterator.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngineIterator.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngineIterator.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngineIterator.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngineIterator.cpp"


class sipQAbstractFileEngineIterator : public QAbstractFileEngineIterator
{
public:
    sipQAbstractFileEngineIterator(QDir::Filters,const QStringList&);
    virtual ~sipQAbstractFileEngineIterator();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QFileInfo currentFileInfo() const;
    QString currentFileName() const;
    bool hasNext() const;
    QString next();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractFileEngineIterator(const sipQAbstractFileEngineIterator &);
    sipQAbstractFileEngineIterator &operator = (const sipQAbstractFileEngineIterator &);

    char sipPyMethods[4];
};

sipQAbstractFileEngineIterator::sipQAbstractFileEngineIterator(QDir::Filters a0,const QStringList& a1): QAbstractFileEngineIterator(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractFileEngineIterator::~sipQAbstractFileEngineIterator()
{
    sipCommonDtor(sipPySelf);
}

QFileInfo sipQAbstractFileEngineIterator::currentFileInfo() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_currentFileInfo);

    if (!sipMeth)
        return QAbstractFileEngineIterator::currentFileInfo();

    extern QFileInfo sipVH_QtCore_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_61(sipGILState, 0, sipPySelf, sipMeth);
}

QString sipQAbstractFileEngineIterator::currentFileName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QAbstractFileEngineIterator,sipName_currentFileName);

    if (!sipMeth)
        return QString();

    extern QString sipVH_QtCore_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_62(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractFileEngineIterator::hasNext() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QAbstractFileEngineIterator,sipName_hasNext);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

QString sipQAbstractFileEngineIterator::next()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QAbstractFileEngineIterator,sipName_next);

    if (!sipMeth)
        return QString();

    extern QString sipVH_QtCore_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_62(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QAbstractFileEngineIterator_next, "QAbstractFileEngineIterator.next() -> QString");

extern "C" {static PyObject *meth_QAbstractFileEngineIterator_next(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractFileEngineIterator, sipName_next);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->next());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_next, doc_QAbstractFileEngineIterator_next);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngineIterator_hasNext, "QAbstractFileEngineIterator.hasNext() -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngineIterator_hasNext(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_hasNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractFileEngineIterator, sipName_hasNext);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasNext();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_hasNext, doc_QAbstractFileEngineIterator_hasNext);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngineIterator_path, "QAbstractFileEngineIterator.path() -> QString");

extern "C" {static PyObject *meth_QAbstractFileEngineIterator_path(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->path());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_path, doc_QAbstractFileEngineIterator_path);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngineIterator_nameFilters, "QAbstractFileEngineIterator.nameFilters() -> QStringList");

extern "C" {static PyObject *meth_QAbstractFileEngineIterator_nameFilters(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_nameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->nameFilters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_nameFilters, doc_QAbstractFileEngineIterator_nameFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngineIterator_filters, "QAbstractFileEngineIterator.filters() -> QDir.Filters");

extern "C" {static PyObject *meth_QAbstractFileEngineIterator_filters(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_filters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QDir::Filters*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir::Filters(sipCpp->filters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_filters, doc_QAbstractFileEngineIterator_filters);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngineIterator_currentFileName, "QAbstractFileEngineIterator.currentFileName() -> QString");

extern "C" {static PyObject *meth_QAbstractFileEngineIterator_currentFileName(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_currentFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractFileEngineIterator, sipName_currentFileName);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->currentFileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_currentFileName, doc_QAbstractFileEngineIterator_currentFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngineIterator_currentFileInfo, "QAbstractFileEngineIterator.currentFileInfo() -> QFileInfo");

extern "C" {static PyObject *meth_QAbstractFileEngineIterator_currentFileInfo(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_currentFileInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QFileInfo*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFileInfo((sipSelfWasArg ? sipCpp->QAbstractFileEngineIterator::currentFileInfo() : sipCpp->currentFileInfo()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFileInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_currentFileInfo, doc_QAbstractFileEngineIterator_currentFileInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngineIterator_currentFilePath, "QAbstractFileEngineIterator.currentFilePath() -> QString");

extern "C" {static PyObject *meth_QAbstractFileEngineIterator_currentFilePath(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_currentFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->currentFilePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_currentFilePath, doc_QAbstractFileEngineIterator_currentFilePath);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractFileEngineIterator(void *, const sipTypeDef *);}
static void *cast_QAbstractFileEngineIterator(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QAbstractFileEngineIterator)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractFileEngineIterator(void *, int);}
static void release_QAbstractFileEngineIterator(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractFileEngineIterator *>(sipCppV);
    else
        delete reinterpret_cast<QAbstractFileEngineIterator *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractFileEngineIterator(sipSimpleWrapper *);}
static void dealloc_QAbstractFileEngineIterator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractFileEngineIterator *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractFileEngineIterator(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractFileEngineIterator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractFileEngineIterator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQAbstractFileEngineIterator *sipCpp = 0;

    {
        QDir::Filters* a0;
        int a0State = 0;
        const QStringList* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1", sipType_QDir_Filters, &a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractFileEngineIterator(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QAbstractFileEngineIterator[] = {
    {SIP_MLNAME_CAST(sipName_currentFileInfo), meth_QAbstractFileEngineIterator_currentFileInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngineIterator_currentFileInfo)},
    {SIP_MLNAME_CAST(sipName_currentFileName), meth_QAbstractFileEngineIterator_currentFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngineIterator_currentFileName)},
    {SIP_MLNAME_CAST(sipName_currentFilePath), meth_QAbstractFileEngineIterator_currentFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngineIterator_currentFilePath)},
    {SIP_MLNAME_CAST(sipName_filters), meth_QAbstractFileEngineIterator_filters, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngineIterator_filters)},
    {SIP_MLNAME_CAST(sipName_hasNext), meth_QAbstractFileEngineIterator_hasNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngineIterator_hasNext)},
    {SIP_MLNAME_CAST(sipName_nameFilters), meth_QAbstractFileEngineIterator_nameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngineIterator_nameFilters)},
    {SIP_MLNAME_CAST(sipName_next), meth_QAbstractFileEngineIterator_next, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngineIterator_next)},
    {SIP_MLNAME_CAST(sipName_path), meth_QAbstractFileEngineIterator_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngineIterator_path)}
};

PyDoc_STRVAR(doc_QAbstractFileEngineIterator, "\1QAbstractFileEngineIterator(QDir.Filters, QStringList)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QAbstractFileEngineIterator = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QAbstractFileEngineIterator,
        {0}
    },
    {
        sipNameNr_QAbstractFileEngineIterator,
        {0, 0, 1},
        8, methods_QAbstractFileEngineIterator,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractFileEngineIterator,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_QAbstractFileEngineIterator,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractFileEngineIterator,
    0,
    0,
    0,
    release_QAbstractFileEngineIterator,
    cast_QAbstractFileEngineIterator,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
