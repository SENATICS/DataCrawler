/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpropertyanimation.sip"
#include <qpropertyanimation.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 252 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 57 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 63 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 72 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 78 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 84 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQPropertyAnimation.cpp"


class sipQPropertyAnimation : public QPropertyAnimation
{
public:
    sipQPropertyAnimation(QObject*);
    sipQPropertyAnimation(QObject*,const QByteArray&,QObject*);
    virtual ~sipQPropertyAnimation();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void updateDirection(QAbstractAnimation::Direction);
    QVariant interpolated(const QVariant&,const QVariant&,qreal) const;
    void updateCurrentTime(int);
    int duration() const;
    void updateState(QAbstractAnimation::State,QAbstractAnimation::State);
    void updateCurrentValue(const QVariant&);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPropertyAnimation(const sipQPropertyAnimation &);
    sipQPropertyAnimation &operator = (const sipQPropertyAnimation &);

    char sipPyMethods[13];
};

sipQPropertyAnimation::sipQPropertyAnimation(QObject*a0): QPropertyAnimation(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPropertyAnimation::sipQPropertyAnimation(QObject*a0,const QByteArray& a1,QObject*a2): QPropertyAnimation(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPropertyAnimation::~sipQPropertyAnimation()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPropertyAnimation::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QPropertyAnimation);
}

int sipQPropertyAnimation::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QPropertyAnimation::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QPropertyAnimation,_c,_id,_a);

    return _id;
}

void *sipQPropertyAnimation::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QPropertyAnimation, _clname)) ? this : QPropertyAnimation::qt_metacast(_clname);
}

void sipQPropertyAnimation::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QPropertyAnimation::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QPropertyAnimation::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QPropertyAnimation::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QPropertyAnimation::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QPropertyAnimation::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQPropertyAnimation::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QPropertyAnimation::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQPropertyAnimation::updateDirection(QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_updateDirection);

    if (!sipMeth)
    {
        QPropertyAnimation::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractAnimation::Direction);

    sipVH_QtCore_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQPropertyAnimation::interpolated(const QVariant& a0,const QVariant& a1,qreal a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_interpolated);

    if (!sipMeth)
        return QPropertyAnimation::interpolated(a0,a1,a2);

    extern QVariant sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVariant&,const QVariant&,double);

    return sipVH_QtCore_1(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPropertyAnimation::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_updateCurrentTime);

    if (!sipMeth)
    {
        QPropertyAnimation::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQPropertyAnimation::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_duration);

    if (!sipMeth)
        return QPropertyAnimation::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQPropertyAnimation::updateState(QAbstractAnimation::State a0,QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_updateState);

    if (!sipMeth)
    {
        QPropertyAnimation::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractAnimation::State,QAbstractAnimation::State);

    sipVH_QtCore_3(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQPropertyAnimation::updateCurrentValue(const QVariant& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_updateCurrentValue);

    if (!sipMeth)
    {
        QPropertyAnimation::updateCurrentValue(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVariant&);

    sipVH_QtCore_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQPropertyAnimation::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QPropertyAnimation::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPropertyAnimation_targetObject, "QPropertyAnimation.targetObject() -> QObject");

extern "C" {static PyObject *meth_QPropertyAnimation_targetObject(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_targetObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPropertyAnimation, &sipCpp))
        {
            QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->targetObject();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_targetObject, doc_QPropertyAnimation_targetObject);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_setTargetObject, "QPropertyAnimation.setTargetObject(QObject)");

extern "C" {static PyObject *meth_QPropertyAnimation_setTargetObject(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_setTargetObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        PyObject *a0Keep;
        QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QPropertyAnimation, &sipCpp, &a0Keep, sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTargetObject(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 0, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_setTargetObject, doc_QPropertyAnimation_setTargetObject);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_propertyName, "QPropertyAnimation.propertyName() -> QByteArray");

extern "C" {static PyObject *meth_QPropertyAnimation_propertyName(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_propertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPropertyAnimation, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->propertyName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_propertyName, doc_QPropertyAnimation_propertyName);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_setPropertyName, "QPropertyAnimation.setPropertyName(QByteArray)");

extern "C" {static PyObject *meth_QPropertyAnimation_setPropertyName(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_setPropertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPropertyName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_setPropertyName, doc_QPropertyAnimation_setPropertyName);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_event, "QPropertyAnimation.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QPropertyAnimation_event(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPropertyAnimation::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_event, doc_QPropertyAnimation_event);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_updateCurrentValue, "QPropertyAnimation.updateCurrentValue(QVariant)");

extern "C" {static PyObject *meth_QPropertyAnimation_updateCurrentValue(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_updateCurrentValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVariant* a0;
        int a0State = 0;
        QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QVariant,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPropertyAnimation::updateCurrentValue(*a0) : sipCpp->updateCurrentValue(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_updateCurrentValue, doc_QPropertyAnimation_updateCurrentValue);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_updateState, "QPropertyAnimation.updateState(QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QPropertyAnimation_updateState(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractAnimation::State a0;
        QAbstractAnimation::State a1;
        QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEE", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPropertyAnimation::updateState(a0,a1) : sipCpp->updateState(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_updateState, doc_QPropertyAnimation_updateState);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPropertyAnimation(void *, const sipTypeDef *);}
static void *cast_QPropertyAnimation(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPropertyAnimation)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QVariantAnimation)->ctd_cast((QVariantAnimation *)(QPropertyAnimation *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPropertyAnimation(void *, int);}
static void release_QPropertyAnimation(void *sipCppV,int)
{
    QPropertyAnimation *sipCpp = reinterpret_cast<QPropertyAnimation *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPropertyAnimation(sipSimpleWrapper *);}
static void dealloc_QPropertyAnimation(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPropertyAnimation *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPropertyAnimation(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPropertyAnimation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPropertyAnimation(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPropertyAnimation *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPropertyAnimation(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0;
        PyObject *a0Keep;
        const QByteArray* a1;
        int a1State = 0;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8J1|JH", &a0Keep, sipType_QObject, &a0, sipType_QByteArray, &a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPropertyAnimation(a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipKeepReference((PyObject *)sipSelf, 0, a0Keep);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPropertyAnimation[] = {{251, 255, 1}};


static PyMethodDef methods_QPropertyAnimation[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QPropertyAnimation_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_event)},
    {SIP_MLNAME_CAST(sipName_propertyName), meth_QPropertyAnimation_propertyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_propertyName)},
    {SIP_MLNAME_CAST(sipName_setPropertyName), meth_QPropertyAnimation_setPropertyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_setPropertyName)},
    {SIP_MLNAME_CAST(sipName_setTargetObject), meth_QPropertyAnimation_setTargetObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_setTargetObject)},
    {SIP_MLNAME_CAST(sipName_targetObject), meth_QPropertyAnimation_targetObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_targetObject)},
    {SIP_MLNAME_CAST(sipName_updateCurrentValue), meth_QPropertyAnimation_updateCurrentValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_updateCurrentValue)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QPropertyAnimation_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_updateState)}
};

PyDoc_STRVAR(doc_QPropertyAnimation, "\1QPropertyAnimation(QObject parent=None)\n"
    "QPropertyAnimation(QObject, QByteArray, QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QPropertyAnimation = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QPropertyAnimation,
        {0}
    },
    {
        sipNameNr_QPropertyAnimation,
        {0, 0, 1},
        7, methods_QPropertyAnimation,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPropertyAnimation,
    -1,
    -1,
    supers_QPropertyAnimation,
    0,
    init_type_QPropertyAnimation,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPropertyAnimation,
    0,
    0,
    0,
    release_QPropertyAnimation,
    cast_QPropertyAnimation,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QPropertyAnimation::staticMetaObject,
    0,
    0
};
