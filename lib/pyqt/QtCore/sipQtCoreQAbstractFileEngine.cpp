/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractfileengine.sip"
#include <qabstractfileengine.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"

#line 84 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"
#line 310 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractfileengine.sip"
#include <qabstractfileengine.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"
#line 406 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractfileengine.sip"
#include <qabstractfileengine.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"


class sipQAbstractFileEngine : public QAbstractFileEngine
{
public:
    sipQAbstractFileEngine();
    virtual ~sipQAbstractFileEngine();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    qint64 write(const char*,PY_LONG_LONG);
    qint64 readLine(char*,qint64);
    qint64 read(char*,qint64);
    QAbstractFileEngineIterator* beginEntryList(QDir::Filters,const QStringList&);
    int handle() const;
    void setFileName(const QString&);
    QDateTime fileTime(QAbstractFileEngine::FileTime) const;
    QString owner(QAbstractFileEngine::FileOwner) const;
    uint ownerId(QAbstractFileEngine::FileOwner) const;
    QString fileName(QAbstractFileEngine::FileName) const;
    bool setPermissions(uint);
    QAbstractFileEngine::FileFlags fileFlags(QAbstractFileEngine::FileFlags) const;
    QStringList entryList(QDir::Filters,const QStringList&) const;
    bool isRelativePath() const;
    bool caseSensitive() const;
    bool setSize(qint64);
    bool rmdir(const QString&,bool) const;
    bool mkdir(const QString&,bool) const;
    bool link(const QString&);
    bool rename(const QString&);
    bool copy(const QString&);
    bool remove();
    bool isSequential() const;
    bool seek(qint64);
    qint64 pos() const;
    qint64 size() const;
    bool flush();
    bool close();
    bool open(QIODevice::OpenMode);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractFileEngine(const sipQAbstractFileEngine &);
    sipQAbstractFileEngine &operator = (const sipQAbstractFileEngine &);

    char sipPyMethods[29];
};

sipQAbstractFileEngine::sipQAbstractFileEngine(): QAbstractFileEngine(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractFileEngine::~sipQAbstractFileEngine()
{
    sipCommonDtor(sipPySelf);
}

qint64 sipQAbstractFileEngine::write(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_write);

    if (!sipMeth)
        return QAbstractFileEngine::write(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtCore_20(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQAbstractFileEngine::readLine(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_readLine);

    if (!sipMeth)
        return QAbstractFileEngine::readLine(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return sipVH_QtCore_64(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQAbstractFileEngine::read(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_read);

    if (!sipMeth)
        return QAbstractFileEngine::read(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return sipVH_QtCore_65(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QAbstractFileEngineIterator* sipQAbstractFileEngine::beginEntryList(QDir::Filters a0,const QStringList& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_beginEntryList);

    if (!sipMeth)
        return QAbstractFileEngine::beginEntryList(a0,a1);

    extern QAbstractFileEngineIterator* sipVH_QtCore_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDir::Filters,const QStringList&);

    return sipVH_QtCore_66(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQAbstractFileEngine::handle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_handle);

    if (!sipMeth)
        return QAbstractFileEngine::handle();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractFileEngine::setFileName(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setFileName);

    if (!sipMeth)
    {
        QAbstractFileEngine::setFileName(a0);
        return;
    }

    extern void sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    sipVH_QtCore_33(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QDateTime sipQAbstractFileEngine::fileTime(QAbstractFileEngine::FileTime a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_fileTime);

    if (!sipMeth)
        return QAbstractFileEngine::fileTime(a0);

    extern QDateTime sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractFileEngine::FileTime);

    return sipVH_QtCore_34(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QString sipQAbstractFileEngine::owner(QAbstractFileEngine::FileOwner a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_owner);

    if (!sipMeth)
        return QAbstractFileEngine::owner(a0);

    extern QString sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractFileEngine::FileOwner);

    return sipVH_QtCore_35(sipGILState, 0, sipPySelf, sipMeth, a0);
}

uint sipQAbstractFileEngine::ownerId(QAbstractFileEngine::FileOwner a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_ownerId);

    if (!sipMeth)
        return QAbstractFileEngine::ownerId(a0);

    extern uint sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractFileEngine::FileOwner);

    return sipVH_QtCore_36(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QString sipQAbstractFileEngine::fileName(QAbstractFileEngine::FileName a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_fileName);

    if (!sipMeth)
        return QAbstractFileEngine::fileName(a0);

    extern QString sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractFileEngine::FileName);

    return sipVH_QtCore_37(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractFileEngine::setPermissions(uint a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setPermissions);

    if (!sipMeth)
        return QAbstractFileEngine::setPermissions(a0);

    extern bool sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint);

    return sipVH_QtCore_38(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QAbstractFileEngine::FileFlags sipQAbstractFileEngine::fileFlags(QAbstractFileEngine::FileFlags a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_fileFlags);

    if (!sipMeth)
        return QAbstractFileEngine::fileFlags(a0);

    extern QAbstractFileEngine::FileFlags sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractFileEngine::FileFlags);

    return sipVH_QtCore_39(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStringList sipQAbstractFileEngine::entryList(QDir::Filters a0,const QStringList& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_entryList);

    if (!sipMeth)
        return QAbstractFileEngine::entryList(a0,a1);

    extern QStringList sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDir::Filters,const QStringList&);

    return sipVH_QtCore_40(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractFileEngine::isRelativePath() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_isRelativePath);

    if (!sipMeth)
        return QAbstractFileEngine::isRelativePath();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractFileEngine::caseSensitive() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_caseSensitive);

    if (!sipMeth)
        return QAbstractFileEngine::caseSensitive();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractFileEngine::setSize(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_setSize);

    if (!sipMeth)
        return QAbstractFileEngine::setSize(a0);

    extern bool sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return sipVH_QtCore_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractFileEngine::rmdir(const QString& a0,bool a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_rmdir);

    if (!sipMeth)
        return QAbstractFileEngine::rmdir(a0,a1);

    extern bool sipVH_QtCore_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,bool);

    return sipVH_QtCore_41(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractFileEngine::mkdir(const QString& a0,bool a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_mkdir);

    if (!sipMeth)
        return QAbstractFileEngine::mkdir(a0,a1);

    extern bool sipVH_QtCore_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,bool);

    return sipVH_QtCore_41(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractFileEngine::link(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_link);

    if (!sipMeth)
        return QAbstractFileEngine::link(a0);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtCore_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractFileEngine::rename(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_rename);

    if (!sipMeth)
        return QAbstractFileEngine::rename(a0);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtCore_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractFileEngine::copy(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_copy);

    if (!sipMeth)
        return QAbstractFileEngine::copy(a0);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtCore_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractFileEngine::remove()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_remove);

    if (!sipMeth)
        return QAbstractFileEngine::remove();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractFileEngine::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QAbstractFileEngine::isSequential();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractFileEngine::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QAbstractFileEngine::seek(a0);

    extern bool sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return sipVH_QtCore_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQAbstractFileEngine::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QAbstractFileEngine::pos();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQAbstractFileEngine::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QAbstractFileEngine::size();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractFileEngine::flush()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_flush);

    if (!sipMeth)
        return QAbstractFileEngine::flush();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractFileEngine::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
        return QAbstractFileEngine::close();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractFileEngine::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QAbstractFileEngine::open(a0);

    extern bool sipVH_QtCore_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return sipVH_QtCore_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractFileEngine_atEnd, "QAbstractFileEngine.atEnd() -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->atEnd();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_atEnd, doc_QAbstractFileEngine_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_open, "QAbstractFileEngine.open(QIODevice.OpenMode) -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_open(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice::OpenMode* a0;
        int a0State = 0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_open, doc_QAbstractFileEngine_open);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_close, "QAbstractFileEngine.close() -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_close(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_close, doc_QAbstractFileEngine_close);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_flush, "QAbstractFileEngine.flush() -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_flush(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::flush() : sipCpp->flush());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_flush, doc_QAbstractFileEngine_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_size, "QAbstractFileEngine.size() -> int");

extern "C" {static PyObject *meth_QAbstractFileEngine_size(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::size() : sipCpp->size());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_size, doc_QAbstractFileEngine_size);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_pos, "QAbstractFileEngine.pos() -> int");

extern "C" {static PyObject *meth_QAbstractFileEngine_pos(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::pos() : sipCpp->pos());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_pos, doc_QAbstractFileEngine_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_seek, "QAbstractFileEngine.seek(int) -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_seek(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::seek(a0) : sipCpp->seek(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_seek, doc_QAbstractFileEngine_seek);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_isSequential, "QAbstractFileEngine.isSequential() -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::isSequential() : sipCpp->isSequential());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_isSequential, doc_QAbstractFileEngine_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_remove, "QAbstractFileEngine.remove() -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_remove(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::remove() : sipCpp->remove());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_remove, doc_QAbstractFileEngine_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_copy, "QAbstractFileEngine.copy(QString) -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_copy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::copy(*a0) : sipCpp->copy(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_copy, doc_QAbstractFileEngine_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_rename, "QAbstractFileEngine.rename(QString) -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_rename(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_rename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::rename(*a0) : sipCpp->rename(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_rename, doc_QAbstractFileEngine_rename);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_link, "QAbstractFileEngine.link(QString) -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_link(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_link(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::link(*a0) : sipCpp->link(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_link, doc_QAbstractFileEngine_link);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_mkdir, "QAbstractFileEngine.mkdir(QString, bool) -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_mkdir(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_mkdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1b", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::mkdir(*a0,a1) : sipCpp->mkdir(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_mkdir, doc_QAbstractFileEngine_mkdir);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_rmdir, "QAbstractFileEngine.rmdir(QString, bool) -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_rmdir(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_rmdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1b", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::rmdir(*a0,a1) : sipCpp->rmdir(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_rmdir, doc_QAbstractFileEngine_rmdir);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_setSize, "QAbstractFileEngine.setSize(int) -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_setSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_setSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::setSize(a0) : sipCpp->setSize(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_setSize, doc_QAbstractFileEngine_setSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_caseSensitive, "QAbstractFileEngine.caseSensitive() -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_caseSensitive(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_caseSensitive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::caseSensitive() : sipCpp->caseSensitive());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_caseSensitive, doc_QAbstractFileEngine_caseSensitive);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_isRelativePath, "QAbstractFileEngine.isRelativePath() -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_isRelativePath(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_isRelativePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::isRelativePath() : sipCpp->isRelativePath());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_isRelativePath, doc_QAbstractFileEngine_isRelativePath);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_entryList, "QAbstractFileEngine.entryList(QDir.Filters, QStringList) -> QStringList");

extern "C" {static PyObject *meth_QAbstractFileEngine_entryList(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_entryList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDir::Filters* a0;
        int a0State = 0;
        const QStringList* a1;
        int a1State = 0;
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QDir_Filters, &a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QAbstractFileEngine::entryList(*a0,*a1) : sipCpp->entryList(*a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_entryList, doc_QAbstractFileEngine_entryList);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_fileFlags, "QAbstractFileEngine.fileFlags(QAbstractFileEngine.FileFlags type=QAbstractFileEngine.FileInfoAll) -> QAbstractFileEngine.FileFlags");

extern "C" {static PyObject *meth_QAbstractFileEngine_fileFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_fileFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractFileEngine::FileFlags a0def = QAbstractFileEngine::FileInfoAll;
        QAbstractFileEngine::FileFlags* a0 = &a0def;
        int a0State = 0;
        const QAbstractFileEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QAbstractFileEngine_FileFlags, &a0, &a0State))
        {
            QAbstractFileEngine::FileFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QAbstractFileEngine::FileFlags((sipSelfWasArg ? sipCpp->QAbstractFileEngine::fileFlags(*a0) : sipCpp->fileFlags(*a0)));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QAbstractFileEngine_FileFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractFileEngine_FileFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_fileFlags, doc_QAbstractFileEngine_fileFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_setPermissions, "QAbstractFileEngine.setPermissions(int) -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_setPermissions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_setPermissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        uint a0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::setPermissions(a0) : sipCpp->setPermissions(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_setPermissions, doc_QAbstractFileEngine_setPermissions);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_fileName, "QAbstractFileEngine.fileName(QAbstractFileEngine.FileName file=QAbstractFileEngine.DefaultName) -> QString");

extern "C" {static PyObject *meth_QAbstractFileEngine_fileName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_fileName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractFileEngine::FileName a0 = QAbstractFileEngine::DefaultName;
        const QAbstractFileEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_file,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QAbstractFileEngine_FileName, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QAbstractFileEngine::fileName(a0) : sipCpp->fileName(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_fileName, doc_QAbstractFileEngine_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_ownerId, "QAbstractFileEngine.ownerId(QAbstractFileEngine.FileOwner) -> int");

extern "C" {static PyObject *meth_QAbstractFileEngine_ownerId(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_ownerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractFileEngine::FileOwner a0;
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QAbstractFileEngine_FileOwner, &a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::ownerId(a0) : sipCpp->ownerId(a0));
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_ownerId, doc_QAbstractFileEngine_ownerId);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_owner, "QAbstractFileEngine.owner(QAbstractFileEngine.FileOwner) -> QString");

extern "C" {static PyObject *meth_QAbstractFileEngine_owner(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_owner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractFileEngine::FileOwner a0;
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QAbstractFileEngine_FileOwner, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QAbstractFileEngine::owner(a0) : sipCpp->owner(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_owner, doc_QAbstractFileEngine_owner);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_fileTime, "QAbstractFileEngine.fileTime(QAbstractFileEngine.FileTime) -> QDateTime");

extern "C" {static PyObject *meth_QAbstractFileEngine_fileTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_fileTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractFileEngine::FileTime a0;
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QAbstractFileEngine_FileTime, &a0))
        {
            QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime((sipSelfWasArg ? sipCpp->QAbstractFileEngine::fileTime(a0) : sipCpp->fileTime(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_fileTime, doc_QAbstractFileEngine_fileTime);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_setFileName, "QAbstractFileEngine.setFileName(QString)");

extern "C" {static PyObject *meth_QAbstractFileEngine_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractFileEngine::setFileName(*a0) : sipCpp->setFileName(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_setFileName, doc_QAbstractFileEngine_setFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_handle, "QAbstractFileEngine.handle() -> int");

extern "C" {static PyObject *meth_QAbstractFileEngine_handle(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::handle() : sipCpp->handle());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_handle, doc_QAbstractFileEngine_handle);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_beginEntryList, "QAbstractFileEngine.beginEntryList(QDir.Filters, QStringList) -> QAbstractFileEngineIterator");

extern "C" {static PyObject *meth_QAbstractFileEngine_beginEntryList(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_beginEntryList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDir::Filters* a0;
        int a0State = 0;
        const QStringList* a1;
        int a1State = 0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QDir_Filters, &a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            QAbstractFileEngineIterator*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::beginEntryList(*a0,*a1) : sipCpp->beginEntryList(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractFileEngineIterator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_beginEntryList, doc_QAbstractFileEngine_beginEntryList);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_read, "QAbstractFileEngine.read(int) -> str");

extern "C" {static PyObject *meth_QAbstractFileEngine_read(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractfileengine.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipSelfWasArg ? sipCpp->QAbstractFileEngine::read(s, a0)
                                : sipCpp->read(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1473 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_read, doc_QAbstractFileEngine_read);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_readLine, "QAbstractFileEngine.readLine(int) -> str");

extern "C" {static PyObject *meth_QAbstractFileEngine_readLine(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_readLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 205 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractfileengine.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipSelfWasArg ? sipCpp->QAbstractFileEngine::readLine(s, a0)
                                : sipCpp->readLine(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1538 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractFileEngine.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_readLine, doc_QAbstractFileEngine_readLine);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_write, "QAbstractFileEngine.write(str) -> int");

extern "C" {static PyObject *meth_QAbstractFileEngine_write(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractFileEngine::write(a0,(PY_LONG_LONG)a1) : sipCpp->write(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_write, doc_QAbstractFileEngine_write);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_error, "QAbstractFileEngine.error() -> QFile.FileError");

extern "C" {static PyObject *meth_QAbstractFileEngine_error(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            QFile::FileError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFile_FileError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_error, doc_QAbstractFileEngine_error);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_errorString, "QAbstractFileEngine.errorString() -> QString");

extern "C" {static PyObject *meth_QAbstractFileEngine_errorString(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngine, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_errorString, doc_QAbstractFileEngine_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_create, "QAbstractFileEngine.create(QString) -> QAbstractFileEngine");

extern "C" {static PyObject *meth_QAbstractFileEngine_create(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QAbstractFileEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QAbstractFileEngine::create(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractFileEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_create, doc_QAbstractFileEngine_create);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_map, "QAbstractFileEngine.map(int, int, QFile.MemoryMapFlags) -> sip.voidptr");

extern "C" {static PyObject *meth_QAbstractFileEngine_map(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_map(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        qint64 a1;
        QFile::MemoryMapFlags a2;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BnnE", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, &a0, &a1, sipType_QFile_MemoryMapFlags, &a2))
        {
            void*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->map(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtrAndSize(sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_map, doc_QAbstractFileEngine_map);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_unmap, "QAbstractFileEngine.unmap(sip.voidptr) -> bool");

extern "C" {static PyObject *meth_QAbstractFileEngine_unmap(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_unmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        void* a0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unmap(reinterpret_cast<uchar *>(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_unmap, doc_QAbstractFileEngine_unmap);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractFileEngine_setError, "QAbstractFileEngine.setError(QFile.FileError, QString)");

extern "C" {static PyObject *meth_QAbstractFileEngine_setError(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngine_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFile::FileError a0;
        const QString* a1;
        int a1State = 0;
        QAbstractFileEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QAbstractFileEngine, &sipCpp, sipType_QFile_FileError, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setError(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngine, sipName_setError, doc_QAbstractFileEngine_setError);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractFileEngine(void *, const sipTypeDef *);}
static void *cast_QAbstractFileEngine(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QAbstractFileEngine)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractFileEngine(void *, int);}
static void release_QAbstractFileEngine(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractFileEngine *>(sipCppV);
    else
        delete reinterpret_cast<QAbstractFileEngine *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractFileEngine(sipSimpleWrapper *);}
static void dealloc_QAbstractFileEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractFileEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractFileEngine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractFileEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractFileEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQAbstractFileEngine *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractFileEngine();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QAbstractFileEngine[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QAbstractFileEngine_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_atEnd)},
    {SIP_MLNAME_CAST(sipName_beginEntryList), meth_QAbstractFileEngine_beginEntryList, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_beginEntryList)},
    {SIP_MLNAME_CAST(sipName_caseSensitive), meth_QAbstractFileEngine_caseSensitive, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_caseSensitive)},
    {SIP_MLNAME_CAST(sipName_close), meth_QAbstractFileEngine_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_close)},
    {SIP_MLNAME_CAST(sipName_copy), meth_QAbstractFileEngine_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_copy)},
    {SIP_MLNAME_CAST(sipName_create), meth_QAbstractFileEngine_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_create)},
    {SIP_MLNAME_CAST(sipName_entryList), meth_QAbstractFileEngine_entryList, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_entryList)},
    {SIP_MLNAME_CAST(sipName_error), meth_QAbstractFileEngine_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QAbstractFileEngine_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_errorString)},
    {SIP_MLNAME_CAST(sipName_fileFlags), (PyCFunction)meth_QAbstractFileEngine_fileFlags, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_fileFlags)},
    {SIP_MLNAME_CAST(sipName_fileName), (PyCFunction)meth_QAbstractFileEngine_fileName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_fileName)},
    {SIP_MLNAME_CAST(sipName_fileTime), meth_QAbstractFileEngine_fileTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_fileTime)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QAbstractFileEngine_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_flush)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QAbstractFileEngine_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_handle)},
    {SIP_MLNAME_CAST(sipName_isRelativePath), meth_QAbstractFileEngine_isRelativePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_isRelativePath)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QAbstractFileEngine_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_isSequential)},
    {SIP_MLNAME_CAST(sipName_link), meth_QAbstractFileEngine_link, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_link)},
    {SIP_MLNAME_CAST(sipName_map), meth_QAbstractFileEngine_map, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_map)},
    {SIP_MLNAME_CAST(sipName_mkdir), meth_QAbstractFileEngine_mkdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_mkdir)},
    {SIP_MLNAME_CAST(sipName_open), meth_QAbstractFileEngine_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_open)},
    {SIP_MLNAME_CAST(sipName_owner), meth_QAbstractFileEngine_owner, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_owner)},
    {SIP_MLNAME_CAST(sipName_ownerId), meth_QAbstractFileEngine_ownerId, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_ownerId)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QAbstractFileEngine_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_pos)},
    {SIP_MLNAME_CAST(sipName_read), meth_QAbstractFileEngine_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_read)},
    {SIP_MLNAME_CAST(sipName_readLine), meth_QAbstractFileEngine_readLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_readLine)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QAbstractFileEngine_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_remove)},
    {SIP_MLNAME_CAST(sipName_rename), meth_QAbstractFileEngine_rename, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_rename)},
    {SIP_MLNAME_CAST(sipName_rmdir), meth_QAbstractFileEngine_rmdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_rmdir)},
    {SIP_MLNAME_CAST(sipName_seek), meth_QAbstractFileEngine_seek, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_seek)},
    {SIP_MLNAME_CAST(sipName_setError), meth_QAbstractFileEngine_setError, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_setError)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QAbstractFileEngine_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_setFileName)},
    {SIP_MLNAME_CAST(sipName_setPermissions), meth_QAbstractFileEngine_setPermissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_setPermissions)},
    {SIP_MLNAME_CAST(sipName_setSize), meth_QAbstractFileEngine_setSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_setSize)},
    {SIP_MLNAME_CAST(sipName_size), meth_QAbstractFileEngine_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_size)},
    {SIP_MLNAME_CAST(sipName_unmap), meth_QAbstractFileEngine_unmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_unmap)},
    {SIP_MLNAME_CAST(sipName_write), meth_QAbstractFileEngine_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractFileEngine_write)}
};

static sipEnumMemberDef enummembers_QAbstractFileEngine[] = {
    {sipName_AbsoluteName, static_cast<int>(QAbstractFileEngine::AbsoluteName), 8},
    {sipName_AbsolutePathName, static_cast<int>(QAbstractFileEngine::AbsolutePathName), 8},
    {sipName_AccessTime, static_cast<int>(QAbstractFileEngine::AccessTime), 10},
    {sipName_BaseName, static_cast<int>(QAbstractFileEngine::BaseName), 8},
    {sipName_BundleName, static_cast<int>(QAbstractFileEngine::BundleName), 8},
    {sipName_BundleType, static_cast<int>(QAbstractFileEngine::BundleType), 6},
    {sipName_CanonicalName, static_cast<int>(QAbstractFileEngine::CanonicalName), 8},
    {sipName_CanonicalPathName, static_cast<int>(QAbstractFileEngine::CanonicalPathName), 8},
    {sipName_CreationTime, static_cast<int>(QAbstractFileEngine::CreationTime), 10},
    {sipName_DefaultName, static_cast<int>(QAbstractFileEngine::DefaultName), 8},
    {sipName_DirectoryType, static_cast<int>(QAbstractFileEngine::DirectoryType), 6},
    {sipName_ExeGroupPerm, static_cast<int>(QAbstractFileEngine::ExeGroupPerm), 6},
    {sipName_ExeOtherPerm, static_cast<int>(QAbstractFileEngine::ExeOtherPerm), 6},
    {sipName_ExeOwnerPerm, static_cast<int>(QAbstractFileEngine::ExeOwnerPerm), 6},
    {sipName_ExeUserPerm, static_cast<int>(QAbstractFileEngine::ExeUserPerm), 6},
    {sipName_ExistsFlag, static_cast<int>(QAbstractFileEngine::ExistsFlag), 6},
    {sipName_FileInfoAll, static_cast<int>(QAbstractFileEngine::FileInfoAll), 6},
    {sipName_FileType, static_cast<int>(QAbstractFileEngine::FileType), 6},
    {sipName_FlagsMask, static_cast<int>(QAbstractFileEngine::FlagsMask), 6},
    {sipName_HiddenFlag, static_cast<int>(QAbstractFileEngine::HiddenFlag), 6},
    {sipName_LinkName, static_cast<int>(QAbstractFileEngine::LinkName), 8},
    {sipName_LinkType, static_cast<int>(QAbstractFileEngine::LinkType), 6},
    {sipName_LocalDiskFlag, static_cast<int>(QAbstractFileEngine::LocalDiskFlag), 6},
    {sipName_ModificationTime, static_cast<int>(QAbstractFileEngine::ModificationTime), 10},
    {sipName_OwnerGroup, static_cast<int>(QAbstractFileEngine::OwnerGroup), 9},
    {sipName_OwnerUser, static_cast<int>(QAbstractFileEngine::OwnerUser), 9},
    {sipName_PathName, static_cast<int>(QAbstractFileEngine::PathName), 8},
    {sipName_PermsMask, static_cast<int>(QAbstractFileEngine::PermsMask), 6},
    {sipName_ReadGroupPerm, static_cast<int>(QAbstractFileEngine::ReadGroupPerm), 6},
    {sipName_ReadOtherPerm, static_cast<int>(QAbstractFileEngine::ReadOtherPerm), 6},
    {sipName_ReadOwnerPerm, static_cast<int>(QAbstractFileEngine::ReadOwnerPerm), 6},
    {sipName_ReadUserPerm, static_cast<int>(QAbstractFileEngine::ReadUserPerm), 6},
    {sipName_Refresh, static_cast<int>(QAbstractFileEngine::Refresh), 6},
    {sipName_RootFlag, static_cast<int>(QAbstractFileEngine::RootFlag), 6},
    {sipName_TypesMask, static_cast<int>(QAbstractFileEngine::TypesMask), 6},
    {sipName_WriteGroupPerm, static_cast<int>(QAbstractFileEngine::WriteGroupPerm), 6},
    {sipName_WriteOtherPerm, static_cast<int>(QAbstractFileEngine::WriteOtherPerm), 6},
    {sipName_WriteOwnerPerm, static_cast<int>(QAbstractFileEngine::WriteOwnerPerm), 6},
    {sipName_WriteUserPerm, static_cast<int>(QAbstractFileEngine::WriteUserPerm), 6},
};

PyDoc_STRVAR(doc_QAbstractFileEngine, "\1QAbstractFileEngine()");


pyqt4ClassTypeDef sipTypeDef_QtCore_QAbstractFileEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QAbstractFileEngine,
        {0}
    },
    {
        sipNameNr_QAbstractFileEngine,
        {0, 0, 1},
        36, methods_QAbstractFileEngine,
        39, enummembers_QAbstractFileEngine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractFileEngine,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_QAbstractFileEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractFileEngine,
    0,
    0,
    0,
    release_QAbstractFileEngine,
    cast_QAbstractFileEngine,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
