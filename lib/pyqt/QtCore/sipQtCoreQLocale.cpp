/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"
#line 72 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"
#line 1466 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"
#line 406 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"
#line 250 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQLocale.cpp"


PyDoc_STRVAR(doc_QLocale_language, "QLocale.language() -> QLocale.Language");

extern "C" {static PyObject *meth_QLocale_language(PyObject *, PyObject *);}
static PyObject *meth_QLocale_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QLocale::Language sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->language();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLocale_Language);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_language, doc_QLocale_language);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_country, "QLocale.country() -> QLocale.Country");

extern "C" {static PyObject *meth_QLocale_country(PyObject *, PyObject *);}
static PyObject *meth_QLocale_country(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QLocale::Country sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->country();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLocale_Country);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_country, doc_QLocale_country);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_name, "QLocale.name() -> QString");

extern "C" {static PyObject *meth_QLocale_name(PyObject *, PyObject *);}
static PyObject *meth_QLocale_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_name, doc_QLocale_name);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toShort, "QLocale.toShort(QString, int base=0) -> (int, bool)");

extern "C" {static PyObject *meth_QLocale_toShort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toShort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            short sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toShort(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(hb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toShort, doc_QLocale_toShort);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toUShort, "QLocale.toUShort(QString, int base=0) -> (int, bool)");

extern "C" {static PyObject *meth_QLocale_toUShort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toUShort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUShort(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(tb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toUShort, doc_QLocale_toUShort);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toInt, "QLocale.toInt(QString, int base=0) -> (int, bool)");

extern "C" {static PyObject *meth_QLocale_toInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInt(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(ib)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toInt, doc_QLocale_toInt);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toUInt, "QLocale.toUInt(QString, int base=0) -> (int, bool)");

extern "C" {static PyObject *meth_QLocale_toUInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toUInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUInt(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(ub)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toUInt, doc_QLocale_toUInt);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toLongLong, "QLocale.toLongLong(QString, int base=0) -> (int, bool)");

extern "C" {static PyObject *meth_QLocale_toLongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toLongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            qlonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLongLong(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(nb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toLongLong, doc_QLocale_toLongLong);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toULongLong, "QLocale.toULongLong(QString, int base=0) -> (int, bool)");

extern "C" {static PyObject *meth_QLocale_toULongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toULongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            qlonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toULongLong(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(nb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toULongLong, doc_QLocale_toULongLong);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toFloat, "QLocale.toFloat(QString) -> (float, bool)");

extern "C" {static PyObject *meth_QLocale_toFloat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toFloat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toFloat(*a0,&a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(fb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toFloat, doc_QLocale_toFloat);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toDouble, "QLocale.toDouble(QString) -> (float, bool)");

extern "C" {static PyObject *meth_QLocale_toDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toDouble(*a0,&a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(db)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toDouble, doc_QLocale_toDouble);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toString, "QLocale.toString(int) -> QString\n"
    "QLocale.toString(float, str format='g', int precision=6) -> QString\n"
    "QLocale.toString(int) -> QString\n"
    "QLocale.toString(int) -> QString\n"
    "QLocale.toString(QDateTime, QString) -> QString\n"
    "QLocale.toString(QDateTime, QLocale.FormatType format=QLocale.LongFormat) -> QString\n"
    "QLocale.toString(QDate, QString) -> QString\n"
    "QLocale.toString(QDate, QLocale.FormatType format=QLocale.LongFormat) -> QString\n"
    "QLocale.toString(QTime, QString) -> QString\n"
    "QLocale.toString(QTime, QLocale.FormatType format=QLocale.LongFormat) -> QString");

extern "C" {static PyObject *meth_QLocale_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BXi", &sipSelf, sipType_QLocale, &sipCpp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        double a0;
        char a1 = 'g';
        int a2 = 6;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_precision,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BXd|ci", &sipSelf, sipType_QLocale, &sipCpp, &a0, &a1, &a2))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qlonglong a0;
        const QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bn", &sipSelf, sipType_QLocale, &sipCpp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qulonglong a0;
        const QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bo", &sipSelf, sipType_QLocale, &sipCpp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDateTime* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDateTime *>(a0),sipType_QDateTime,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDateTime* a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDate* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDate* a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QTime* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QTime, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QTime *>(a0),sipType_QTime,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QTime* a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QTime, &a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QTime *>(a0),sipType_QTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toString, doc_QLocale_toString);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_languageToString, "QLocale.languageToString(QLocale.Language) -> QString");

extern "C" {static PyObject *meth_QLocale_languageToString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_languageToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::Language a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLocale_Language, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QLocale::languageToString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_languageToString, doc_QLocale_languageToString);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_countryToString, "QLocale.countryToString(QLocale.Country) -> QString");

extern "C" {static PyObject *meth_QLocale_countryToString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_countryToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::Country a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLocale_Country, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QLocale::countryToString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_countryToString, doc_QLocale_countryToString);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_setDefault, "QLocale.setDefault(QLocale)");

extern "C" {static PyObject *meth_QLocale_setDefault(PyObject *, PyObject *);}
static PyObject *meth_QLocale_setDefault(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QLocale, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QLocale::setDefault(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_setDefault, doc_QLocale_setDefault);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_c, "QLocale.c() -> QLocale");

extern "C" {static PyObject *meth_QLocale_c(PyObject *, PyObject *);}
static PyObject *meth_QLocale_c(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QLocale*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale(QLocale::c());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_c, doc_QLocale_c);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_system, "QLocale.system() -> QLocale");

extern "C" {static PyObject *meth_QLocale_system(PyObject *, PyObject *);}
static PyObject *meth_QLocale_system(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QLocale*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale(QLocale::system());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_system, doc_QLocale_system);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_dateFormat, "QLocale.dateFormat(QLocale.FormatType format=QLocale.LongFormat) -> QString");

extern "C" {static PyObject *meth_QLocale_dateFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_dateFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::FormatType a0 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_FormatType, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->dateFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_dateFormat, doc_QLocale_dateFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_timeFormat, "QLocale.timeFormat(QLocale.FormatType format=QLocale.LongFormat) -> QString");

extern "C" {static PyObject *meth_QLocale_timeFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_timeFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::FormatType a0 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_FormatType, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->timeFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_timeFormat, doc_QLocale_timeFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_dateTimeFormat, "QLocale.dateTimeFormat(QLocale.FormatType format=QLocale.LongFormat) -> QString");

extern "C" {static PyObject *meth_QLocale_dateTimeFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_dateTimeFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::FormatType a0 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_FormatType, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->dateTimeFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_dateTimeFormat, doc_QLocale_dateTimeFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toDate, "QLocale.toDate(QString, QLocale.FormatType format=QLocale.LongFormat) -> QDate\n"
    "QLocale.toDate(QString, QString) -> QDate");

extern "C" {static PyObject *meth_QLocale_toDate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QDate*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDate(sipCpp->toDate(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDate*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDate(sipCpp->toDate(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toDate, doc_QLocale_toDate);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toTime, "QLocale.toTime(QString, QLocale.FormatType format=QLocale.LongFormat) -> QTime\n"
    "QLocale.toTime(QString, QString) -> QTime");

extern "C" {static PyObject *meth_QLocale_toTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTime(sipCpp->toTime(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTime,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTime(sipCpp->toTime(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toTime, doc_QLocale_toTime);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toDateTime, "QLocale.toDateTime(QString, QLocale.FormatType format=QLocale.LongFormat) -> QDateTime\n"
    "QLocale.toDateTime(QString, QString) -> QDateTime");

extern "C" {static PyObject *meth_QLocale_toDateTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDateTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->toDateTime(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->toDateTime(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toDateTime, doc_QLocale_toDateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_decimalPoint, "QLocale.decimalPoint() -> QChar");

extern "C" {static PyObject *meth_QLocale_decimalPoint(PyObject *, PyObject *);}
static PyObject *meth_QLocale_decimalPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->decimalPoint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_decimalPoint, doc_QLocale_decimalPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_groupSeparator, "QLocale.groupSeparator() -> QChar");

extern "C" {static PyObject *meth_QLocale_groupSeparator(PyObject *, PyObject *);}
static PyObject *meth_QLocale_groupSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->groupSeparator());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_groupSeparator, doc_QLocale_groupSeparator);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_percent, "QLocale.percent() -> QChar");

extern "C" {static PyObject *meth_QLocale_percent(PyObject *, PyObject *);}
static PyObject *meth_QLocale_percent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->percent());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_percent, doc_QLocale_percent);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_zeroDigit, "QLocale.zeroDigit() -> QChar");

extern "C" {static PyObject *meth_QLocale_zeroDigit(PyObject *, PyObject *);}
static PyObject *meth_QLocale_zeroDigit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->zeroDigit());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_zeroDigit, doc_QLocale_zeroDigit);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_negativeSign, "QLocale.negativeSign() -> QChar");

extern "C" {static PyObject *meth_QLocale_negativeSign(PyObject *, PyObject *);}
static PyObject *meth_QLocale_negativeSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->negativeSign());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_negativeSign, doc_QLocale_negativeSign);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_exponential, "QLocale.exponential() -> QChar");

extern "C" {static PyObject *meth_QLocale_exponential(PyObject *, PyObject *);}
static PyObject *meth_QLocale_exponential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->exponential());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_exponential, doc_QLocale_exponential);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_monthName, "QLocale.monthName(int, QLocale.FormatType format=QLocale.LongFormat) -> QString");

extern "C" {static PyObject *meth_QLocale_monthName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_monthName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->monthName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_monthName, doc_QLocale_monthName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_dayName, "QLocale.dayName(int, QLocale.FormatType format=QLocale.LongFormat) -> QString");

extern "C" {static PyObject *meth_QLocale_dayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_dayName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->dayName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_dayName, doc_QLocale_dayName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_setNumberOptions, "QLocale.setNumberOptions(QLocale.NumberOptions)");

extern "C" {static PyObject *meth_QLocale_setNumberOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocale_setNumberOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::NumberOptions* a0;
        int a0State = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_NumberOptions, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNumberOptions(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QLocale_NumberOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_setNumberOptions, doc_QLocale_setNumberOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_numberOptions, "QLocale.numberOptions() -> QLocale.NumberOptions");

extern "C" {static PyObject *meth_QLocale_numberOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocale_numberOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QLocale::NumberOptions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale::NumberOptions(sipCpp->numberOptions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_numberOptions, doc_QLocale_numberOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_countriesForLanguage, "QLocale.countriesForLanguage(QLocale.Language) -> list-of-QLocale.Country");

extern "C" {static PyObject *meth_QLocale_countriesForLanguage(PyObject *, PyObject *);}
static PyObject *meth_QLocale_countriesForLanguage(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::Language a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLocale_Language, &a0))
        {
            QList<QLocale::Country>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QLocale::Country>(QLocale::countriesForLanguage(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QLocale_Country,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_countriesForLanguage, doc_QLocale_countriesForLanguage);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_measurementSystem, "QLocale.measurementSystem() -> QLocale.MeasurementSystem");

extern "C" {static PyObject *meth_QLocale_measurementSystem(PyObject *, PyObject *);}
static PyObject *meth_QLocale_measurementSystem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QLocale::MeasurementSystem sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->measurementSystem();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLocale_MeasurementSystem);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_measurementSystem, doc_QLocale_measurementSystem);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_positiveSign, "QLocale.positiveSign() -> QChar");

extern "C" {static PyObject *meth_QLocale_positiveSign(PyObject *, PyObject *);}
static PyObject *meth_QLocale_positiveSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->positiveSign());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_positiveSign, doc_QLocale_positiveSign);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_standaloneMonthName, "QLocale.standaloneMonthName(int, QLocale.FormatType format=QLocale.LongFormat) -> QString");

extern "C" {static PyObject *meth_QLocale_standaloneMonthName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_standaloneMonthName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->standaloneMonthName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_standaloneMonthName, doc_QLocale_standaloneMonthName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_standaloneDayName, "QLocale.standaloneDayName(int, QLocale.FormatType format=QLocale.LongFormat) -> QString");

extern "C" {static PyObject *meth_QLocale_standaloneDayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_standaloneDayName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->standaloneDayName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_standaloneDayName, doc_QLocale_standaloneDayName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_amText, "QLocale.amText() -> QString");

extern "C" {static PyObject *meth_QLocale_amText(PyObject *, PyObject *);}
static PyObject *meth_QLocale_amText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->amText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_amText, doc_QLocale_amText);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_pmText, "QLocale.pmText() -> QString");

extern "C" {static PyObject *meth_QLocale_pmText(PyObject *, PyObject *);}
static PyObject *meth_QLocale_pmText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->pmText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_pmText, doc_QLocale_pmText);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_textDirection, "QLocale.textDirection() -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QLocale_textDirection(PyObject *, PyObject *);}
static PyObject *meth_QLocale_textDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_textDirection, doc_QLocale_textDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_script, "QLocale.script() -> QLocale.Script");

extern "C" {static PyObject *meth_QLocale_script(PyObject *, PyObject *);}
static PyObject *meth_QLocale_script(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QLocale::Script sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->script();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLocale_Script);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_script, doc_QLocale_script);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_bcp47Name, "QLocale.bcp47Name() -> QString");

extern "C" {static PyObject *meth_QLocale_bcp47Name(PyObject *, PyObject *);}
static PyObject *meth_QLocale_bcp47Name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->bcp47Name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_bcp47Name, doc_QLocale_bcp47Name);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_nativeLanguageName, "QLocale.nativeLanguageName() -> QString");

extern "C" {static PyObject *meth_QLocale_nativeLanguageName(PyObject *, PyObject *);}
static PyObject *meth_QLocale_nativeLanguageName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->nativeLanguageName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_nativeLanguageName, doc_QLocale_nativeLanguageName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_nativeCountryName, "QLocale.nativeCountryName() -> QString");

extern "C" {static PyObject *meth_QLocale_nativeCountryName(PyObject *, PyObject *);}
static PyObject *meth_QLocale_nativeCountryName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->nativeCountryName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_nativeCountryName, doc_QLocale_nativeCountryName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_firstDayOfWeek, "QLocale.firstDayOfWeek() -> Qt.DayOfWeek");

extern "C" {static PyObject *meth_QLocale_firstDayOfWeek(PyObject *, PyObject *);}
static PyObject *meth_QLocale_firstDayOfWeek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            Qt::DayOfWeek sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->firstDayOfWeek();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_DayOfWeek);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_firstDayOfWeek, doc_QLocale_firstDayOfWeek);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_weekdays, "QLocale.weekdays() -> list-of-Qt.DayOfWeek");

extern "C" {static PyObject *meth_QLocale_weekdays(PyObject *, PyObject *);}
static PyObject *meth_QLocale_weekdays(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QList<Qt::DayOfWeek>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<Qt::DayOfWeek>(sipCpp->weekdays());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100Qt_DayOfWeek,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_weekdays, doc_QLocale_weekdays);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toUpper, "QLocale.toUpper(QString) -> QString");

extern "C" {static PyObject *meth_QLocale_toUpper(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toUpper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toUpper(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toUpper, doc_QLocale_toUpper);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toLower, "QLocale.toLower(QString) -> QString");

extern "C" {static PyObject *meth_QLocale_toLower(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toLower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toLower(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toLower, doc_QLocale_toLower);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_currencySymbol, "QLocale.currencySymbol(QLocale.CurrencySymbolFormat format=QLocale.CurrencySymbol) -> QString");

extern "C" {static PyObject *meth_QLocale_currencySymbol(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_currencySymbol(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::CurrencySymbolFormat a0 = QLocale::CurrencySymbol;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_CurrencySymbolFormat, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->currencySymbol(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_currencySymbol, doc_QLocale_currencySymbol);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_toCurrencyString, "QLocale.toCurrencyString(int, QString symbol=QString()) -> QString\n"
    "QLocale.toCurrencyString(float, QString symbol=QString()) -> QString\n"
    "QLocale.toCurrencyString(int, QString symbol=QString()) -> QString\n"
    "QLocale.toCurrencyString(int, QString symbol=QString()) -> QString");

extern "C" {static PyObject *meth_QLocale_toCurrencyString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toCurrencyString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_symbol,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BXi|J1", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toCurrencyString(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        double a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_symbol,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BXd|J1", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toCurrencyString(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qlonglong a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_symbol,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bn|J1", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toCurrencyString(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qulonglong a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_symbol,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bo|J1", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toCurrencyString(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toCurrencyString, doc_QLocale_toCurrencyString);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_uiLanguages, "QLocale.uiLanguages() -> QStringList");

extern "C" {static PyObject *meth_QLocale_uiLanguages(PyObject *, PyObject *);}
static PyObject *meth_QLocale_uiLanguages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->uiLanguages());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_uiLanguages, doc_QLocale_uiLanguages);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_scriptToString, "QLocale.scriptToString(QLocale.Script) -> QString");

extern "C" {static PyObject *meth_QLocale_scriptToString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_scriptToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::Script a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLocale_Script, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QLocale::scriptToString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_scriptToString, doc_QLocale_scriptToString);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_matchingLocales, "QLocale.matchingLocales(QLocale.Language, QLocale.Script, QLocale.Country) -> list-of-QLocale");

extern "C" {static PyObject *meth_QLocale_matchingLocales(PyObject *, PyObject *);}
static PyObject *meth_QLocale_matchingLocales(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::Language a0;
        QLocale::Script a1;
        QLocale::Country a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "EEE", sipType_QLocale_Language, &a0, sipType_QLocale_Script, &a1, sipType_QLocale_Country, &a2))
        {
            QList<QLocale>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QLocale>(QLocale::matchingLocales(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_matchingLocales, doc_QLocale_matchingLocales);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_quoteString, "QLocale.quoteString(QString, QLocale.QuotationStyle style=QLocale.StandardQuotation) -> QString");

extern "C" {static PyObject *meth_QLocale_quoteString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_quoteString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLocale::QuotationStyle a1 = QLocale::StandardQuotation;
        const QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_QuotationStyle, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->quoteString(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_quoteString, doc_QLocale_quoteString);

    return NULL;
}


PyDoc_STRVAR(doc_QLocale_createSeparatedList, "QLocale.createSeparatedList(QStringList) -> QString");

extern "C" {static PyObject *meth_QLocale_createSeparatedList(PyObject *, PyObject *);}
static PyObject *meth_QLocale_createSeparatedList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        const QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->createSeparatedList(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_createSeparatedList, doc_QLocale_createSeparatedList);

    return NULL;
}


extern "C" {static PyObject *slot_QLocale___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLocale___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QLocale *sipCpp = reinterpret_cast<QLocale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLocale* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLocale, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLocale::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QLocale,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLocale___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLocale___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QLocale *sipCpp = reinterpret_cast<QLocale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLocale* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLocale, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLocale::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QLocale,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QLocale(void *, const sipTypeDef *);}
static void *cast_QLocale(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QLocale)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocale(void *, int);}
static void release_QLocale(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QLocale *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QLocale(void *, SIP_SSIZE_T, const void *);}
static void assign_QLocale(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QLocale *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QLocale *>(sipSrc);
}


extern "C" {static void *array_QLocale(SIP_SSIZE_T);}
static void *array_QLocale(SIP_SSIZE_T sipNrElem)
{
    return new QLocale[sipNrElem];
}


extern "C" {static void *copy_QLocale(const void *, SIP_SSIZE_T);}
static void *copy_QLocale(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QLocale(reinterpret_cast<const QLocale *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLocale(sipSimpleWrapper *);}
static void dealloc_QLocale(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QLocale(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QLocale(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLocale(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QLocale *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        QLocale::Language a0;
        QLocale::Country a1 = QLocale::AnyCountry;

        static const char *sipKwdList[] = {
            NULL,
            sipName_country,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|E", sipType_QLocale_Language, &a0, sipType_QLocale_Country, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QLocale* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLocale, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QLocale::Language a0;
        QLocale::Script a1;
        QLocale::Country a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "EEE", sipType_QLocale_Language, &a0, sipType_QLocale_Script, &a1, sipType_QLocale_Country, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLocale[] = {
    {(void *)slot_QLocale___ne__, ne_slot},
    {(void *)slot_QLocale___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLocale[] = {
    {SIP_MLNAME_CAST(sipName_amText), meth_QLocale_amText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_amText)},
    {SIP_MLNAME_CAST(sipName_bcp47Name), meth_QLocale_bcp47Name, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_bcp47Name)},
    {SIP_MLNAME_CAST(sipName_c), meth_QLocale_c, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_c)},
    {SIP_MLNAME_CAST(sipName_countriesForLanguage), meth_QLocale_countriesForLanguage, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_countriesForLanguage)},
    {SIP_MLNAME_CAST(sipName_country), meth_QLocale_country, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_country)},
    {SIP_MLNAME_CAST(sipName_countryToString), meth_QLocale_countryToString, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_countryToString)},
    {SIP_MLNAME_CAST(sipName_createSeparatedList), meth_QLocale_createSeparatedList, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_createSeparatedList)},
    {SIP_MLNAME_CAST(sipName_currencySymbol), (PyCFunction)meth_QLocale_currencySymbol, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_currencySymbol)},
    {SIP_MLNAME_CAST(sipName_dateFormat), (PyCFunction)meth_QLocale_dateFormat, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_dateFormat)},
    {SIP_MLNAME_CAST(sipName_dateTimeFormat), (PyCFunction)meth_QLocale_dateTimeFormat, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_dateTimeFormat)},
    {SIP_MLNAME_CAST(sipName_dayName), (PyCFunction)meth_QLocale_dayName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_dayName)},
    {SIP_MLNAME_CAST(sipName_decimalPoint), meth_QLocale_decimalPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_decimalPoint)},
    {SIP_MLNAME_CAST(sipName_exponential), meth_QLocale_exponential, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_exponential)},
    {SIP_MLNAME_CAST(sipName_firstDayOfWeek), meth_QLocale_firstDayOfWeek, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_firstDayOfWeek)},
    {SIP_MLNAME_CAST(sipName_groupSeparator), meth_QLocale_groupSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_groupSeparator)},
    {SIP_MLNAME_CAST(sipName_language), meth_QLocale_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_language)},
    {SIP_MLNAME_CAST(sipName_languageToString), meth_QLocale_languageToString, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_languageToString)},
    {SIP_MLNAME_CAST(sipName_matchingLocales), meth_QLocale_matchingLocales, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_matchingLocales)},
    {SIP_MLNAME_CAST(sipName_measurementSystem), meth_QLocale_measurementSystem, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_measurementSystem)},
    {SIP_MLNAME_CAST(sipName_monthName), (PyCFunction)meth_QLocale_monthName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_monthName)},
    {SIP_MLNAME_CAST(sipName_name), meth_QLocale_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_name)},
    {SIP_MLNAME_CAST(sipName_nativeCountryName), meth_QLocale_nativeCountryName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_nativeCountryName)},
    {SIP_MLNAME_CAST(sipName_nativeLanguageName), meth_QLocale_nativeLanguageName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_nativeLanguageName)},
    {SIP_MLNAME_CAST(sipName_negativeSign), meth_QLocale_negativeSign, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_negativeSign)},
    {SIP_MLNAME_CAST(sipName_numberOptions), meth_QLocale_numberOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_numberOptions)},
    {SIP_MLNAME_CAST(sipName_percent), meth_QLocale_percent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_percent)},
    {SIP_MLNAME_CAST(sipName_pmText), meth_QLocale_pmText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_pmText)},
    {SIP_MLNAME_CAST(sipName_positiveSign), meth_QLocale_positiveSign, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_positiveSign)},
    {SIP_MLNAME_CAST(sipName_quoteString), (PyCFunction)meth_QLocale_quoteString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_quoteString)},
    {SIP_MLNAME_CAST(sipName_script), meth_QLocale_script, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_script)},
    {SIP_MLNAME_CAST(sipName_scriptToString), meth_QLocale_scriptToString, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_scriptToString)},
    {SIP_MLNAME_CAST(sipName_setDefault), meth_QLocale_setDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_setDefault)},
    {SIP_MLNAME_CAST(sipName_setNumberOptions), meth_QLocale_setNumberOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_setNumberOptions)},
    {SIP_MLNAME_CAST(sipName_standaloneDayName), (PyCFunction)meth_QLocale_standaloneDayName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_standaloneDayName)},
    {SIP_MLNAME_CAST(sipName_standaloneMonthName), (PyCFunction)meth_QLocale_standaloneMonthName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_standaloneMonthName)},
    {SIP_MLNAME_CAST(sipName_system), meth_QLocale_system, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_system)},
    {SIP_MLNAME_CAST(sipName_textDirection), meth_QLocale_textDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_textDirection)},
    {SIP_MLNAME_CAST(sipName_timeFormat), (PyCFunction)meth_QLocale_timeFormat, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_timeFormat)},
    {SIP_MLNAME_CAST(sipName_toCurrencyString), (PyCFunction)meth_QLocale_toCurrencyString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toCurrencyString)},
    {SIP_MLNAME_CAST(sipName_toDate), (PyCFunction)meth_QLocale_toDate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toDate)},
    {SIP_MLNAME_CAST(sipName_toDateTime), (PyCFunction)meth_QLocale_toDateTime, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toDateTime)},
    {SIP_MLNAME_CAST(sipName_toDouble), (PyCFunction)meth_QLocale_toDouble, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toDouble)},
    {SIP_MLNAME_CAST(sipName_toFloat), (PyCFunction)meth_QLocale_toFloat, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toFloat)},
    {SIP_MLNAME_CAST(sipName_toInt), (PyCFunction)meth_QLocale_toInt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toInt)},
    {SIP_MLNAME_CAST(sipName_toLongLong), (PyCFunction)meth_QLocale_toLongLong, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toLongLong)},
    {SIP_MLNAME_CAST(sipName_toLower), meth_QLocale_toLower, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_toLower)},
    {SIP_MLNAME_CAST(sipName_toShort), (PyCFunction)meth_QLocale_toShort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toShort)},
    {SIP_MLNAME_CAST(sipName_toString), (PyCFunction)meth_QLocale_toString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toString)},
    {SIP_MLNAME_CAST(sipName_toTime), (PyCFunction)meth_QLocale_toTime, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toTime)},
    {SIP_MLNAME_CAST(sipName_toUInt), (PyCFunction)meth_QLocale_toUInt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toUInt)},
    {SIP_MLNAME_CAST(sipName_toULongLong), (PyCFunction)meth_QLocale_toULongLong, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toULongLong)},
    {SIP_MLNAME_CAST(sipName_toUShort), (PyCFunction)meth_QLocale_toUShort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toUShort)},
    {SIP_MLNAME_CAST(sipName_toUpper), meth_QLocale_toUpper, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_toUpper)},
    {SIP_MLNAME_CAST(sipName_uiLanguages), meth_QLocale_uiLanguages, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_uiLanguages)},
    {SIP_MLNAME_CAST(sipName_weekdays), meth_QLocale_weekdays, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_weekdays)},
    {SIP_MLNAME_CAST(sipName_zeroDigit), meth_QLocale_zeroDigit, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_zeroDigit)}
};

static sipEnumMemberDef enummembers_QLocale[] = {
    {sipName_Abkhazian, static_cast<int>(QLocale::Abkhazian), 118},
    {sipName_Afan, static_cast<int>(QLocale::Afan), 118},
    {sipName_Afar, static_cast<int>(QLocale::Afar), 118},
    {sipName_Afghanistan, static_cast<int>(QLocale::Afghanistan), 115},
    {sipName_Afrikaans, static_cast<int>(QLocale::Afrikaans), 118},
    {sipName_Akan, static_cast<int>(QLocale::Akan), 118},
    {sipName_Albania, static_cast<int>(QLocale::Albania), 115},
    {sipName_Albanian, static_cast<int>(QLocale::Albanian), 118},
    {sipName_Algeria, static_cast<int>(QLocale::Algeria), 115},
    {sipName_AlternateQuotation, static_cast<int>(QLocale::AlternateQuotation), 122},
    {sipName_AmericanSamoa, static_cast<int>(QLocale::AmericanSamoa), 115},
    {sipName_Amharic, static_cast<int>(QLocale::Amharic), 118},
    {sipName_Andorra, static_cast<int>(QLocale::Andorra), 115},
    {sipName_Angola, static_cast<int>(QLocale::Angola), 115},
    {sipName_Anguilla, static_cast<int>(QLocale::Anguilla), 115},
    {sipName_Antarctica, static_cast<int>(QLocale::Antarctica), 115},
    {sipName_AntiguaAndBarbuda, static_cast<int>(QLocale::AntiguaAndBarbuda), 115},
    {sipName_AnyCountry, static_cast<int>(QLocale::AnyCountry), 115},
    {sipName_AnyLanguage, static_cast<int>(QLocale::AnyLanguage), 118},
    {sipName_AnyScript, static_cast<int>(QLocale::AnyScript), 123},
    {sipName_Arabic, static_cast<int>(QLocale::Arabic), 118},
    {sipName_ArabicScript, static_cast<int>(QLocale::ArabicScript), 123},
    {sipName_Argentina, static_cast<int>(QLocale::Argentina), 115},
    {sipName_Armenia, static_cast<int>(QLocale::Armenia), 115},
    {sipName_Armenian, static_cast<int>(QLocale::Armenian), 118},
    {sipName_Aruba, static_cast<int>(QLocale::Aruba), 115},
    {sipName_Assamese, static_cast<int>(QLocale::Assamese), 118},
    {sipName_Asu, static_cast<int>(QLocale::Asu), 118},
    {sipName_Atsam, static_cast<int>(QLocale::Atsam), 118},
    {sipName_Australia, static_cast<int>(QLocale::Australia), 115},
    {sipName_Austria, static_cast<int>(QLocale::Austria), 115},
    {sipName_Aymara, static_cast<int>(QLocale::Aymara), 118},
    {sipName_Azerbaijan, static_cast<int>(QLocale::Azerbaijan), 115},
    {sipName_Azerbaijani, static_cast<int>(QLocale::Azerbaijani), 118},
    {sipName_Bahamas, static_cast<int>(QLocale::Bahamas), 115},
    {sipName_Bahrain, static_cast<int>(QLocale::Bahrain), 115},
    {sipName_Bambara, static_cast<int>(QLocale::Bambara), 118},
    {sipName_Bangladesh, static_cast<int>(QLocale::Bangladesh), 115},
    {sipName_Barbados, static_cast<int>(QLocale::Barbados), 115},
    {sipName_Bashkir, static_cast<int>(QLocale::Bashkir), 118},
    {sipName_Basque, static_cast<int>(QLocale::Basque), 118},
    {sipName_Belarus, static_cast<int>(QLocale::Belarus), 115},
    {sipName_Belgium, static_cast<int>(QLocale::Belgium), 115},
    {sipName_Belize, static_cast<int>(QLocale::Belize), 115},
    {sipName_Bemba, static_cast<int>(QLocale::Bemba), 118},
    {sipName_Bena, static_cast<int>(QLocale::Bena), 118},
    {sipName_Bengali, static_cast<int>(QLocale::Bengali), 118},
    {sipName_Benin, static_cast<int>(QLocale::Benin), 115},
    {sipName_Bermuda, static_cast<int>(QLocale::Bermuda), 115},
    {sipName_Bhutan, static_cast<int>(QLocale::Bhutan), 115},
    {sipName_Bhutani, static_cast<int>(QLocale::Bhutani), 118},
    {sipName_Bihari, static_cast<int>(QLocale::Bihari), 118},
    {sipName_Bislama, static_cast<int>(QLocale::Bislama), 118},
    {sipName_Blin, static_cast<int>(QLocale::Blin), 118},
    {sipName_Bolivia, static_cast<int>(QLocale::Bolivia), 115},
    {sipName_BosniaAndHerzegowina, static_cast<int>(QLocale::BosniaAndHerzegowina), 115},
    {sipName_Bosnian, static_cast<int>(QLocale::Bosnian), 118},
    {sipName_Botswana, static_cast<int>(QLocale::Botswana), 115},
    {sipName_BouvetIsland, static_cast<int>(QLocale::BouvetIsland), 115},
    {sipName_Brazil, static_cast<int>(QLocale::Brazil), 115},
    {sipName_Breton, static_cast<int>(QLocale::Breton), 118},
    {sipName_BritishIndianOceanTerritory, static_cast<int>(QLocale::BritishIndianOceanTerritory), 115},
    {sipName_BritishVirginIslands, static_cast<int>(QLocale::BritishVirginIslands), 115},
    {sipName_BruneiDarussalam, static_cast<int>(QLocale::BruneiDarussalam), 115},
    {sipName_Bulgaria, static_cast<int>(QLocale::Bulgaria), 115},
    {sipName_Bulgarian, static_cast<int>(QLocale::Bulgarian), 118},
    {sipName_BurkinaFaso, static_cast<int>(QLocale::BurkinaFaso), 115},
    {sipName_Burmese, static_cast<int>(QLocale::Burmese), 118},
    {sipName_Burundi, static_cast<int>(QLocale::Burundi), 115},
    {sipName_Byelorussian, static_cast<int>(QLocale::Byelorussian), 118},
    {sipName_C, static_cast<int>(QLocale::C), 118},
    {sipName_Cambodia, static_cast<int>(QLocale::Cambodia), 115},
    {sipName_Cambodian, static_cast<int>(QLocale::Cambodian), 118},
    {sipName_Cameroon, static_cast<int>(QLocale::Cameroon), 115},
    {sipName_Canada, static_cast<int>(QLocale::Canada), 115},
    {sipName_CapeVerde, static_cast<int>(QLocale::CapeVerde), 115},
    {sipName_Catalan, static_cast<int>(QLocale::Catalan), 118},
    {sipName_CaymanIslands, static_cast<int>(QLocale::CaymanIslands), 115},
    {sipName_CentralAfricanRepublic, static_cast<int>(QLocale::CentralAfricanRepublic), 115},
    {sipName_CentralMoroccoTamazight, static_cast<int>(QLocale::CentralMoroccoTamazight), 118},
    {sipName_Chad, static_cast<int>(QLocale::Chad), 115},
    {sipName_Cherokee, static_cast<int>(QLocale::Cherokee), 118},
    {sipName_Chewa, static_cast<int>(QLocale::Chewa), 118},
    {sipName_Chiga, static_cast<int>(QLocale::Chiga), 118},
    {sipName_Chile, static_cast<int>(QLocale::Chile), 115},
    {sipName_China, static_cast<int>(QLocale::China), 115},
    {sipName_Chinese, static_cast<int>(QLocale::Chinese), 118},
    {sipName_ChristmasIsland, static_cast<int>(QLocale::ChristmasIsland), 115},
    {sipName_CocosIslands, static_cast<int>(QLocale::CocosIslands), 115},
    {sipName_Colognian, static_cast<int>(QLocale::Colognian), 118},
    {sipName_Colombia, static_cast<int>(QLocale::Colombia), 115},
    {sipName_Comoros, static_cast<int>(QLocale::Comoros), 115},
    {sipName_CookIslands, static_cast<int>(QLocale::CookIslands), 115},
    {sipName_Cornish, static_cast<int>(QLocale::Cornish), 118},
    {sipName_Corsican, static_cast<int>(QLocale::Corsican), 118},
    {sipName_CostaRica, static_cast<int>(QLocale::CostaRica), 115},
    {sipName_Croatia, static_cast<int>(QLocale::Croatia), 115},
    {sipName_Croatian, static_cast<int>(QLocale::Croatian), 118},
    {sipName_Cuba, static_cast<int>(QLocale::Cuba), 115},
    {sipName_CurrencyDisplayName, static_cast<int>(QLocale::CurrencyDisplayName), 116},
    {sipName_CurrencyIsoCode, static_cast<int>(QLocale::CurrencyIsoCode), 116},
    {sipName_CurrencySymbol, static_cast<int>(QLocale::CurrencySymbol), 116},
    {sipName_Cyprus, static_cast<int>(QLocale::Cyprus), 115},
    {sipName_CyrillicScript, static_cast<int>(QLocale::CyrillicScript), 123},
    {sipName_Czech, static_cast<int>(QLocale::Czech), 118},
    {sipName_CzechRepublic, static_cast<int>(QLocale::CzechRepublic), 115},
    {sipName_Danish, static_cast<int>(QLocale::Danish), 118},
    {sipName_DemocraticRepublicOfCongo, static_cast<int>(QLocale::DemocraticRepublicOfCongo), 115},
    {sipName_DemocraticRepublicOfKorea, static_cast<int>(QLocale::DemocraticRepublicOfKorea), 115},
    {sipName_Denmark, static_cast<int>(QLocale::Denmark), 115},
    {sipName_DeseretScript, static_cast<int>(QLocale::DeseretScript), 123},
    {sipName_Divehi, static_cast<int>(QLocale::Divehi), 118},
    {sipName_Djibouti, static_cast<int>(QLocale::Djibouti), 115},
    {sipName_Dominica, static_cast<int>(QLocale::Dominica), 115},
    {sipName_DominicanRepublic, static_cast<int>(QLocale::DominicanRepublic), 115},
    {sipName_Dutch, static_cast<int>(QLocale::Dutch), 118},
    {sipName_EastTimor, static_cast<int>(QLocale::EastTimor), 115},
    {sipName_Ecuador, static_cast<int>(QLocale::Ecuador), 115},
    {sipName_Egypt, static_cast<int>(QLocale::Egypt), 115},
    {sipName_ElSalvador, static_cast<int>(QLocale::ElSalvador), 115},
    {sipName_Embu, static_cast<int>(QLocale::Embu), 118},
    {sipName_English, static_cast<int>(QLocale::English), 118},
    {sipName_EquatorialGuinea, static_cast<int>(QLocale::EquatorialGuinea), 115},
    {sipName_Eritrea, static_cast<int>(QLocale::Eritrea), 115},
    {sipName_Esperanto, static_cast<int>(QLocale::Esperanto), 118},
    {sipName_Estonia, static_cast<int>(QLocale::Estonia), 115},
    {sipName_Estonian, static_cast<int>(QLocale::Estonian), 118},
    {sipName_Ethiopia, static_cast<int>(QLocale::Ethiopia), 115},
    {sipName_Ewe, static_cast<int>(QLocale::Ewe), 118},
    {sipName_FalklandIslands, static_cast<int>(QLocale::FalklandIslands), 115},
    {sipName_FaroeIslands, static_cast<int>(QLocale::FaroeIslands), 115},
    {sipName_Faroese, static_cast<int>(QLocale::Faroese), 118},
    {sipName_FijiCountry, static_cast<int>(QLocale::FijiCountry), 115},
    {sipName_FijiLanguage, static_cast<int>(QLocale::FijiLanguage), 118},
    {sipName_Filipino, static_cast<int>(QLocale::Filipino), 118},
    {sipName_Finland, static_cast<int>(QLocale::Finland), 115},
    {sipName_Finnish, static_cast<int>(QLocale::Finnish), 118},
    {sipName_France, static_cast<int>(QLocale::France), 115},
    {sipName_French, static_cast<int>(QLocale::French), 118},
    {sipName_FrenchGuiana, static_cast<int>(QLocale::FrenchGuiana), 115},
    {sipName_FrenchPolynesia, static_cast<int>(QLocale::FrenchPolynesia), 115},
    {sipName_FrenchSouthernTerritories, static_cast<int>(QLocale::FrenchSouthernTerritories), 115},
    {sipName_Frisian, static_cast<int>(QLocale::Frisian), 118},
    {sipName_Friulian, static_cast<int>(QLocale::Friulian), 118},
    {sipName_Fulah, static_cast<int>(QLocale::Fulah), 118},
    {sipName_Ga, static_cast<int>(QLocale::Ga), 118},
    {sipName_Gabon, static_cast<int>(QLocale::Gabon), 115},
    {sipName_Gaelic, static_cast<int>(QLocale::Gaelic), 118},
    {sipName_Galician, static_cast<int>(QLocale::Galician), 118},
    {sipName_Gambia, static_cast<int>(QLocale::Gambia), 115},
    {sipName_Ganda, static_cast<int>(QLocale::Ganda), 118},
    {sipName_Geez, static_cast<int>(QLocale::Geez), 118},
    {sipName_Georgia, static_cast<int>(QLocale::Georgia), 115},
    {sipName_Georgian, static_cast<int>(QLocale::Georgian), 118},
    {sipName_German, static_cast<int>(QLocale::German), 118},
    {sipName_Germany, static_cast<int>(QLocale::Germany), 115},
    {sipName_Ghana, static_cast<int>(QLocale::Ghana), 115},
    {sipName_Gibraltar, static_cast<int>(QLocale::Gibraltar), 115},
    {sipName_Greece, static_cast<int>(QLocale::Greece), 115},
    {sipName_Greek, static_cast<int>(QLocale::Greek), 118},
    {sipName_Greenland, static_cast<int>(QLocale::Greenland), 115},
    {sipName_Greenlandic, static_cast<int>(QLocale::Greenlandic), 118},
    {sipName_Grenada, static_cast<int>(QLocale::Grenada), 115},
    {sipName_Guadeloupe, static_cast<int>(QLocale::Guadeloupe), 115},
    {sipName_Guam, static_cast<int>(QLocale::Guam), 115},
    {sipName_Guarani, static_cast<int>(QLocale::Guarani), 118},
    {sipName_Guatemala, static_cast<int>(QLocale::Guatemala), 115},
    {sipName_Guinea, static_cast<int>(QLocale::Guinea), 115},
    {sipName_GuineaBissau, static_cast<int>(QLocale::GuineaBissau), 115},
    {sipName_Gujarati, static_cast<int>(QLocale::Gujarati), 118},
    {sipName_GurmukhiScript, static_cast<int>(QLocale::GurmukhiScript), 123},
    {sipName_Gusii, static_cast<int>(QLocale::Gusii), 118},
    {sipName_Guyana, static_cast<int>(QLocale::Guyana), 115},
    {sipName_Haiti, static_cast<int>(QLocale::Haiti), 115},
    {sipName_Hausa, static_cast<int>(QLocale::Hausa), 118},
    {sipName_Hawaiian, static_cast<int>(QLocale::Hawaiian), 118},
    {sipName_HeardAndMcDonaldIslands, static_cast<int>(QLocale::HeardAndMcDonaldIslands), 115},
    {sipName_Hebrew, static_cast<int>(QLocale::Hebrew), 118},
    {sipName_Hindi, static_cast<int>(QLocale::Hindi), 118},
    {sipName_Honduras, static_cast<int>(QLocale::Honduras), 115},
    {sipName_HongKong, static_cast<int>(QLocale::HongKong), 115},
    {sipName_Hungarian, static_cast<int>(QLocale::Hungarian), 118},
    {sipName_Hungary, static_cast<int>(QLocale::Hungary), 115},
    {sipName_Iceland, static_cast<int>(QLocale::Iceland), 115},
    {sipName_Icelandic, static_cast<int>(QLocale::Icelandic), 118},
    {sipName_Igbo, static_cast<int>(QLocale::Igbo), 118},
    {sipName_ImperialSystem, static_cast<int>(QLocale::ImperialSystem), 119},
    {sipName_India, static_cast<int>(QLocale::India), 115},
    {sipName_Indonesia, static_cast<int>(QLocale::Indonesia), 115},
    {sipName_Indonesian, static_cast<int>(QLocale::Indonesian), 118},
    {sipName_Interlingua, static_cast<int>(QLocale::Interlingua), 118},
    {sipName_Interlingue, static_cast<int>(QLocale::Interlingue), 118},
    {sipName_Inuktitut, static_cast<int>(QLocale::Inuktitut), 118},
    {sipName_Inupiak, static_cast<int>(QLocale::Inupiak), 118},
    {sipName_Iran, static_cast<int>(QLocale::Iran), 115},
    {sipName_Iraq, static_cast<int>(QLocale::Iraq), 115},
    {sipName_Ireland, static_cast<int>(QLocale::Ireland), 115},
    {sipName_Irish, static_cast<int>(QLocale::Irish), 118},
    {sipName_Israel, static_cast<int>(QLocale::Israel), 115},
    {sipName_Italian, static_cast<int>(QLocale::Italian), 118},
    {sipName_Italy, static_cast<int>(QLocale::Italy), 115},
    {sipName_IvoryCoast, static_cast<int>(QLocale::IvoryCoast), 115},
    {sipName_Jamaica, static_cast<int>(QLocale::Jamaica), 115},
    {sipName_Japan, static_cast<int>(QLocale::Japan), 115},
    {sipName_Japanese, static_cast<int>(QLocale::Japanese), 118},
    {sipName_Javanese, static_cast<int>(QLocale::Javanese), 118},
    {sipName_Jju, static_cast<int>(QLocale::Jju), 118},
    {sipName_Jordan, static_cast<int>(QLocale::Jordan), 115},
    {sipName_Kabuverdianu, static_cast<int>(QLocale::Kabuverdianu), 118},
    {sipName_Kabyle, static_cast<int>(QLocale::Kabyle), 118},
    {sipName_Kalenjin, static_cast<int>(QLocale::Kalenjin), 118},
    {sipName_Kamba, static_cast<int>(QLocale::Kamba), 118},
    {sipName_Kannada, static_cast<int>(QLocale::Kannada), 118},
    {sipName_Kashmiri, static_cast<int>(QLocale::Kashmiri), 118},
    {sipName_Kazakh, static_cast<int>(QLocale::Kazakh), 118},
    {sipName_Kazakhstan, static_cast<int>(QLocale::Kazakhstan), 115},
    {sipName_Kenya, static_cast<int>(QLocale::Kenya), 115},
    {sipName_Kikuyu, static_cast<int>(QLocale::Kikuyu), 118},
    {sipName_Kinyarwanda, static_cast<int>(QLocale::Kinyarwanda), 118},
    {sipName_Kirghiz, static_cast<int>(QLocale::Kirghiz), 118},
    {sipName_Kiribati, static_cast<int>(QLocale::Kiribati), 115},
    {sipName_Konkani, static_cast<int>(QLocale::Konkani), 118},
    {sipName_Korean, static_cast<int>(QLocale::Korean), 118},
    {sipName_Koro, static_cast<int>(QLocale::Koro), 118},
    {sipName_KoyraChiini, static_cast<int>(QLocale::KoyraChiini), 118},
    {sipName_KoyraboroSenni, static_cast<int>(QLocale::KoyraboroSenni), 118},
    {sipName_Kpelle, static_cast<int>(QLocale::Kpelle), 118},
    {sipName_Kurdish, static_cast<int>(QLocale::Kurdish), 118},
    {sipName_Kurundi, static_cast<int>(QLocale::Kurundi), 118},
    {sipName_Kuwait, static_cast<int>(QLocale::Kuwait), 115},
    {sipName_Kyrgyzstan, static_cast<int>(QLocale::Kyrgyzstan), 115},
    {sipName_Langi, static_cast<int>(QLocale::Langi), 118},
    {sipName_Lao, static_cast<int>(QLocale::Lao), 115},
    {sipName_Laothian, static_cast<int>(QLocale::Laothian), 118},
    {sipName_LastCountry, static_cast<int>(QLocale::LastCountry), 115},
    {sipName_LastLanguage, static_cast<int>(QLocale::LastLanguage), 118},
    {sipName_Latin, static_cast<int>(QLocale::Latin), 118},
    {sipName_LatinAmericaAndTheCaribbean, static_cast<int>(QLocale::LatinAmericaAndTheCaribbean), 115},
    {sipName_LatinScript, static_cast<int>(QLocale::LatinScript), 123},
    {sipName_Latvia, static_cast<int>(QLocale::Latvia), 115},
    {sipName_Latvian, static_cast<int>(QLocale::Latvian), 118},
    {sipName_Lebanon, static_cast<int>(QLocale::Lebanon), 115},
    {sipName_Lesotho, static_cast<int>(QLocale::Lesotho), 115},
    {sipName_Liberia, static_cast<int>(QLocale::Liberia), 115},
    {sipName_LibyanArabJamahiriya, static_cast<int>(QLocale::LibyanArabJamahiriya), 115},
    {sipName_Liechtenstein, static_cast<int>(QLocale::Liechtenstein), 115},
    {sipName_Lingala, static_cast<int>(QLocale::Lingala), 118},
    {sipName_Lithuania, static_cast<int>(QLocale::Lithuania), 115},
    {sipName_Lithuanian, static_cast<int>(QLocale::Lithuanian), 118},
    {sipName_LongFormat, static_cast<int>(QLocale::LongFormat), 117},
    {sipName_LowGerman, static_cast<int>(QLocale::LowGerman), 118},
    {sipName_Luo, static_cast<int>(QLocale::Luo), 118},
    {sipName_Luxembourg, static_cast<int>(QLocale::Luxembourg), 115},
    {sipName_Luyia, static_cast<int>(QLocale::Luyia), 118},
    {sipName_Macau, static_cast<int>(QLocale::Macau), 115},
    {sipName_Macedonia, static_cast<int>(QLocale::Macedonia), 115},
    {sipName_Macedonian, static_cast<int>(QLocale::Macedonian), 118},
    {sipName_Machame, static_cast<int>(QLocale::Machame), 118},
    {sipName_Madagascar, static_cast<int>(QLocale::Madagascar), 115},
    {sipName_Makonde, static_cast<int>(QLocale::Makonde), 118},
    {sipName_Malagasy, static_cast<int>(QLocale::Malagasy), 118},
    {sipName_Malawi, static_cast<int>(QLocale::Malawi), 115},
    {sipName_Malay, static_cast<int>(QLocale::Malay), 118},
    {sipName_Malayalam, static_cast<int>(QLocale::Malayalam), 118},
    {sipName_Malaysia, static_cast<int>(QLocale::Malaysia), 115},
    {sipName_Maldives, static_cast<int>(QLocale::Maldives), 115},
    {sipName_Mali, static_cast<int>(QLocale::Mali), 115},
    {sipName_Malta, static_cast<int>(QLocale::Malta), 115},
    {sipName_Maltese, static_cast<int>(QLocale::Maltese), 118},
    {sipName_Manx, static_cast<int>(QLocale::Manx), 118},
    {sipName_Maori, static_cast<int>(QLocale::Maori), 118},
    {sipName_Marathi, static_cast<int>(QLocale::Marathi), 118},
    {sipName_MarshallIslands, static_cast<int>(QLocale::MarshallIslands), 115},
    {sipName_Martinique, static_cast<int>(QLocale::Martinique), 115},
    {sipName_Masai, static_cast<int>(QLocale::Masai), 118},
    {sipName_Mauritania, static_cast<int>(QLocale::Mauritania), 115},
    {sipName_Mauritius, static_cast<int>(QLocale::Mauritius), 115},
    {sipName_Mayotte, static_cast<int>(QLocale::Mayotte), 115},
    {sipName_Meru, static_cast<int>(QLocale::Meru), 118},
    {sipName_MetricSystem, static_cast<int>(QLocale::MetricSystem), 119},
    {sipName_MetropolitanFrance, static_cast<int>(QLocale::MetropolitanFrance), 115},
    {sipName_Mexico, static_cast<int>(QLocale::Mexico), 115},
    {sipName_Micronesia, static_cast<int>(QLocale::Micronesia), 115},
    {sipName_Moldavian, static_cast<int>(QLocale::Moldavian), 118},
    {sipName_Moldova, static_cast<int>(QLocale::Moldova), 115},
    {sipName_Monaco, static_cast<int>(QLocale::Monaco), 115},
    {sipName_Mongolia, static_cast<int>(QLocale::Mongolia), 115},
    {sipName_Mongolian, static_cast<int>(QLocale::Mongolian), 118},
    {sipName_MongolianScript, static_cast<int>(QLocale::MongolianScript), 123},
    {sipName_Montenegro, static_cast<int>(QLocale::Montenegro), 115},
    {sipName_Montserrat, static_cast<int>(QLocale::Montserrat), 115},
    {sipName_Morisyen, static_cast<int>(QLocale::Morisyen), 118},
    {sipName_Morocco, static_cast<int>(QLocale::Morocco), 115},
    {sipName_Mozambique, static_cast<int>(QLocale::Mozambique), 115},
    {sipName_Myanmar, static_cast<int>(QLocale::Myanmar), 115},
    {sipName_Nama, static_cast<int>(QLocale::Nama), 118},
    {sipName_Namibia, static_cast<int>(QLocale::Namibia), 115},
    {sipName_NarrowFormat, static_cast<int>(QLocale::NarrowFormat), 117},
    {sipName_NauruCountry, static_cast<int>(QLocale::NauruCountry), 115},
    {sipName_NauruLanguage, static_cast<int>(QLocale::NauruLanguage), 118},
    {sipName_Nepal, static_cast<int>(QLocale::Nepal), 115},
    {sipName_Nepali, static_cast<int>(QLocale::Nepali), 118},
    {sipName_Netherlands, static_cast<int>(QLocale::Netherlands), 115},
    {sipName_NetherlandsAntilles, static_cast<int>(QLocale::NetherlandsAntilles), 115},
    {sipName_NewCaledonia, static_cast<int>(QLocale::NewCaledonia), 115},
    {sipName_NewZealand, static_cast<int>(QLocale::NewZealand), 115},
    {sipName_Nicaragua, static_cast<int>(QLocale::Nicaragua), 115},
    {sipName_Niger, static_cast<int>(QLocale::Niger), 115},
    {sipName_Nigeria, static_cast<int>(QLocale::Nigeria), 115},
    {sipName_Niue, static_cast<int>(QLocale::Niue), 115},
    {sipName_NorfolkIsland, static_cast<int>(QLocale::NorfolkIsland), 115},
    {sipName_NorthNdebele, static_cast<int>(QLocale::NorthNdebele), 118},
    {sipName_NorthernMarianaIslands, static_cast<int>(QLocale::NorthernMarianaIslands), 115},
    {sipName_NorthernSami, static_cast<int>(QLocale::NorthernSami), 118},
    {sipName_NorthernSotho, static_cast<int>(QLocale::NorthernSotho), 118},
    {sipName_Norway, static_cast<int>(QLocale::Norway), 115},
    {sipName_Norwegian, static_cast<int>(QLocale::Norwegian), 118},
    {sipName_NorwegianBokmal, static_cast<int>(QLocale::NorwegianBokmal), 118},
    {sipName_NorwegianNynorsk, static_cast<int>(QLocale::NorwegianNynorsk), 118},
    {sipName_Nyankole, static_cast<int>(QLocale::Nyankole), 118},
    {sipName_Nynorsk, static_cast<int>(QLocale::Nynorsk), 118},
    {sipName_Occitan, static_cast<int>(QLocale::Occitan), 118},
    {sipName_Oman, static_cast<int>(QLocale::Oman), 115},
    {sipName_OmitGroupSeparator, static_cast<int>(QLocale::OmitGroupSeparator), 120},
    {sipName_Oriya, static_cast<int>(QLocale::Oriya), 118},
    {sipName_Pakistan, static_cast<int>(QLocale::Pakistan), 115},
    {sipName_Palau, static_cast<int>(QLocale::Palau), 115},
    {sipName_PalestinianTerritory, static_cast<int>(QLocale::PalestinianTerritory), 115},
    {sipName_Panama, static_cast<int>(QLocale::Panama), 115},
    {sipName_PapuaNewGuinea, static_cast<int>(QLocale::PapuaNewGuinea), 115},
    {sipName_Paraguay, static_cast<int>(QLocale::Paraguay), 115},
    {sipName_Pashto, static_cast<int>(QLocale::Pashto), 118},
    {sipName_PeoplesRepublicOfCongo, static_cast<int>(QLocale::PeoplesRepublicOfCongo), 115},
    {sipName_Persian, static_cast<int>(QLocale::Persian), 118},
    {sipName_Peru, static_cast<int>(QLocale::Peru), 115},
    {sipName_Philippines, static_cast<int>(QLocale::Philippines), 115},
    {sipName_Pitcairn, static_cast<int>(QLocale::Pitcairn), 115},
    {sipName_Poland, static_cast<int>(QLocale::Poland), 115},
    {sipName_Polish, static_cast<int>(QLocale::Polish), 118},
    {sipName_Portugal, static_cast<int>(QLocale::Portugal), 115},
    {sipName_Portuguese, static_cast<int>(QLocale::Portuguese), 118},
    {sipName_PuertoRico, static_cast<int>(QLocale::PuertoRico), 115},
    {sipName_Punjabi, static_cast<int>(QLocale::Punjabi), 118},
    {sipName_Qatar, static_cast<int>(QLocale::Qatar), 115},
    {sipName_Quechua, static_cast<int>(QLocale::Quechua), 118},
    {sipName_RejectGroupSeparator, static_cast<int>(QLocale::RejectGroupSeparator), 120},
    {sipName_RepublicOfKorea, static_cast<int>(QLocale::RepublicOfKorea), 115},
    {sipName_Reunion, static_cast<int>(QLocale::Reunion), 115},
    {sipName_RhaetoRomance, static_cast<int>(QLocale::RhaetoRomance), 118},
    {sipName_Romania, static_cast<int>(QLocale::Romania), 115},
    {sipName_Romanian, static_cast<int>(QLocale::Romanian), 118},
    {sipName_Rombo, static_cast<int>(QLocale::Rombo), 118},
    {sipName_Russian, static_cast<int>(QLocale::Russian), 118},
    {sipName_RussianFederation, static_cast<int>(QLocale::RussianFederation), 115},
    {sipName_Rwa, static_cast<int>(QLocale::Rwa), 118},
    {sipName_Rwanda, static_cast<int>(QLocale::Rwanda), 115},
    {sipName_Saho, static_cast<int>(QLocale::Saho), 118},
    {sipName_SaintBarthelemy, static_cast<int>(QLocale::SaintBarthelemy), 115},
    {sipName_SaintKittsAndNevis, static_cast<int>(QLocale::SaintKittsAndNevis), 115},
    {sipName_SaintMartin, static_cast<int>(QLocale::SaintMartin), 115},
    {sipName_Samburu, static_cast<int>(QLocale::Samburu), 118},
    {sipName_Samoa, static_cast<int>(QLocale::Samoa), 115},
    {sipName_Samoan, static_cast<int>(QLocale::Samoan), 118},
    {sipName_SanMarino, static_cast<int>(QLocale::SanMarino), 115},
    {sipName_Sangho, static_cast<int>(QLocale::Sangho), 118},
    {sipName_Sanskrit, static_cast<int>(QLocale::Sanskrit), 118},
    {sipName_SaoTomeAndPrincipe, static_cast<int>(QLocale::SaoTomeAndPrincipe), 115},
    {sipName_SaudiArabia, static_cast<int>(QLocale::SaudiArabia), 115},
    {sipName_Sena, static_cast<int>(QLocale::Sena), 118},
    {sipName_Senegal, static_cast<int>(QLocale::Senegal), 115},
    {sipName_Serbia, static_cast<int>(QLocale::Serbia), 115},
    {sipName_SerbiaAndMontenegro, static_cast<int>(QLocale::SerbiaAndMontenegro), 115},
    {sipName_Serbian, static_cast<int>(QLocale::Serbian), 118},
    {sipName_SerboCroatian, static_cast<int>(QLocale::SerboCroatian), 118},
    {sipName_Sesotho, static_cast<int>(QLocale::Sesotho), 118},
    {sipName_Setswana, static_cast<int>(QLocale::Setswana), 118},
    {sipName_Seychelles, static_cast<int>(QLocale::Seychelles), 115},
    {sipName_Shambala, static_cast<int>(QLocale::Shambala), 118},
    {sipName_Shona, static_cast<int>(QLocale::Shona), 118},
    {sipName_ShortFormat, static_cast<int>(QLocale::ShortFormat), 117},
    {sipName_SichuanYi, static_cast<int>(QLocale::SichuanYi), 118},
    {sipName_Sidamo, static_cast<int>(QLocale::Sidamo), 118},
    {sipName_SierraLeone, static_cast<int>(QLocale::SierraLeone), 115},
    {sipName_SimplifiedChineseScript, static_cast<int>(QLocale::SimplifiedChineseScript), 123},
    {sipName_SimplifiedHanScript, static_cast<int>(QLocale::SimplifiedHanScript), 123},
    {sipName_Sindhi, static_cast<int>(QLocale::Sindhi), 118},
    {sipName_Singapore, static_cast<int>(QLocale::Singapore), 115},
    {sipName_Singhalese, static_cast<int>(QLocale::Singhalese), 118},
    {sipName_Siswati, static_cast<int>(QLocale::Siswati), 118},
    {sipName_Slovak, static_cast<int>(QLocale::Slovak), 118},
    {sipName_Slovakia, static_cast<int>(QLocale::Slovakia), 115},
    {sipName_Slovenia, static_cast<int>(QLocale::Slovenia), 115},
    {sipName_Slovenian, static_cast<int>(QLocale::Slovenian), 118},
    {sipName_Soga, static_cast<int>(QLocale::Soga), 118},
    {sipName_SolomonIslands, static_cast<int>(QLocale::SolomonIslands), 115},
    {sipName_Somali, static_cast<int>(QLocale::Somali), 118},
    {sipName_Somalia, static_cast<int>(QLocale::Somalia), 115},
    {sipName_SouthAfrica, static_cast<int>(QLocale::SouthAfrica), 115},
    {sipName_SouthGeorgiaAndTheSouthSandwichIslands, static_cast<int>(QLocale::SouthGeorgiaAndTheSouthSandwichIslands), 115},
    {sipName_SouthNdebele, static_cast<int>(QLocale::SouthNdebele), 118},
    {sipName_Spain, static_cast<int>(QLocale::Spain), 115},
    {sipName_Spanish, static_cast<int>(QLocale::Spanish), 118},
    {sipName_SriLanka, static_cast<int>(QLocale::SriLanka), 115},
    {sipName_StHelena, static_cast<int>(QLocale::StHelena), 115},
    {sipName_StLucia, static_cast<int>(QLocale::StLucia), 115},
    {sipName_StPierreAndMiquelon, static_cast<int>(QLocale::StPierreAndMiquelon), 115},
    {sipName_StVincentAndTheGrenadines, static_cast<int>(QLocale::StVincentAndTheGrenadines), 115},
    {sipName_StandardQuotation, static_cast<int>(QLocale::StandardQuotation), 122},
    {sipName_Sudan, static_cast<int>(QLocale::Sudan), 115},
    {sipName_Sundanese, static_cast<int>(QLocale::Sundanese), 118},
    {sipName_Suriname, static_cast<int>(QLocale::Suriname), 115},
    {sipName_SvalbardAndJanMayenIslands, static_cast<int>(QLocale::SvalbardAndJanMayenIslands), 115},
    {sipName_Swahili, static_cast<int>(QLocale::Swahili), 118},
    {sipName_Swaziland, static_cast<int>(QLocale::Swaziland), 115},
    {sipName_Sweden, static_cast<int>(QLocale::Sweden), 115},
    {sipName_Swedish, static_cast<int>(QLocale::Swedish), 118},
    {sipName_SwissGerman, static_cast<int>(QLocale::SwissGerman), 118},
    {sipName_Switzerland, static_cast<int>(QLocale::Switzerland), 115},
    {sipName_Syriac, static_cast<int>(QLocale::Syriac), 118},
    {sipName_SyrianArabRepublic, static_cast<int>(QLocale::SyrianArabRepublic), 115},
    {sipName_Tachelhit, static_cast<int>(QLocale::Tachelhit), 118},
    {sipName_Tagalog, static_cast<int>(QLocale::Tagalog), 118},
    {sipName_Taita, static_cast<int>(QLocale::Taita), 118},
    {sipName_Taiwan, static_cast<int>(QLocale::Taiwan), 115},
    {sipName_Tajik, static_cast<int>(QLocale::Tajik), 118},
    {sipName_Tajikistan, static_cast<int>(QLocale::Tajikistan), 115},
    {sipName_Tamil, static_cast<int>(QLocale::Tamil), 118},
    {sipName_Tanzania, static_cast<int>(QLocale::Tanzania), 115},
    {sipName_Taroko, static_cast<int>(QLocale::Taroko), 118},
    {sipName_Tatar, static_cast<int>(QLocale::Tatar), 118},
    {sipName_Telugu, static_cast<int>(QLocale::Telugu), 118},
    {sipName_Teso, static_cast<int>(QLocale::Teso), 118},
    {sipName_Thai, static_cast<int>(QLocale::Thai), 118},
    {sipName_Thailand, static_cast<int>(QLocale::Thailand), 115},
    {sipName_Tibetan, static_cast<int>(QLocale::Tibetan), 118},
    {sipName_TifinaghScript, static_cast<int>(QLocale::TifinaghScript), 123},
    {sipName_Tigre, static_cast<int>(QLocale::Tigre), 118},
    {sipName_Tigrinya, static_cast<int>(QLocale::Tigrinya), 118},
    {sipName_Togo, static_cast<int>(QLocale::Togo), 115},
    {sipName_Tokelau, static_cast<int>(QLocale::Tokelau), 115},
    {sipName_TongaCountry, static_cast<int>(QLocale::TongaCountry), 115},
    {sipName_TongaLanguage, static_cast<int>(QLocale::TongaLanguage), 118},
    {sipName_TraditionalChineseScript, static_cast<int>(QLocale::TraditionalChineseScript), 123},
    {sipName_TraditionalHanScript, static_cast<int>(QLocale::TraditionalHanScript), 123},
    {sipName_TrinidadAndTobago, static_cast<int>(QLocale::TrinidadAndTobago), 115},
    {sipName_Tsonga, static_cast<int>(QLocale::Tsonga), 118},
    {sipName_Tunisia, static_cast<int>(QLocale::Tunisia), 115},
    {sipName_Turkey, static_cast<int>(QLocale::Turkey), 115},
    {sipName_Turkish, static_cast<int>(QLocale::Turkish), 118},
    {sipName_Turkmen, static_cast<int>(QLocale::Turkmen), 118},
    {sipName_Turkmenistan, static_cast<int>(QLocale::Turkmenistan), 115},
    {sipName_TurksAndCaicosIslands, static_cast<int>(QLocale::TurksAndCaicosIslands), 115},
    {sipName_Tuvalu, static_cast<int>(QLocale::Tuvalu), 115},
    {sipName_Twi, static_cast<int>(QLocale::Twi), 118},
    {sipName_Tyap, static_cast<int>(QLocale::Tyap), 118},
    {sipName_USVirginIslands, static_cast<int>(QLocale::USVirginIslands), 115},
    {sipName_Uganda, static_cast<int>(QLocale::Uganda), 115},
    {sipName_Uigur, static_cast<int>(QLocale::Uigur), 118},
    {sipName_Ukraine, static_cast<int>(QLocale::Ukraine), 115},
    {sipName_Ukrainian, static_cast<int>(QLocale::Ukrainian), 118},
    {sipName_UnitedArabEmirates, static_cast<int>(QLocale::UnitedArabEmirates), 115},
    {sipName_UnitedKingdom, static_cast<int>(QLocale::UnitedKingdom), 115},
    {sipName_UnitedStates, static_cast<int>(QLocale::UnitedStates), 115},
    {sipName_UnitedStatesMinorOutlyingIslands, static_cast<int>(QLocale::UnitedStatesMinorOutlyingIslands), 115},
    {sipName_Urdu, static_cast<int>(QLocale::Urdu), 118},
    {sipName_Uruguay, static_cast<int>(QLocale::Uruguay), 115},
    {sipName_Uzbek, static_cast<int>(QLocale::Uzbek), 118},
    {sipName_Uzbekistan, static_cast<int>(QLocale::Uzbekistan), 115},
    {sipName_Vanuatu, static_cast<int>(QLocale::Vanuatu), 115},
    {sipName_VaticanCityState, static_cast<int>(QLocale::VaticanCityState), 115},
    {sipName_Venda, static_cast<int>(QLocale::Venda), 118},
    {sipName_Venezuela, static_cast<int>(QLocale::Venezuela), 115},
    {sipName_VietNam, static_cast<int>(QLocale::VietNam), 115},
    {sipName_Vietnamese, static_cast<int>(QLocale::Vietnamese), 118},
    {sipName_Volapuk, static_cast<int>(QLocale::Volapuk), 118},
    {sipName_Vunjo, static_cast<int>(QLocale::Vunjo), 118},
    {sipName_Walamo, static_cast<int>(QLocale::Walamo), 118},
    {sipName_WallisAndFutunaIslands, static_cast<int>(QLocale::WallisAndFutunaIslands), 115},
    {sipName_Welsh, static_cast<int>(QLocale::Welsh), 118},
    {sipName_WesternSahara, static_cast<int>(QLocale::WesternSahara), 115},
    {sipName_Wolof, static_cast<int>(QLocale::Wolof), 118},
    {sipName_Xhosa, static_cast<int>(QLocale::Xhosa), 118},
    {sipName_Yemen, static_cast<int>(QLocale::Yemen), 115},
    {sipName_Yiddish, static_cast<int>(QLocale::Yiddish), 118},
    {sipName_Yoruba, static_cast<int>(QLocale::Yoruba), 118},
    {sipName_Yugoslavia, static_cast<int>(QLocale::Yugoslavia), 115},
    {sipName_Zambia, static_cast<int>(QLocale::Zambia), 115},
    {sipName_Zhuang, static_cast<int>(QLocale::Zhuang), 118},
    {sipName_Zimbabwe, static_cast<int>(QLocale::Zimbabwe), 115},
    {sipName_Zulu, static_cast<int>(QLocale::Zulu), 118},
};

PyDoc_STRVAR(doc_QLocale, "\1QLocale()\n"
    "QLocale(QString)\n"
    "QLocale(QLocale.Language, QLocale.Country country=QLocale.AnyCountry)\n"
    "QLocale(QLocale)\n"
    "QLocale(QLocale.Language, QLocale.Script, QLocale.Country)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QLocale = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QLocale,
        {0}
    },
    {
        sipNameNr_QLocale,
        {0, 0, 1},
        56, methods_QLocale,
        490, enummembers_QLocale,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLocale,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QLocale,
    init_type_QLocale,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLocale,
    assign_QLocale,
    array_QLocale,
    copy_QLocale,
    release_QLocale,
    cast_QLocale,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
