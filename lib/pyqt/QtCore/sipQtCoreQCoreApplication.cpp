/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 73 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"


class sipQCoreApplication : public QCoreApplication
{
public:
    sipQCoreApplication(int&,char**);
    virtual ~sipQCoreApplication();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool notify(QObject*,QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCoreApplication(const sipQCoreApplication &);
    sipQCoreApplication &operator = (const sipQCoreApplication &);

    char sipPyMethods[8];
};

sipQCoreApplication::sipQCoreApplication(int& a0,char**a1): QCoreApplication(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCoreApplication::~sipQCoreApplication()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCoreApplication::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QCoreApplication);
}

int sipQCoreApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QCoreApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QCoreApplication,_c,_id,_a);

    return _id;
}

void *sipQCoreApplication::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QCoreApplication, _clname)) ? this : QCoreApplication::qt_metacast(_clname);
}

void sipQCoreApplication::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QCoreApplication::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QCoreApplication::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QCoreApplication::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QCoreApplication::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QCoreApplication::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQCoreApplication::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QCoreApplication::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQCoreApplication::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QCoreApplication::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQCoreApplication::notify(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_notify);

    if (!sipMeth)
        return QCoreApplication::notify(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QCoreApplication_argc, "QCoreApplication.argc() -> int");

extern "C" {static PyObject *meth_QCoreApplication_argc(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_argc(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::argc();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_argc, doc_QCoreApplication_argc);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_argv, "QCoreApplication.argv() -> list-of-str");

extern "C" {static PyObject *meth_QCoreApplication_argv(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_argv(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 109 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreapplication.sip"
        // The Python interface returns a list of strings.
        
        int argc = QCoreApplication::argc();
        
        if ((sipRes = PyList_New(argc)) == NULL)
        {
            sipIsErr = 1;
        }
        else
        {
            char **argv = QCoreApplication::argv();
        
            for (int a = 0; a < argc; ++a)
            {
        #if PY_MAJOR_VERSION >= 3
                PyObject *arg_obj = PyUnicode_FromString(argv[a]);
        #else
                PyObject *arg_obj = PyString_FromString(argv[a]);
        #endif
        
                if (!arg_obj)
                {
                    Py_DECREF(sipRes);
                    sipIsErr = 1;
                    break;
                }
        
                PyList_SET_ITEM(sipRes, a, arg_obj);
            }
        }
#line 357 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_argv, doc_QCoreApplication_argv);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setOrganizationDomain, "QCoreApplication.setOrganizationDomain(QString)");

extern "C" {static PyObject *meth_QCoreApplication_setOrganizationDomain(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setOrganizationDomain(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setOrganizationDomain(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setOrganizationDomain, doc_QCoreApplication_setOrganizationDomain);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_organizationDomain, "QCoreApplication.organizationDomain() -> QString");

extern "C" {static PyObject *meth_QCoreApplication_organizationDomain(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_organizationDomain(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::organizationDomain());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_organizationDomain, doc_QCoreApplication_organizationDomain);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setOrganizationName, "QCoreApplication.setOrganizationName(QString)");

extern "C" {static PyObject *meth_QCoreApplication_setOrganizationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setOrganizationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setOrganizationName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setOrganizationName, doc_QCoreApplication_setOrganizationName);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_organizationName, "QCoreApplication.organizationName() -> QString");

extern "C" {static PyObject *meth_QCoreApplication_organizationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_organizationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::organizationName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_organizationName, doc_QCoreApplication_organizationName);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setApplicationName, "QCoreApplication.setApplicationName(QString)");

extern "C" {static PyObject *meth_QCoreApplication_setApplicationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setApplicationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setApplicationName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setApplicationName, doc_QCoreApplication_setApplicationName);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationName, "QCoreApplication.applicationName() -> QString");

extern "C" {static PyObject *meth_QCoreApplication_applicationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::applicationName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationName, doc_QCoreApplication_applicationName);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_arguments, "QCoreApplication.arguments() -> QStringList");

extern "C" {static PyObject *meth_QCoreApplication_arguments(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_arguments(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QCoreApplication::arguments());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_arguments, doc_QCoreApplication_arguments);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_instance, "QCoreApplication.instance() -> QCoreApplication");

extern "C" {static PyObject *meth_QCoreApplication_instance(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_instance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QCoreApplication*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::instance();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QCoreApplication,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_instance, doc_QCoreApplication_instance);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_exec_, "QCoreApplication.exec_() -> int");

extern "C" {static PyObject *meth_QCoreApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exec_(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exec_, doc_QCoreApplication_exec_);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_processEvents, "QCoreApplication.processEvents(QEventLoop.ProcessEventsFlags flags=QEventLoop.AllEvents)\n"
    "QCoreApplication.processEvents(QEventLoop.ProcessEventsFlags, int)");

extern "C" {static PyObject *meth_QCoreApplication_processEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_processEvents(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
        QEventLoop::ProcessEventsFlags* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J1", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::processEvents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1i", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::processEvents(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_processEvents, doc_QCoreApplication_processEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_exit, "QCoreApplication.exit(int returnCode=0)");

extern "C" {static PyObject *meth_QCoreApplication_exit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exit(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;

        static const char *sipKwdList[] = {
            sipName_returnCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::exit(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exit, doc_QCoreApplication_exit);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_sendEvent, "QCoreApplication.sendEvent(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_sendEvent(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        QEvent* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::sendEvent(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_sendEvent, doc_QCoreApplication_sendEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_postEvent, "QCoreApplication.postEvent(QObject, QEvent)\n"
    "QCoreApplication.postEvent(QObject, QEvent, int)");

extern "C" {static PyObject *meth_QCoreApplication_postEvent(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_postEvent(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        QEvent* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J:", sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::postEvent(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QObject* a0;
        QEvent* a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J:i", sipType_QObject, &a0, sipType_QEvent, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::postEvent(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_postEvent, doc_QCoreApplication_postEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_sendPostedEvents, "QCoreApplication.sendPostedEvents(QObject, int)\n"
    "QCoreApplication.sendPostedEvents()");

extern "C" {static PyObject *meth_QCoreApplication_sendPostedEvents(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_sendPostedEvents(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8i", sipType_QObject, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::sendPostedEvents(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::sendPostedEvents();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_sendPostedEvents, doc_QCoreApplication_sendPostedEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_removePostedEvents, "QCoreApplication.removePostedEvents(QObject)\n"
    "QCoreApplication.removePostedEvents(QObject, int)");

extern "C" {static PyObject *meth_QCoreApplication_removePostedEvents(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removePostedEvents(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::removePostedEvents(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QObject* a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8i", sipType_QObject, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::removePostedEvents(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removePostedEvents, doc_QCoreApplication_removePostedEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_hasPendingEvents, "QCoreApplication.hasPendingEvents() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_hasPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_hasPendingEvents(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::hasPendingEvents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_hasPendingEvents, doc_QCoreApplication_hasPendingEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_notify, "QCoreApplication.notify(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QCoreApplication::notify(a0,a1) : sipCpp->notify(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_notify, doc_QCoreApplication_notify);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_startingUp, "QCoreApplication.startingUp() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_startingUp(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_startingUp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::startingUp();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_startingUp, doc_QCoreApplication_startingUp);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_closingDown, "QCoreApplication.closingDown() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_closingDown(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_closingDown(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::closingDown();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_closingDown, doc_QCoreApplication_closingDown);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationDirPath, "QCoreApplication.applicationDirPath() -> QString");

extern "C" {static PyObject *meth_QCoreApplication_applicationDirPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationDirPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::applicationDirPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationDirPath, doc_QCoreApplication_applicationDirPath);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationFilePath, "QCoreApplication.applicationFilePath() -> QString");

extern "C" {static PyObject *meth_QCoreApplication_applicationFilePath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationFilePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::applicationFilePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationFilePath, doc_QCoreApplication_applicationFilePath);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setLibraryPaths, "QCoreApplication.setLibraryPaths(QStringList)");

extern "C" {static PyObject *meth_QCoreApplication_setLibraryPaths(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setLibraryPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setLibraryPaths(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setLibraryPaths, doc_QCoreApplication_setLibraryPaths);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_libraryPaths, "QCoreApplication.libraryPaths() -> QStringList");

extern "C" {static PyObject *meth_QCoreApplication_libraryPaths(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_libraryPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QCoreApplication::libraryPaths());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_libraryPaths, doc_QCoreApplication_libraryPaths);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_addLibraryPath, "QCoreApplication.addLibraryPath(QString)");

extern "C" {static PyObject *meth_QCoreApplication_addLibraryPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_addLibraryPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::addLibraryPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_addLibraryPath, doc_QCoreApplication_addLibraryPath);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_removeLibraryPath, "QCoreApplication.removeLibraryPath(QString)");

extern "C" {static PyObject *meth_QCoreApplication_removeLibraryPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeLibraryPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::removeLibraryPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeLibraryPath, doc_QCoreApplication_removeLibraryPath);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_installTranslator, "QCoreApplication.installTranslator(QTranslator)");

extern "C" {static PyObject *meth_QCoreApplication_installTranslator(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_installTranslator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTranslator* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QTranslator, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::installTranslator(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_installTranslator, doc_QCoreApplication_installTranslator);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_removeTranslator, "QCoreApplication.removeTranslator(QTranslator)");

extern "C" {static PyObject *meth_QCoreApplication_removeTranslator(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeTranslator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTranslator* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QTranslator, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::removeTranslator(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeTranslator, doc_QCoreApplication_removeTranslator);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_translate, "QCoreApplication.translate(str, str, str disambiguation=None, QCoreApplication.Encoding encoding=QCoreApplication.CodecForTr) -> QString\n"
    "QCoreApplication.translate(str, str, str, QCoreApplication.Encoding, int) -> QString");

extern "C" {static PyObject *meth_QCoreApplication_translate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_translate(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject * a1;
        const char* a2 = 0;
        QCoreApplication::Encoding a3 = QCoreApplication::CodecForTr;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_disambiguation,
            sipName_encoding,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "sP0|sE", &a0, &a1, &a2, sipType_QCoreApplication_Encoding, &a3))
        {
            QString*sipRes = 0;
            int sipIsErr = 0;

#line 229 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreapplication.sip"
        const char *source = qpycore_encode(&a1, a3);
        
        if (source)
        {
            sipRes = new QString(QCoreApplication::translate(a0, source, a2, a3));
            Py_DECREF(a1);
        }
        else
        {
            sipIsErr = 1;
        }
#line 1254 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const char* a0;
        PyObject * a1;
        const char* a2;
        QCoreApplication::Encoding a3;
        int a4;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "sP0sEi", &a0, &a1, &a2, sipType_QCoreApplication_Encoding, &a3, &a4))
        {
            QString*sipRes = 0;
            int sipIsErr = 0;

#line 248 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreapplication.sip"
        const char *source = qpycore_encode(&a1, a3);
        
        if (source)
        {
            sipRes = new QString(QCoreApplication::translate(a0, source, a2, a3, a4));
            Py_DECREF(a1);
        }
        else
        {
            sipIsErr = 1;
        }
#line 1287 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_translate, doc_QCoreApplication_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_flush, "QCoreApplication.flush()");

extern "C" {static PyObject *meth_QCoreApplication_flush(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_flush(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::flush();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_flush, doc_QCoreApplication_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setAttribute, "QCoreApplication.setAttribute(Qt.ApplicationAttribute, bool on=True)");

extern "C" {static PyObject *meth_QCoreApplication_setAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setAttribute(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ApplicationAttribute a0;
        bool a1 = 1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "E|b", sipType_Qt_ApplicationAttribute, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setAttribute(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setAttribute, doc_QCoreApplication_setAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_testAttribute, "QCoreApplication.testAttribute(Qt.ApplicationAttribute) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_testAttribute(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_testAttribute(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ApplicationAttribute a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_Qt_ApplicationAttribute, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::testAttribute(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_testAttribute, doc_QCoreApplication_testAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_quit, "QCoreApplication.quit()");

extern "C" {static PyObject *meth_QCoreApplication_quit(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_quit(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::quit();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_quit, doc_QCoreApplication_quit);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_event, "QCoreApplication.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_event(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QCoreApplication::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_event, doc_QCoreApplication_event);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setApplicationVersion, "QCoreApplication.setApplicationVersion(QString)");

extern "C" {static PyObject *meth_QCoreApplication_setApplicationVersion(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setApplicationVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setApplicationVersion(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setApplicationVersion, doc_QCoreApplication_setApplicationVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationVersion, "QCoreApplication.applicationVersion() -> QString");

extern "C" {static PyObject *meth_QCoreApplication_applicationVersion(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::applicationVersion());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationVersion, doc_QCoreApplication_applicationVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationPid, "QCoreApplication.applicationPid() -> int");

extern "C" {static PyObject *meth_QCoreApplication_applicationPid(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationPid(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::applicationPid();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationPid, doc_QCoreApplication_applicationPid);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QCoreApplication(void *, const sipTypeDef *);}
static void *cast_QCoreApplication(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QCoreApplication)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QCoreApplication *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCoreApplication(void *, int);}
static void release_QCoreApplication(void *sipCppV,int)
{
    QCoreApplication *sipCpp = reinterpret_cast<QCoreApplication *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QCoreApplication(sipSimpleWrapper *);}
static void dealloc_QCoreApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQCoreApplication *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QCoreApplication(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QCoreApplication(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCoreApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQCoreApplication *sipCpp = 0;

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 79 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = qpycore_ArgvToC(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQCoreApplication(nargc, argv);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            qpycore_UpdatePyArgv(a0, argc, argv);
        }
#line 1613 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQCoreApplication.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCoreApplication[] = {{141, 255, 1}};


static PyMethodDef methods_QCoreApplication[] = {
    {SIP_MLNAME_CAST(sipName_addLibraryPath), meth_QCoreApplication_addLibraryPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_addLibraryPath)},
    {SIP_MLNAME_CAST(sipName_applicationDirPath), meth_QCoreApplication_applicationDirPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationDirPath)},
    {SIP_MLNAME_CAST(sipName_applicationFilePath), meth_QCoreApplication_applicationFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationFilePath)},
    {SIP_MLNAME_CAST(sipName_applicationName), meth_QCoreApplication_applicationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationName)},
    {SIP_MLNAME_CAST(sipName_applicationPid), meth_QCoreApplication_applicationPid, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationPid)},
    {SIP_MLNAME_CAST(sipName_applicationVersion), meth_QCoreApplication_applicationVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationVersion)},
    {SIP_MLNAME_CAST(sipName_argc), meth_QCoreApplication_argc, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_argc)},
    {SIP_MLNAME_CAST(sipName_arguments), meth_QCoreApplication_arguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_arguments)},
    {SIP_MLNAME_CAST(sipName_argv), meth_QCoreApplication_argv, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_argv)},
    {SIP_MLNAME_CAST(sipName_closingDown), meth_QCoreApplication_closingDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_closingDown)},
    {SIP_MLNAME_CAST(sipName_event), meth_QCoreApplication_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_event)},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QCoreApplication_exec_, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_exec_)},
    {SIP_MLNAME_CAST(sipName_exit), (PyCFunction)meth_QCoreApplication_exit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_exit)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QCoreApplication_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_flush)},
    {SIP_MLNAME_CAST(sipName_hasPendingEvents), meth_QCoreApplication_hasPendingEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_hasPendingEvents)},
    {SIP_MLNAME_CAST(sipName_installTranslator), meth_QCoreApplication_installTranslator, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_installTranslator)},
    {SIP_MLNAME_CAST(sipName_instance), meth_QCoreApplication_instance, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_instance)},
    {SIP_MLNAME_CAST(sipName_libraryPaths), meth_QCoreApplication_libraryPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_libraryPaths)},
    {SIP_MLNAME_CAST(sipName_notify), meth_QCoreApplication_notify, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_notify)},
    {SIP_MLNAME_CAST(sipName_organizationDomain), meth_QCoreApplication_organizationDomain, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_organizationDomain)},
    {SIP_MLNAME_CAST(sipName_organizationName), meth_QCoreApplication_organizationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_organizationName)},
    {SIP_MLNAME_CAST(sipName_postEvent), meth_QCoreApplication_postEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_postEvent)},
    {SIP_MLNAME_CAST(sipName_processEvents), (PyCFunction)meth_QCoreApplication_processEvents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_processEvents)},
    {SIP_MLNAME_CAST(sipName_quit), meth_QCoreApplication_quit, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_quit)},
    {SIP_MLNAME_CAST(sipName_removeLibraryPath), meth_QCoreApplication_removeLibraryPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_removeLibraryPath)},
    {SIP_MLNAME_CAST(sipName_removePostedEvents), meth_QCoreApplication_removePostedEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_removePostedEvents)},
    {SIP_MLNAME_CAST(sipName_removeTranslator), meth_QCoreApplication_removeTranslator, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_removeTranslator)},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_QCoreApplication_sendEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_sendEvent)},
    {SIP_MLNAME_CAST(sipName_sendPostedEvents), meth_QCoreApplication_sendPostedEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_sendPostedEvents)},
    {SIP_MLNAME_CAST(sipName_setApplicationName), meth_QCoreApplication_setApplicationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setApplicationName)},
    {SIP_MLNAME_CAST(sipName_setApplicationVersion), meth_QCoreApplication_setApplicationVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setApplicationVersion)},
    {SIP_MLNAME_CAST(sipName_setAttribute), (PyCFunction)meth_QCoreApplication_setAttribute, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setLibraryPaths), meth_QCoreApplication_setLibraryPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setLibraryPaths)},
    {SIP_MLNAME_CAST(sipName_setOrganizationDomain), meth_QCoreApplication_setOrganizationDomain, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setOrganizationDomain)},
    {SIP_MLNAME_CAST(sipName_setOrganizationName), meth_QCoreApplication_setOrganizationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setOrganizationName)},
    {SIP_MLNAME_CAST(sipName_startingUp), meth_QCoreApplication_startingUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_startingUp)},
    {SIP_MLNAME_CAST(sipName_testAttribute), meth_QCoreApplication_testAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_testAttribute)},
    {SIP_MLNAME_CAST(sipName_translate), (PyCFunction)meth_QCoreApplication_translate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_translate)}
};

static sipEnumMemberDef enummembers_QCoreApplication[] = {
    {sipName_CodecForTr, static_cast<int>(QCoreApplication::CodecForTr), 34},
    {sipName_DefaultCodec, static_cast<int>(QCoreApplication::DefaultCodec), 34},
    {sipName_UnicodeUTF8, static_cast<int>(QCoreApplication::UnicodeUTF8), 34},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QCoreApplication[] = {
    {"aboutToQuit()", "\1QCoreApplication.aboutToQuit", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QCoreApplication, "\1QCoreApplication(list-of-str)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QCoreApplication = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QCoreApplication,
        {0}
    },
    {
        sipNameNr_QCoreApplication,
        {0, 0, 1},
        38, methods_QCoreApplication,
        3, enummembers_QCoreApplication,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCoreApplication,
    -1,
    -1,
    supers_QCoreApplication,
    0,
    init_type_QCoreApplication,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCoreApplication,
    0,
    0,
    0,
    release_QCoreApplication,
    cast_QCoreApplication,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QCoreApplication::staticMetaObject,
    0,
    signals_QCoreApplication,
};
