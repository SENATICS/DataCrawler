/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 91 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTextCodecConverterState.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQTextCodecConverterState.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextCodec_ConverterState(void *, const sipTypeDef *);}
static void *cast_QTextCodec_ConverterState(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextCodec_ConverterState)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextCodec_ConverterState(void *, int);}
static void release_QTextCodec_ConverterState(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextCodec::ConverterState *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTextCodec_ConverterState(sipSimpleWrapper *);}
static void dealloc_QTextCodec_ConverterState(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextCodec_ConverterState(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextCodec_ConverterState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextCodec_ConverterState(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextCodec::ConverterState *sipCpp = 0;

    {
        QTextCodec::ConversionFlags a0def = QTextCodec::DefaultConversion;
        QTextCodec::ConversionFlags* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1", sipType_QTextCodec_ConversionFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextCodec::ConverterState(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QTextCodec_ConversionFlags,a0State);

            return sipCpp;
        }
    }

    return NULL;
}

PyDoc_STRVAR(doc_QTextCodec_ConverterState, "\1QTextCodec.ConverterState(QTextCodec.ConversionFlags flags=QTextCodec.DefaultConversion)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QTextCodec_ConverterState = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextCodec__ConverterState,
        {0}
    },
    {
        sipNameNr_ConverterState,
        {218, 255, 0},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextCodec_ConverterState,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QTextCodec_ConverterState,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextCodec_ConverterState,
    0,
    0,
    0,
    release_QTextCodec_ConverterState,
    cast_QTextCodec_ConverterState,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
