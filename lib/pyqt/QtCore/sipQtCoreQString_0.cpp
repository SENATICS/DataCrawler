/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

#line 72 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 112 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/quuid.sip"
#include <quuid.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 718 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 808 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 121 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
#line 81 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
// This is needed by __hash__().
#include <qhash.h>


// This is needed by the %BIGetCharBufferCode.
#include <qtextcodec.h>
#line 76 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"


PyDoc_STRVAR(doc_QString_0_size, "QString.size() -> int");

extern "C" {static PyObject *meth_QString_0_size(PyObject *, PyObject *);}
static PyObject *meth_QString_0_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->size();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_size, doc_QString_0_size);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_count, "QString.count() -> int\n"
    "QString.count(QString, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.count(QStringRef, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.count(QRegExp) -> int");

extern "C" {static PyObject *meth_QString_0_count(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_count(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QStringRef,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QRegExp* a0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QString, &sipCpp, sipType_QRegExp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_count, doc_QString_0_count);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_resize, "QString.resize(int)");

extern "C" {static PyObject *meth_QString_0_resize(PyObject *, PyObject *);}
static PyObject *meth_QString_0_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QString, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_resize, doc_QString_0_resize);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_fill, "QString.fill(QChar, int size=-1) -> QString");

extern "C" {static PyObject *meth_QString_0_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QChar* a0;
        int a0State = 0;
        int a1 = -1;
        QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QString, &sipCpp, sipType_QChar,&a0, &a0State, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->fill(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QChar,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_fill, doc_QString_0_fill);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_truncate, "QString.truncate(int)");

extern "C" {static PyObject *meth_QString_0_truncate(PyObject *, PyObject *);}
static PyObject *meth_QString_0_truncate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QString, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->truncate(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_truncate, doc_QString_0_truncate);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_chop, "QString.chop(int)");

extern "C" {static PyObject *meth_QString_0_chop(PyObject *, PyObject *);}
static PyObject *meth_QString_0_chop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QString, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->chop(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_chop, doc_QString_0_chop);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_squeeze, "QString.squeeze()");

extern "C" {static PyObject *meth_QString_0_squeeze(PyObject *, PyObject *);}
static PyObject *meth_QString_0_squeeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->squeeze();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_squeeze, doc_QString_0_squeeze);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_arg, "QString.arg(int, int fieldWidth=0, int base=10, QChar fillChar=QLatin1Char(' ')) -> QString\n"
    "QString.arg(float, int fieldWidth=0, str format='g', int precision=-1, QChar fillChar=QLatin1Char(' ')) -> QString\n"
    "QString.arg(int, int fieldWidth=0, int base=10, QChar fillChar=QLatin1Char(' ')) -> QString\n"
    "QString.arg(int, int fieldWidth=0, int base=10, QChar fillChar=QLatin1Char(' ')) -> QString\n"
    "QString.arg(QString, int fieldWidth=0, QChar fillChar=QLatin1Char(' ')) -> QString\n"
    "QString.arg(QString, QString) -> QString\n"
    "QString.arg(QString, QString, QString) -> QString\n"
    "QString.arg(QString, QString, QString, QString) -> QString\n"
    "QString.arg(QString, QString, QString, QString, QString) -> QString\n"
    "QString.arg(QString, QString, QString, QString, QString, QString) -> QString\n"
    "QString.arg(QString, QString, QString, QString, QString, QString, QString) -> QString\n"
    "QString.arg(QString, QString, QString, QString, QString, QString, QString, QString) -> QString\n"
    "QString.arg(QString, QString, QString, QString, QString, QString, QString, QString, QString) -> QString");

extern "C" {static PyObject *meth_QString_0_arg(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_arg(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 0;
        int a2 = 10;
        const QChar& a3def = QLatin1Char(' ');
        const QChar* a3 = &a3def;
        int a3State = 0;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fieldWidth,
            sipName_base,
            sipName_fillChar,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BXi|iiJ1", &sipSelf, sipType_QString, &sipCpp, &a0, &a1, &a2, sipType_QChar,&a3, &a3State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QChar *>(a3),sipType_QChar,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        double a0;
        int a1 = 0;
        char a2 = 'g';
        int a3 = -1;
        const QChar& a4def = QLatin1Char(' ');
        const QChar* a4 = &a4def;
        int a4State = 0;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fieldWidth,
            sipName_format,
            sipName_precision,
            sipName_fillChar,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BXd|iciJ1", &sipSelf, sipType_QString, &sipCpp, &a0, &a1, &a2, &a3, sipType_QChar,&a4, &a4State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QChar *>(a4),sipType_QChar,a4State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qlonglong a0;
        int a1 = 0;
        int a2 = 10;
        const QChar& a3def = QLatin1Char(' ');
        const QChar* a3 = &a3def;
        int a3State = 0;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fieldWidth,
            sipName_base,
            sipName_fillChar,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bn|iiJ1", &sipSelf, sipType_QString, &sipCpp, &a0, &a1, &a2, sipType_QChar,&a3, &a3State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QChar *>(a3),sipType_QChar,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qulonglong a0;
        int a1 = 0;
        int a2 = 10;
        const QChar& a3def = QLatin1Char(' ');
        const QChar* a3 = &a3def;
        int a3State = 0;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fieldWidth,
            sipName_base,
            sipName_fillChar,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bo|iiJ1", &sipSelf, sipType_QString, &sipCpp, &a0, &a1, &a2, sipType_QChar,&a3, &a3State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QChar *>(a3),sipType_QChar,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        int a1 = 0;
        const QChar& a2def = QLatin1Char(' ');
        const QChar* a2 = &a2def;
        int a2State = 0;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fieldWidth,
            sipName_fillChar,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QChar,&a2, &a2State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QChar *>(a2),sipType_QChar,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1J1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1J1J1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        const QString* a4;
        int a4State = 0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1J1J1J1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3,*a4));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        const QString* a4;
        int a4State = 0;
        const QString* a5;
        int a5State = 0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1J1J1J1J1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3,*a4,*a5));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        const QString* a4;
        int a4State = 0;
        const QString* a5;
        int a5State = 0;
        const QString* a6;
        int a6State = 0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1J1J1J1J1J1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State, sipType_QString,&a6, &a6State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3,*a4,*a5,*a6));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);
            sipReleaseType(const_cast<QString *>(a6),sipType_QString,a6State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        const QString* a4;
        int a4State = 0;
        const QString* a5;
        int a5State = 0;
        const QString* a6;
        int a6State = 0;
        const QString* a7;
        int a7State = 0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1J1J1J1J1J1J1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State, sipType_QString,&a6, &a6State, sipType_QString,&a7, &a7State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);
            sipReleaseType(const_cast<QString *>(a6),sipType_QString,a6State);
            sipReleaseType(const_cast<QString *>(a7),sipType_QString,a7State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        const QString* a4;
        int a4State = 0;
        const QString* a5;
        int a5State = 0;
        const QString* a6;
        int a6State = 0;
        const QString* a7;
        int a7State = 0;
        const QString* a8;
        int a8State = 0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1J1J1J1J1J1J1J1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State, sipType_QString,&a6, &a6State, sipType_QString,&a7, &a7State, sipType_QString,&a8, &a8State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);
            sipReleaseType(const_cast<QString *>(a6),sipType_QString,a6State);
            sipReleaseType(const_cast<QString *>(a7),sipType_QString,a7State);
            sipReleaseType(const_cast<QString *>(a8),sipType_QString,a8State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_arg, doc_QString_0_arg);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_indexOf, "QString.indexOf(QString, int from=0, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.indexOf(QStringRef, int from=0, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.indexOf(QLatin1String, int from=0, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.indexOf(QRegExp, int from=0) -> int");

extern "C" {static PyObject *meth_QString_0_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        int a1 = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iE", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;
        int a1 = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iE", &sipSelf, sipType_QString, &sipCpp, sipType_QStringRef,&a0, &a0State, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;
        int a1 = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|iE", &sipSelf, sipType_QString, &sipCpp, sipType_QLatin1String, &a0, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QRegExp* a0;
        int a1 = 0;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QString, &sipCpp, sipType_QRegExp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_indexOf, doc_QString_0_indexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_lastIndexOf, "QString.lastIndexOf(QString, int from=-1, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.lastIndexOf(QStringRef, int from=-1, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.lastIndexOf(QLatin1String, int from=-1, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.lastIndexOf(QRegExp, int from=-1) -> int");

extern "C" {static PyObject *meth_QString_0_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        int a1 = -1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iE", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;
        int a1 = -1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iE", &sipSelf, sipType_QString, &sipCpp, sipType_QStringRef,&a0, &a0State, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;
        int a1 = -1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|iE", &sipSelf, sipType_QString, &sipCpp, sipType_QLatin1String, &a0, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QRegExp* a0;
        int a1 = -1;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QString, &sipCpp, sipType_QRegExp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_lastIndexOf, doc_QString_0_lastIndexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_contains, "QString.contains(QString, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> bool\n"
    "QString.contains(QStringRef, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> bool\n"
    "QString.contains(QRegExp) -> bool");

extern "C" {static PyObject *meth_QString_0_contains(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_contains(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QStringRef,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QRegExp* a0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QString, &sipCpp, sipType_QRegExp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_contains, doc_QString_0_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_section, "QString.section(QString, int, int end=-1, QString.SectionFlags flags=QString.SectionDefault) -> QString\n"
    "QString.section(QRegExp, int, int end=-1, QString.SectionFlags flags=QString.SectionDefault) -> QString");

extern "C" {static PyObject *meth_QString_0_section(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_section(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        int a1;
        int a2 = -1;
        QString::SectionFlags a3def = QString::SectionDefault;
        QString::SectionFlags* a3 = &a3def;
        int a3State = 0;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_end,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1i|iJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, sipType_QString_SectionFlags, &a3, &a3State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->section(*a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a3,sipType_QString_SectionFlags,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QRegExp* a0;
        int a1;
        int a2 = -1;
        QString::SectionFlags a3def = QString::SectionDefault;
        QString::SectionFlags* a3 = &a3def;
        int a3State = 0;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_end,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9i|iJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QRegExp, &a0, &a1, &a2, sipType_QString_SectionFlags, &a3, &a3State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->section(*a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(a3,sipType_QString_SectionFlags,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_section, doc_QString_0_section);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_left, "QString.left(int) -> QString");

extern "C" {static PyObject *meth_QString_0_left(PyObject *, PyObject *);}
static PyObject *meth_QString_0_left(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QString, &sipCpp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->left(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_left, doc_QString_0_left);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_right, "QString.right(int) -> QString");

extern "C" {static PyObject *meth_QString_0_right(PyObject *, PyObject *);}
static PyObject *meth_QString_0_right(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QString, &sipCpp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->right(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_right, doc_QString_0_right);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_mid, "QString.mid(int, int n=-1) -> QString");

extern "C" {static PyObject *meth_QString_0_mid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_mid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = -1;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QString, &sipCpp, &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->mid(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_mid, doc_QString_0_mid);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_startsWith, "QString.startsWith(QString, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> bool\n"
    "QString.startsWith(QStringRef, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> bool\n"
    "QString.startsWith(QLatin1String, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> bool");

extern "C" {static PyObject *meth_QString_0_startsWith(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_startsWith(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startsWith(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QStringRef,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startsWith(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QString, &sipCpp, sipType_QLatin1String, &a0, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startsWith(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_startsWith, doc_QString_0_startsWith);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_endsWith, "QString.endsWith(QString, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> bool\n"
    "QString.endsWith(QStringRef, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> bool\n"
    "QString.endsWith(QLatin1String, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> bool");

extern "C" {static PyObject *meth_QString_0_endsWith(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_endsWith(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endsWith(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QStringRef,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endsWith(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QString, &sipCpp, sipType_QLatin1String, &a0, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endsWith(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_endsWith, doc_QString_0_endsWith);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_leftJustified, "QString.leftJustified(int, QChar fillChar=QLatin1Char(' '), bool truncate=False) -> QString");

extern "C" {static PyObject *meth_QString_0_leftJustified(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_leftJustified(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QChar a1def = QLatin1Char(' ');
        QChar* a1 = &a1def;
        int a1State = 0;
        bool a2 = 0;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fillChar,
            sipName_truncate,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|J1b", &sipSelf, sipType_QString, &sipCpp, &a0, sipType_QChar,&a1, &a1State, &a2))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->leftJustified(a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QChar,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_leftJustified, doc_QString_0_leftJustified);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_rightJustified, "QString.rightJustified(int, QChar fillChar=QLatin1Char(' '), bool truncate=False) -> QString");

extern "C" {static PyObject *meth_QString_0_rightJustified(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_rightJustified(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QChar a1def = QLatin1Char(' ');
        QChar* a1 = &a1def;
        int a1State = 0;
        bool a2 = 0;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fillChar,
            sipName_truncate,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|J1b", &sipSelf, sipType_QString, &sipCpp, &a0, sipType_QChar,&a1, &a1State, &a2))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->rightJustified(a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QChar,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_rightJustified, doc_QString_0_rightJustified);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toLower, "QString.toLower() -> QString");

extern "C" {static PyObject *meth_QString_0_toLower(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toLower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toLower());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toLower, doc_QString_0_toLower);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toUpper, "QString.toUpper() -> QString");

extern "C" {static PyObject *meth_QString_0_toUpper(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toUpper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toUpper());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toUpper, doc_QString_0_toUpper);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_trimmed, "QString.trimmed() -> QString");

extern "C" {static PyObject *meth_QString_0_trimmed(PyObject *, PyObject *);}
static PyObject *meth_QString_0_trimmed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->trimmed());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_trimmed, doc_QString_0_trimmed);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_simplified, "QString.simplified() -> QString");

extern "C" {static PyObject *meth_QString_0_simplified(PyObject *, PyObject *);}
static PyObject *meth_QString_0_simplified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->simplified());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_simplified, doc_QString_0_simplified);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_insert, "QString.insert(int, QString) -> QString\n"
    "QString.insert(int, QLatin1String) -> QString");

extern "C" {static PyObject *meth_QString_0_insert(PyObject *, PyObject *);}
static PyObject *meth_QString_0_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QString, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->insert(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        int a0;
        const QLatin1String* a1;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QString, &sipCpp, &a0, sipType_QLatin1String, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->insert(a0,*a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_insert, doc_QString_0_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_append, "QString.append(QString) -> QString\n"
    "QString.append(QLatin1String) -> QString\n"
    "QString.append(QByteArray) -> QString");

extern "C" {static PyObject *meth_QString_0_append(PyObject *, PyObject *);}
static PyObject *meth_QString_0_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->append(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QLatin1String* a0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QString, &sipCpp, sipType_QLatin1String, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->append(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->append(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_append, doc_QString_0_append);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_prepend, "QString.prepend(QString) -> QString\n"
    "QString.prepend(QLatin1String) -> QString\n"
    "QString.prepend(QByteArray) -> QString");

extern "C" {static PyObject *meth_QString_0_prepend(PyObject *, PyObject *);}
static PyObject *meth_QString_0_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->prepend(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QLatin1String* a0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QString, &sipCpp, sipType_QLatin1String, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->prepend(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->prepend(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_prepend, doc_QString_0_prepend);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_remove, "QString.remove(int, int) -> QString\n"
    "QString.remove(QString, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> QString\n"
    "QString.remove(QRegExp) -> QString");

extern "C" {static PyObject *meth_QString_0_remove(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_remove(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QString, &sipCpp, &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->remove(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->remove(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QRegExp* a0;
        QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QString, &sipCpp, sipType_QRegExp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_remove, doc_QString_0_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_replace, "QString.replace(int, int, QString) -> QString\n"
    "QString.replace(QString, QString, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> QString\n"
    "QString.replace(QRegExp, QString) -> QString\n"
    "QString.replace(QLatin1String, QLatin1String, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> QString\n"
    "QString.replace(QLatin1String, QString, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> QString\n"
    "QString.replace(QString, QLatin1String, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> QString");

extern "C" {static PyObject *meth_QString_0_replace(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_replace(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QString* a2;
        int a2State = 0;
        QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiJ1", &sipSelf, sipType_QString, &sipCpp, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_Qt_CaseSensitivity, &a2))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QRegExp* a0;
        const QString* a1;
        int a1State = 0;
        QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QString, &sipCpp, sipType_QRegExp, &a0, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QLatin1String* a0;
        const QLatin1String* a1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|E", &sipSelf, sipType_QString, &sipCpp, sipType_QLatin1String, &a0, sipType_QLatin1String, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QLatin1String* a0;
        const QString* a1;
        int a1State = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QLatin1String, &a0, sipType_QString,&a1, &a1State, sipType_Qt_CaseSensitivity, &a2))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QLatin1String* a1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J9|E", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLatin1String, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_replace, doc_QString_0_replace);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_split, "QString.split(QString, QString.SplitBehavior behavior=QString.KeepEmptyParts, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> QStringList\n"
    "QString.split(QRegExp, QString.SplitBehavior behavior=QString.KeepEmptyParts) -> QStringList");

extern "C" {static PyObject *meth_QString_0_split(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_split(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QString::SplitBehavior a1 = QString::KeepEmptyParts;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_behavior,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EE", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString_SplitBehavior, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->split(*a0,a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        const QRegExp* a0;
        QString::SplitBehavior a1 = QString::KeepEmptyParts;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_behavior,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QString, &sipCpp, sipType_QRegExp, &a0, sipType_QString_SplitBehavior, &a1))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->split(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_split, doc_QString_0_split);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_normalized, "QString.normalized(QString.NormalizationForm) -> QString\n"
    "QString.normalized(QString.NormalizationForm, QChar.UnicodeVersion) -> QString");

extern "C" {static PyObject *meth_QString_0_normalized(PyObject *, PyObject *);}
static PyObject *meth_QString_0_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString::NormalizationForm a0;
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QString, &sipCpp, sipType_QString_NormalizationForm, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->normalized(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        QString::NormalizationForm a0;
        QChar::UnicodeVersion a1;
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QString, &sipCpp, sipType_QString_NormalizationForm, &a0, sipType_QChar_UnicodeVersion, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->normalized(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_normalized, doc_QString_0_normalized);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toAscii, "QString.toAscii() -> QByteArray");

extern "C" {static PyObject *meth_QString_0_toAscii(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toAscii(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toAscii());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toAscii, doc_QString_0_toAscii);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toLatin1, "QString.toLatin1() -> QByteArray");

extern "C" {static PyObject *meth_QString_0_toLatin1(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toLatin1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toLatin1());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toLatin1, doc_QString_0_toLatin1);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toUtf8, "QString.toUtf8() -> QByteArray");

extern "C" {static PyObject *meth_QString_0_toUtf8(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toUtf8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toUtf8());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toUtf8, doc_QString_0_toUtf8);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toLocal8Bit, "QString.toLocal8Bit() -> QByteArray");

extern "C" {static PyObject *meth_QString_0_toLocal8Bit(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toLocal8Bit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toLocal8Bit());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toLocal8Bit, doc_QString_0_toLocal8Bit);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_fromAscii, "QString.fromAscii(str, int size=-1) -> QString");

extern "C" {static PyObject *meth_QString_0_fromAscii(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_fromAscii(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = -1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "AA|i", &a0Keep, &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::fromAscii(a0,a1));
            Py_END_ALLOW_THREADS
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_fromAscii, doc_QString_0_fromAscii);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_fromLatin1, "QString.fromLatin1(str, int size=-1) -> QString");

extern "C" {static PyObject *meth_QString_0_fromLatin1(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_fromLatin1(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = -1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "AL|i", &a0Keep, &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::fromLatin1(a0,a1));
            Py_END_ALLOW_THREADS
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_fromLatin1, doc_QString_0_fromLatin1);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_fromUtf8, "QString.fromUtf8(str, int size=-1) -> QString");

extern "C" {static PyObject *meth_QString_0_fromUtf8(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_fromUtf8(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = -1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "A8|i", &a0Keep, &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::fromUtf8(a0,a1));
            Py_END_ALLOW_THREADS
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_fromUtf8, doc_QString_0_fromUtf8);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_fromLocal8Bit, "QString.fromLocal8Bit(str, int size=-1) -> QString");

extern "C" {static PyObject *meth_QString_0_fromLocal8Bit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_fromLocal8Bit(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        int a1 = -1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "s|i", &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::fromLocal8Bit(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_fromLocal8Bit, doc_QString_0_fromLocal8Bit);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_compare, "QString.compare(QString) -> int\n"
    "QString.compare(QString, Qt.CaseSensitivity) -> int\n"
    "QString.compare(QLatin1String, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.compare(QStringRef, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.compare(QString, QString) -> int\n"
    "QString.compare(QString, QString, Qt.CaseSensitivity) -> int\n"
    "QString.compare(QString, QLatin1String, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.compare(QLatin1String, QString, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int\n"
    "QString.compare(QString, QStringRef, Qt.CaseSensitivity cs=Qt.CaseSensitive) -> int");

extern "C" {static PyObject *meth_QString_0_compare(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_compare(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1E", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QString, &sipCpp, sipType_QLatin1String, &a0, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QString, &sipCpp, sipType_QStringRef,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::compare(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        Qt::CaseSensitivity a2;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1J1E", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QLatin1String* a1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1J9|E", sipType_QString,&a0, &a0State, sipType_QLatin1String, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;
        const QString* a1;
        int a1State = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J9J1|E", sipType_QLatin1String, &a0, sipType_QString,&a1, &a1State, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QStringRef* a1;
        int a1State = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1J1|E", sipType_QString,&a0, &a0State, sipType_QStringRef,&a1, &a1State, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringRef *>(a1),sipType_QStringRef,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_compare, doc_QString_0_compare);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_localeAwareCompare, "QString.localeAwareCompare(QString) -> int\n"
    "QString.localeAwareCompare(QStringRef) -> int\n"
    "QString.localeAwareCompare(QString, QString) -> int\n"
    "QString.localeAwareCompare(QString, QStringRef) -> int");

extern "C" {static PyObject *meth_QString_0_localeAwareCompare(PyObject *, PyObject *);}
static PyObject *meth_QString_0_localeAwareCompare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->localeAwareCompare(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QStringRef,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->localeAwareCompare(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::localeAwareCompare(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QStringRef* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringRef,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::localeAwareCompare(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringRef *>(a1),sipType_QStringRef,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_localeAwareCompare, doc_QString_0_localeAwareCompare);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toShort, "QString.toShort(int base=10) -> (int, bool)");

extern "C" {static PyObject *meth_QString_0_toShort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_toShort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 10;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QString, &sipCpp, &a1))
        {
            short sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toShort(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(hb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toShort, doc_QString_0_toShort);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toUShort, "QString.toUShort(int base=10) -> (int, bool)");

extern "C" {static PyObject *meth_QString_0_toUShort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_toUShort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 10;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QString, &sipCpp, &a1))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUShort(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(tb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toUShort, doc_QString_0_toUShort);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toInt, "QString.toInt(int base=10) -> (int, bool)");

extern "C" {static PyObject *meth_QString_0_toInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_toInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 10;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QString, &sipCpp, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInt(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ib)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toInt, doc_QString_0_toInt);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toUInt, "QString.toUInt(int base=10) -> (int, bool)");

extern "C" {static PyObject *meth_QString_0_toUInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_toUInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 10;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QString, &sipCpp, &a1))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUInt(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ub)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toUInt, doc_QString_0_toUInt);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toLong, "QString.toLong(int base=10) -> (int, bool)");

extern "C" {static PyObject *meth_QString_0_toLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_toLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 10;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QString, &sipCpp, &a1))
        {
            long sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLong(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(lb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toLong, doc_QString_0_toLong);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toULong, "QString.toULong(int base=10) -> (int, bool)");

extern "C" {static PyObject *meth_QString_0_toULong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_toULong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 10;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QString, &sipCpp, &a1))
        {
            ulong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toULong(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(mb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toULong, doc_QString_0_toULong);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toLongLong, "QString.toLongLong(int base=10) -> (int, bool)");

extern "C" {static PyObject *meth_QString_0_toLongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_toLongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 10;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QString, &sipCpp, &a1))
        {
            qlonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLongLong(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(nb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toLongLong, doc_QString_0_toLongLong);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toULongLong, "QString.toULongLong(int base=10) -> (int, bool)");

extern "C" {static PyObject *meth_QString_0_toULongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_toULongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 10;
        const QString *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QString, &sipCpp, &a1))
        {
            qulonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toULongLong(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ob)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toULongLong, doc_QString_0_toULongLong);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toFloat, "QString.toFloat() -> (float, bool)");

extern "C" {static PyObject *meth_QString_0_toFloat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_toFloat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toFloat(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(fb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toFloat, doc_QString_0_toFloat);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toDouble, "QString.toDouble() -> (float, bool)");

extern "C" {static PyObject *meth_QString_0_toDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_toDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        const QString *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toDouble(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(db)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toDouble, doc_QString_0_toDouble);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_setNum, "QString.setNum(int, int base=10) -> QString\n"
    "QString.setNum(float, str format='g', int precision=6) -> QString\n"
    "QString.setNum(int, int base=10) -> QString\n"
    "QString.setNum(int, int base=10) -> QString");

extern "C" {static PyObject *meth_QString_0_setNum(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_setNum(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 10;
        QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BXi|i", &sipSelf, sipType_QString, &sipCpp, &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->setNum(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        double a0;
        char a1 = 'g';
        int a2 = 6;
        QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_precision,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BXd|ci", &sipSelf, sipType_QString, &sipCpp, &a0, &a1, &a2))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->setNum(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qlonglong a0;
        int a1 = 10;
        QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bn|i", &sipSelf, sipType_QString, &sipCpp, &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->setNum(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qulonglong a0;
        int a1 = 10;
        QString *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bo|i", &sipSelf, sipType_QString, &sipCpp, &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->setNum(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_setNum, doc_QString_0_setNum);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_number, "QString.number(int, int base=10) -> QString\n"
    "QString.number(float, str format='g', int precision=6) -> QString\n"
    "QString.number(int, int base=10) -> QString\n"
    "QString.number(int, int base=10) -> QString");

extern "C" {static PyObject *meth_QString_0_number(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QString_0_number(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 10;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Xi|i", &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::number(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        double a0;
        char a1 = 'g';
        int a2 = 6;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_precision,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Xd|ci", &a0, &a1, &a2))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::number(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qlonglong a0;
        int a1 = 10;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "n|i", &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::number(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qulonglong a0;
        int a1 = 10;

        static const char *sipKwdList[] = {
            NULL,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "o|i", &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::number(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_number, doc_QString_0_number);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_push_back, "QString.push_back(QString)");

extern "C" {static PyObject *meth_QString_0_push_back(PyObject *, PyObject *);}
static PyObject *meth_QString_0_push_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->push_back(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_push_back, doc_QString_0_push_back);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_push_front, "QString.push_front(QString)");

extern "C" {static PyObject *meth_QString_0_push_front(PyObject *, PyObject *);}
static PyObject *meth_QString_0_push_front(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->push_front(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_push_front, doc_QString_0_push_front);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_isNull, "QString.isNull() -> bool");

extern "C" {static PyObject *meth_QString_0_isNull(PyObject *, PyObject *);}
static PyObject *meth_QString_0_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_isNull, doc_QString_0_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_isSimpleText, "QString.isSimpleText() -> bool");

extern "C" {static PyObject *meth_QString_0_isSimpleText(PyObject *, PyObject *);}
static PyObject *meth_QString_0_isSimpleText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSimpleText();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_isSimpleText, doc_QString_0_isSimpleText);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_isRightToLeft, "QString.isRightToLeft() -> bool");

extern "C" {static PyObject *meth_QString_0_isRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QString_0_isRightToLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRightToLeft();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_isRightToLeft, doc_QString_0_isRightToLeft);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_length, "QString.length() -> int");

extern "C" {static PyObject *meth_QString_0_length(PyObject *, PyObject *);}
static PyObject *meth_QString_0_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->length();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_length, doc_QString_0_length);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_at, "QString.at(int) -> QChar");

extern "C" {static PyObject *meth_QString_0_at(PyObject *, PyObject *);}
static PyObject *meth_QString_0_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QString, &sipCpp, &a0))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->at(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_at, doc_QString_0_at);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0___unicode__, "QString.__unicode__() -> unicode");

extern "C" {static PyObject *meth_QString_0___unicode__(PyObject *, PyObject *);}
static PyObject *meth_QString_0___unicode__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 647 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        sipRes = qpycore_PyObject_FromQString(*sipCpp);
#line 3518 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName___unicode__, doc_QString_0___unicode__);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_isEmpty, "QString.isEmpty() -> bool");

extern "C" {static PyObject *meth_QString_0_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QString_0_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_isEmpty, doc_QString_0_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_clear, "QString.clear()");

extern "C" {static PyObject *meth_QString_0_clear(PyObject *, PyObject *);}
static PyObject *meth_QString_0_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_clear, doc_QString_0_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_capacity, "QString.capacity() -> int");

extern "C" {static PyObject *meth_QString_0_capacity(PyObject *, PyObject *);}
static PyObject *meth_QString_0_capacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->capacity();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_capacity, doc_QString_0_capacity);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_reserve, "QString.reserve(int)");

extern "C" {static PyObject *meth_QString_0_reserve(PyObject *, PyObject *);}
static PyObject *meth_QString_0_reserve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QString, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reserve(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_reserve, doc_QString_0_reserve);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_toCaseFolded, "QString.toCaseFolded() -> QString");

extern "C" {static PyObject *meth_QString_0_toCaseFolded(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toCaseFolded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QString, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toCaseFolded());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_toCaseFolded, doc_QString_0_toCaseFolded);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_repeated, "QString.repeated(int) -> QString");

extern "C" {static PyObject *meth_QString_0_repeated(PyObject *, PyObject *);}
static PyObject *meth_QString_0_repeated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QString, &sipCpp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->repeated(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_repeated, doc_QString_0_repeated);

    return NULL;
}


PyDoc_STRVAR(doc_QString_0_swap, "QString.swap(QString)");

extern "C" {static PyObject *meth_QString_0_swap(PyObject *, PyObject *);}
static PyObject *meth_QString_0_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString* a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QString, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->swap(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName_swap, doc_QString_0_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QString_0___add__(PyObject *,PyObject *);}
static PyObject *slot_QString_0___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((*a0 + *a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QByteArray* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((*a0 + *a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QString_0___imul__(PyObject *,int);}
static PyObject *slot_QString_0___imul__(PyObject *sipSelf,int a0)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
#line 671 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        QString orig(*sipCpp);
        
        sipCpp->clear();
        
        while (a0-- > 0)
            *sipCpp += orig;
#line 3808 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QString_0___mul__(PyObject *,int);}
static PyObject *slot_QString_0___mul__(PyObject *sipSelf,int a0)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
            QString*sipRes = 0;

#line 663 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        sipRes = new QString();
        
        while (a0-- > 0)
            *sipRes += *sipCpp;
#line 3837 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    return 0;
}


extern "C" {static long slot_QString_0___hash__(PyObject *);}
static long slot_QString_0___hash__(PyObject *sipSelf)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 658 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        sipRes = qHash(*sipCpp);
#line 3862 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QString_0___str__(PyObject *);}
static PyObject *slot_QString_0___str__(PyObject *sipSelf)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 653 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        sipRes = qpycore_PyObject_FromQString(*sipCpp);
#line 3887 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QString_0___contains__(PyObject *,PyObject *);}
static int slot_QString_0___contains__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            int sipRes = 0;

#line 640 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        // It looks like you can't assign QBool to int.
        sipRes = bool(sipCpp->contains(*a0));
#line 3918 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName___contains__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_QString_0___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QString_0___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            QString*sipRes = 0;
            int sipIsErr = 0;

#line 602 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        // Note that we return a QString (rather than a QChar as Qt does).  This makes
        // things a bit easier in Python (because it doesn't distinguish between
        // characters and strings), although now that a QChar can be used whenever a
        // QString is expected it doesn't really matter.
        SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = new QString(sipCpp->operator[]((int)idx));
#line 3961 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            QString*sipRes = 0;
            int sipIsErr = 0;

#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        SIP_SSIZE_T len, start, stop, step, slicelength, i;
        
        len = sipCpp->length();
        
        #if PY_VERSION_HEX >= 0x03020000
        if (PySlice_GetIndicesEx(a0, len, &start, &stop, &step, &slicelength) < 0)
        #else
        if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
        #endif
            sipIsErr = 1;
        else
        {
            sipRes = new QString();
        
            for (i = 0; i < slicelength; ++i)
            {
                sipRes -> append(sipCpp->at(start));
                start += step;
            }
        }
#line 3999 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QString, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static PyObject *slot_QString_0___ge__(PyObject *,PyObject *);}
static PyObject *slot_QString_0___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes = 0;

#line 569 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        // In Qt5 this is a global operator and so SIP appends it to the list of class operators.
        // However these must appear before the corresponding QByteArray argument operator.
        #if QT_VERSION >= 0x050000
            sipRes = operator>=(*sipCpp, *a0);
        #else
            sipRes = sipCpp->QString::operator>=(*a0);
        #endif
#line 4041 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator>=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator>=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ge_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___le__(PyObject *,PyObject *);}
static PyObject *slot_QString_0___le__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes = 0;

#line 558 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        // In Qt5 this is a global operator and so SIP appends it to the list of class operators.
        // However these must appear before the corresponding QByteArray argument operator.
        #if QT_VERSION >= 0x050000
            sipRes = operator<=(*sipCpp, *a0);
        #else
            sipRes = sipCpp->QString::operator<=(*a0);
        #endif
#line 4115 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator<=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator<=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,le_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___ne__(PyObject *,PyObject *);}
static PyObject *slot_QString_0___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes = 0;

#line 547 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        // In Qt5 this is a global operator and so SIP appends it to the list of class operators.
        // However these must appear before the corresponding QByteArray argument operator.
        #if QT_VERSION >= 0x050000
            sipRes = operator!=(*sipCpp, *a0);
        #else
            sipRes = sipCpp->QString::operator!=(*a0);
        #endif
#line 4189 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator!=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStringRef,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___gt__(PyObject *,PyObject *);}
static PyObject *slot_QString_0___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes = 0;

#line 536 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        // In Qt5 this is a global operator and so SIP appends it to the list of class operators.
        // However these must appear before the corresponding QByteArray argument operator.
        #if QT_VERSION >= 0x050000
            sipRes = operator>(*sipCpp, *a0);
        #else
            sipRes = sipCpp->QString::operator<(*a0);
        #endif
#line 4280 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator>(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator>(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,gt_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___lt__(PyObject *,PyObject *);}
static PyObject *slot_QString_0___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes = 0;

#line 525 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        // In Qt5 this is a global operator and so SIP appends it to the list of class operators.
        // However these must appear before the corresponding QByteArray argument operator.
        #if QT_VERSION >= 0x050000
            sipRes = operator<(*sipCpp, *a0);
        #else
            sipRes = sipCpp->QString::operator<(*a0);
        #endif
#line 4354 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator<(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,lt_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___eq__(PyObject *,PyObject *);}
static PyObject *slot_QString_0___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes = 0;

#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        // In Qt5 this is a global operator and so SIP appends it to the list of class operators.
        // However these must appear before the corresponding QByteArray argument operator.
        #if QT_VERSION >= 0x050000
            sipRes = operator==(*sipCpp, *a0);
        #else
            sipRes = sipCpp->QString::operator==(*a0);
        #endif
#line 4428 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator==(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QStringRef* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStringRef,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QString_0___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        QChar::SpecialCharacter a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1E", sipType_QChar_SpecialCharacter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QString::operator+=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QString::operator+=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QString::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QString::operator+=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QString_0___len__(PyObject *);}
static SIP_SSIZE_T slot_QString_0___len__(PyObject *sipSelf)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 4585 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QString_0___repr__(PyObject *);}
static PyObject *slot_QString_0___repr__(PyObject *sipSelf)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 257 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
        PyObject *uni = qpycore_PyObject_FromQString(*sipCpp);
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QString(%R)", uni);
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QString(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
#line 4623 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QString_0(void *, const sipTypeDef *);}
static void *cast_QString_0(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QString)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QString_0(void *, int);}
static void release_QString_0(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QString *>(sipCppV);

    Py_END_ALLOW_THREADS
}


#if PY_MAJOR_VERSION < 3
extern "C" {static SIP_SSIZE_T getreadbuffer_QString(PyObject *, void *, SIP_SSIZE_T, void **);}
static SIP_SSIZE_T getreadbuffer_QString(PyObject *sipSelf, void *sipCppV, SIP_SSIZE_T sipSegment, void **sipPtrPtr)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipCppV);
    SIP_SSIZE_T sipRes;

#line 163 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
    if (sipSegment != 0)
    {
        PyErr_SetString(PyExc_SystemError, "accessing non-existent QString segment");
        sipRes = -1;
    }
    else
    {
        // To keep things easy we convert to a Python Unicode object, keep a
        // reference to it and expose its contents.
        PyObject *uobj = qpycore_PyObject_FromQString(*sipCpp);
    
        if (uobj)
        {
            Py_XDECREF(((sipSimpleWrapper *)sipSelf)->user);
            ((sipSimpleWrapper *)sipSelf)->user = uobj;
    
            *sipPtrPtr = (void *)PyUnicode_AS_UNICODE(uobj);
            sipRes = PyUnicode_GET_DATA_SIZE(uobj);
        }
        else
        {
            sipRes = -1;
        }
    }
#line 4688 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

    return sipRes;
}
#endif


#if PY_MAJOR_VERSION < 3
extern "C" {static SIP_SSIZE_T getsegcount_QString(PyObject *, void *, SIP_SSIZE_T *);}
static SIP_SSIZE_T getsegcount_QString(PyObject *, void *sipCppV, SIP_SSIZE_T *sipLenPtr)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipCppV);
    SIP_SSIZE_T sipRes;

#line 190 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
    if (sipLenPtr)
        *sipLenPtr = sipCpp->size() * sizeof (Py_UNICODE);
    
    sipRes = 1;
#line 4707 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

    return sipRes;
}
#endif


#if PY_MAJOR_VERSION < 3
extern "C" {static SIP_SSIZE_T getcharbuffer_QString(PyObject *, void *, SIP_SSIZE_T, void **);}
static SIP_SSIZE_T getcharbuffer_QString(PyObject *sipSelf, void *sipCppV, SIP_SSIZE_T sipSegment, void **sipPtrPtr)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipCppV);
    SIP_SSIZE_T sipRes;

#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
    if (sipSegment != 0)
    {
        PyErr_SetString(PyExc_SystemError, "accessing non-existent QString segment");
        sipRes = -1;
    }
    else
    {
        static QTextCodec *codec = 0;
        static bool check_codec = true;
    
        // For the first time only, try and find a Qt codec that corresponds to the
        // default Python codec.  If one wasn't found then fall back to ASCII
        // (which is actually the codec returned by QTextCodec::codecForCStrings()).
        if (check_codec)
        {
            codec = QTextCodec::codecForName(PyUnicode_GetDefaultEncoding());
            check_codec = false;
        }
    
        QByteArray enc;
    
        if (codec)
            enc = codec->fromUnicode(*sipCpp);
        else
    #if QT_VERSION >= 0x050000
            enc = sipCpp->toLatin1();
    #else
            enc = sipCpp->toAscii();
    #endif
        
        // A Python string is the most convenient method to save the encoded
        // version on the heap.
        PyObject *encobj = ((sipSimpleWrapper *)sipSelf)->user;
    
        Py_XDECREF(encobj);
    
        if ((encobj = PyString_FromStringAndSize(enc.data(), enc.size())) != NULL)
        {
            *sipPtrPtr = (void *)PyString_AS_STRING(encobj);
            sipRes = PyString_GET_SIZE(encobj);
    
            ((sipSimpleWrapper *)sipSelf)->user = encobj;
        }
        else
            sipRes = -1;
    }
#line 4768 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

    return sipRes;
}
#endif


extern "C" {static PyObject *pickle_QString(void *);}
static PyObject *pickle_QString(void *sipCppV)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipCppV);
    PyObject *sipRes;

#line 246 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
    sipRes = Py_BuildValue((char *)"(O)", qpycore_PyObject_FromQString(*sipCpp));
#line 4783 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"

    return sipRes;
}


extern "C" {static void assign_QString_0(void *, SIP_SSIZE_T, const void *);}
static void assign_QString_0(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QString *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QString *>(sipSrc);
}


extern "C" {static void *array_QString_0(SIP_SSIZE_T);}
static void *array_QString_0(SIP_SSIZE_T sipNrElem)
{
    return new QString[sipNrElem];
}


extern "C" {static void *copy_QString_0(const void *, SIP_SSIZE_T);}
static void *copy_QString_0(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QString(reinterpret_cast<const QString *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QString_0(sipSimpleWrapper *);}
static void dealloc_QString_0(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QString_0(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QString_0(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QString_0(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QString *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;
        QChar* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iJ1", &a0, sipType_QChar,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QChar,a1State);

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        QUuid* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QUuid, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString(a0->operator QString());
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_QString_0(PyObject *, void **, int *, PyObject *);}
static int convertTo_QString_0(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QString **sipCppPtr = reinterpret_cast<QString **>(sipCppPtrV);

#line 90 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
// See the comments for the QByteArray %ConvertToTypeCode for an explanation
// of the conversions that are done below.

if (sipIsErr == NULL)
    return (PyUnicode_Check(sipPy) ||
#if PY_MAJOR_VERSION < 3
            PyString_Check(sipPy) ||
#endif
            sipCanConvertToType(sipPy, sipType_QLatin1String, 0) ||
            sipCanConvertToType(sipPy, sipType_QChar, 0) ||
            sipCanConvertToType(sipPy, sipType_QString, SIP_NO_CONVERTORS));

if (PyUnicode_Check(sipPy))
{
    *sipCppPtr = new QString(qpycore_PyObject_AsQString(sipPy));

    return sipGetState(sipTransferObj);
}

#if PY_MAJOR_VERSION < 3
if (PyString_Check(sipPy))
{
    *sipCppPtr = new QString(PyString_AS_STRING(sipPy));

    return sipGetState(sipTransferObj);
}
#endif

if (sipCanConvertToType(sipPy, sipType_QLatin1String, 0))
{
    int state;
    QLatin1String *q = reinterpret_cast<QLatin1String *>(sipConvertToType(sipPy,
            sipType_QLatin1String, 0, 0, &state, sipIsErr));

    if (*sipIsErr)
    {
        sipReleaseType(q, sipType_QLatin1String, state);
        return 0;
    }

    *sipCppPtr = new QString(*q);

    sipReleaseType(q, sipType_QLatin1String, state);

    return sipGetState(sipTransferObj);
}

if (sipCanConvertToType(sipPy, sipType_QChar, 0))
{
    int state;
    QChar *q = reinterpret_cast<QChar *>(sipConvertToType(sipPy,
            sipType_QChar, 0, 0, &state, sipIsErr));

    if (*sipIsErr)
    {
        sipReleaseType(q, sipType_QChar, state);
        return 0;
    }

    *sipCppPtr = new QString(*q);

    sipReleaseType(q, sipType_QChar, state);

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QString *>(sipConvertToType(sipPy,
        sipType_QString, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 4975 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQString_0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QString_0[] = {
    {(void *)slot_QString_0___add__, add_slot},
    {(void *)slot_QString_0___imul__, irepeat_slot},
    {(void *)slot_QString_0___mul__, repeat_slot},
    {(void *)slot_QString_0___hash__, hash_slot},
    {(void *)slot_QString_0___str__, str_slot},
    {(void *)slot_QString_0___contains__, contains_slot},
    {(void *)slot_QString_0___getitem__, getitem_slot},
    {(void *)slot_QString_0___ge__, ge_slot},
    {(void *)slot_QString_0___le__, le_slot},
    {(void *)slot_QString_0___ne__, ne_slot},
    {(void *)slot_QString_0___gt__, gt_slot},
    {(void *)slot_QString_0___lt__, lt_slot},
    {(void *)slot_QString_0___eq__, eq_slot},
    {(void *)slot_QString_0___iadd__, iconcat_slot},
    {(void *)slot_QString_0___len__, len_slot},
    {(void *)slot_QString_0___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QString_0[] = {
    {SIP_MLNAME_CAST(sipName___unicode__), meth_QString_0___unicode__, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0___unicode__)},
    {SIP_MLNAME_CAST(sipName_append), meth_QString_0_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_append)},
    {SIP_MLNAME_CAST(sipName_arg), (PyCFunction)meth_QString_0_arg, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_arg)},
    {SIP_MLNAME_CAST(sipName_at), meth_QString_0_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_at)},
    {SIP_MLNAME_CAST(sipName_capacity), meth_QString_0_capacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_capacity)},
    {SIP_MLNAME_CAST(sipName_chop), meth_QString_0_chop, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_chop)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QString_0_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_clear)},
    {SIP_MLNAME_CAST(sipName_compare), (PyCFunction)meth_QString_0_compare, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_compare)},
    {SIP_MLNAME_CAST(sipName_contains), (PyCFunction)meth_QString_0_contains, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_contains)},
    {SIP_MLNAME_CAST(sipName_count), (PyCFunction)meth_QString_0_count, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_count)},
    {SIP_MLNAME_CAST(sipName_endsWith), (PyCFunction)meth_QString_0_endsWith, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_endsWith)},
    {SIP_MLNAME_CAST(sipName_fill), (PyCFunction)meth_QString_0_fill, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_fill)},
    {SIP_MLNAME_CAST(sipName_fromAscii), (PyCFunction)meth_QString_0_fromAscii, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_fromAscii)},
    {SIP_MLNAME_CAST(sipName_fromLatin1), (PyCFunction)meth_QString_0_fromLatin1, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_fromLatin1)},
    {SIP_MLNAME_CAST(sipName_fromLocal8Bit), (PyCFunction)meth_QString_0_fromLocal8Bit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_fromLocal8Bit)},
    {SIP_MLNAME_CAST(sipName_fromUtf8), (PyCFunction)meth_QString_0_fromUtf8, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_fromUtf8)},
    {SIP_MLNAME_CAST(sipName_indexOf), (PyCFunction)meth_QString_0_indexOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_indexOf)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QString_0_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_insert)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QString_0_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QString_0_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_isNull)},
    {SIP_MLNAME_CAST(sipName_isRightToLeft), meth_QString_0_isRightToLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_isRightToLeft)},
    {SIP_MLNAME_CAST(sipName_isSimpleText), meth_QString_0_isSimpleText, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_isSimpleText)},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), (PyCFunction)meth_QString_0_lastIndexOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_lastIndexOf)},
    {SIP_MLNAME_CAST(sipName_left), meth_QString_0_left, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_left)},
    {SIP_MLNAME_CAST(sipName_leftJustified), (PyCFunction)meth_QString_0_leftJustified, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_leftJustified)},
    {SIP_MLNAME_CAST(sipName_length), meth_QString_0_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_length)},
    {SIP_MLNAME_CAST(sipName_localeAwareCompare), meth_QString_0_localeAwareCompare, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_localeAwareCompare)},
    {SIP_MLNAME_CAST(sipName_mid), (PyCFunction)meth_QString_0_mid, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_mid)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QString_0_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_normalized)},
    {SIP_MLNAME_CAST(sipName_number), (PyCFunction)meth_QString_0_number, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_number)},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QString_0_prepend, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_prepend)},
    {SIP_MLNAME_CAST(sipName_push_back), meth_QString_0_push_back, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_push_back)},
    {SIP_MLNAME_CAST(sipName_push_front), meth_QString_0_push_front, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_push_front)},
    {SIP_MLNAME_CAST(sipName_remove), (PyCFunction)meth_QString_0_remove, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_remove)},
    {SIP_MLNAME_CAST(sipName_repeated), meth_QString_0_repeated, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_repeated)},
    {SIP_MLNAME_CAST(sipName_replace), (PyCFunction)meth_QString_0_replace, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_replace)},
    {SIP_MLNAME_CAST(sipName_reserve), meth_QString_0_reserve, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_reserve)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QString_0_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_resize)},
    {SIP_MLNAME_CAST(sipName_right), meth_QString_0_right, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_right)},
    {SIP_MLNAME_CAST(sipName_rightJustified), (PyCFunction)meth_QString_0_rightJustified, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_rightJustified)},
    {SIP_MLNAME_CAST(sipName_section), (PyCFunction)meth_QString_0_section, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_section)},
    {SIP_MLNAME_CAST(sipName_setNum), (PyCFunction)meth_QString_0_setNum, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_setNum)},
    {SIP_MLNAME_CAST(sipName_simplified), meth_QString_0_simplified, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_simplified)},
    {SIP_MLNAME_CAST(sipName_size), meth_QString_0_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_size)},
    {SIP_MLNAME_CAST(sipName_split), (PyCFunction)meth_QString_0_split, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_split)},
    {SIP_MLNAME_CAST(sipName_squeeze), meth_QString_0_squeeze, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_squeeze)},
    {SIP_MLNAME_CAST(sipName_startsWith), (PyCFunction)meth_QString_0_startsWith, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_startsWith)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QString_0_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_swap)},
    {SIP_MLNAME_CAST(sipName_toAscii), meth_QString_0_toAscii, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_toAscii)},
    {SIP_MLNAME_CAST(sipName_toCaseFolded), meth_QString_0_toCaseFolded, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_toCaseFolded)},
    {SIP_MLNAME_CAST(sipName_toDouble), (PyCFunction)meth_QString_0_toDouble, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_toDouble)},
    {SIP_MLNAME_CAST(sipName_toFloat), (PyCFunction)meth_QString_0_toFloat, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_toFloat)},
    {SIP_MLNAME_CAST(sipName_toInt), (PyCFunction)meth_QString_0_toInt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_toInt)},
    {SIP_MLNAME_CAST(sipName_toLatin1), meth_QString_0_toLatin1, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_toLatin1)},
    {SIP_MLNAME_CAST(sipName_toLocal8Bit), meth_QString_0_toLocal8Bit, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_toLocal8Bit)},
    {SIP_MLNAME_CAST(sipName_toLong), (PyCFunction)meth_QString_0_toLong, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_toLong)},
    {SIP_MLNAME_CAST(sipName_toLongLong), (PyCFunction)meth_QString_0_toLongLong, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_toLongLong)},
    {SIP_MLNAME_CAST(sipName_toLower), meth_QString_0_toLower, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_toLower)},
    {SIP_MLNAME_CAST(sipName_toShort), (PyCFunction)meth_QString_0_toShort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_toShort)},
    {SIP_MLNAME_CAST(sipName_toUInt), (PyCFunction)meth_QString_0_toUInt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_toUInt)},
    {SIP_MLNAME_CAST(sipName_toULong), (PyCFunction)meth_QString_0_toULong, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_toULong)},
    {SIP_MLNAME_CAST(sipName_toULongLong), (PyCFunction)meth_QString_0_toULongLong, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_toULongLong)},
    {SIP_MLNAME_CAST(sipName_toUShort), (PyCFunction)meth_QString_0_toUShort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QString_0_toUShort)},
    {SIP_MLNAME_CAST(sipName_toUpper), meth_QString_0_toUpper, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_toUpper)},
    {SIP_MLNAME_CAST(sipName_toUtf8), meth_QString_0_toUtf8, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_toUtf8)},
    {SIP_MLNAME_CAST(sipName_trimmed), meth_QString_0_trimmed, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_trimmed)},
    {SIP_MLNAME_CAST(sipName_truncate), meth_QString_0_truncate, METH_VARARGS, SIP_MLDOC_CAST(doc_QString_0_truncate)}
};

static sipEnumMemberDef enummembers_QString_0[] = {
    {sipName_KeepEmptyParts, static_cast<int>(QString::KeepEmptyParts), 201},
    {sipName_NormalizationForm_C, static_cast<int>(QString::NormalizationForm_C), 198},
    {sipName_NormalizationForm_D, static_cast<int>(QString::NormalizationForm_D), 198},
    {sipName_NormalizationForm_KC, static_cast<int>(QString::NormalizationForm_KC), 198},
    {sipName_NormalizationForm_KD, static_cast<int>(QString::NormalizationForm_KD), 198},
    {sipName_SectionCaseInsensitiveSeps, static_cast<int>(QString::SectionCaseInsensitiveSeps), 199},
    {sipName_SectionDefault, static_cast<int>(QString::SectionDefault), 199},
    {sipName_SectionIncludeLeadingSep, static_cast<int>(QString::SectionIncludeLeadingSep), 199},
    {sipName_SectionIncludeTrailingSep, static_cast<int>(QString::SectionIncludeTrailingSep), 199},
    {sipName_SectionSkipEmpty, static_cast<int>(QString::SectionSkipEmpty), 199},
    {sipName_SkipEmptyParts, static_cast<int>(QString::SkipEmptyParts), 201},
};

PyDoc_STRVAR(doc_QString_0, "\1QString()\n"
    "QString(int, QChar)\n"
    "QString(QString)\n"
    "QString(QByteArray)\n"
    "QString(QUuid)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QString_0 = {
{
    {
        0,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QString,
        {0}
    },
    {
        sipNameNr_QString,
        {0, 0, 1},
        67, methods_QString_0,
        11, enummembers_QString_0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QString_0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QString_0,
    init_type_QString_0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    getreadbuffer_QString,
    0,
    getsegcount_QString,
    getcharbuffer_QString,
#endif
    dealloc_QString_0,
    assign_QString_0,
    array_QString_0,
    copy_QString_0,
    release_QString_0,
    cast_QString_0,
    convertTo_QString_0,
    0,
    0,
    pickle_QString,
    0,
    0
},
    0,
    0,
    0
};
