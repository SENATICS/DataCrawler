/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 121 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQChar_0.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQChar_0.cpp"
#line 72 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQChar_0.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQChar_0.cpp"
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
// This is needed by __hash__().
#include <qhash.h>
#line 48 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQChar_0.cpp"


PyDoc_STRVAR(doc_QChar_0___unicode__, "QChar.__unicode__() -> unicode");

extern "C" {static PyObject *meth_QChar_0___unicode__(PyObject *, PyObject *);}
static PyObject *meth_QChar_0___unicode__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
        sipRes = qpycore_PyObject_FromQString(QString(*sipCpp));
#line 67 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQChar_0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName___unicode__, doc_QChar_0___unicode__);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_digitValue, "QChar.digitValue() -> int\n"
    "QChar.digitValue(int) -> int");

extern "C" {static PyObject *meth_QChar_0_digitValue(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_digitValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->digitValue();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::digitValue(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_digitValue, doc_QChar_0_digitValue);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_toLower, "QChar.toLower() -> QChar\n"
    "QChar.toLower(int) -> int");

extern "C" {static PyObject *meth_QChar_0_toLower(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toLower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->toLower());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::toLower(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_toLower, doc_QChar_0_toLower);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_toUpper, "QChar.toUpper() -> QChar\n"
    "QChar.toUpper(int) -> int");

extern "C" {static PyObject *meth_QChar_0_toUpper(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toUpper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->toUpper());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::toUpper(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_toUpper, doc_QChar_0_toUpper);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_category, "QChar.category() -> QChar.Category\n"
    "QChar.category(int) -> QChar.Category");

extern "C" {static PyObject *meth_QChar_0_category(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_category(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QChar::Category sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->category();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Category);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            QChar::Category sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::category(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Category);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_category, doc_QChar_0_category);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_direction, "QChar.direction() -> QChar.Direction\n"
    "QChar.direction(int) -> QChar.Direction");

extern "C" {static PyObject *meth_QChar_0_direction(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_direction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QChar::Direction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->direction();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Direction);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            QChar::Direction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::direction(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Direction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_direction, doc_QChar_0_direction);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_joining, "QChar.joining() -> QChar.Joining\n"
    "QChar.joining(int) -> QChar.Joining");

extern "C" {static PyObject *meth_QChar_0_joining(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_joining(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QChar::Joining sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->joining();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Joining);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            QChar::Joining sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::joining(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Joining);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_joining, doc_QChar_0_joining);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_hasMirrored, "QChar.hasMirrored() -> bool");

extern "C" {static PyObject *meth_QChar_0_hasMirrored(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_hasMirrored(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasMirrored();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_hasMirrored, doc_QChar_0_hasMirrored);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isLower, "QChar.isLower() -> bool");

extern "C" {static PyObject *meth_QChar_0_isLower(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isLower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLower();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isLower, doc_QChar_0_isLower);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isUpper, "QChar.isUpper() -> bool");

extern "C" {static PyObject *meth_QChar_0_isUpper(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isUpper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isUpper();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isUpper, doc_QChar_0_isUpper);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_mirroredChar, "QChar.mirroredChar() -> QChar\n"
    "QChar.mirroredChar(int) -> int");

extern "C" {static PyObject *meth_QChar_0_mirroredChar(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_mirroredChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->mirroredChar());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::mirroredChar(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_mirroredChar, doc_QChar_0_mirroredChar);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_decomposition, "QChar.decomposition() -> QString\n"
    "QChar.decomposition(int) -> QString");

extern "C" {static PyObject *meth_QChar_0_decomposition(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_decomposition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->decomposition());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QChar::decomposition(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_decomposition, doc_QChar_0_decomposition);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_decompositionTag, "QChar.decompositionTag() -> QChar.Decomposition\n"
    "QChar.decompositionTag(int) -> QChar.Decomposition");

extern "C" {static PyObject *meth_QChar_0_decompositionTag(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_decompositionTag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QChar::Decomposition sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->decompositionTag();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Decomposition);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            QChar::Decomposition sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::decompositionTag(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Decomposition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_decompositionTag, doc_QChar_0_decompositionTag);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_combiningClass, "QChar.combiningClass() -> str\n"
    "QChar.combiningClass(int) -> str");

extern "C" {static PyObject *meth_QChar_0_combiningClass(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_combiningClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            unsigned char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->combiningClass();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            unsigned char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::combiningClass(a0);
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_combiningClass, doc_QChar_0_combiningClass);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_unicodeVersion, "QChar.unicodeVersion() -> QChar.UnicodeVersion\n"
    "QChar.unicodeVersion(int) -> QChar.UnicodeVersion");

extern "C" {static PyObject *meth_QChar_0_unicodeVersion(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_unicodeVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QChar::UnicodeVersion sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unicodeVersion();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_UnicodeVersion);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            QChar::UnicodeVersion sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::unicodeVersion(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_UnicodeVersion);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_unicodeVersion, doc_QChar_0_unicodeVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_toAscii, "QChar.toAscii() -> str");

extern "C" {static PyObject *meth_QChar_0_toAscii(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toAscii(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toAscii();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_toAscii, doc_QChar_0_toAscii);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_unicode, "QChar.unicode() -> int");

extern "C" {static PyObject *meth_QChar_0_unicode(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_unicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unicode();
            Py_END_ALLOW_THREADS

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_unicode, doc_QChar_0_unicode);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_fromAscii, "QChar.fromAscii(str) -> QChar");

extern "C" {static PyObject *meth_QChar_0_fromAscii(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_fromAscii(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "aA", &a0))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(QChar::fromAscii(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_fromAscii, doc_QChar_0_fromAscii);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isNull, "QChar.isNull() -> bool");

extern "C" {static PyObject *meth_QChar_0_isNull(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isNull, doc_QChar_0_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isPrint, "QChar.isPrint() -> bool");

extern "C" {static PyObject *meth_QChar_0_isPrint(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isPrint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isPrint();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isPrint, doc_QChar_0_isPrint);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isPunct, "QChar.isPunct() -> bool");

extern "C" {static PyObject *meth_QChar_0_isPunct(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isPunct(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isPunct();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isPunct, doc_QChar_0_isPunct);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isSpace, "QChar.isSpace() -> bool");

extern "C" {static PyObject *meth_QChar_0_isSpace(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSpace();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isSpace, doc_QChar_0_isSpace);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isMark, "QChar.isMark() -> bool");

extern "C" {static PyObject *meth_QChar_0_isMark(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isMark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isMark();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isMark, doc_QChar_0_isMark);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isLetter, "QChar.isLetter() -> bool");

extern "C" {static PyObject *meth_QChar_0_isLetter(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isLetter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLetter();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isLetter, doc_QChar_0_isLetter);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isNumber, "QChar.isNumber() -> bool");

extern "C" {static PyObject *meth_QChar_0_isNumber(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNumber();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isNumber, doc_QChar_0_isNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isLetterOrNumber, "QChar.isLetterOrNumber() -> bool");

extern "C" {static PyObject *meth_QChar_0_isLetterOrNumber(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isLetterOrNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLetterOrNumber();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isLetterOrNumber, doc_QChar_0_isLetterOrNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isDigit, "QChar.isDigit() -> bool");

extern "C" {static PyObject *meth_QChar_0_isDigit(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isDigit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDigit();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isDigit, doc_QChar_0_isDigit);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isSymbol, "QChar.isSymbol() -> bool");

extern "C" {static PyObject *meth_QChar_0_isSymbol(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isSymbol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSymbol();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isSymbol, doc_QChar_0_isSymbol);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_cell, "QChar.cell() -> str");

extern "C" {static PyObject *meth_QChar_0_cell(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_cell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            uchar sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cell();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_cell, doc_QChar_0_cell);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_row, "QChar.row() -> str");

extern "C" {static PyObject *meth_QChar_0_row(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            uchar sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->row();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_row, doc_QChar_0_row);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_toLatin1, "QChar.toLatin1() -> str");

extern "C" {static PyObject *meth_QChar_0_toLatin1(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toLatin1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLatin1();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_toLatin1, doc_QChar_0_toLatin1);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_fromLatin1, "QChar.fromLatin1(str) -> QChar");

extern "C" {static PyObject *meth_QChar_0_fromLatin1(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_fromLatin1(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "aL", &a0))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(QChar::fromLatin1(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_fromLatin1, doc_QChar_0_fromLatin1);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_setCell, "QChar.setCell(str)");

extern "C" {static PyObject *meth_QChar_0_setCell(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_setCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uchar a0;
        QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bc", &sipSelf, sipType_QChar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCell(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_setCell, doc_QChar_0_setCell);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_setRow, "QChar.setRow(str)");

extern "C" {static PyObject *meth_QChar_0_setRow(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_setRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uchar a0;
        QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bc", &sipSelf, sipType_QChar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_setRow, doc_QChar_0_setRow);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_toTitleCase, "QChar.toTitleCase() -> QChar\n"
    "QChar.toTitleCase(int) -> int");

extern "C" {static PyObject *meth_QChar_0_toTitleCase(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toTitleCase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->toTitleCase());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::toTitleCase(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_toTitleCase, doc_QChar_0_toTitleCase);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_toCaseFolded, "QChar.toCaseFolded() -> QChar\n"
    "QChar.toCaseFolded(int) -> int");

extern "C" {static PyObject *meth_QChar_0_toCaseFolded(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toCaseFolded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->toCaseFolded());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::toCaseFolded(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_toCaseFolded, doc_QChar_0_toCaseFolded);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isTitleCase, "QChar.isTitleCase() -> bool");

extern "C" {static PyObject *meth_QChar_0_isTitleCase(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isTitleCase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isTitleCase();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isTitleCase, doc_QChar_0_isTitleCase);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isHighSurrogate, "QChar.isHighSurrogate() -> bool\n"
    "QChar.isHighSurrogate(int) -> bool");

extern "C" {static PyObject *meth_QChar_0_isHighSurrogate(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isHighSurrogate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isHighSurrogate();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::isHighSurrogate(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isHighSurrogate, doc_QChar_0_isHighSurrogate);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_isLowSurrogate, "QChar.isLowSurrogate() -> bool\n"
    "QChar.isLowSurrogate(int) -> bool");

extern "C" {static PyObject *meth_QChar_0_isLowSurrogate(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isLowSurrogate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QChar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLowSurrogate();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::isLowSurrogate(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_isLowSurrogate, doc_QChar_0_isLowSurrogate);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_surrogateToUcs4, "QChar.surrogateToUcs4(int, int) -> int\n"
    "QChar.surrogateToUcs4(QChar, QChar) -> int");

extern "C" {static PyObject *meth_QChar_0_surrogateToUcs4(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_surrogateToUcs4(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        ushort a0;
        ushort a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "tt", &a0, &a1))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::surrogateToUcs4(a0,a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        QChar* a0;
        int a0State = 0;
        QChar* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QChar,&a0, &a0State, sipType_QChar,&a1, &a1State))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::surrogateToUcs4(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QChar,a0State);
            sipReleaseType(a1,sipType_QChar,a1State);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_surrogateToUcs4, doc_QChar_0_surrogateToUcs4);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_highSurrogate, "QChar.highSurrogate(int) -> int");

extern "C" {static PyObject *meth_QChar_0_highSurrogate(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_highSurrogate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::highSurrogate(a0);
            Py_END_ALLOW_THREADS

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_highSurrogate, doc_QChar_0_highSurrogate);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_lowSurrogate, "QChar.lowSurrogate(int) -> int");

extern "C" {static PyObject *meth_QChar_0_lowSurrogate(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_lowSurrogate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::lowSurrogate(a0);
            Py_END_ALLOW_THREADS

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_lowSurrogate, doc_QChar_0_lowSurrogate);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_requiresSurrogates, "QChar.requiresSurrogates(int) -> bool");

extern "C" {static PyObject *meth_QChar_0_requiresSurrogates(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_requiresSurrogates(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::requiresSurrogates(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_requiresSurrogates, doc_QChar_0_requiresSurrogates);

    return NULL;
}


PyDoc_STRVAR(doc_QChar_0_currentUnicodeVersion, "QChar.currentUnicodeVersion() -> QChar.UnicodeVersion");

extern "C" {static PyObject *meth_QChar_0_currentUnicodeVersion(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_currentUnicodeVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QChar::UnicodeVersion sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::currentUnicodeVersion();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_UnicodeVersion);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChar, sipName_currentUnicodeVersion, doc_QChar_0_currentUnicodeVersion);

    return NULL;
}


extern "C" {static PyObject *slot_QChar_0___eq__(PyObject *,PyObject *);}
static PyObject *slot_QChar_0___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        QChar* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___ne__(PyObject *,PyObject *);}
static PyObject *slot_QChar_0___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        QChar* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___lt__(PyObject *,PyObject *);}
static PyObject *slot_QChar_0___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        QChar* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator<((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,lt_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___le__(PyObject *,PyObject *);}
static PyObject *slot_QChar_0___le__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        QChar* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator<=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,le_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___gt__(PyObject *,PyObject *);}
static PyObject *slot_QChar_0___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        QChar* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator>((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,gt_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___ge__(PyObject *,PyObject *);}
static PyObject *slot_QChar_0___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        QChar* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator>=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ge_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___add__(PyObject *,PyObject *);}
static PyObject *slot_QChar_0___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QChar* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_QChar,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((*a0 + *a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QChar,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static long slot_QChar_0___hash__(PyObject *);}
static long slot_QChar_0___hash__(PyObject *sipSelf)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
        sipRes = qHash(*sipCpp);
#line 1864 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQChar_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QChar_0___str__(PyObject *);}
static PyObject *slot_QChar_0___str__(PyObject *sipSelf)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
        sipRes = qpycore_PyObject_FromQString(QString(*sipCpp));
#line 1889 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQChar_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QChar_0___repr__(PyObject *);}
static PyObject *slot_QChar_0___repr__(PyObject *sipSelf)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 147 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
        sipRes =
        #if PY_MAJOR_VERSION >= 3
            PyUnicode_FromFormat
        #else
            PyString_FromFormat
        #endif
                ("PyQt4.QtCore.QChar(0x%04x)", sipCpp->unicode());
#line 1920 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQChar_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QChar_0(void *, const sipTypeDef *);}
static void *cast_QChar_0(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QChar)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QChar_0(void *, int);}
static void release_QChar_0(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QChar *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QChar(void *);}
static PyObject *pickle_QChar(void *sipCppV)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipCppV);
    PyObject *sipRes;

#line 130 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
    sipRes = Py_BuildValue((char *)"(H)", sipCpp->unicode());
#line 1961 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQChar_0.cpp"

    return sipRes;
}


extern "C" {static void assign_QChar_0(void *, SIP_SSIZE_T, const void *);}
static void assign_QChar_0(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QChar *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QChar *>(sipSrc);
}


extern "C" {static void *array_QChar_0(SIP_SSIZE_T);}
static void *array_QChar_0(SIP_SSIZE_T sipNrElem)
{
    return new QChar[sipNrElem];
}


extern "C" {static void *copy_QChar_0(const void *, SIP_SSIZE_T);}
static void *copy_QChar_0(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QChar(reinterpret_cast<const QChar *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QChar_0(sipSimpleWrapper *);}
static void dealloc_QChar_0(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QChar_0(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QChar_0(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QChar_0(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QChar *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        char a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "aL", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QLatin1Char* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLatin1Char, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        uchar a0;
        uchar a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "cc", &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QChar::SpecialCharacter a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "XE", sipType_QChar_SpecialCharacter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QChar* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QChar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QChar_0[] = {
    {(void *)slot_QChar_0___eq__, eq_slot},
    {(void *)slot_QChar_0___ne__, ne_slot},
    {(void *)slot_QChar_0___lt__, lt_slot},
    {(void *)slot_QChar_0___le__, le_slot},
    {(void *)slot_QChar_0___gt__, gt_slot},
    {(void *)slot_QChar_0___ge__, ge_slot},
    {(void *)slot_QChar_0___add__, add_slot},
    {(void *)slot_QChar_0___hash__, hash_slot},
    {(void *)slot_QChar_0___str__, str_slot},
    {(void *)slot_QChar_0___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QChar_0[] = {
    {SIP_MLNAME_CAST(sipName___unicode__), meth_QChar_0___unicode__, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0___unicode__)},
    {SIP_MLNAME_CAST(sipName_category), meth_QChar_0_category, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_category)},
    {SIP_MLNAME_CAST(sipName_cell), meth_QChar_0_cell, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_cell)},
    {SIP_MLNAME_CAST(sipName_combiningClass), meth_QChar_0_combiningClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_combiningClass)},
    {SIP_MLNAME_CAST(sipName_currentUnicodeVersion), meth_QChar_0_currentUnicodeVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_currentUnicodeVersion)},
    {SIP_MLNAME_CAST(sipName_decomposition), meth_QChar_0_decomposition, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_decomposition)},
    {SIP_MLNAME_CAST(sipName_decompositionTag), meth_QChar_0_decompositionTag, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_decompositionTag)},
    {SIP_MLNAME_CAST(sipName_digitValue), meth_QChar_0_digitValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_digitValue)},
    {SIP_MLNAME_CAST(sipName_direction), meth_QChar_0_direction, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_direction)},
    {SIP_MLNAME_CAST(sipName_fromAscii), meth_QChar_0_fromAscii, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_fromAscii)},
    {SIP_MLNAME_CAST(sipName_fromLatin1), meth_QChar_0_fromLatin1, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_fromLatin1)},
    {SIP_MLNAME_CAST(sipName_hasMirrored), meth_QChar_0_hasMirrored, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_hasMirrored)},
    {SIP_MLNAME_CAST(sipName_highSurrogate), meth_QChar_0_highSurrogate, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_highSurrogate)},
    {SIP_MLNAME_CAST(sipName_isDigit), meth_QChar_0_isDigit, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isDigit)},
    {SIP_MLNAME_CAST(sipName_isHighSurrogate), meth_QChar_0_isHighSurrogate, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isHighSurrogate)},
    {SIP_MLNAME_CAST(sipName_isLetter), meth_QChar_0_isLetter, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isLetter)},
    {SIP_MLNAME_CAST(sipName_isLetterOrNumber), meth_QChar_0_isLetterOrNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isLetterOrNumber)},
    {SIP_MLNAME_CAST(sipName_isLowSurrogate), meth_QChar_0_isLowSurrogate, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isLowSurrogate)},
    {SIP_MLNAME_CAST(sipName_isLower), meth_QChar_0_isLower, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isLower)},
    {SIP_MLNAME_CAST(sipName_isMark), meth_QChar_0_isMark, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isMark)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QChar_0_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isNull)},
    {SIP_MLNAME_CAST(sipName_isNumber), meth_QChar_0_isNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isNumber)},
    {SIP_MLNAME_CAST(sipName_isPrint), meth_QChar_0_isPrint, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isPrint)},
    {SIP_MLNAME_CAST(sipName_isPunct), meth_QChar_0_isPunct, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isPunct)},
    {SIP_MLNAME_CAST(sipName_isSpace), meth_QChar_0_isSpace, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isSpace)},
    {SIP_MLNAME_CAST(sipName_isSymbol), meth_QChar_0_isSymbol, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isSymbol)},
    {SIP_MLNAME_CAST(sipName_isTitleCase), meth_QChar_0_isTitleCase, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isTitleCase)},
    {SIP_MLNAME_CAST(sipName_isUpper), meth_QChar_0_isUpper, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_isUpper)},
    {SIP_MLNAME_CAST(sipName_joining), meth_QChar_0_joining, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_joining)},
    {SIP_MLNAME_CAST(sipName_lowSurrogate), meth_QChar_0_lowSurrogate, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_lowSurrogate)},
    {SIP_MLNAME_CAST(sipName_mirroredChar), meth_QChar_0_mirroredChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_mirroredChar)},
    {SIP_MLNAME_CAST(sipName_requiresSurrogates), meth_QChar_0_requiresSurrogates, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_requiresSurrogates)},
    {SIP_MLNAME_CAST(sipName_row), meth_QChar_0_row, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_row)},
    {SIP_MLNAME_CAST(sipName_setCell), meth_QChar_0_setCell, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_setCell)},
    {SIP_MLNAME_CAST(sipName_setRow), meth_QChar_0_setRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_setRow)},
    {SIP_MLNAME_CAST(sipName_surrogateToUcs4), meth_QChar_0_surrogateToUcs4, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_surrogateToUcs4)},
    {SIP_MLNAME_CAST(sipName_toAscii), meth_QChar_0_toAscii, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_toAscii)},
    {SIP_MLNAME_CAST(sipName_toCaseFolded), meth_QChar_0_toCaseFolded, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_toCaseFolded)},
    {SIP_MLNAME_CAST(sipName_toLatin1), meth_QChar_0_toLatin1, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_toLatin1)},
    {SIP_MLNAME_CAST(sipName_toLower), meth_QChar_0_toLower, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_toLower)},
    {SIP_MLNAME_CAST(sipName_toTitleCase), meth_QChar_0_toTitleCase, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_toTitleCase)},
    {SIP_MLNAME_CAST(sipName_toUpper), meth_QChar_0_toUpper, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_toUpper)},
    {SIP_MLNAME_CAST(sipName_unicode), meth_QChar_0_unicode, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_unicode)},
    {SIP_MLNAME_CAST(sipName_unicodeVersion), meth_QChar_0_unicodeVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QChar_0_unicodeVersion)}
};

static sipEnumMemberDef enummembers_QChar_0[] = {
    {sipName_ByteOrderMark, static_cast<int>(QChar::ByteOrderMark), 30},
    {sipName_ByteOrderSwapped, static_cast<int>(QChar::ByteOrderSwapped), 30},
    {sipName_Canonical, static_cast<int>(QChar::Canonical), 27},
    {sipName_Center, static_cast<int>(QChar::Center), 29},
    {sipName_Circle, static_cast<int>(QChar::Circle), 27},
    {sipName_Combining_Above, static_cast<int>(QChar::Combining_Above), 26},
    {sipName_Combining_AboveAttached, static_cast<int>(QChar::Combining_AboveAttached), 26},
    {sipName_Combining_AboveLeft, static_cast<int>(QChar::Combining_AboveLeft), 26},
    {sipName_Combining_AboveLeftAttached, static_cast<int>(QChar::Combining_AboveLeftAttached), 26},
    {sipName_Combining_AboveRight, static_cast<int>(QChar::Combining_AboveRight), 26},
    {sipName_Combining_AboveRightAttached, static_cast<int>(QChar::Combining_AboveRightAttached), 26},
    {sipName_Combining_Below, static_cast<int>(QChar::Combining_Below), 26},
    {sipName_Combining_BelowAttached, static_cast<int>(QChar::Combining_BelowAttached), 26},
    {sipName_Combining_BelowLeft, static_cast<int>(QChar::Combining_BelowLeft), 26},
    {sipName_Combining_BelowLeftAttached, static_cast<int>(QChar::Combining_BelowLeftAttached), 26},
    {sipName_Combining_BelowRight, static_cast<int>(QChar::Combining_BelowRight), 26},
    {sipName_Combining_BelowRightAttached, static_cast<int>(QChar::Combining_BelowRightAttached), 26},
    {sipName_Combining_DoubleAbove, static_cast<int>(QChar::Combining_DoubleAbove), 26},
    {sipName_Combining_DoubleBelow, static_cast<int>(QChar::Combining_DoubleBelow), 26},
    {sipName_Combining_IotaSubscript, static_cast<int>(QChar::Combining_IotaSubscript), 26},
    {sipName_Combining_Left, static_cast<int>(QChar::Combining_Left), 26},
    {sipName_Combining_LeftAttached, static_cast<int>(QChar::Combining_LeftAttached), 26},
    {sipName_Combining_Right, static_cast<int>(QChar::Combining_Right), 26},
    {sipName_Combining_RightAttached, static_cast<int>(QChar::Combining_RightAttached), 26},
    {sipName_Compat, static_cast<int>(QChar::Compat), 27},
    {sipName_DirAL, static_cast<int>(QChar::DirAL), 28},
    {sipName_DirAN, static_cast<int>(QChar::DirAN), 28},
    {sipName_DirB, static_cast<int>(QChar::DirB), 28},
    {sipName_DirBN, static_cast<int>(QChar::DirBN), 28},
    {sipName_DirCS, static_cast<int>(QChar::DirCS), 28},
    {sipName_DirEN, static_cast<int>(QChar::DirEN), 28},
    {sipName_DirES, static_cast<int>(QChar::DirES), 28},
    {sipName_DirET, static_cast<int>(QChar::DirET), 28},
    {sipName_DirL, static_cast<int>(QChar::DirL), 28},
    {sipName_DirLRE, static_cast<int>(QChar::DirLRE), 28},
    {sipName_DirLRO, static_cast<int>(QChar::DirLRO), 28},
    {sipName_DirNSM, static_cast<int>(QChar::DirNSM), 28},
    {sipName_DirON, static_cast<int>(QChar::DirON), 28},
    {sipName_DirPDF, static_cast<int>(QChar::DirPDF), 28},
    {sipName_DirR, static_cast<int>(QChar::DirR), 28},
    {sipName_DirRLE, static_cast<int>(QChar::DirRLE), 28},
    {sipName_DirRLO, static_cast<int>(QChar::DirRLO), 28},
    {sipName_DirS, static_cast<int>(QChar::DirS), 28},
    {sipName_DirWS, static_cast<int>(QChar::DirWS), 28},
    {sipName_Dual, static_cast<int>(QChar::Dual), 29},
    {sipName_Final, static_cast<int>(QChar::Final), 27},
    {sipName_Font, static_cast<int>(QChar::Font), 27},
    {sipName_Fraction, static_cast<int>(QChar::Fraction), 27},
    {sipName_Initial, static_cast<int>(QChar::Initial), 27},
    {sipName_Isolated, static_cast<int>(QChar::Isolated), 27},
    {sipName_Letter_Lowercase, static_cast<int>(QChar::Letter_Lowercase), 25},
    {sipName_Letter_Modifier, static_cast<int>(QChar::Letter_Modifier), 25},
    {sipName_Letter_Other, static_cast<int>(QChar::Letter_Other), 25},
    {sipName_Letter_Titlecase, static_cast<int>(QChar::Letter_Titlecase), 25},
    {sipName_Letter_Uppercase, static_cast<int>(QChar::Letter_Uppercase), 25},
    {sipName_LineSeparator, static_cast<int>(QChar::LineSeparator), 30},
    {sipName_Mark_Enclosing, static_cast<int>(QChar::Mark_Enclosing), 25},
    {sipName_Mark_NonSpacing, static_cast<int>(QChar::Mark_NonSpacing), 25},
    {sipName_Mark_SpacingCombining, static_cast<int>(QChar::Mark_SpacingCombining), 25},
    {sipName_Medial, static_cast<int>(QChar::Medial), 27},
    {sipName_Narrow, static_cast<int>(QChar::Narrow), 27},
    {sipName_Nbsp, static_cast<int>(QChar::Nbsp), 30},
    {sipName_NoBreak, static_cast<int>(QChar::NoBreak), 27},
    {sipName_NoCategory, static_cast<int>(QChar::NoCategory), 25},
    {sipName_NoDecomposition, static_cast<int>(QChar::NoDecomposition), 27},
    {sipName_Null, static_cast<int>(QChar::Null), 30},
    {sipName_Number_DecimalDigit, static_cast<int>(QChar::Number_DecimalDigit), 25},
    {sipName_Number_Letter, static_cast<int>(QChar::Number_Letter), 25},
    {sipName_Number_Other, static_cast<int>(QChar::Number_Other), 25},
    {sipName_ObjectReplacementCharacter, static_cast<int>(QChar::ObjectReplacementCharacter), 30},
    {sipName_OtherJoining, static_cast<int>(QChar::OtherJoining), 29},
    {sipName_Other_Control, static_cast<int>(QChar::Other_Control), 25},
    {sipName_Other_Format, static_cast<int>(QChar::Other_Format), 25},
    {sipName_Other_NotAssigned, static_cast<int>(QChar::Other_NotAssigned), 25},
    {sipName_Other_PrivateUse, static_cast<int>(QChar::Other_PrivateUse), 25},
    {sipName_Other_Surrogate, static_cast<int>(QChar::Other_Surrogate), 25},
    {sipName_ParagraphSeparator, static_cast<int>(QChar::ParagraphSeparator), 30},
    {sipName_Punctuation_Close, static_cast<int>(QChar::Punctuation_Close), 25},
    {sipName_Punctuation_Connector, static_cast<int>(QChar::Punctuation_Connector), 25},
    {sipName_Punctuation_Dash, static_cast<int>(QChar::Punctuation_Dash), 25},
    {sipName_Punctuation_Dask, static_cast<int>(QChar::Punctuation_Dask), 25},
    {sipName_Punctuation_FinalQuote, static_cast<int>(QChar::Punctuation_FinalQuote), 25},
    {sipName_Punctuation_InitialQuote, static_cast<int>(QChar::Punctuation_InitialQuote), 25},
    {sipName_Punctuation_Open, static_cast<int>(QChar::Punctuation_Open), 25},
    {sipName_Punctuation_Other, static_cast<int>(QChar::Punctuation_Other), 25},
    {sipName_ReplacementCharacter, static_cast<int>(QChar::ReplacementCharacter), 30},
    {sipName_Right, static_cast<int>(QChar::Right), 29},
    {sipName_Separator_Line, static_cast<int>(QChar::Separator_Line), 25},
    {sipName_Separator_Paragraph, static_cast<int>(QChar::Separator_Paragraph), 25},
    {sipName_Separator_Space, static_cast<int>(QChar::Separator_Space), 25},
    {sipName_Small, static_cast<int>(QChar::Small), 27},
    {sipName_Square, static_cast<int>(QChar::Square), 27},
    {sipName_Sub, static_cast<int>(QChar::Sub), 27},
    {sipName_Super, static_cast<int>(QChar::Super), 27},
    {sipName_Symbol_Currency, static_cast<int>(QChar::Symbol_Currency), 25},
    {sipName_Symbol_Math, static_cast<int>(QChar::Symbol_Math), 25},
    {sipName_Symbol_Modifier, static_cast<int>(QChar::Symbol_Modifier), 25},
    {sipName_Symbol_Other, static_cast<int>(QChar::Symbol_Other), 25},
    {sipName_Unicode_1_1, static_cast<int>(QChar::Unicode_1_1), 31},
    {sipName_Unicode_2_0, static_cast<int>(QChar::Unicode_2_0), 31},
    {sipName_Unicode_2_1_2, static_cast<int>(QChar::Unicode_2_1_2), 31},
    {sipName_Unicode_3_0, static_cast<int>(QChar::Unicode_3_0), 31},
    {sipName_Unicode_3_1, static_cast<int>(QChar::Unicode_3_1), 31},
    {sipName_Unicode_3_2, static_cast<int>(QChar::Unicode_3_2), 31},
    {sipName_Unicode_4_0, static_cast<int>(QChar::Unicode_4_0), 31},
    {sipName_Unicode_4_1, static_cast<int>(QChar::Unicode_4_1), 31},
    {sipName_Unicode_5_0, static_cast<int>(QChar::Unicode_5_0), 31},
    {sipName_Unicode_Unassigned, static_cast<int>(QChar::Unicode_Unassigned), 31},
    {sipName_Vertical, static_cast<int>(QChar::Vertical), 27},
    {sipName_Wide, static_cast<int>(QChar::Wide), 27},
};

PyDoc_STRVAR(doc_QChar_0, "\1QChar()\n"
    "QChar(str)\n"
    "QChar(QLatin1Char)\n"
    "QChar(str, str)\n"
    "QChar(int)\n"
    "QChar(QChar.SpecialCharacter)\n"
    "QChar(QChar)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QChar_0 = {
{
    {
        0,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QChar,
        {0}
    },
    {
        sipNameNr_QChar,
        {0, 0, 1},
        44, methods_QChar_0,
        110, enummembers_QChar_0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QChar_0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QChar_0,
    init_type_QChar_0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QChar_0,
    assign_QChar_0,
    array_QChar_0,
    copy_QChar_0,
    release_QChar_0,
    cast_QChar_0,
    0,
    0,
    0,
    pickle_QChar,
    0,
    0
},
    0,
    0,
    0
};
