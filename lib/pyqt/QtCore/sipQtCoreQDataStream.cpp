/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbitarray.sip"
#include <qbitarray.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 72 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 250 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 406 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qline.sip"
#include <qline.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qline.sip"
#include <qline.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 168 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 112 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 112 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/quuid.sip"
#include <quuid.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qhash.sip"
#include <qhash.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"


class sipQDataStream : public QDataStream
{
public:
    sipQDataStream();
    sipQDataStream(QIODevice*);
    sipQDataStream(QByteArray*,QIODevice::OpenMode);
    sipQDataStream(const QByteArray&);
    ~sipQDataStream();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDataStream(const sipQDataStream &);
    sipQDataStream &operator = (const sipQDataStream &);
};

sipQDataStream::sipQDataStream(): QDataStream(), sipPySelf(0)
{
}

sipQDataStream::sipQDataStream(QIODevice*a0): QDataStream(a0), sipPySelf(0)
{
}

sipQDataStream::sipQDataStream(QByteArray*a0,QIODevice::OpenMode a1): QDataStream(a0,a1), sipPySelf(0)
{
}

sipQDataStream::sipQDataStream(const QByteArray& a0): QDataStream(a0), sipPySelf(0)
{
}

sipQDataStream::~sipQDataStream()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QDataStream_device, "QDataStream.device() -> QIODevice");

extern "C" {static PyObject *meth_QDataStream_device(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QIODevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_device, doc_QDataStream_device);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_setDevice, "QDataStream.setDevice(QIODevice)");

extern "C" {static PyObject *meth_QDataStream_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setDevice, doc_QDataStream_setDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_unsetDevice, "QDataStream.unsetDevice()");

extern "C" {static PyObject *meth_QDataStream_unsetDevice(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_unsetDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->unsetDevice();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_unsetDevice, doc_QDataStream_unsetDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_atEnd, "QDataStream.atEnd() -> bool");

extern "C" {static PyObject *meth_QDataStream_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->atEnd();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_atEnd, doc_QDataStream_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_status, "QDataStream.status() -> QDataStream.Status");

extern "C" {static PyObject *meth_QDataStream_status(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QDataStream::Status sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->status();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDataStream_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_status, doc_QDataStream_status);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_setStatus, "QDataStream.setStatus(QDataStream.Status)");

extern "C" {static PyObject *meth_QDataStream_setStatus(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream::Status a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_Status, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStatus(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setStatus, doc_QDataStream_setStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_resetStatus, "QDataStream.resetStatus()");

extern "C" {static PyObject *meth_QDataStream_resetStatus(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_resetStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetStatus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_resetStatus, doc_QDataStream_resetStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_byteOrder, "QDataStream.byteOrder() -> QDataStream.ByteOrder");

extern "C" {static PyObject *meth_QDataStream_byteOrder(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_byteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QDataStream::ByteOrder sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->byteOrder();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDataStream_ByteOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_byteOrder, doc_QDataStream_byteOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_setByteOrder, "QDataStream.setByteOrder(QDataStream.ByteOrder)");

extern "C" {static PyObject *meth_QDataStream_setByteOrder(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setByteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream::ByteOrder a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_ByteOrder, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setByteOrder(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setByteOrder, doc_QDataStream_setByteOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_version, "QDataStream.version() -> int");

extern "C" {static PyObject *meth_QDataStream_version(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->version();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_version, doc_QDataStream_version);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_setVersion, "QDataStream.setVersion(int)");

extern "C" {static PyObject *meth_QDataStream_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVersion(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setVersion, doc_QDataStream_setVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_skipRawData, "QDataStream.skipRawData(int) -> int");

extern "C" {static PyObject *meth_QDataStream_skipRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_skipRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->skipRawData(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_skipRawData, doc_QDataStream_skipRawData);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readInt, "QDataStream.readInt() -> int");

extern "C" {static PyObject *meth_QDataStream_readInt(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            int sipRes = 0;

#line 115 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 529 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt, doc_QDataStream_readInt);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readInt8, "QDataStream.readInt8() -> str");

extern "C" {static PyObject *meth_QDataStream_readInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            qint8 sipRes = 0;

#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 560 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt8, doc_QDataStream_readInt8);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readUInt8, "QDataStream.readUInt8() -> str");

extern "C" {static PyObject *meth_QDataStream_readUInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            quint8 sipRes = 0;

#line 129 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 591 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt8, doc_QDataStream_readUInt8);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readInt16, "QDataStream.readInt16() -> int");

extern "C" {static PyObject *meth_QDataStream_readInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            qint16 sipRes = 0;

#line 136 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 622 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt16, doc_QDataStream_readInt16);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readUInt16, "QDataStream.readUInt16() -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            quint16 sipRes = 0;

#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 653 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt16, doc_QDataStream_readUInt16);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readInt32, "QDataStream.readInt32() -> int");

extern "C" {static PyObject *meth_QDataStream_readInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            qint32 sipRes = 0;

#line 150 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 688 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt32, doc_QDataStream_readInt32);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readUInt32, "QDataStream.readUInt32() -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            quint32 sipRes = 0;

#line 157 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 719 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt32, doc_QDataStream_readUInt32);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readInt64, "QDataStream.readInt64() -> int");

extern "C" {static PyObject *meth_QDataStream_readInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            qint64 sipRes = 0;

#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 750 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt64, doc_QDataStream_readInt64);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readUInt64, "QDataStream.readUInt64() -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            quint64 sipRes = 0;

#line 171 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 781 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt64, doc_QDataStream_readUInt64);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readBool, "QDataStream.readBool() -> bool");

extern "C" {static PyObject *meth_QDataStream_readBool(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            bool sipRes = 0;

#line 178 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 812 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readBool, doc_QDataStream_readBool);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readFloat, "QDataStream.readFloat() -> float");

extern "C" {static PyObject *meth_QDataStream_readFloat(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            float sipRes = 0;

#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 843 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readFloat, doc_QDataStream_readFloat);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readDouble, "QDataStream.readDouble() -> float");

extern "C" {static PyObject *meth_QDataStream_readDouble(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            double sipRes = 0;

#line 192 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 874 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readDouble, doc_QDataStream_readDouble);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readString, "QDataStream.readString() -> str");

extern "C" {static PyObject *meth_QDataStream_readString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 199 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    char *s;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> s;
    Py_END_ALLOW_THREADS

    if (s)
    {
        sipRes = SIPBytes_FromString(s);
        delete[] s;
    }
    else
    {
        sipRes = Py_None;
        Py_INCREF(Py_None);
    }
#line 918 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readString, doc_QDataStream_readString);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeInt, "QDataStream.writeInt(int)");

extern "C" {static PyObject *meth_QDataStream_writeInt(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 219 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 948 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt, doc_QDataStream_writeInt);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeInt8, "QDataStream.writeInt8(str)");

extern "C" {static PyObject *meth_QDataStream_writeInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint8 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bc", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 226 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 979 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt8, doc_QDataStream_writeInt8);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt8, "QDataStream.writeUInt8(str)");

extern "C" {static PyObject *meth_QDataStream_writeUInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint8 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bc", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 233 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1010 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt8, doc_QDataStream_writeUInt8);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeInt16, "QDataStream.writeInt16(int)");

extern "C" {static PyObject *meth_QDataStream_writeInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint16 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bh", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 240 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1041 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt16, doc_QDataStream_writeInt16);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt16, "QDataStream.writeUInt16(int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 247 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1072 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt16, doc_QDataStream_writeUInt16);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeInt32, "QDataStream.writeInt32(int)");

extern "C" {static PyObject *meth_QDataStream_writeInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint32 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 254 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1103 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt32, doc_QDataStream_writeInt32);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt32, "QDataStream.writeUInt32(int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint32 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt32, doc_QDataStream_writeUInt32);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeInt64, "QDataStream.writeInt64(int)");

extern "C" {static PyObject *meth_QDataStream_writeInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 268 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1165 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt64, doc_QDataStream_writeInt64);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt64, "QDataStream.writeUInt64(int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint64 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bo", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 275 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1196 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt64, doc_QDataStream_writeUInt64);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeBool, "QDataStream.writeBool(bool)");

extern "C" {static PyObject *meth_QDataStream_writeBool(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 282 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeBool, doc_QDataStream_writeBool);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeFloat, "QDataStream.writeFloat(float)");

extern "C" {static PyObject *meth_QDataStream_writeFloat(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 289 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1258 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeFloat, doc_QDataStream_writeFloat);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeDouble, "QDataStream.writeDouble(float)");

extern "C" {static PyObject *meth_QDataStream_writeDouble(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 296 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1289 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeDouble, doc_QDataStream_writeDouble);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeString, "QDataStream.writeString(str)");

extern "C" {static PyObject *meth_QDataStream_writeString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 303 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1320 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeString, doc_QDataStream_writeString);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQString, "QDataStream.readQString() -> QString");

extern "C" {static PyObject *meth_QDataStream_readQString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QString*sipRes = 0;

#line 310 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    sipRes = new QString;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1354 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQString, doc_QDataStream_readQString);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQString, "QDataStream.writeQString(QString)");

extern "C" {static PyObject *meth_QDataStream_writeQString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QString,&a0, &a0State))
        {
#line 319 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1385 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQString, doc_QDataStream_writeQString);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQStringList, "QDataStream.readQStringList() -> QStringList");

extern "C" {static PyObject *meth_QDataStream_readQStringList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QStringList*sipRes = 0;

#line 326 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    sipRes = new QStringList;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1420 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQStringList, doc_QDataStream_readQStringList);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQStringList, "QDataStream.writeQStringList(QStringList)");

extern "C" {static PyObject *meth_QDataStream_writeQStringList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
#line 335 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1451 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQStringList, doc_QDataStream_writeQStringList);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQVariant, "QDataStream.readQVariant() -> QVariant");

extern "C" {static PyObject *meth_QDataStream_readQVariant(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QVariant*sipRes = 0;

#line 342 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    sipRes = new QVariant;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1486 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariant, doc_QDataStream_readQVariant);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariant, "QDataStream.writeQVariant(QVariant)");

extern "C" {static PyObject *meth_QDataStream_writeQVariant(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QVariant,&a0, &a0State))
        {
#line 351 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1517 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariant, doc_QDataStream_writeQVariant);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQVariantList, "QDataStream.readQVariantList() -> list-of-QVariant");

extern "C" {static PyObject *meth_QDataStream_readQVariantList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QVariantList*sipRes = 0;

#line 358 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    sipRes = new QVariantList;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1552 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QList_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantList, doc_QDataStream_readQVariantList);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariantList, "QDataStream.writeQVariantList(list-of-QVariant)");

extern "C" {static PyObject *meth_QDataStream_writeQVariantList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariantList* a0;
        int a0State = 0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QList_0100QVariant,&a0, &a0State))
        {
#line 367 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1583 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QVariantList *>(a0),sipType_QList_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantList, doc_QDataStream_writeQVariantList);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQVariantMap, "QDataStream.readQVariantMap() -> dict-of-QString-QVariant");

extern "C" {static PyObject *meth_QDataStream_readQVariantMap(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QVariantMap*sipRes = 0;

#line 374 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    sipRes = new QVariantMap;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1618 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantMap, doc_QDataStream_readQVariantMap);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariantMap, "QDataStream.writeQVariantMap(dict-of-QString-QVariant)");

extern "C" {static PyObject *meth_QDataStream_writeQVariantMap(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariantMap* a0;
        int a0State = 0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QMap_0100QString_0100QVariant,&a0, &a0State))
        {
#line 383 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1649 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QVariantMap *>(a0),sipType_QMap_0100QString_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantMap, doc_QDataStream_writeQVariantMap);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQVariantHash, "QDataStream.readQVariantHash() -> dict-of-QString-QVariant");

extern "C" {static PyObject *meth_QDataStream_readQVariantHash(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantHash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QVariantHash*sipRes = 0;

#line 392 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    sipRes = new QVariantHash;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1684 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QHash_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantHash, doc_QDataStream_readQVariantHash);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariantHash, "QDataStream.writeQVariantHash(dict-of-QString-QVariant)");

extern "C" {static PyObject *meth_QDataStream_writeQVariantHash(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantHash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariantHash* a0;
        int a0State = 0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QHash_0100QString_0100QVariant,&a0, &a0State))
        {
#line 401 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1715 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QVariantHash *>(a0),sipType_QHash_0100QString_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantHash, doc_QDataStream_writeQVariantHash);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readBytes, "QDataStream.readBytes() -> str");

extern "C" {static PyObject *meth_QDataStream_readBytes(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 409 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
        char *s;
        uint l;
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->readBytes(s, l);
        Py_END_ALLOW_THREADS
        
        if ((sipRes = SIPBytes_FromStringAndSize(s, l)) == NULL)
            sipIsErr = 1;
        
        if (s)
            delete[] s;
#line 1758 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readBytes, doc_QDataStream_readBytes);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readRawData, "QDataStream.readRawData(int) -> str");

extern "C" {static PyObject *meth_QDataStream_readRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 425 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
        char *s = new char[a0];
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->readRawData(s, a0);
        Py_END_ALLOW_THREADS
        
        sipRes = SIPBytes_FromStringAndSize(s, a0);
        
        if (!sipRes)
            sipIsErr = 1;
        
        delete[] s;
#line 1803 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQDataStream.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readRawData, doc_QDataStream_readRawData);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeBytes, "QDataStream.writeBytes(str) -> QDataStream");

extern "C" {static PyObject *meth_QDataStream_writeBytes(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        SIP_SSIZE_T a1;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QDataStream, &sipCpp, &a0, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->writeBytes(a0,(uint)a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeBytes, doc_QDataStream_writeBytes);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeRawData, "QDataStream.writeRawData(str) -> int");

extern "C" {static PyObject *meth_QDataStream_writeRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        SIP_SSIZE_T a1;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QDataStream, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeRawData(a0,(int)a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeRawData, doc_QDataStream_writeRawData);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_floatingPointPrecision, "QDataStream.floatingPointPrecision() -> QDataStream.FloatingPointPrecision");

extern "C" {static PyObject *meth_QDataStream_floatingPointPrecision(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_floatingPointPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QDataStream::FloatingPointPrecision sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->floatingPointPrecision();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDataStream_FloatingPointPrecision);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_floatingPointPrecision, doc_QDataStream_floatingPointPrecision);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_setFloatingPointPrecision, "QDataStream.setFloatingPointPrecision(QDataStream.FloatingPointPrecision)");

extern "C" {static PyObject *meth_QDataStream_setFloatingPointPrecision(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setFloatingPointPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream::FloatingPointPrecision a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_FloatingPointPrecision, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFloatingPointPrecision(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setFloatingPointPrecision, doc_QDataStream_setFloatingPointPrecision);

    return NULL;
}


extern "C" {static PyObject *slot_QDataStream___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QDataStream___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream* a0;
        const QBitArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QBitArray, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QByteArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QByteArray, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QChar* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QChar,&a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QDate* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDate, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTime, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QDateTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDateTime, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QEasingCurve* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QEasingCurve, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QLine* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLine, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QLineF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLineF, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QLocale* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLocale, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPoint, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QPointF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPointF, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRect, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QRectF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRectF, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QRegExp* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegExp, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSize, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QSizeF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSizeF, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QDataStream* a0;
        const QString* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QString,&a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QDataStream* a0;
        const QStringList* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QStringList,&a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QUrl* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUrl, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QUuid* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUuid, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QVariant, 0, 2))
    {
        QDataStream* a0;
        const QVariant* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVariant,&a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QVariant::Type a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9XE", sipType_QDataStream, &a0, sipType_QVariant_Type, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,lshift_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QDataStream___rshift__(PyObject *,PyObject *);}
static PyObject *slot_QDataStream___rshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream* a0;
        QBitArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QBitArray, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QByteArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QByteArray, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QChar* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QChar,&a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QDate* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDate, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTime, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QDateTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDateTime, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QEasingCurve* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QEasingCurve, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QLine* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLine, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QLineF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLineF, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QLocale* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLocale, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPoint, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QPointF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPointF, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRect, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QRectF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRectF, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QRegExp* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegExp, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSize, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QSizeF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSizeF, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QDataStream* a0;
        QString* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QString,&a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QDataStream* a0;
        QStringList* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QStringList,&a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QUrl* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUrl, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QUuid* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUuid, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QVariant, 0, 2))
    {
        QDataStream* a0;
        QVariant* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVariant,&a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QVariant::Type a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9XE", sipType_QDataStream, &a0, sipType_QVariant_Type, &a1))
        {
            QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,rshift_slot,NULL,sipArg0,sipArg1);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDataStream(void *, const sipTypeDef *);}
static void *cast_QDataStream(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDataStream)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDataStream(void *, int);}
static void release_QDataStream(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDataStream *>(sipCppV);
    else
        delete reinterpret_cast<QDataStream *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDataStream(sipSimpleWrapper *);}
static void dealloc_QDataStream(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDataStream *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDataStream(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QDataStream(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDataStream(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDataStream *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QByteArray* a0;
        QIODevice::OpenMode* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J1", sipType_QByteArray, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QByteArray* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QByteArray, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDataStream[] = {
    {(void *)slot_QDataStream___lshift__, lshift_slot},
    {(void *)slot_QDataStream___rshift__, rshift_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDataStream[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QDataStream_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_atEnd)},
    {SIP_MLNAME_CAST(sipName_byteOrder), meth_QDataStream_byteOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_byteOrder)},
    {SIP_MLNAME_CAST(sipName_device), meth_QDataStream_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_device)},
    {SIP_MLNAME_CAST(sipName_floatingPointPrecision), meth_QDataStream_floatingPointPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_floatingPointPrecision)},
    {SIP_MLNAME_CAST(sipName_readBool), meth_QDataStream_readBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readBool)},
    {SIP_MLNAME_CAST(sipName_readBytes), meth_QDataStream_readBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readBytes)},
    {SIP_MLNAME_CAST(sipName_readDouble), meth_QDataStream_readDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readDouble)},
    {SIP_MLNAME_CAST(sipName_readFloat), meth_QDataStream_readFloat, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readFloat)},
    {SIP_MLNAME_CAST(sipName_readInt), meth_QDataStream_readInt, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt)},
    {SIP_MLNAME_CAST(sipName_readInt16), meth_QDataStream_readInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt16)},
    {SIP_MLNAME_CAST(sipName_readInt32), meth_QDataStream_readInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt32)},
    {SIP_MLNAME_CAST(sipName_readInt64), meth_QDataStream_readInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt64)},
    {SIP_MLNAME_CAST(sipName_readInt8), meth_QDataStream_readInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt8)},
    {SIP_MLNAME_CAST(sipName_readQString), meth_QDataStream_readQString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQString)},
    {SIP_MLNAME_CAST(sipName_readQStringList), meth_QDataStream_readQStringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQStringList)},
    {SIP_MLNAME_CAST(sipName_readQVariant), meth_QDataStream_readQVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariant)},
    {SIP_MLNAME_CAST(sipName_readQVariantHash), meth_QDataStream_readQVariantHash, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariantHash)},
    {SIP_MLNAME_CAST(sipName_readQVariantList), meth_QDataStream_readQVariantList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariantList)},
    {SIP_MLNAME_CAST(sipName_readQVariantMap), meth_QDataStream_readQVariantMap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariantMap)},
    {SIP_MLNAME_CAST(sipName_readRawData), meth_QDataStream_readRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readRawData)},
    {SIP_MLNAME_CAST(sipName_readString), meth_QDataStream_readString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readString)},
    {SIP_MLNAME_CAST(sipName_readUInt16), meth_QDataStream_readUInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt16)},
    {SIP_MLNAME_CAST(sipName_readUInt32), meth_QDataStream_readUInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt32)},
    {SIP_MLNAME_CAST(sipName_readUInt64), meth_QDataStream_readUInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt64)},
    {SIP_MLNAME_CAST(sipName_readUInt8), meth_QDataStream_readUInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt8)},
    {SIP_MLNAME_CAST(sipName_resetStatus), meth_QDataStream_resetStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_resetStatus)},
    {SIP_MLNAME_CAST(sipName_setByteOrder), meth_QDataStream_setByteOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setByteOrder)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QDataStream_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFloatingPointPrecision), meth_QDataStream_setFloatingPointPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setFloatingPointPrecision)},
    {SIP_MLNAME_CAST(sipName_setStatus), meth_QDataStream_setStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setStatus)},
    {SIP_MLNAME_CAST(sipName_setVersion), meth_QDataStream_setVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setVersion)},
    {SIP_MLNAME_CAST(sipName_skipRawData), meth_QDataStream_skipRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_skipRawData)},
    {SIP_MLNAME_CAST(sipName_status), meth_QDataStream_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_status)},
    {SIP_MLNAME_CAST(sipName_unsetDevice), meth_QDataStream_unsetDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_unsetDevice)},
    {SIP_MLNAME_CAST(sipName_version), meth_QDataStream_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_version)},
    {SIP_MLNAME_CAST(sipName_writeBool), meth_QDataStream_writeBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeBool)},
    {SIP_MLNAME_CAST(sipName_writeBytes), meth_QDataStream_writeBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeBytes)},
    {SIP_MLNAME_CAST(sipName_writeDouble), meth_QDataStream_writeDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeDouble)},
    {SIP_MLNAME_CAST(sipName_writeFloat), meth_QDataStream_writeFloat, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeFloat)},
    {SIP_MLNAME_CAST(sipName_writeInt), meth_QDataStream_writeInt, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt)},
    {SIP_MLNAME_CAST(sipName_writeInt16), meth_QDataStream_writeInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt16)},
    {SIP_MLNAME_CAST(sipName_writeInt32), meth_QDataStream_writeInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt32)},
    {SIP_MLNAME_CAST(sipName_writeInt64), meth_QDataStream_writeInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt64)},
    {SIP_MLNAME_CAST(sipName_writeInt8), meth_QDataStream_writeInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt8)},
    {SIP_MLNAME_CAST(sipName_writeQString), meth_QDataStream_writeQString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQString)},
    {SIP_MLNAME_CAST(sipName_writeQStringList), meth_QDataStream_writeQStringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQStringList)},
    {SIP_MLNAME_CAST(sipName_writeQVariant), meth_QDataStream_writeQVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariant)},
    {SIP_MLNAME_CAST(sipName_writeQVariantHash), meth_QDataStream_writeQVariantHash, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariantHash)},
    {SIP_MLNAME_CAST(sipName_writeQVariantList), meth_QDataStream_writeQVariantList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariantList)},
    {SIP_MLNAME_CAST(sipName_writeQVariantMap), meth_QDataStream_writeQVariantMap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariantMap)},
    {SIP_MLNAME_CAST(sipName_writeRawData), meth_QDataStream_writeRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeRawData)},
    {SIP_MLNAME_CAST(sipName_writeString), meth_QDataStream_writeString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeString)},
    {SIP_MLNAME_CAST(sipName_writeUInt16), meth_QDataStream_writeUInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt16)},
    {SIP_MLNAME_CAST(sipName_writeUInt32), meth_QDataStream_writeUInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt32)},
    {SIP_MLNAME_CAST(sipName_writeUInt64), meth_QDataStream_writeUInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt64)},
    {SIP_MLNAME_CAST(sipName_writeUInt8), meth_QDataStream_writeUInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt8)}
};

static sipEnumMemberDef enummembers_QDataStream[] = {
    {sipName_BigEndian, static_cast<int>(QDataStream::BigEndian), 38},
    {sipName_DoublePrecision, static_cast<int>(QDataStream::DoublePrecision), 39},
    {sipName_LittleEndian, static_cast<int>(QDataStream::LittleEndian), 38},
    {sipName_Ok, static_cast<int>(QDataStream::Ok), 40},
    {sipName_Qt_1_0, static_cast<int>(QDataStream::Qt_1_0), 41},
    {sipName_Qt_2_0, static_cast<int>(QDataStream::Qt_2_0), 41},
    {sipName_Qt_2_1, static_cast<int>(QDataStream::Qt_2_1), 41},
    {sipName_Qt_3_0, static_cast<int>(QDataStream::Qt_3_0), 41},
    {sipName_Qt_3_1, static_cast<int>(QDataStream::Qt_3_1), 41},
    {sipName_Qt_3_3, static_cast<int>(QDataStream::Qt_3_3), 41},
    {sipName_Qt_4_0, static_cast<int>(QDataStream::Qt_4_0), 41},
    {sipName_Qt_4_1, static_cast<int>(QDataStream::Qt_4_1), 41},
    {sipName_Qt_4_2, static_cast<int>(QDataStream::Qt_4_2), 41},
    {sipName_Qt_4_3, static_cast<int>(QDataStream::Qt_4_3), 41},
    {sipName_Qt_4_4, static_cast<int>(QDataStream::Qt_4_4), 41},
    {sipName_Qt_4_5, static_cast<int>(QDataStream::Qt_4_5), 41},
    {sipName_Qt_4_6, static_cast<int>(QDataStream::Qt_4_6), 41},
    {sipName_Qt_4_7, static_cast<int>(QDataStream::Qt_4_7), 41},
    {sipName_Qt_4_8, static_cast<int>(QDataStream::Qt_4_8), 41},
    {sipName_ReadCorruptData, static_cast<int>(QDataStream::ReadCorruptData), 40},
    {sipName_ReadPastEnd, static_cast<int>(QDataStream::ReadPastEnd), 40},
    {sipName_SinglePrecision, static_cast<int>(QDataStream::SinglePrecision), 39},
    {sipName_WriteFailed, static_cast<int>(QDataStream::WriteFailed), 40},
};

PyDoc_STRVAR(doc_QDataStream, "\1QDataStream()\n"
    "QDataStream(QIODevice)\n"
    "QDataStream(QByteArray, QIODevice.OpenMode)\n"
    "QDataStream(QByteArray)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QDataStream = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDataStream,
        {0}
    },
    {
        sipNameNr_QDataStream,
        {0, 0, 1},
        56, methods_QDataStream,
        23, enummembers_QDataStream,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDataStream,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDataStream,
    init_type_QDataStream,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDataStream,
    0,
    0,
    0,
    release_QDataStream,
    cast_QDataStream,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
