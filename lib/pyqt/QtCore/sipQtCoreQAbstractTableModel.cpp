/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 344 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 144 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qhash.sip"
#include <qhash.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 144 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQAbstractTableModel.cpp"


class sipQAbstractTableModel : public QAbstractTableModel
{
public:
    sipQAbstractTableModel(QObject*);
    virtual ~sipQAbstractTableModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void revert();
    bool submit();
    QSize span(const QModelIndex&) const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QModelIndex buddy(const QModelIndex&) const;
    void sort(int,Qt::SortOrder);
    Qt::ItemFlags flags(const QModelIndex&) const;
    bool canFetchMore(const QModelIndex&) const;
    void fetchMore(const QModelIndex&);
    bool removeColumns(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    bool insertRows(int,int,const QModelIndex&);
    Qt::DropActions supportedDropActions() const;
    QMimeData* mimeData(const QModelIndexList&) const;
    QStringList mimeTypes() const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    QVariant headerData(int,Qt::Orientation,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant data(const QModelIndex&,int) const;
    int columnCount(const QModelIndex&) const;
    int rowCount(const QModelIndex&) const;
    bool dropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    QModelIndex index(int,int,const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractTableModel(const sipQAbstractTableModel &);
    sipQAbstractTableModel &operator = (const sipQAbstractTableModel &);

    char sipPyMethods[33];
};

sipQAbstractTableModel::sipQAbstractTableModel(QObject*a0): QAbstractTableModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractTableModel::~sipQAbstractTableModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractTableModel::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractTableModel);
}

int sipQAbstractTableModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractTableModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractTableModel,_c,_id,_a);

    return _id;
}

void *sipQAbstractTableModel::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractTableModel, _clname)) ? this : QAbstractTableModel::qt_metacast(_clname);
}

void sipQAbstractTableModel::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractTableModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractTableModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractTableModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractTableModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractTableModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractTableModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractTableModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractTableModel::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
        QAbstractTableModel::revert();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_11(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractTableModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return QAbstractTableModel::submit();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQAbstractTableModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return QAbstractTableModel::span(a0);

    extern QSize sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_47(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndexList sipQAbstractTableModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return QAbstractTableModel::match(a0,a1,a2,a3,a4);

    extern QList<QModelIndex> sipVH_QtCore_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return sipVH_QtCore_48(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QModelIndex sipQAbstractTableModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return QAbstractTableModel::buddy(a0);

    extern QModelIndex sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_44(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
        QAbstractTableModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);

    sipVH_QtCore_49(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

Qt::ItemFlags sipQAbstractTableModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return QAbstractTableModel::flags(a0);

    extern Qt::ItemFlags sipVH_QtCore_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_50(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return QAbstractTableModel::canFetchMore(a0);

    extern bool sipVH_QtCore_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_42(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
        QAbstractTableModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    sipVH_QtCore_51(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return QAbstractTableModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_52(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return QAbstractTableModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_52(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return QAbstractTableModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_52(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return QAbstractTableModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_52(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

Qt::DropActions sipQAbstractTableModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QAbstractTableModel::supportedDropActions();

    extern Qt::DropActions sipVH_QtCore_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_53(sipGILState, 0, sipPySelf, sipMeth);
}

QMimeData* sipQAbstractTableModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QAbstractTableModel::mimeData(a0);

    extern QMimeData* sipVH_QtCore_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QModelIndex>&);

    return sipVH_QtCore_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStringList sipQAbstractTableModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QAbstractTableModel::mimeTypes();

    extern QStringList sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_27(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractTableModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return QAbstractTableModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QMap<int,QVariant>&);

    return sipVH_QtCore_55(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QMap<int,QVariant> sipQAbstractTableModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return QAbstractTableModel::itemData(a0);

    extern QMap<int,QVariant> sipVH_QtCore_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_56(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return QAbstractTableModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,const QVariant&,int);

    return sipVH_QtCore_57(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QVariant sipQAbstractTableModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return QAbstractTableModel::headerData(a0,a1,a2);

    extern QVariant sipVH_QtCore_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,int);

    return sipVH_QtCore_58(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return QAbstractTableModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QVariant&,int);

    return sipVH_QtCore_59(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipQAbstractTableModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,sipName_QAbstractTableModel,sipName_data);

    if (!sipMeth)
        return QVariant();

    extern QVariant sipVH_QtCore_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int);

    return sipVH_QtCore_60(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQAbstractTableModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,sipName_QAbstractTableModel,sipName_columnCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_43(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQAbstractTableModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,sipName_QAbstractTableModel,sipName_rowCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_43(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::dropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QAbstractTableModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return sipVH_QtCore_45(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QModelIndex sipQAbstractTableModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return QAbstractTableModel::index(a0,a1,a2);

    extern QModelIndex sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QAbstractTableModel_index, "QAbstractTableModel.index(int, int, QModelIndex parent=QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractTableModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        const QAbstractTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QAbstractTableModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QAbstractTableModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_index, doc_QAbstractTableModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTableModel_dropMimeData, "QAbstractTableModel.dropMimeData(QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractTableModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        Qt::DropAction a1;
        int a2;
        int a3;
        const QModelIndex* a4;
        QAbstractTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QAbstractTableModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractTableModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_dropMimeData, doc_QAbstractTableModel_dropMimeData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractTableModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_parent(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QAbstractTableModel, sipName_parent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractTableModel_hasChildren(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_hasChildren(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QAbstractTableModel, sipName_hasChildren, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractTableModel(void *, const sipTypeDef *);}
static void *cast_QAbstractTableModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractTableModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemModel)->ctd_cast((QAbstractItemModel *)(QAbstractTableModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractTableModel(void *, int);}
static void release_QAbstractTableModel(void *sipCppV,int)
{
    QAbstractTableModel *sipCpp = reinterpret_cast<QAbstractTableModel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractTableModel(sipSimpleWrapper *);}
static void dealloc_QAbstractTableModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractTableModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractTableModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractTableModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractTableModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractTableModel *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractTableModel(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractTableModel[] = {{13, 255, 1}};


static PyMethodDef methods_QAbstractTableModel[] = {
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QAbstractTableModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTableModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_hasChildren), meth_QAbstractTableModel_hasChildren, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QAbstractTableModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractTableModel_index)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QAbstractTableModel_parent, METH_VARARGS, NULL}
};

PyDoc_STRVAR(doc_QAbstractTableModel, "\1QAbstractTableModel(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QAbstractTableModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractTableModel,
        {0}
    },
    {
        sipNameNr_QAbstractTableModel,
        {0, 0, 1},
        4, methods_QAbstractTableModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractTableModel,
    -1,
    -1,
    supers_QAbstractTableModel,
    0,
    init_type_QAbstractTableModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractTableModel,
    0,
    0,
    0,
    release_QAbstractTableModel,
    cast_QAbstractTableModel,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractTableModel::staticMetaObject,
    0,
    0
};
