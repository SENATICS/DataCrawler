/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"
#line 201 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 48 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 51 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 54 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"
#line 201 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 58 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"
#line 111 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
#include <QHash>
#line 64 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"


PyDoc_STRVAR(doc_QUrl_setUrl, "QUrl.setUrl(QString)\n"
    "QUrl.setUrl(QString, QUrl.ParsingMode)");

extern "C" {static PyObject *meth_QUrl_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QUrl::ParsingMode a1;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUrl, doc_QUrl_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setEncodedUrl, "QUrl.setEncodedUrl(QByteArray)\n"
    "QUrl.setEncodedUrl(QByteArray, QUrl.ParsingMode)");

extern "C" {static PyObject *meth_QUrl_setEncodedUrl(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedUrl(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl::ParsingMode a1;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedUrl(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedUrl, doc_QUrl_setEncodedUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_isValid, "QUrl.isValid() -> bool");

extern "C" {static PyObject *meth_QUrl_isValid(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isValid, doc_QUrl_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_isEmpty, "QUrl.isEmpty() -> bool");

extern "C" {static PyObject *meth_QUrl_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isEmpty, doc_QUrl_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_clear, "QUrl.clear()");

extern "C" {static PyObject *meth_QUrl_clear(PyObject *, PyObject *);}
static PyObject *meth_QUrl_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_clear, doc_QUrl_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setScheme, "QUrl.setScheme(QString)");

extern "C" {static PyObject *meth_QUrl_setScheme(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setScheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScheme(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setScheme, doc_QUrl_setScheme);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_scheme, "QUrl.scheme() -> QString");

extern "C" {static PyObject *meth_QUrl_scheme(PyObject *, PyObject *);}
static PyObject *meth_QUrl_scheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->scheme());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_scheme, doc_QUrl_scheme);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setAuthority, "QUrl.setAuthority(QString)");

extern "C" {static PyObject *meth_QUrl_setAuthority(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setAuthority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAuthority(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setAuthority, doc_QUrl_setAuthority);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_authority, "QUrl.authority() -> QString");

extern "C" {static PyObject *meth_QUrl_authority(PyObject *, PyObject *);}
static PyObject *meth_QUrl_authority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->authority());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_authority, doc_QUrl_authority);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setUserInfo, "QUrl.setUserInfo(QString)");

extern "C" {static PyObject *meth_QUrl_setUserInfo(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUserInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUserInfo(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUserInfo, doc_QUrl_setUserInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_userInfo, "QUrl.userInfo() -> QString");

extern "C" {static PyObject *meth_QUrl_userInfo(PyObject *, PyObject *);}
static PyObject *meth_QUrl_userInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->userInfo());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_userInfo, doc_QUrl_userInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setUserName, "QUrl.setUserName(QString)");

extern "C" {static PyObject *meth_QUrl_setUserName(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUserName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUserName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUserName, doc_QUrl_setUserName);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_userName, "QUrl.userName() -> QString");

extern "C" {static PyObject *meth_QUrl_userName(PyObject *, PyObject *);}
static PyObject *meth_QUrl_userName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->userName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_userName, doc_QUrl_userName);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setPassword, "QUrl.setPassword(QString)");

extern "C" {static PyObject *meth_QUrl_setPassword(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPassword(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPassword, doc_QUrl_setPassword);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_password, "QUrl.password() -> QString");

extern "C" {static PyObject *meth_QUrl_password(PyObject *, PyObject *);}
static PyObject *meth_QUrl_password(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->password());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_password, doc_QUrl_password);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setHost, "QUrl.setHost(QString)");

extern "C" {static PyObject *meth_QUrl_setHost(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHost(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setHost, doc_QUrl_setHost);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_host, "QUrl.host() -> QString");

extern "C" {static PyObject *meth_QUrl_host(PyObject *, PyObject *);}
static PyObject *meth_QUrl_host(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->host());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_host, doc_QUrl_host);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setPort, "QUrl.setPort(int)");

extern "C" {static PyObject *meth_QUrl_setPort(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUrl, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPort(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPort, doc_QUrl_setPort);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_port, "QUrl.port() -> int\n"
    "QUrl.port(int) -> int");

extern "C" {static PyObject *meth_QUrl_port(PyObject *, PyObject *);}
static PyObject *meth_QUrl_port(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->port();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUrl, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->port(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_port, doc_QUrl_port);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setPath, "QUrl.setPath(QString)");

extern "C" {static PyObject *meth_QUrl_setPath(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPath, doc_QUrl_setPath);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_path, "QUrl.path() -> QString");

extern "C" {static PyObject *meth_QUrl_path(PyObject *, PyObject *);}
static PyObject *meth_QUrl_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->path());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_path, doc_QUrl_path);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setEncodedQuery, "QUrl.setEncodedQuery(QByteArray)");

extern "C" {static PyObject *meth_QUrl_setEncodedQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedQuery(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedQuery, doc_QUrl_setEncodedQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_encodedQuery, "QUrl.encodedQuery() -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedQuery());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedQuery, doc_QUrl_encodedQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setQueryDelimiters, "QUrl.setQueryDelimiters(str, str)");

extern "C" {static PyObject *meth_QUrl_setQueryDelimiters(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setQueryDelimiters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char a0;
        char a1;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bcc", &sipSelf, sipType_QUrl, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQueryDelimiters(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setQueryDelimiters, doc_QUrl_setQueryDelimiters);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_queryValueDelimiter, "QUrl.queryValueDelimiter() -> str");

extern "C" {static PyObject *meth_QUrl_queryValueDelimiter(PyObject *, PyObject *);}
static PyObject *meth_QUrl_queryValueDelimiter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->queryValueDelimiter();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_queryValueDelimiter, doc_QUrl_queryValueDelimiter);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_queryPairDelimiter, "QUrl.queryPairDelimiter() -> str");

extern "C" {static PyObject *meth_QUrl_queryPairDelimiter(PyObject *, PyObject *);}
static PyObject *meth_QUrl_queryPairDelimiter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->queryPairDelimiter();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_queryPairDelimiter, doc_QUrl_queryPairDelimiter);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setQueryItems, "QUrl.setQueryItems(list-of-tuple-of-QString-QString)");

extern "C" {static PyObject *meth_QUrl_setQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QPair<QString,QString> >* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QList_0600QPair_0100QString_0100QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QPair<QString,QString> > *>(a0),sipType_QList_0600QPair_0100QString_0100QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setQueryItems, doc_QUrl_setQueryItems);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_addQueryItem, "QUrl.addQueryItem(QString, QString)");

extern "C" {static PyObject *meth_QUrl_addQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_addQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addQueryItem(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_addQueryItem, doc_QUrl_addQueryItem);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_queryItems, "QUrl.queryItems() -> list-of-tuple-of-QString-QString");

extern "C" {static PyObject *meth_QUrl_queryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_queryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QList<QPair<QString,QString> >*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QPair<QString,QString> >(sipCpp->queryItems());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_queryItems, doc_QUrl_queryItems);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_hasQueryItem, "QUrl.hasQueryItem(QString) -> bool");

extern "C" {static PyObject *meth_QUrl_hasQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasQueryItem, doc_QUrl_hasQueryItem);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_queryItemValue, "QUrl.queryItemValue(QString) -> QString");

extern "C" {static PyObject *meth_QUrl_queryItemValue(PyObject *, PyObject *);}
static PyObject *meth_QUrl_queryItemValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->queryItemValue(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_queryItemValue, doc_QUrl_queryItemValue);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_allQueryItemValues, "QUrl.allQueryItemValues(QString) -> QStringList");

extern "C" {static PyObject *meth_QUrl_allQueryItemValues(PyObject *, PyObject *);}
static PyObject *meth_QUrl_allQueryItemValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->allQueryItemValues(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_allQueryItemValues, doc_QUrl_allQueryItemValues);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_removeQueryItem, "QUrl.removeQueryItem(QString)");

extern "C" {static PyObject *meth_QUrl_removeQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeQueryItem, doc_QUrl_removeQueryItem);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_removeAllQueryItems, "QUrl.removeAllQueryItems(QString)");

extern "C" {static PyObject *meth_QUrl_removeAllQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeAllQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeAllQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeAllQueryItems, doc_QUrl_removeAllQueryItems);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setFragment, "QUrl.setFragment(QString)");

extern "C" {static PyObject *meth_QUrl_setFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFragment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setFragment, doc_QUrl_setFragment);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_fragment, "QUrl.fragment() -> QString");

extern "C" {static PyObject *meth_QUrl_fragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fragment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fragment, doc_QUrl_fragment);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_resolved, "QUrl.resolved(QUrl) -> QUrl");

extern "C" {static PyObject *meth_QUrl_resolved(PyObject *, PyObject *);}
static PyObject *meth_QUrl_resolved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
            QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->resolved(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_resolved, doc_QUrl_resolved);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_isRelative, "QUrl.isRelative() -> bool");

extern "C" {static PyObject *meth_QUrl_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRelative();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isRelative, doc_QUrl_isRelative);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_isParentOf, "QUrl.isParentOf(QUrl) -> bool");

extern "C" {static PyObject *meth_QUrl_isParentOf(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isParentOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isParentOf(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isParentOf, doc_QUrl_isParentOf);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_fromLocalFile, "QUrl.fromLocalFile(QString) -> QUrl");

extern "C" {static PyObject *meth_QUrl_fromLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromLocalFile(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(QUrl::fromLocalFile(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromLocalFile, doc_QUrl_fromLocalFile);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_toLocalFile, "QUrl.toLocalFile() -> QString");

extern "C" {static PyObject *meth_QUrl_toLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toLocalFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toLocalFile());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toLocalFile, doc_QUrl_toLocalFile);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_toString, "QUrl.toString(QUrl.FormattingOptions options=QUrl.None) -> QString");

extern "C" {static PyObject *meth_QUrl_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl::FormattingOptions a0def = QUrl::None;
        QUrl::FormattingOptions* a0 = &a0def;
        int a0State = 0;
        const QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toString, doc_QUrl_toString);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_toEncoded, "QUrl.toEncoded(QUrl.FormattingOptions options=QUrl.None) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toEncoded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toEncoded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl::FormattingOptions a0def = QUrl::None;
        QUrl::FormattingOptions* a0 = &a0def;
        int a0State = 0;
        const QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toEncoded(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toEncoded, doc_QUrl_toEncoded);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_fromEncoded, "QUrl.fromEncoded(QByteArray) -> QUrl\n"
    "QUrl.fromEncoded(QByteArray, QUrl.ParsingMode) -> QUrl");

extern "C" {static PyObject *meth_QUrl_fromEncoded(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromEncoded(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(QUrl::fromEncoded(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl::ParsingMode a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1E", sipType_QByteArray, &a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(QUrl::fromEncoded(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromEncoded, doc_QUrl_fromEncoded);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_detach, "QUrl.detach()");

extern "C" {static PyObject *meth_QUrl_detach(PyObject *, PyObject *);}
static PyObject *meth_QUrl_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_detach, doc_QUrl_detach);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_isDetached, "QUrl.isDetached() -> bool");

extern "C" {static PyObject *meth_QUrl_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDetached();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isDetached, doc_QUrl_isDetached);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_fromPercentEncoding, "QUrl.fromPercentEncoding(QByteArray) -> QString");

extern "C" {static PyObject *meth_QUrl_fromPercentEncoding(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromPercentEncoding(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QUrl::fromPercentEncoding(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromPercentEncoding, doc_QUrl_fromPercentEncoding);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_toPercentEncoding, "QUrl.toPercentEncoding(QString, QByteArray exclude=QByteArray(), QByteArray include=QByteArray()) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toPercentEncoding(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toPercentEncoding(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QByteArray& a1def = QByteArray();
        const QByteArray* a1 = &a1def;
        int a1State = 0;
        const QByteArray& a2def = QByteArray();
        const QByteArray* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_exclude,
            sipName_include,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|J1J1", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State, sipType_QByteArray, &a2, &a2State))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QUrl::toPercentEncoding(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);
            sipReleaseType(const_cast<QByteArray *>(a2),sipType_QByteArray,a2State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toPercentEncoding, doc_QUrl_toPercentEncoding);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_fromPunycode, "QUrl.fromPunycode(QByteArray) -> QString");

extern "C" {static PyObject *meth_QUrl_fromPunycode(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromPunycode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QUrl::fromPunycode(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromPunycode, doc_QUrl_fromPunycode);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_toPunycode, "QUrl.toPunycode(QString) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toPunycode(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toPunycode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QUrl::toPunycode(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toPunycode, doc_QUrl_toPunycode);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_hasQuery, "QUrl.hasQuery() -> bool");

extern "C" {static PyObject *meth_QUrl_hasQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasQuery();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasQuery, doc_QUrl_hasQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_hasFragment, "QUrl.hasFragment() -> bool");

extern "C" {static PyObject *meth_QUrl_hasFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFragment();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasFragment, doc_QUrl_hasFragment);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_errorString, "QUrl.errorString() -> QString");

extern "C" {static PyObject *meth_QUrl_errorString(PyObject *, PyObject *);}
static PyObject *meth_QUrl_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_errorString, doc_QUrl_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_fromAce, "QUrl.fromAce(QByteArray) -> QString");

extern "C" {static PyObject *meth_QUrl_fromAce(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromAce(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QUrl::fromAce(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromAce, doc_QUrl_fromAce);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_toAce, "QUrl.toAce(QString) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toAce(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toAce(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QUrl::toAce(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toAce, doc_QUrl_toAce);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_idnWhitelist, "QUrl.idnWhitelist() -> QStringList");

extern "C" {static PyObject *meth_QUrl_idnWhitelist(PyObject *, PyObject *);}
static PyObject *meth_QUrl_idnWhitelist(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QUrl::idnWhitelist());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_idnWhitelist, doc_QUrl_idnWhitelist);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setIdnWhitelist, "QUrl.setIdnWhitelist(QStringList)");

extern "C" {static PyObject *meth_QUrl_setIdnWhitelist(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setIdnWhitelist(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QUrl::setIdnWhitelist(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setIdnWhitelist, doc_QUrl_setIdnWhitelist);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setEncodedUserName, "QUrl.setEncodedUserName(QByteArray)");

extern "C" {static PyObject *meth_QUrl_setEncodedUserName(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedUserName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedUserName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedUserName, doc_QUrl_setEncodedUserName);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_encodedUserName, "QUrl.encodedUserName() -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedUserName(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedUserName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedUserName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedUserName, doc_QUrl_encodedUserName);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setEncodedPassword, "QUrl.setEncodedPassword(QByteArray)");

extern "C" {static PyObject *meth_QUrl_setEncodedPassword(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedPassword(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedPassword, doc_QUrl_setEncodedPassword);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_encodedPassword, "QUrl.encodedPassword() -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedPassword(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedPassword());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedPassword, doc_QUrl_encodedPassword);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setEncodedHost, "QUrl.setEncodedHost(QByteArray)");

extern "C" {static PyObject *meth_QUrl_setEncodedHost(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedHost(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedHost, doc_QUrl_setEncodedHost);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_encodedHost, "QUrl.encodedHost() -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedHost(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedHost());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedHost, doc_QUrl_encodedHost);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setEncodedPath, "QUrl.setEncodedPath(QByteArray)");

extern "C" {static PyObject *meth_QUrl_setEncodedPath(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedPath, doc_QUrl_setEncodedPath);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_encodedPath, "QUrl.encodedPath() -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedPath(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedPath, doc_QUrl_encodedPath);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setEncodedQueryItems, "QUrl.setEncodedQueryItems(list-of-tuple-of-QByteArray-QByteArray)");

extern "C" {static PyObject *meth_QUrl_setEncodedQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QPair<QByteArray,QByteArray> >* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QList_0600QPair_0100QByteArray_0100QByteArray,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QPair<QByteArray,QByteArray> > *>(a0),sipType_QList_0600QPair_0100QByteArray_0100QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedQueryItems, doc_QUrl_setEncodedQueryItems);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_addEncodedQueryItem, "QUrl.addEncodedQueryItem(QByteArray, QByteArray)");

extern "C" {static PyObject *meth_QUrl_addEncodedQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_addEncodedQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QByteArray* a1;
        int a1State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addEncodedQueryItem(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_addEncodedQueryItem, doc_QUrl_addEncodedQueryItem);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_encodedQueryItems, "QUrl.encodedQueryItems() -> list-of-tuple-of-QByteArray-QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QList<QPair<QByteArray,QByteArray> >*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QPair<QByteArray,QByteArray> >(sipCpp->encodedQueryItems());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QByteArray_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedQueryItems, doc_QUrl_encodedQueryItems);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_hasEncodedQueryItem, "QUrl.hasEncodedQueryItem(QByteArray) -> bool");

extern "C" {static PyObject *meth_QUrl_hasEncodedQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasEncodedQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasEncodedQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasEncodedQueryItem, doc_QUrl_hasEncodedQueryItem);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_encodedQueryItemValue, "QUrl.encodedQueryItemValue(QByteArray) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedQueryItemValue(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedQueryItemValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedQueryItemValue(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedQueryItemValue, doc_QUrl_encodedQueryItemValue);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_allEncodedQueryItemValues, "QUrl.allEncodedQueryItemValues(QByteArray) -> list-of-QByteArray");

extern "C" {static PyObject *meth_QUrl_allEncodedQueryItemValues(PyObject *, PyObject *);}
static PyObject *meth_QUrl_allEncodedQueryItemValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QList<QByteArray>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(sipCpp->allEncodedQueryItemValues(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_allEncodedQueryItemValues, doc_QUrl_allEncodedQueryItemValues);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_removeEncodedQueryItem, "QUrl.removeEncodedQueryItem(QByteArray)");

extern "C" {static PyObject *meth_QUrl_removeEncodedQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeEncodedQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeEncodedQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeEncodedQueryItem, doc_QUrl_removeEncodedQueryItem);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_removeAllEncodedQueryItems, "QUrl.removeAllEncodedQueryItems(QByteArray)");

extern "C" {static PyObject *meth_QUrl_removeAllEncodedQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeAllEncodedQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeAllEncodedQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeAllEncodedQueryItems, doc_QUrl_removeAllEncodedQueryItems);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_setEncodedFragment, "QUrl.setEncodedFragment(QByteArray)");

extern "C" {static PyObject *meth_QUrl_setEncodedFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedFragment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedFragment, doc_QUrl_setEncodedFragment);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_encodedFragment, "QUrl.encodedFragment() -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedFragment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedFragment, doc_QUrl_encodedFragment);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_fromUserInput, "QUrl.fromUserInput(QString) -> QUrl");

extern "C" {static PyObject *meth_QUrl_fromUserInput(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromUserInput(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(QUrl::fromUserInput(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromUserInput, doc_QUrl_fromUserInput);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_swap, "QUrl.swap(QUrl)");

extern "C" {static PyObject *meth_QUrl_swap(PyObject *, PyObject *);}
static PyObject *meth_QUrl_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl* a0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->swap(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_swap, doc_QUrl_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_topLevelDomain, "QUrl.topLevelDomain() -> QString");

extern "C" {static PyObject *meth_QUrl_topLevelDomain(PyObject *, PyObject *);}
static PyObject *meth_QUrl_topLevelDomain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->topLevelDomain());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_topLevelDomain, doc_QUrl_topLevelDomain);

    return NULL;
}


PyDoc_STRVAR(doc_QUrl_isLocalFile, "QUrl.isLocalFile() -> bool");

extern "C" {static PyObject *meth_QUrl_isLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isLocalFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLocalFile();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isLocalFile, doc_QUrl_isLocalFile);

    return NULL;
}


extern "C" {static PyObject *slot_QUrl___ge__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp->QUrl::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ge_slot,sipType_QUrl,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QUrl___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QUrl::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QUrl,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QUrl___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QUrl::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QUrl,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QUrl___lt__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QUrl::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,lt_slot,sipType_QUrl,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QUrl___repr__(PyObject *);}
static PyObject *slot_QUrl___repr__(PyObject *sipSelf)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
        PyObject *uni = qpycore_PyObject_FromQString(sipCpp->toString());
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QUrl(%R)", uni);
        #else
            sipRes = PyString_FromFormat("PyQt4.QtCore.QUrl(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
#line 2716 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static long slot_QUrl___hash__(PyObject *);}
static long slot_QUrl___hash__(PyObject *sipSelf)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 138 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
        if (sipIsAPIEnabled("QUrl", 2, 0))
        {
        #if QT_VERSION >= 0x040700
            sipRes = qHash(*sipCpp);
        #else
            sipRes = qHash(sipCpp->toString());
        #endif
        }
        else
        {
            // Mimic Python's default behavour.
            sipRes = _Py_HashPointer(sipSelf);
        }
#line 2753 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCoreQUrl.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QUrl(void *, const sipTypeDef *);}
static void *cast_QUrl(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QUrl)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUrl(void *, int);}
static void release_QUrl(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QUrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QUrl(void *, SIP_SSIZE_T, const void *);}
static void assign_QUrl(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QUrl *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QUrl *>(sipSrc);
}


extern "C" {static void *array_QUrl(SIP_SSIZE_T);}
static void *array_QUrl(SIP_SSIZE_T sipNrElem)
{
    return new QUrl[sipNrElem];
}


extern "C" {static void *copy_QUrl(const void *, SIP_SSIZE_T);}
static void *copy_QUrl(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QUrl(reinterpret_cast<const QUrl *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QUrl(sipSimpleWrapper *);}
static void dealloc_QUrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QUrl(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QUrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUrl(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QUrl *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QUrl();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QUrl(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QUrl::ParsingMode a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1E", sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QUrl(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QUrl* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QUrl(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUrl[] = {
    {(void *)slot_QUrl___ge__, ge_slot},
    {(void *)slot_QUrl___ne__, ne_slot},
    {(void *)slot_QUrl___eq__, eq_slot},
    {(void *)slot_QUrl___lt__, lt_slot},
    {(void *)slot_QUrl___repr__, repr_slot},
    {(void *)slot_QUrl___hash__, hash_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QUrl[] = {
    {SIP_MLNAME_CAST(sipName_addEncodedQueryItem), meth_QUrl_addEncodedQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_addEncodedQueryItem)},
    {SIP_MLNAME_CAST(sipName_addQueryItem), meth_QUrl_addQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_addQueryItem)},
    {SIP_MLNAME_CAST(sipName_allEncodedQueryItemValues), meth_QUrl_allEncodedQueryItemValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_allEncodedQueryItemValues)},
    {SIP_MLNAME_CAST(sipName_allQueryItemValues), meth_QUrl_allQueryItemValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_allQueryItemValues)},
    {SIP_MLNAME_CAST(sipName_authority), meth_QUrl_authority, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_authority)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QUrl_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_clear)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QUrl_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_detach)},
    {SIP_MLNAME_CAST(sipName_encodedFragment), meth_QUrl_encodedFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedFragment)},
    {SIP_MLNAME_CAST(sipName_encodedHost), meth_QUrl_encodedHost, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedHost)},
    {SIP_MLNAME_CAST(sipName_encodedPassword), meth_QUrl_encodedPassword, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedPassword)},
    {SIP_MLNAME_CAST(sipName_encodedPath), meth_QUrl_encodedPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedPath)},
    {SIP_MLNAME_CAST(sipName_encodedQuery), meth_QUrl_encodedQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedQuery)},
    {SIP_MLNAME_CAST(sipName_encodedQueryItemValue), meth_QUrl_encodedQueryItemValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedQueryItemValue)},
    {SIP_MLNAME_CAST(sipName_encodedQueryItems), meth_QUrl_encodedQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedQueryItems)},
    {SIP_MLNAME_CAST(sipName_encodedUserName), meth_QUrl_encodedUserName, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedUserName)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QUrl_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_errorString)},
    {SIP_MLNAME_CAST(sipName_fragment), meth_QUrl_fragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fragment)},
    {SIP_MLNAME_CAST(sipName_fromAce), meth_QUrl_fromAce, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromAce)},
    {SIP_MLNAME_CAST(sipName_fromEncoded), meth_QUrl_fromEncoded, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromEncoded)},
    {SIP_MLNAME_CAST(sipName_fromLocalFile), meth_QUrl_fromLocalFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromLocalFile)},
    {SIP_MLNAME_CAST(sipName_fromPercentEncoding), meth_QUrl_fromPercentEncoding, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromPercentEncoding)},
    {SIP_MLNAME_CAST(sipName_fromPunycode), meth_QUrl_fromPunycode, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromPunycode)},
    {SIP_MLNAME_CAST(sipName_fromUserInput), meth_QUrl_fromUserInput, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromUserInput)},
    {SIP_MLNAME_CAST(sipName_hasEncodedQueryItem), meth_QUrl_hasEncodedQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_hasEncodedQueryItem)},
    {SIP_MLNAME_CAST(sipName_hasFragment), meth_QUrl_hasFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_hasFragment)},
    {SIP_MLNAME_CAST(sipName_hasQuery), meth_QUrl_hasQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_hasQuery)},
    {SIP_MLNAME_CAST(sipName_hasQueryItem), meth_QUrl_hasQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_hasQueryItem)},
    {SIP_MLNAME_CAST(sipName_host), meth_QUrl_host, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_host)},
    {SIP_MLNAME_CAST(sipName_idnWhitelist), meth_QUrl_idnWhitelist, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_idnWhitelist)},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QUrl_isDetached, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isDetached)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QUrl_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isLocalFile), meth_QUrl_isLocalFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isLocalFile)},
    {SIP_MLNAME_CAST(sipName_isParentOf), meth_QUrl_isParentOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isParentOf)},
    {SIP_MLNAME_CAST(sipName_isRelative), meth_QUrl_isRelative, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isRelative)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QUrl_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isValid)},
    {SIP_MLNAME_CAST(sipName_password), meth_QUrl_password, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_password)},
    {SIP_MLNAME_CAST(sipName_path), meth_QUrl_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_path)},
    {SIP_MLNAME_CAST(sipName_port), meth_QUrl_port, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_port)},
    {SIP_MLNAME_CAST(sipName_queryItemValue), meth_QUrl_queryItemValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_queryItemValue)},
    {SIP_MLNAME_CAST(sipName_queryItems), meth_QUrl_queryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_queryItems)},
    {SIP_MLNAME_CAST(sipName_queryPairDelimiter), meth_QUrl_queryPairDelimiter, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_queryPairDelimiter)},
    {SIP_MLNAME_CAST(sipName_queryValueDelimiter), meth_QUrl_queryValueDelimiter, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_queryValueDelimiter)},
    {SIP_MLNAME_CAST(sipName_removeAllEncodedQueryItems), meth_QUrl_removeAllEncodedQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_removeAllEncodedQueryItems)},
    {SIP_MLNAME_CAST(sipName_removeAllQueryItems), meth_QUrl_removeAllQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_removeAllQueryItems)},
    {SIP_MLNAME_CAST(sipName_removeEncodedQueryItem), meth_QUrl_removeEncodedQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_removeEncodedQueryItem)},
    {SIP_MLNAME_CAST(sipName_removeQueryItem), meth_QUrl_removeQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_removeQueryItem)},
    {SIP_MLNAME_CAST(sipName_resolved), meth_QUrl_resolved, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_resolved)},
    {SIP_MLNAME_CAST(sipName_scheme), meth_QUrl_scheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_scheme)},
    {SIP_MLNAME_CAST(sipName_setAuthority), meth_QUrl_setAuthority, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setAuthority)},
    {SIP_MLNAME_CAST(sipName_setEncodedFragment), meth_QUrl_setEncodedFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedFragment)},
    {SIP_MLNAME_CAST(sipName_setEncodedHost), meth_QUrl_setEncodedHost, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedHost)},
    {SIP_MLNAME_CAST(sipName_setEncodedPassword), meth_QUrl_setEncodedPassword, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedPassword)},
    {SIP_MLNAME_CAST(sipName_setEncodedPath), meth_QUrl_setEncodedPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedPath)},
    {SIP_MLNAME_CAST(sipName_setEncodedQuery), meth_QUrl_setEncodedQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedQuery)},
    {SIP_MLNAME_CAST(sipName_setEncodedQueryItems), meth_QUrl_setEncodedQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedQueryItems)},
    {SIP_MLNAME_CAST(sipName_setEncodedUrl), meth_QUrl_setEncodedUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedUrl)},
    {SIP_MLNAME_CAST(sipName_setEncodedUserName), meth_QUrl_setEncodedUserName, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedUserName)},
    {SIP_MLNAME_CAST(sipName_setFragment), meth_QUrl_setFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setFragment)},
    {SIP_MLNAME_CAST(sipName_setHost), meth_QUrl_setHost, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setHost)},
    {SIP_MLNAME_CAST(sipName_setIdnWhitelist), meth_QUrl_setIdnWhitelist, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setIdnWhitelist)},
    {SIP_MLNAME_CAST(sipName_setPassword), meth_QUrl_setPassword, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setPassword)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QUrl_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setPath)},
    {SIP_MLNAME_CAST(sipName_setPort), meth_QUrl_setPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setPort)},
    {SIP_MLNAME_CAST(sipName_setQueryDelimiters), meth_QUrl_setQueryDelimiters, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setQueryDelimiters)},
    {SIP_MLNAME_CAST(sipName_setQueryItems), meth_QUrl_setQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setQueryItems)},
    {SIP_MLNAME_CAST(sipName_setScheme), meth_QUrl_setScheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setScheme)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QUrl_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setUrl)},
    {SIP_MLNAME_CAST(sipName_setUserInfo), meth_QUrl_setUserInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setUserInfo)},
    {SIP_MLNAME_CAST(sipName_setUserName), meth_QUrl_setUserName, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setUserName)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QUrl_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_swap)},
    {SIP_MLNAME_CAST(sipName_toAce), meth_QUrl_toAce, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_toAce)},
    {SIP_MLNAME_CAST(sipName_toEncoded), (PyCFunction)meth_QUrl_toEncoded, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toEncoded)},
    {SIP_MLNAME_CAST(sipName_toLocalFile), meth_QUrl_toLocalFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_toLocalFile)},
    {SIP_MLNAME_CAST(sipName_toPercentEncoding), (PyCFunction)meth_QUrl_toPercentEncoding, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toPercentEncoding)},
    {SIP_MLNAME_CAST(sipName_toPunycode), meth_QUrl_toPunycode, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_toPunycode)},
    {SIP_MLNAME_CAST(sipName_toString), (PyCFunction)meth_QUrl_toString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toString)},
    {SIP_MLNAME_CAST(sipName_topLevelDomain), meth_QUrl_topLevelDomain, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_topLevelDomain)},
    {SIP_MLNAME_CAST(sipName_userInfo), meth_QUrl_userInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_userInfo)},
    {SIP_MLNAME_CAST(sipName_userName), meth_QUrl_userName, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_userName)}
};

static sipEnumMemberDef enummembers_QUrl[] = {
    {sipName_None, static_cast<int>(QUrl::None), 243},
    {sipName_RemoveAuthority, static_cast<int>(QUrl::RemoveAuthority), 243},
    {sipName_RemoveFragment, static_cast<int>(QUrl::RemoveFragment), 243},
    {sipName_RemovePassword, static_cast<int>(QUrl::RemovePassword), 243},
    {sipName_RemovePath, static_cast<int>(QUrl::RemovePath), 243},
    {sipName_RemovePort, static_cast<int>(QUrl::RemovePort), 243},
    {sipName_RemoveQuery, static_cast<int>(QUrl::RemoveQuery), 243},
    {sipName_RemoveScheme, static_cast<int>(QUrl::RemoveScheme), 243},
    {sipName_RemoveUserInfo, static_cast<int>(QUrl::RemoveUserInfo), 243},
    {sipName_StrictMode, static_cast<int>(QUrl::StrictMode), 245},
    {sipName_StripTrailingSlash, static_cast<int>(QUrl::StripTrailingSlash), 243},
    {sipName_TolerantMode, static_cast<int>(QUrl::TolerantMode), 245},
};

PyDoc_STRVAR(doc_QUrl, "\1QUrl()\n"
    "QUrl(QString)\n"
    "QUrl(QString, QUrl.ParsingMode)\n"
    "QUrl(QUrl)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QUrl = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QUrl,
        {0}
    },
    {
        sipNameNr_QUrl,
        {0, 0, 1},
        79, methods_QUrl,
        12, enummembers_QUrl,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QUrl,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QUrl,
    init_type_QUrl,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QUrl,
    assign_QUrl,
    array_QUrl,
    copy_QUrl,
    release_QUrl,
    cast_QUrl,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
