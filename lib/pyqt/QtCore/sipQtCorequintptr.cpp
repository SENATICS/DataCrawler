/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:12 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 455 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCorequintptr.cpp"



extern "C" {static void assign_quintptr(void *, SIP_SSIZE_T, const void *);}
static void assign_quintptr(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<quintptr *>(sipDst)[sipDstIdx] = *reinterpret_cast<const quintptr *>(sipSrc);
}


extern "C" {static void *array_quintptr(SIP_SSIZE_T);}
static void *array_quintptr(SIP_SSIZE_T sipNrElem)
{
    return new quintptr[sipNrElem];
}


extern "C" {static void *copy_quintptr(const void *, SIP_SSIZE_T);}
static void *copy_quintptr(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new quintptr(reinterpret_cast<const quintptr *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_quintptr(void *, int);}
static void release_quintptr(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<quintptr *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_quintptr(PyObject *, void **, int *, PyObject *);}
static int convertTo_quintptr(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *)
{
    quintptr **sipCppPtr = reinterpret_cast<quintptr **>(sipCppPtrV);

#line 459 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qglobal.sip"
    quintptr ptr = (quintptr)sipConvertToVoidPtr(sipPy);

    if (!sipIsErr)
        return !PyErr_Occurred();

    // Mapped types deal with pointers, so create one on the heap.
    quintptr *heap = new quintptr;
    *heap = ptr;

    *sipCppPtr = heap;

    // Make sure the pointer doesn't leak.
    return SIP_TEMPORARY;
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCorequintptr.cpp"
}


extern "C" {static PyObject *convertFrom_quintptr(void *, PyObject *);}
static PyObject *convertFrom_quintptr(void *sipCppV, PyObject *)
{
   quintptr *sipCpp = reinterpret_cast<quintptr *>(sipCppV);

#line 475 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qglobal.sip"
    return sipConvertFromVoidPtr((void *)*sipCpp);
#line 100 "/home/desa2/PyQt-x11-gpl-4.10.4/QtCore/sipQtCorequintptr.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_quintptr = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_quintptr,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_quintptr,
    array_quintptr,
    copy_quintptr,
    release_quintptr,
    convertTo_quintptr,
    convertFrom_quintptr
};
