/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsview.sip"
#include <qgraphicsview.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsview.sip"
#include <qgraphicsview.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 1975 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 168 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsview.sip"
#include <qgraphicsview.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 233 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 236 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 239 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 242 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 245 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 248 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 251 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 254 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 257 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 260 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 263 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 266 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 269 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 272 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 275 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 278 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 281 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 284 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"


class sipQGraphicsView : public QGraphicsView
{
public:
    sipQGraphicsView(QWidget*);
    sipQGraphicsView(QGraphicsScene*,QWidget*);
    virtual ~sipQGraphicsView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    QSize minimumSizeHint() const;
    void drawItems(QPainter*,int,QGraphicsItem**,const QStyleOptionGraphicsItem*);
    void drawForeground(QPainter*,const QRectF&);
    void drawBackground(QPainter*,const QRectF&);
    void inputMethodEvent(QInputMethodEvent*);
    void showEvent(QShowEvent*);
    void scrollContentsBy(int,int);
    void resizeEvent(QResizeEvent*);
    void paintEvent(QPaintEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    bool focusNextPrevChild(bool);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QDropEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    bool viewportEvent(QEvent*);
    bool event(QEvent*);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsView(const sipQGraphicsView &);
    sipQGraphicsView &operator = (const sipQGraphicsView &);

    char sipPyMethods[52];
};

sipQGraphicsView::sipQGraphicsView(QWidget*a0): QGraphicsView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsView::sipQGraphicsView(QGraphicsScene*a0,QWidget*a1): QGraphicsView(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsView::~sipQGraphicsView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsView::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QGraphicsView);
}

int sipQGraphicsView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGraphicsView,_c,_id,_a);

    return _id;
}

void *sipQGraphicsView::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QGraphicsView, _clname)) ? this : QGraphicsView::qt_metacast(_clname);
}

void sipQGraphicsView::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGraphicsView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGraphicsView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGraphicsView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGraphicsView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGraphicsView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGraphicsView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QGraphicsView::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QGraphicsView::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QGraphicsView::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QGraphicsView::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QGraphicsView::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQGraphicsView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QGraphicsView::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QGraphicsView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QGraphicsView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QGraphicsView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QGraphicsView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QGraphicsView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QGraphicsView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QGraphicsView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQGraphicsView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QGraphicsView::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQGraphicsView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QGraphicsView::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QGraphicsView::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQGraphicsView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QGraphicsView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QGraphicsView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQGraphicsView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QGraphicsView::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsView::drawItems(QPainter*a0,int a1,QGraphicsItem**a2,const QStyleOptionGraphicsItem*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_drawItems);

    if (!sipMeth)
    {
        QGraphicsView::drawItems(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_184(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,int,QGraphicsItem**,const QStyleOptionGraphicsItem*);

    sipVH_QtGui_184(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQGraphicsView::drawForeground(QPainter*a0,const QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_drawForeground);

    if (!sipMeth)
    {
        QGraphicsView::drawForeground(a0,a1);
        return;
    }

    extern void sipVH_QtGui_185(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRectF&);

    sipVH_QtGui_185(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsView::drawBackground(QPainter*a0,const QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_drawBackground);

    if (!sipMeth)
    {
        QGraphicsView::drawBackground(a0,a1);
        return;
    }

    extern void sipVH_QtGui_185(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRectF&);

    sipVH_QtGui_185(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QGraphicsView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QGraphicsView::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QGraphicsView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QGraphicsView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QGraphicsView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QGraphicsView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QGraphicsView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QGraphicsView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QGraphicsView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QGraphicsView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QGraphicsView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QGraphicsView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QGraphicsView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QGraphicsView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QGraphicsView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QGraphicsView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QGraphicsView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QGraphicsView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QGraphicsView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QGraphicsView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsView::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QGraphicsView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGraphicsView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQGraphicsView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QGraphicsView::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQGraphicsView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QGraphicsView::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QGraphicsView_sizeHint, "QGraphicsView.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QGraphicsView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QGraphicsView::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_sizeHint, doc_QGraphicsView_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_renderHints, "QGraphicsView.renderHints() -> QPainter.RenderHints");

extern "C" {static PyObject *meth_QGraphicsView_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QPainter::RenderHints*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPainter::RenderHints(sipCpp->renderHints());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_renderHints, doc_QGraphicsView_renderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setRenderHint, "QGraphicsView.setRenderHint(QPainter.RenderHint, bool on=True)");

extern "C" {static PyObject *meth_QGraphicsView_setRenderHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setRenderHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHint a0;
        bool a1 = 1;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter_RenderHint, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHint(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setRenderHint, doc_QGraphicsView_setRenderHint);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setRenderHints, "QGraphicsView.setRenderHints(QPainter.RenderHints)");

extern "C" {static PyObject *meth_QGraphicsView_setRenderHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setRenderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHints* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter_RenderHints, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHints(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setRenderHints, doc_QGraphicsView_setRenderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_alignment, "QGraphicsView.alignment() -> Qt.Alignment");

extern "C" {static PyObject *meth_QGraphicsView_alignment(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            Qt::Alignment*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment(sipCpp->alignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_alignment, doc_QGraphicsView_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setAlignment, "QGraphicsView.setAlignment(Qt.Alignment)");

extern "C" {static PyObject *meth_QGraphicsView_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setAlignment, doc_QGraphicsView_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_transformationAnchor, "QGraphicsView.transformationAnchor() -> QGraphicsView.ViewportAnchor");

extern "C" {static PyObject *meth_QGraphicsView_transformationAnchor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_transformationAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::ViewportAnchor sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->transformationAnchor();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QGraphicsView_ViewportAnchor);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_transformationAnchor, doc_QGraphicsView_transformationAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setTransformationAnchor, "QGraphicsView.setTransformationAnchor(QGraphicsView.ViewportAnchor)");

extern "C" {static PyObject *meth_QGraphicsView_setTransformationAnchor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setTransformationAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::ViewportAnchor a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_ViewportAnchor, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTransformationAnchor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setTransformationAnchor, doc_QGraphicsView_setTransformationAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_resizeAnchor, "QGraphicsView.resizeAnchor() -> QGraphicsView.ViewportAnchor");

extern "C" {static PyObject *meth_QGraphicsView_resizeAnchor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_resizeAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::ViewportAnchor sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resizeAnchor();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QGraphicsView_ViewportAnchor);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_resizeAnchor, doc_QGraphicsView_resizeAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setResizeAnchor, "QGraphicsView.setResizeAnchor(QGraphicsView.ViewportAnchor)");

extern "C" {static PyObject *meth_QGraphicsView_setResizeAnchor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setResizeAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::ViewportAnchor a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_ViewportAnchor, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResizeAnchor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setResizeAnchor, doc_QGraphicsView_setResizeAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_dragMode, "QGraphicsView.dragMode() -> QGraphicsView.DragMode");

extern "C" {static PyObject *meth_QGraphicsView_dragMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_dragMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::DragMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dragMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QGraphicsView_DragMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_dragMode, doc_QGraphicsView_dragMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setDragMode, "QGraphicsView.setDragMode(QGraphicsView.DragMode)");

extern "C" {static PyObject *meth_QGraphicsView_setDragMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setDragMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::DragMode a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_DragMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDragMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setDragMode, doc_QGraphicsView_setDragMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_cacheMode, "QGraphicsView.cacheMode() -> QGraphicsView.CacheMode");

extern "C" {static PyObject *meth_QGraphicsView_cacheMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_cacheMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::CacheMode*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGraphicsView::CacheMode(sipCpp->cacheMode());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QGraphicsView_CacheMode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_cacheMode, doc_QGraphicsView_cacheMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setCacheMode, "QGraphicsView.setCacheMode(QGraphicsView.CacheMode)");

extern "C" {static PyObject *meth_QGraphicsView_setCacheMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setCacheMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::CacheMode* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_CacheMode, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCacheMode(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGraphicsView_CacheMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setCacheMode, doc_QGraphicsView_setCacheMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_resetCachedContent, "QGraphicsView.resetCachedContent()");

extern "C" {static PyObject *meth_QGraphicsView_resetCachedContent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_resetCachedContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetCachedContent();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_resetCachedContent, doc_QGraphicsView_resetCachedContent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_isInteractive, "QGraphicsView.isInteractive() -> bool");

extern "C" {static PyObject *meth_QGraphicsView_isInteractive(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_isInteractive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isInteractive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_isInteractive, doc_QGraphicsView_isInteractive);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setInteractive, "QGraphicsView.setInteractive(bool)");

extern "C" {static PyObject *meth_QGraphicsView_setInteractive(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setInteractive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setInteractive(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setInteractive, doc_QGraphicsView_setInteractive);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_scene, "QGraphicsView.scene() -> QGraphicsScene");

extern "C" {static PyObject *meth_QGraphicsView_scene(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_scene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsScene*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scene();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QGraphicsScene,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_scene, doc_QGraphicsView_scene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setScene, "QGraphicsView.setScene(QGraphicsScene)");

extern "C" {static PyObject *meth_QGraphicsView_setScene(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsScene* a0;
        PyObject *a0Keep;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0Keep, sipType_QGraphicsScene, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScene(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -36, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setScene, doc_QGraphicsView_setScene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_sceneRect, "QGraphicsView.sceneRect() -> QRectF");

extern "C" {static PyObject *meth_QGraphicsView_sceneRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_sceneRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->sceneRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_sceneRect, doc_QGraphicsView_sceneRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setSceneRect, "QGraphicsView.setSceneRect(QRectF)\n"
    "QGraphicsView.setSceneRect(float, float, float, float)");

extern "C" {static PyObject *meth_QGraphicsView_setSceneRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setSceneRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSceneRect(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSceneRect(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setSceneRect, doc_QGraphicsView_setSceneRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_matrix, "QGraphicsView.matrix() -> QMatrix");

extern "C" {static PyObject *meth_QGraphicsView_matrix(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_matrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QMatrix*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(sipCpp->matrix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_matrix, doc_QGraphicsView_matrix);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setMatrix, "QGraphicsView.setMatrix(QMatrix, bool combine=False)");

extern "C" {static PyObject *meth_QGraphicsView_setMatrix(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setMatrix(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix* a0;
        bool a1 = 0;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMatrix, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMatrix(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setMatrix, doc_QGraphicsView_setMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_resetMatrix, "QGraphicsView.resetMatrix()");

extern "C" {static PyObject *meth_QGraphicsView_resetMatrix(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_resetMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetMatrix();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_resetMatrix, doc_QGraphicsView_resetMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_rotate, "QGraphicsView.rotate(float)");

extern "C" {static PyObject *meth_QGraphicsView_rotate(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_rotate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rotate(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_rotate, doc_QGraphicsView_rotate);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_scale, "QGraphicsView.scale(float, float)");

extern "C" {static PyObject *meth_QGraphicsView_scale(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scale(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_scale, doc_QGraphicsView_scale);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_shear, "QGraphicsView.shear(float, float)");

extern "C" {static PyObject *meth_QGraphicsView_shear(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_shear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->shear(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_shear, doc_QGraphicsView_shear);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_translate, "QGraphicsView.translate(float, float)");

extern "C" {static PyObject *meth_QGraphicsView_translate(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_translate, doc_QGraphicsView_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_centerOn, "QGraphicsView.centerOn(QPointF)\n"
    "QGraphicsView.centerOn(QGraphicsItem)\n"
    "QGraphicsView.centerOn(float, float)");

extern "C" {static PyObject *meth_QGraphicsView_centerOn(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_centerOn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->centerOn(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QGraphicsItem* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->centerOn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->centerOn(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_centerOn, doc_QGraphicsView_centerOn);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_ensureVisible, "QGraphicsView.ensureVisible(QRectF, int xMargin=50, int yMargin=50)\n"
    "QGraphicsView.ensureVisible(QGraphicsItem, int xMargin=50, int yMargin=50)\n"
    "QGraphicsView.ensureVisible(float, float, float, float, int xMargin=50, int yMargin=50)");

extern "C" {static PyObject *meth_QGraphicsView_ensureVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_ensureVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        int a1 = 50;
        int a2 = 50;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_xMargin,
            sipName_yMargin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|ii", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ensureVisible(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QGraphicsItem* a0;
        int a1 = 50;
        int a2 = 50;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_xMargin,
            sipName_yMargin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|ii", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsItem, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ensureVisible(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        int a4 = 50;
        int a5 = 50;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_xMargin,
            sipName_yMargin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd|ii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ensureVisible(a0,a1,a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_ensureVisible, doc_QGraphicsView_ensureVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_fitInView, "QGraphicsView.fitInView(QRectF, Qt.AspectRatioMode mode=Qt.IgnoreAspectRatio)\n"
    "QGraphicsView.fitInView(QGraphicsItem, Qt.AspectRatioMode mode=Qt.IgnoreAspectRatio)\n"
    "QGraphicsView.fitInView(float, float, float, float, Qt.AspectRatioMode mode=Qt.IgnoreAspectRatio)");

extern "C" {static PyObject *meth_QGraphicsView_fitInView(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_fitInView(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0, sipType_Qt_AspectRatioMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fitInView(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QGraphicsItem* a0;
        Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsItem, &a0, sipType_Qt_AspectRatioMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fitInView(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        Qt::AspectRatioMode a4 = Qt::IgnoreAspectRatio;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd|E", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_AspectRatioMode, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fitInView(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_fitInView, doc_QGraphicsView_fitInView);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_render, "QGraphicsView.render(QPainter, QRectF target=QRectF(), QRect source=QRect(), Qt.AspectRatioMode mode=Qt.KeepAspectRatio)");

extern "C" {static PyObject *meth_QGraphicsView_render(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_render(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        const QRectF& a1def = QRectF();
        const QRectF* a1 = &a1def;
        const QRect& a2def = QRect();
        const QRect* a2 = &a2def;
        Qt::AspectRatioMode a3 = Qt::KeepAspectRatio;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_target,
            sipName_source,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9J9E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1, sipType_QRect, &a2, sipType_Qt_AspectRatioMode, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0,*a1,*a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_render, doc_QGraphicsView_render);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_items, "QGraphicsView.items() -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(QPoint) -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(int, int) -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(int, int, int, int, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape) -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(QRect, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape) -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(QPolygon, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape) -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(QPainterPath, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape) -> list-of-QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsView_items(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_items(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QList<QGraphicsItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGraphicsItem*>(sipCpp->items());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QPoint* a0;
        const QGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPoint, &a0))
        {
            QList<QGraphicsItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            QList<QGraphicsItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGraphicsItem*>(sipCpp->items(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        Qt::ItemSelectionMode a4 = Qt::IntersectsItemShape;
        const QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii|E", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_ItemSelectionMode, &a4))
        {
            QList<QGraphicsItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGraphicsItem*>(sipCpp->items(a0,a1,a2,a3,a4));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QRect* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        const QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRect, &a0, sipType_Qt_ItemSelectionMode, &a1))
        {
            QList<QGraphicsItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QPolygon* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        const QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPolygon, &a0, sipType_Qt_ItemSelectionMode, &a1))
        {
            QList<QGraphicsItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QPainterPath* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        const QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainterPath, &a0, sipType_Qt_ItemSelectionMode, &a1))
        {
            QList<QGraphicsItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_items, doc_QGraphicsView_items);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_itemAt, "QGraphicsView.itemAt(QPoint) -> QGraphicsItem\n"
    "QGraphicsView.itemAt(int, int) -> QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsView_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPoint, &a0))
        {
            QGraphicsItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QGraphicsItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            QGraphicsItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_itemAt, doc_QGraphicsView_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mapToScene, "QGraphicsView.mapToScene(QPoint) -> QPointF\n"
    "QGraphicsView.mapToScene(QRect) -> QPolygonF\n"
    "QGraphicsView.mapToScene(QPolygon) -> QPolygonF\n"
    "QGraphicsView.mapToScene(QPainterPath) -> QPainterPath\n"
    "QGraphicsView.mapToScene(int, int) -> QPointF\n"
    "QGraphicsView.mapToScene(int, int, int, int) -> QPolygonF");

extern "C" {static PyObject *meth_QGraphicsView_mapToScene(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mapToScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPoint, &a0))
        {
            QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->mapToScene(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        const QRect* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRect, &a0))
        {
            QPolygonF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->mapToScene(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    {
        const QPolygon* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPolygon, &a0))
        {
            QPolygonF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->mapToScene(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    {
        const QPainterPath* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainterPath, &a0))
        {
            QPainterPath*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPainterPath(sipCpp->mapToScene(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->mapToScene(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            QPolygonF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->mapToScene(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mapToScene, doc_QGraphicsView_mapToScene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mapFromScene, "QGraphicsView.mapFromScene(QPointF) -> QPoint\n"
    "QGraphicsView.mapFromScene(QRectF) -> QPolygon\n"
    "QGraphicsView.mapFromScene(QPolygonF) -> QPolygon\n"
    "QGraphicsView.mapFromScene(QPainterPath) -> QPainterPath\n"
    "QGraphicsView.mapFromScene(float, float) -> QPoint\n"
    "QGraphicsView.mapFromScene(float, float, float, float) -> QPolygon");

extern "C" {static PyObject *meth_QGraphicsView_mapFromScene(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mapFromScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->mapFromScene(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        const QRectF* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0))
        {
            QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygon(sipCpp->mapFromScene(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    {
        const QPolygonF* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPolygonF, &a0))
        {
            QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygon(sipCpp->mapFromScene(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    {
        const QPainterPath* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainterPath, &a0))
        {
            QPainterPath*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPainterPath(sipCpp->mapFromScene(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->mapFromScene(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygon(sipCpp->mapFromScene(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mapFromScene, doc_QGraphicsView_mapFromScene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_inputMethodQuery, "QGraphicsView.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QGraphicsView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QGraphicsView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_inputMethodQuery, doc_QGraphicsView_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_backgroundBrush, "QGraphicsView.backgroundBrush() -> QBrush");

extern "C" {static PyObject *meth_QGraphicsView_backgroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_backgroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QBrush*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->backgroundBrush());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_backgroundBrush, doc_QGraphicsView_backgroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setBackgroundBrush, "QGraphicsView.setBackgroundBrush(QBrush)");

extern "C" {static PyObject *meth_QGraphicsView_setBackgroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setBackgroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackgroundBrush(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setBackgroundBrush, doc_QGraphicsView_setBackgroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_foregroundBrush, "QGraphicsView.foregroundBrush() -> QBrush");

extern "C" {static PyObject *meth_QGraphicsView_foregroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_foregroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QBrush*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->foregroundBrush());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_foregroundBrush, doc_QGraphicsView_foregroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setForegroundBrush, "QGraphicsView.setForegroundBrush(QBrush)");

extern "C" {static PyObject *meth_QGraphicsView_setForegroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setForegroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setForegroundBrush(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setForegroundBrush, doc_QGraphicsView_setForegroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_invalidateScene, "QGraphicsView.invalidateScene(QRectF rect=QRectF(), QGraphicsScene.SceneLayers layers=QGraphicsScene.AllLayers)");

extern "C" {static PyObject *meth_QGraphicsView_invalidateScene(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_invalidateScene(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF& a0def = QRectF();
        const QRectF* a0 = &a0def;
        QGraphicsScene::SceneLayers a1def = QGraphicsScene::AllLayers;
        QGraphicsScene::SceneLayers* a1 = &a1def;
        int a1State = 0;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
            sipName_layers,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9J1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0, sipType_QGraphicsScene_SceneLayers, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->invalidateScene(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QGraphicsScene_SceneLayers,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_invalidateScene, doc_QGraphicsView_invalidateScene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_updateScene, "QGraphicsView.updateScene(list-of-QRectF)");

extern "C" {static PyObject *meth_QGraphicsView_updateScene(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_updateScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QRectF>* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QList_0100QRectF,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->updateScene(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QRectF> *>(a0),sipType_QList_0100QRectF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_updateScene, doc_QGraphicsView_updateScene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_updateSceneRect, "QGraphicsView.updateSceneRect(QRectF)");

extern "C" {static PyObject *meth_QGraphicsView_updateSceneRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_updateSceneRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->updateSceneRect(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_updateSceneRect, doc_QGraphicsView_updateSceneRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setupViewport, "QGraphicsView.setupViewport(QWidget)");

extern "C" {static PyObject *meth_QGraphicsView_setupViewport(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setupViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setupViewport(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setupViewport, doc_QGraphicsView_setupViewport);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_event, "QGraphicsView.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsView_event(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QGraphicsView::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_event, doc_QGraphicsView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_viewportEvent, "QGraphicsView.viewportEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsView_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QGraphicsView::viewportEvent(a0) : sipCpp->viewportEvent(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_viewportEvent, doc_QGraphicsView_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_contextMenuEvent, "QGraphicsView.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QGraphicsView_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_contextMenuEvent, doc_QGraphicsView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_dragEnterEvent, "QGraphicsView.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QGraphicsView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_dragEnterEvent, doc_QGraphicsView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_dragLeaveEvent, "QGraphicsView.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QGraphicsView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_dragLeaveEvent, doc_QGraphicsView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_dragMoveEvent, "QGraphicsView.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QGraphicsView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_dragMoveEvent, doc_QGraphicsView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_dropEvent, "QGraphicsView.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QGraphicsView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_dropEvent, doc_QGraphicsView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_focusInEvent, "QGraphicsView.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QGraphicsView_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_focusInEvent, doc_QGraphicsView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_focusOutEvent, "QGraphicsView.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QGraphicsView_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_focusOutEvent, doc_QGraphicsView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_focusNextPrevChild, "QGraphicsView.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QGraphicsView_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QGraphicsView::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_focusNextPrevChild, doc_QGraphicsView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_keyPressEvent, "QGraphicsView.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QGraphicsView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_keyPressEvent, doc_QGraphicsView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_keyReleaseEvent, "QGraphicsView.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QGraphicsView_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_keyReleaseEvent, doc_QGraphicsView_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mouseDoubleClickEvent, "QGraphicsView.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mouseDoubleClickEvent, doc_QGraphicsView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mousePressEvent, "QGraphicsView.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mousePressEvent, doc_QGraphicsView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mouseMoveEvent, "QGraphicsView.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mouseMoveEvent, doc_QGraphicsView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mouseReleaseEvent, "QGraphicsView.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mouseReleaseEvent, doc_QGraphicsView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_wheelEvent, "QGraphicsView.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QGraphicsView_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_wheelEvent, doc_QGraphicsView_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_paintEvent, "QGraphicsView.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QGraphicsView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_paintEvent, doc_QGraphicsView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_resizeEvent, "QGraphicsView.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QGraphicsView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_resizeEvent, doc_QGraphicsView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_scrollContentsBy, "QGraphicsView.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QGraphicsView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_scrollContentsBy, doc_QGraphicsView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_showEvent, "QGraphicsView.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QGraphicsView_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_showEvent, doc_QGraphicsView_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_inputMethodEvent, "QGraphicsView.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QGraphicsView_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_inputMethodEvent, doc_QGraphicsView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_drawBackground, "QGraphicsView.drawBackground(QPainter, QRectF)");

extern "C" {static PyObject *meth_QGraphicsView_drawBackground(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_drawBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRectF* a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::drawBackground(a0,*a1) : sipCpp->drawBackground(a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_drawBackground, doc_QGraphicsView_drawBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_drawForeground, "QGraphicsView.drawForeground(QPainter, QRectF)");

extern "C" {static PyObject *meth_QGraphicsView_drawForeground(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_drawForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRectF* a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsView::drawForeground(a0,*a1) : sipCpp->drawForeground(a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_drawForeground, doc_QGraphicsView_drawForeground);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_drawItems, "QGraphicsView.drawItems(QPainter, list-of-QGraphicsItem, list-of-QStyleOptionGraphicsItem)");

extern "C" {static PyObject *meth_QGraphicsView_drawItems(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_drawItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        PyObject * a1;
        PyObject * a2;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8TT", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter, &a0, &PyList_Type, &a1, &PyList_Type, &a2))
        {
            int sipIsErr = 0;

#line 171 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsview.sip"
        // PyQt takes lists as the items and options arguments.
        
        // Adjust the number items according to the actual list lengths.
        SIP_SSIZE_T numItems = PyList_GET_SIZE(a1);
        
        if (numItems > PyList_GET_SIZE(a2))
            numItems = PyList_GET_SIZE(a2);
        
        // Allocate temporary storage for the C++ conversions.
        QGraphicsItem **items = new QGraphicsItem *[numItems];
        QStyleOptionGraphicsItem *options = new QStyleOptionGraphicsItem[numItems];
        
        for (int i = 0; i < numItems; ++i)
        {
            void *cpp;
        
            cpp = sipForceConvertToType(PyList_GET_ITEM(a1, i), sipType_QGraphicsItem, NULL, SIP_NO_CONVERTORS, NULL, &sipIsErr);
            items[i] = reinterpret_cast<QGraphicsItem *>(cpp);
        
            cpp = sipForceConvertToType(PyList_GET_ITEM(a2, i), sipType_QStyleOptionGraphicsItem, NULL, SIP_NOT_NONE|SIP_NO_CONVERTORS, NULL, &sipIsErr);
            options[i] = *reinterpret_cast<QStyleOptionGraphicsItem *>(cpp);
        }
        
        if (!sipIsErr)
        {
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if (sipSelfWasArg)
                sipCpp->QGraphicsView::drawItems(a0, numItems, items, options);
            else
                sipCpp->drawItems(a0, numItems, items, options);
        #else
            sipCpp->sipProtectVirt_drawItems(sipSelfWasArg, a0, numItems, items, options);
        #endif
            Py_END_ALLOW_THREADS
        }
        
        delete[] items;
        delete[] options;
#line 3953 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsView.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_drawItems, doc_QGraphicsView_drawItems);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_viewportUpdateMode, "QGraphicsView.viewportUpdateMode() -> QGraphicsView.ViewportUpdateMode");

extern "C" {static PyObject *meth_QGraphicsView_viewportUpdateMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_viewportUpdateMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::ViewportUpdateMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->viewportUpdateMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QGraphicsView_ViewportUpdateMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_viewportUpdateMode, doc_QGraphicsView_viewportUpdateMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setViewportUpdateMode, "QGraphicsView.setViewportUpdateMode(QGraphicsView.ViewportUpdateMode)");

extern "C" {static PyObject *meth_QGraphicsView_setViewportUpdateMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setViewportUpdateMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::ViewportUpdateMode a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_ViewportUpdateMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewportUpdateMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setViewportUpdateMode, doc_QGraphicsView_setViewportUpdateMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_optimizationFlags, "QGraphicsView.optimizationFlags() -> QGraphicsView.OptimizationFlags");

extern "C" {static PyObject *meth_QGraphicsView_optimizationFlags(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_optimizationFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::OptimizationFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGraphicsView::OptimizationFlags(sipCpp->optimizationFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QGraphicsView_OptimizationFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_optimizationFlags, doc_QGraphicsView_optimizationFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setOptimizationFlag, "QGraphicsView.setOptimizationFlag(QGraphicsView.OptimizationFlag, bool enabled=True)");

extern "C" {static PyObject *meth_QGraphicsView_setOptimizationFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setOptimizationFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::OptimizationFlag a0;
        bool a1 = 1;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_OptimizationFlag, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOptimizationFlag(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setOptimizationFlag, doc_QGraphicsView_setOptimizationFlag);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setOptimizationFlags, "QGraphicsView.setOptimizationFlags(QGraphicsView.OptimizationFlags)");

extern "C" {static PyObject *meth_QGraphicsView_setOptimizationFlags(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setOptimizationFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::OptimizationFlags* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_OptimizationFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOptimizationFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGraphicsView_OptimizationFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setOptimizationFlags, doc_QGraphicsView_setOptimizationFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_rubberBandSelectionMode, "QGraphicsView.rubberBandSelectionMode() -> Qt.ItemSelectionMode");

extern "C" {static PyObject *meth_QGraphicsView_rubberBandSelectionMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_rubberBandSelectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            Qt::ItemSelectionMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rubberBandSelectionMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_ItemSelectionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_rubberBandSelectionMode, doc_QGraphicsView_rubberBandSelectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setRubberBandSelectionMode, "QGraphicsView.setRubberBandSelectionMode(Qt.ItemSelectionMode)");

extern "C" {static PyObject *meth_QGraphicsView_setRubberBandSelectionMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setRubberBandSelectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ItemSelectionMode a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_Qt_ItemSelectionMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRubberBandSelectionMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setRubberBandSelectionMode, doc_QGraphicsView_setRubberBandSelectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_transform, "QGraphicsView.transform() -> QTransform");

extern "C" {static PyObject *meth_QGraphicsView_transform(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_transform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QTransform*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->transform());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_transform, doc_QGraphicsView_transform);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_viewportTransform, "QGraphicsView.viewportTransform() -> QTransform");

extern "C" {static PyObject *meth_QGraphicsView_viewportTransform(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_viewportTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QTransform*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->viewportTransform());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_viewportTransform, doc_QGraphicsView_viewportTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setTransform, "QGraphicsView.setTransform(QTransform, bool combine=False)");

extern "C" {static PyObject *meth_QGraphicsView_setTransform(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setTransform(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        bool a1 = 0;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QTransform, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTransform(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setTransform, doc_QGraphicsView_setTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_resetTransform, "QGraphicsView.resetTransform()");

extern "C" {static PyObject *meth_QGraphicsView_resetTransform(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_resetTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetTransform();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_resetTransform, doc_QGraphicsView_resetTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_isTransformed, "QGraphicsView.isTransformed() -> bool");

extern "C" {static PyObject *meth_QGraphicsView_isTransformed(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_isTransformed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isTransformed();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_isTransformed, doc_QGraphicsView_isTransformed);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsView(void *, const sipTypeDef *);}
static void *cast_QGraphicsView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractScrollArea)->ctd_cast((QAbstractScrollArea *)(QGraphicsView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsView(void *, int);}
static void release_QGraphicsView(void *sipCppV,int)
{
    QGraphicsView *sipCpp = reinterpret_cast<QGraphicsView *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGraphicsView(sipSimpleWrapper *);}
static void dealloc_QGraphicsView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGraphicsView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsView *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QGraphicsScene* a0;
        PyObject *a0Keep;
        QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8|JH", &a0Keep, sipType_QGraphicsScene, &a0, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsView(a0,a1);
            Py_END_ALLOW_THREADS

            sipKeepReference((PyObject *)sipSelf, -35, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsView[] = {{21, 255, 1}};


static PyMethodDef methods_QGraphicsView[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QGraphicsView_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_alignment)},
    {SIP_MLNAME_CAST(sipName_backgroundBrush), meth_QGraphicsView_backgroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_backgroundBrush)},
    {SIP_MLNAME_CAST(sipName_cacheMode), meth_QGraphicsView_cacheMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_cacheMode)},
    {SIP_MLNAME_CAST(sipName_centerOn), meth_QGraphicsView_centerOn, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_centerOn)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QGraphicsView_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QGraphicsView_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QGraphicsView_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMode), meth_QGraphicsView_dragMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_dragMode)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QGraphicsView_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_drawBackground), meth_QGraphicsView_drawBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_drawBackground)},
    {SIP_MLNAME_CAST(sipName_drawForeground), meth_QGraphicsView_drawForeground, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_drawForeground)},
    {SIP_MLNAME_CAST(sipName_drawItems), meth_QGraphicsView_drawItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_drawItems)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QGraphicsView_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_ensureVisible), (PyCFunction)meth_QGraphicsView_ensureVisible, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_ensureVisible)},
    {SIP_MLNAME_CAST(sipName_event), meth_QGraphicsView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_event)},
    {SIP_MLNAME_CAST(sipName_fitInView), (PyCFunction)meth_QGraphicsView_fitInView, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_fitInView)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QGraphicsView_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QGraphicsView_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QGraphicsView_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_foregroundBrush), meth_QGraphicsView_foregroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_foregroundBrush)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QGraphicsView_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QGraphicsView_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_invalidateScene), (PyCFunction)meth_QGraphicsView_invalidateScene, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_invalidateScene)},
    {SIP_MLNAME_CAST(sipName_isInteractive), meth_QGraphicsView_isInteractive, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_isInteractive)},
    {SIP_MLNAME_CAST(sipName_isTransformed), meth_QGraphicsView_isTransformed, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_isTransformed)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QGraphicsView_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_itemAt)},
    {SIP_MLNAME_CAST(sipName_items), (PyCFunction)meth_QGraphicsView_items, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_items)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QGraphicsView_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QGraphicsView_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mapFromScene), meth_QGraphicsView_mapFromScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_mapFromScene)},
    {SIP_MLNAME_CAST(sipName_mapToScene), meth_QGraphicsView_mapToScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_mapToScene)},
    {SIP_MLNAME_CAST(sipName_matrix), meth_QGraphicsView_matrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_matrix)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QGraphicsView_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QGraphicsView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QGraphicsView_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QGraphicsView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_optimizationFlags), meth_QGraphicsView_optimizationFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_optimizationFlags)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QGraphicsView_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_render), (PyCFunction)meth_QGraphicsView_render, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_render)},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QGraphicsView_renderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_renderHints)},
    {SIP_MLNAME_CAST(sipName_resetCachedContent), meth_QGraphicsView_resetCachedContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_resetCachedContent)},
    {SIP_MLNAME_CAST(sipName_resetMatrix), meth_QGraphicsView_resetMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_resetMatrix)},
    {SIP_MLNAME_CAST(sipName_resetTransform), meth_QGraphicsView_resetTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_resetTransform)},
    {SIP_MLNAME_CAST(sipName_resizeAnchor), meth_QGraphicsView_resizeAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_resizeAnchor)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QGraphicsView_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_rotate), meth_QGraphicsView_rotate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_rotate)},
    {SIP_MLNAME_CAST(sipName_rubberBandSelectionMode), meth_QGraphicsView_rubberBandSelectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_rubberBandSelectionMode)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QGraphicsView_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_scale)},
    {SIP_MLNAME_CAST(sipName_scene), meth_QGraphicsView_scene, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_scene)},
    {SIP_MLNAME_CAST(sipName_sceneRect), meth_QGraphicsView_sceneRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_sceneRect)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QGraphicsView_scrollContentsBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QGraphicsView_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setBackgroundBrush), meth_QGraphicsView_setBackgroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setBackgroundBrush)},
    {SIP_MLNAME_CAST(sipName_setCacheMode), meth_QGraphicsView_setCacheMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setCacheMode)},
    {SIP_MLNAME_CAST(sipName_setDragMode), meth_QGraphicsView_setDragMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setDragMode)},
    {SIP_MLNAME_CAST(sipName_setForegroundBrush), meth_QGraphicsView_setForegroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setForegroundBrush)},
    {SIP_MLNAME_CAST(sipName_setInteractive), meth_QGraphicsView_setInteractive, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setInteractive)},
    {SIP_MLNAME_CAST(sipName_setMatrix), (PyCFunction)meth_QGraphicsView_setMatrix, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_setMatrix)},
    {SIP_MLNAME_CAST(sipName_setOptimizationFlag), (PyCFunction)meth_QGraphicsView_setOptimizationFlag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_setOptimizationFlag)},
    {SIP_MLNAME_CAST(sipName_setOptimizationFlags), meth_QGraphicsView_setOptimizationFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setOptimizationFlags)},
    {SIP_MLNAME_CAST(sipName_setRenderHint), (PyCFunction)meth_QGraphicsView_setRenderHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_setRenderHint)},
    {SIP_MLNAME_CAST(sipName_setRenderHints), meth_QGraphicsView_setRenderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setRenderHints)},
    {SIP_MLNAME_CAST(sipName_setResizeAnchor), meth_QGraphicsView_setResizeAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setResizeAnchor)},
    {SIP_MLNAME_CAST(sipName_setRubberBandSelectionMode), meth_QGraphicsView_setRubberBandSelectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setRubberBandSelectionMode)},
    {SIP_MLNAME_CAST(sipName_setScene), meth_QGraphicsView_setScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setScene)},
    {SIP_MLNAME_CAST(sipName_setSceneRect), meth_QGraphicsView_setSceneRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setSceneRect)},
    {SIP_MLNAME_CAST(sipName_setTransform), (PyCFunction)meth_QGraphicsView_setTransform, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_setTransform)},
    {SIP_MLNAME_CAST(sipName_setTransformationAnchor), meth_QGraphicsView_setTransformationAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setTransformationAnchor)},
    {SIP_MLNAME_CAST(sipName_setViewportUpdateMode), meth_QGraphicsView_setViewportUpdateMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setViewportUpdateMode)},
    {SIP_MLNAME_CAST(sipName_setupViewport), meth_QGraphicsView_setupViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setupViewport)},
    {SIP_MLNAME_CAST(sipName_shear), meth_QGraphicsView_shear, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_shear)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QGraphicsView_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QGraphicsView_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_sizeHint)},
    {SIP_MLNAME_CAST(sipName_transform), meth_QGraphicsView_transform, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_transform)},
    {SIP_MLNAME_CAST(sipName_transformationAnchor), meth_QGraphicsView_transformationAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_transformationAnchor)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QGraphicsView_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_translate)},
    {SIP_MLNAME_CAST(sipName_updateScene), meth_QGraphicsView_updateScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_updateScene)},
    {SIP_MLNAME_CAST(sipName_updateSceneRect), meth_QGraphicsView_updateSceneRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_updateSceneRect)},
    {SIP_MLNAME_CAST(sipName_viewportEvent), meth_QGraphicsView_viewportEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_viewportEvent)},
    {SIP_MLNAME_CAST(sipName_viewportTransform), meth_QGraphicsView_viewportTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_viewportTransform)},
    {SIP_MLNAME_CAST(sipName_viewportUpdateMode), meth_QGraphicsView_viewportUpdateMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_viewportUpdateMode)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QGraphicsView_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_wheelEvent)}
};

static sipEnumMemberDef enummembers_QGraphicsView[] = {
    {sipName_AnchorUnderMouse, static_cast<int>(QGraphicsView::AnchorUnderMouse), 216},
    {sipName_AnchorViewCenter, static_cast<int>(QGraphicsView::AnchorViewCenter), 216},
    {sipName_BoundingRectViewportUpdate, static_cast<int>(QGraphicsView::BoundingRectViewportUpdate), 217},
    {sipName_CacheBackground, static_cast<int>(QGraphicsView::CacheBackground), 212},
    {sipName_CacheNone, static_cast<int>(QGraphicsView::CacheNone), 212},
    {sipName_DontAdjustForAntialiasing, static_cast<int>(QGraphicsView::DontAdjustForAntialiasing), 214},
    {sipName_DontClipPainter, static_cast<int>(QGraphicsView::DontClipPainter), 214},
    {sipName_DontSavePainterState, static_cast<int>(QGraphicsView::DontSavePainterState), 214},
    {sipName_FullViewportUpdate, static_cast<int>(QGraphicsView::FullViewportUpdate), 217},
    {sipName_MinimalViewportUpdate, static_cast<int>(QGraphicsView::MinimalViewportUpdate), 217},
    {sipName_NoAnchor, static_cast<int>(QGraphicsView::NoAnchor), 216},
    {sipName_NoDrag, static_cast<int>(QGraphicsView::NoDrag), 213},
    {sipName_NoViewportUpdate, static_cast<int>(QGraphicsView::NoViewportUpdate), 217},
    {sipName_RubberBandDrag, static_cast<int>(QGraphicsView::RubberBandDrag), 213},
    {sipName_ScrollHandDrag, static_cast<int>(QGraphicsView::ScrollHandDrag), 213},
    {sipName_SmartViewportUpdate, static_cast<int>(QGraphicsView::SmartViewportUpdate), 217},
};

PyDoc_STRVAR(doc_QGraphicsView, "\1QGraphicsView(QWidget parent=None)\n"
    "QGraphicsView(QGraphicsScene, QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QGraphicsView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsView,
        {0}
    },
    {
        sipNameNr_QGraphicsView,
        {0, 0, 1},
        82, methods_QGraphicsView,
        16, enummembers_QGraphicsView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsView,
    -1,
    -1,
    supers_QGraphicsView,
    0,
    init_type_QGraphicsView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsView,
    0,
    0,
    0,
    release_QGraphicsView,
    cast_QGraphicsView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGraphicsView::staticMetaObject,
    0,
    0
};
