/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 829 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStatusTipEvent.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStatusTipEvent.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStatusTipEvent.cpp"


class sipQStatusTipEvent : public QStatusTipEvent
{
public:
    sipQStatusTipEvent(const QString&);
    sipQStatusTipEvent(const QStatusTipEvent&);
    ~sipQStatusTipEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStatusTipEvent(const sipQStatusTipEvent &);
    sipQStatusTipEvent &operator = (const sipQStatusTipEvent &);
};

sipQStatusTipEvent::sipQStatusTipEvent(const QString& a0): QStatusTipEvent(a0), sipPySelf(0)
{
}

sipQStatusTipEvent::sipQStatusTipEvent(const QStatusTipEvent& a0): QStatusTipEvent(a0), sipPySelf(0)
{
}

sipQStatusTipEvent::~sipQStatusTipEvent()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QStatusTipEvent_tip, "QStatusTipEvent.tip() -> QString");

extern "C" {static PyObject *meth_QStatusTipEvent_tip(PyObject *, PyObject *);}
static PyObject *meth_QStatusTipEvent_tip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStatusTipEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStatusTipEvent, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->tip());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStatusTipEvent, sipName_tip, doc_QStatusTipEvent_tip);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStatusTipEvent(void *, const sipTypeDef *);}
static void *cast_QStatusTipEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QStatusTipEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QEvent)->ctd_cast((QEvent *)(QStatusTipEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStatusTipEvent(void *, int);}
static void release_QStatusTipEvent(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQStatusTipEvent *>(sipCppV);
    else
        delete reinterpret_cast<QStatusTipEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QStatusTipEvent(sipSimpleWrapper *);}
static void dealloc_QStatusTipEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQStatusTipEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QStatusTipEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QStatusTipEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStatusTipEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQStatusTipEvent *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStatusTipEvent(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QStatusTipEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QStatusTipEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStatusTipEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStatusTipEvent[] = {{58, 0, 1}};


static PyMethodDef methods_QStatusTipEvent[] = {
    {SIP_MLNAME_CAST(sipName_tip), meth_QStatusTipEvent_tip, METH_VARARGS, SIP_MLDOC_CAST(doc_QStatusTipEvent_tip)}
};

PyDoc_STRVAR(doc_QStatusTipEvent, "\1QStatusTipEvent(QString)\n"
    "QStatusTipEvent(QStatusTipEvent)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QStatusTipEvent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QStatusTipEvent,
        {0}
    },
    {
        sipNameNr_QStatusTipEvent,
        {0, 0, 1},
        1, methods_QStatusTipEvent,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStatusTipEvent,
    -1,
    -1,
    supers_QStatusTipEvent,
    0,
    init_type_QStatusTipEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStatusTipEvent,
    0,
    0,
    0,
    release_QStatusTipEvent,
    cast_QStatusTipEvent,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
