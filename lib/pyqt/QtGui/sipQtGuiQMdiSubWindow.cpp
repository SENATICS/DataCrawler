/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmdisubwindow.sip"
#include <qmdisubwindow.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmdiarea.sip"
#include <qmdiarea.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"


class sipQMdiSubWindow : public QMdiSubWindow
{
public:
    sipQMdiSubWindow(QWidget*,Qt::WindowFlags);
    virtual ~sipQMdiSubWindow();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void childEvent(QChildEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void keyPressEvent(QKeyEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void paintEvent(QPaintEvent*);
    void moveEvent(QMoveEvent*);
    void timerEvent(QTimerEvent*);
    void resizeEvent(QResizeEvent*);
    void leaveEvent(QEvent*);
    void closeEvent(QCloseEvent*);
    void changeEvent(QEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    bool event(QEvent*);
    bool eventFilter(QObject*,QEvent*);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMdiSubWindow(const sipQMdiSubWindow &);
    sipQMdiSubWindow &operator = (const sipQMdiSubWindow &);

    char sipPyMethods[47];
};

sipQMdiSubWindow::sipQMdiSubWindow(QWidget*a0,Qt::WindowFlags a1): QMdiSubWindow(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMdiSubWindow::~sipQMdiSubWindow()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMdiSubWindow::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QMdiSubWindow);
}

int sipQMdiSubWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMdiSubWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QMdiSubWindow,_c,_id,_a);

    return _id;
}

void *sipQMdiSubWindow::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QMdiSubWindow, _clname)) ? this : QMdiSubWindow::qt_metacast(_clname);
}

void sipQMdiSubWindow::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMdiSubWindow::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMdiSubWindow::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QMdiSubWindow::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQMdiSubWindow::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QMdiSubWindow::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QMdiSubWindow::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QMdiSubWindow::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QMdiSubWindow::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMdiSubWindow::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QMdiSubWindow::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQMdiSubWindow::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QMdiSubWindow::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQMdiSubWindow::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QMdiSubWindow::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQMdiSubWindow::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QMdiSubWindow::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQMdiSubWindow::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QMdiSubWindow::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QMdiSubWindow::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQMdiSubWindow::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QMdiSubWindow::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQMdiSubWindow::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMdiSubWindow::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QMdiSubWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMdiSubWindow::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMdiSubWindow::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMdiSubWindow::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMdiSubWindow::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QSize sipQMdiSubWindow::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QMdiSubWindow::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQMdiSubWindow::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QMdiSubWindow::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QMdiSubWindow_sizeHint, "QMdiSubWindow.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QMdiSubWindow_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMdiSubWindow, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QMdiSubWindow::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_sizeHint, doc_QMdiSubWindow_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_minimumSizeHint, "QMdiSubWindow.minimumSizeHint() -> QSize");

extern "C" {static PyObject *meth_QMdiSubWindow_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMdiSubWindow, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QMdiSubWindow::minimumSizeHint() : sipCpp->minimumSizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_minimumSizeHint, doc_QMdiSubWindow_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_setWidget, "QMdiSubWindow.setWidget(QWidget)");

extern "C" {static PyObject *meth_QMdiSubWindow_setWidget(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_setWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QWidget, &a0))
        {
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmdisubwindow.sip"
        // We have to implement /TransferBack/ on any existing widget.
        QWidget *w = sipCpp->widget();
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setWidget(a0);
        Py_END_ALLOW_THREADS
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferBack(wo);
        }
#line 1241 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_setWidget, doc_QMdiSubWindow_setWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_widget, "QMdiSubWindow.widget() -> QWidget");

extern "C" {static PyObject *meth_QMdiSubWindow_widget(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMdiSubWindow, &sipCpp))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_widget, doc_QMdiSubWindow_widget);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_isShaded, "QMdiSubWindow.isShaded() -> bool");

extern "C" {static PyObject *meth_QMdiSubWindow_isShaded(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_isShaded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMdiSubWindow, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isShaded();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_isShaded, doc_QMdiSubWindow_isShaded);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_setOption, "QMdiSubWindow.setOption(QMdiSubWindow.SubWindowOption, bool on=True)");

extern "C" {static PyObject *meth_QMdiSubWindow_setOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_setOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QMdiSubWindow::SubWindowOption a0;
        bool a1 = 1;
        QMdiSubWindow *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QMdiSubWindow_SubWindowOption, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOption(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_setOption, doc_QMdiSubWindow_setOption);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_testOption, "QMdiSubWindow.testOption(QMdiSubWindow.SubWindowOption) -> bool");

extern "C" {static PyObject *meth_QMdiSubWindow_testOption(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMdiSubWindow::SubWindowOption a0;
        const QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QMdiSubWindow_SubWindowOption, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->testOption(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_testOption, doc_QMdiSubWindow_testOption);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_setKeyboardSingleStep, "QMdiSubWindow.setKeyboardSingleStep(int)");

extern "C" {static PyObject *meth_QMdiSubWindow_setKeyboardSingleStep(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_setKeyboardSingleStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMdiSubWindow, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setKeyboardSingleStep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_setKeyboardSingleStep, doc_QMdiSubWindow_setKeyboardSingleStep);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_keyboardSingleStep, "QMdiSubWindow.keyboardSingleStep() -> int");

extern "C" {static PyObject *meth_QMdiSubWindow_keyboardSingleStep(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_keyboardSingleStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMdiSubWindow, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->keyboardSingleStep();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_keyboardSingleStep, doc_QMdiSubWindow_keyboardSingleStep);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_setKeyboardPageStep, "QMdiSubWindow.setKeyboardPageStep(int)");

extern "C" {static PyObject *meth_QMdiSubWindow_setKeyboardPageStep(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_setKeyboardPageStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMdiSubWindow, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setKeyboardPageStep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_setKeyboardPageStep, doc_QMdiSubWindow_setKeyboardPageStep);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_keyboardPageStep, "QMdiSubWindow.keyboardPageStep() -> int");

extern "C" {static PyObject *meth_QMdiSubWindow_keyboardPageStep(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_keyboardPageStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMdiSubWindow, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->keyboardPageStep();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_keyboardPageStep, doc_QMdiSubWindow_keyboardPageStep);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_setSystemMenu, "QMdiSubWindow.setSystemMenu(QMenu)");

extern "C" {static PyObject *meth_QMdiSubWindow_setSystemMenu(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_setSystemMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMenu* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QMenu, &a0))
        {
#line 82 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmdisubwindow.sip"
        // We have to break the parent association on any existing menu.
        QMenu *w = sipCpp->systemMenu();
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QMenu);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setSystemMenu(a0);
        Py_END_ALLOW_THREADS
#line 1522 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMdiSubWindow.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_setSystemMenu, doc_QMdiSubWindow_setSystemMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_systemMenu, "QMdiSubWindow.systemMenu() -> QMenu");

extern "C" {static PyObject *meth_QMdiSubWindow_systemMenu(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_systemMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMdiSubWindow, &sipCpp))
        {
            QMenu*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->systemMenu();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_systemMenu, doc_QMdiSubWindow_systemMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_mdiArea, "QMdiSubWindow.mdiArea() -> QMdiArea");

extern "C" {static PyObject *meth_QMdiSubWindow_mdiArea(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_mdiArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMdiSubWindow, &sipCpp))
        {
            QMdiArea*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mdiArea();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QMdiArea,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_mdiArea, doc_QMdiSubWindow_mdiArea);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_showSystemMenu, "QMdiSubWindow.showSystemMenu()");

extern "C" {static PyObject *meth_QMdiSubWindow_showSystemMenu(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_showSystemMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMdiSubWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showSystemMenu();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_showSystemMenu, doc_QMdiSubWindow_showSystemMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_showShaded, "QMdiSubWindow.showShaded()");

extern "C" {static PyObject *meth_QMdiSubWindow_showShaded(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_showShaded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMdiSubWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showShaded();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_showShaded, doc_QMdiSubWindow_showShaded);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_eventFilter, "QMdiSubWindow.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QMdiSubWindow_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QMdiSubWindow::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_eventFilter, doc_QMdiSubWindow_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_event, "QMdiSubWindow.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QMdiSubWindow_event(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QMdiSubWindow::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_event, doc_QMdiSubWindow_event);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_showEvent, "QMdiSubWindow.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_showEvent, doc_QMdiSubWindow_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_hideEvent, "QMdiSubWindow.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QHideEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::hideEvent(a0) : sipCpp->hideEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_hideEvent, doc_QMdiSubWindow_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_changeEvent, "QMdiSubWindow.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_changeEvent, doc_QMdiSubWindow_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_closeEvent, "QMdiSubWindow.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QCloseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::closeEvent(a0) : sipCpp->closeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_closeEvent, doc_QMdiSubWindow_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_leaveEvent, "QMdiSubWindow.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::leaveEvent(a0) : sipCpp->leaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_leaveEvent, doc_QMdiSubWindow_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_resizeEvent, "QMdiSubWindow.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_resizeEvent, doc_QMdiSubWindow_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_timerEvent, "QMdiSubWindow.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_timerEvent, doc_QMdiSubWindow_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_moveEvent, "QMdiSubWindow.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::moveEvent(a0) : sipCpp->moveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_moveEvent, doc_QMdiSubWindow_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_paintEvent, "QMdiSubWindow.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_paintEvent, doc_QMdiSubWindow_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_mousePressEvent, "QMdiSubWindow.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_mousePressEvent, doc_QMdiSubWindow_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_mouseDoubleClickEvent, "QMdiSubWindow.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_mouseDoubleClickEvent, doc_QMdiSubWindow_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_mouseReleaseEvent, "QMdiSubWindow.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_mouseReleaseEvent, doc_QMdiSubWindow_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_mouseMoveEvent, "QMdiSubWindow.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_mouseMoveEvent, doc_QMdiSubWindow_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_keyPressEvent, "QMdiSubWindow.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_keyPressEvent, doc_QMdiSubWindow_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_contextMenuEvent, "QMdiSubWindow.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_contextMenuEvent, doc_QMdiSubWindow_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_focusInEvent, "QMdiSubWindow.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_focusInEvent, doc_QMdiSubWindow_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_focusOutEvent, "QMdiSubWindow.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_focusOutEvent, doc_QMdiSubWindow_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMdiSubWindow_childEvent, "QMdiSubWindow.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QMdiSubWindow_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QMdiSubWindow_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        QMdiSubWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMdiSubWindow, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMdiSubWindow::childEvent(a0) : sipCpp->childEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMdiSubWindow, sipName_childEvent, doc_QMdiSubWindow_childEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMdiSubWindow(void *, const sipTypeDef *);}
static void *cast_QMdiSubWindow(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QMdiSubWindow)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QMdiSubWindow *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMdiSubWindow(void *, int);}
static void release_QMdiSubWindow(void *sipCppV,int)
{
    QMdiSubWindow *sipCpp = reinterpret_cast<QMdiSubWindow *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QMdiSubWindow(sipSimpleWrapper *);}
static void dealloc_QMdiSubWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMdiSubWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMdiSubWindow(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMdiSubWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMdiSubWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMdiSubWindow *sipCpp = 0;

    {
        QWidget* a0 = 0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMdiSubWindow(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMdiSubWindow[] = {{755, 255, 1}};


static PyMethodDef methods_QMdiSubWindow[] = {
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QMdiSubWindow_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_changeEvent)},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QMdiSubWindow_childEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_childEvent)},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QMdiSubWindow_closeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_closeEvent)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QMdiSubWindow_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QMdiSubWindow_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QMdiSubWindow_eventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_eventFilter)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QMdiSubWindow_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QMdiSubWindow_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QMdiSubWindow_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_hideEvent)},
    {SIP_MLNAME_CAST(sipName_isShaded), meth_QMdiSubWindow_isShaded, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_isShaded)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QMdiSubWindow_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyboardPageStep), meth_QMdiSubWindow_keyboardPageStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_keyboardPageStep)},
    {SIP_MLNAME_CAST(sipName_keyboardSingleStep), meth_QMdiSubWindow_keyboardSingleStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_keyboardSingleStep)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_QMdiSubWindow_leaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_leaveEvent)},
    {SIP_MLNAME_CAST(sipName_mdiArea), meth_QMdiSubWindow_mdiArea, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_mdiArea)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QMdiSubWindow_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QMdiSubWindow_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QMdiSubWindow_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QMdiSubWindow_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QMdiSubWindow_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QMdiSubWindow_moveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_moveEvent)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QMdiSubWindow_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_paintEvent)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QMdiSubWindow_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_setKeyboardPageStep), meth_QMdiSubWindow_setKeyboardPageStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_setKeyboardPageStep)},
    {SIP_MLNAME_CAST(sipName_setKeyboardSingleStep), meth_QMdiSubWindow_setKeyboardSingleStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_setKeyboardSingleStep)},
    {SIP_MLNAME_CAST(sipName_setOption), (PyCFunction)meth_QMdiSubWindow_setOption, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMdiSubWindow_setOption)},
    {SIP_MLNAME_CAST(sipName_setSystemMenu), meth_QMdiSubWindow_setSystemMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_setSystemMenu)},
    {SIP_MLNAME_CAST(sipName_setWidget), meth_QMdiSubWindow_setWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_setWidget)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QMdiSubWindow_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_showEvent)},
    {SIP_MLNAME_CAST(sipName_showShaded), meth_QMdiSubWindow_showShaded, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_showShaded)},
    {SIP_MLNAME_CAST(sipName_showSystemMenu), meth_QMdiSubWindow_showSystemMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_showSystemMenu)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QMdiSubWindow_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_sizeHint)},
    {SIP_MLNAME_CAST(sipName_systemMenu), meth_QMdiSubWindow_systemMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_systemMenu)},
    {SIP_MLNAME_CAST(sipName_testOption), meth_QMdiSubWindow_testOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_testOption)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QMdiSubWindow_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_timerEvent)},
    {SIP_MLNAME_CAST(sipName_widget), meth_QMdiSubWindow_widget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMdiSubWindow_widget)}
};

static sipEnumMemberDef enummembers_QMdiSubWindow[] = {
    {sipName_RubberBandMove, static_cast<int>(QMdiSubWindow::RubberBandMove), 343},
    {sipName_RubberBandResize, static_cast<int>(QMdiSubWindow::RubberBandResize), 343},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QMdiSubWindow[] = {
    {"aboutToActivate()", "\1QMdiSubWindow.aboutToActivate", 0, 0},
    {"windowStateChanged(Qt::WindowStates,Qt::WindowStates)", "\1QMdiSubWindow.windowStateChanged[Qt.WindowStates, Qt.WindowStates]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMdiSubWindow, "\1QMdiSubWindow(QWidget parent=None, Qt.WindowFlags flags=0)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QMdiSubWindow = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QMdiSubWindow,
        {0}
    },
    {
        sipNameNr_QMdiSubWindow,
        {0, 0, 1},
        36, methods_QMdiSubWindow,
        2, enummembers_QMdiSubWindow,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMdiSubWindow,
    -1,
    -1,
    supers_QMdiSubWindow,
    0,
    init_type_QMdiSubWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMdiSubWindow,
    0,
    0,
    0,
    release_QMdiSubWindow,
    cast_QMdiSubWindow,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMdiSubWindow::staticMetaObject,
    0,
    signals_QMdiSubWindow,
};
