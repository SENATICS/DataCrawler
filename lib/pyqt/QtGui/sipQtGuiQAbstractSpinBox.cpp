/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 1470 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlineedit.sip"
#include <qlineedit.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 233 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 236 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 239 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractSpinBox.cpp"


class sipQAbstractSpinBox : public QAbstractSpinBox
{
public:
    sipQAbstractSpinBox(QWidget*);
    virtual ~sipQAbstractSpinBox();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    QAbstractSpinBox::StepEnabled stepEnabled() const;
    void showEvent(QShowEvent*);
    void paintEvent(QPaintEvent*);
    void timerEvent(QTimerEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void hideEvent(QHideEvent*);
    void closeEvent(QCloseEvent*);
    void changeEvent(QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void wheelEvent(QWheelEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void resizeEvent(QResizeEvent*);
    void clear();
    void stepBy(int);
    void fixup(QString&) const;
    QValidator::State validate(QString&,int&) const;
    bool event(QEvent*);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractSpinBox(const sipQAbstractSpinBox &);
    sipQAbstractSpinBox &operator = (const sipQAbstractSpinBox &);

    char sipPyMethods[54];
};

sipQAbstractSpinBox::sipQAbstractSpinBox(QWidget*a0): QAbstractSpinBox(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractSpinBox::~sipQAbstractSpinBox()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractSpinBox::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QAbstractSpinBox);
}

int sipQAbstractSpinBox::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractSpinBox::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QAbstractSpinBox,_c,_id,_a);

    return _id;
}

void *sipQAbstractSpinBox::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QAbstractSpinBox, _clname)) ? this : QAbstractSpinBox::qt_metacast(_clname);
}

void sipQAbstractSpinBox::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractSpinBox::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractSpinBox::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSpinBox::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractSpinBox::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractSpinBox::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QAbstractSpinBox::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractSpinBox::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QAbstractSpinBox::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QAbstractSpinBox::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QAbstractSpinBox::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QAbstractSpinBox::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSpinBox::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QAbstractSpinBox::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQAbstractSpinBox::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QAbstractSpinBox::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQAbstractSpinBox::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QAbstractSpinBox::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQAbstractSpinBox::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QAbstractSpinBox::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QAbstractSpinBox::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQAbstractSpinBox::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QAbstractSpinBox::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

QVariant sipQAbstractSpinBox::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QAbstractSpinBox::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QAbstractSpinBox::StepEnabled sipQAbstractSpinBox::stepEnabled() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_stepEnabled);

    if (!sipMeth)
        return QAbstractSpinBox::stepEnabled();

    extern QAbstractSpinBox::StepEnabled sipVH_QtGui_220(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_220(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractSpinBox::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
        QAbstractSpinBox::clear();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractSpinBox::stepBy(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_stepBy);

    if (!sipMeth)
    {
        QAbstractSpinBox::stepBy(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::fixup(QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_fixup);

    if (!sipMeth)
    {
        QAbstractSpinBox::fixup(a0);
        return;
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        extern void sipVH_QtGui_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QString&);

        sipVH_QtGui_33(sipGILState, 0, sipPySelf, sipMeth, a0);
        return;
    }

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QString&);

        sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth, a0);
        return;
    }

    QAbstractSpinBox::fixup(a0);
}

QValidator::State sipQAbstractSpinBox::validate(QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[48]),sipPySelf,NULL,sipName_validate);

    if (!sipMeth)
        return QAbstractSpinBox::validate(a0,a1);

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        extern QValidator::State sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QString&,int&);

        return sipVH_QtGui_29(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
    }

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        extern QValidator::State sipVH_QtGui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QString&,int&);

        return sipVH_QtGui_30(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
    }

    return QAbstractSpinBox::validate(a0,a1);
}

bool sipQAbstractSpinBox::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractSpinBox::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQAbstractSpinBox::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QAbstractSpinBox::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQAbstractSpinBox::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QAbstractSpinBox::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QAbstractSpinBox_buttonSymbols, "QAbstractSpinBox.buttonSymbols() -> QAbstractSpinBox.ButtonSymbols");

extern "C" {static PyObject *meth_QAbstractSpinBox_buttonSymbols(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_buttonSymbols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QAbstractSpinBox::ButtonSymbols sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->buttonSymbols();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractSpinBox_ButtonSymbols);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_buttonSymbols, doc_QAbstractSpinBox_buttonSymbols);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setButtonSymbols, "QAbstractSpinBox.setButtonSymbols(QAbstractSpinBox.ButtonSymbols)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setButtonSymbols(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setButtonSymbols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox::ButtonSymbols a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QAbstractSpinBox_ButtonSymbols, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setButtonSymbols(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setButtonSymbols, doc_QAbstractSpinBox_setButtonSymbols);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_text, "QAbstractSpinBox.text() -> QString");

extern "C" {static PyObject *meth_QAbstractSpinBox_text(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_text, doc_QAbstractSpinBox_text);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_specialValueText, "QAbstractSpinBox.specialValueText() -> QString");

extern "C" {static PyObject *meth_QAbstractSpinBox_specialValueText(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_specialValueText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->specialValueText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_specialValueText, doc_QAbstractSpinBox_specialValueText);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setSpecialValueText, "QAbstractSpinBox.setSpecialValueText(QString)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setSpecialValueText(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setSpecialValueText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpecialValueText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setSpecialValueText, doc_QAbstractSpinBox_setSpecialValueText);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_wrapping, "QAbstractSpinBox.wrapping() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_wrapping(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_wrapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wrapping();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_wrapping, doc_QAbstractSpinBox_wrapping);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setWrapping, "QAbstractSpinBox.setWrapping(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setWrapping(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setWrapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWrapping(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setWrapping, doc_QAbstractSpinBox_setWrapping);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setReadOnly, "QAbstractSpinBox.setReadOnly(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadOnly(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setReadOnly, doc_QAbstractSpinBox_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_isReadOnly, "QAbstractSpinBox.isReadOnly() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadOnly();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_isReadOnly, doc_QAbstractSpinBox_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setAlignment, "QAbstractSpinBox.setAlignment(Qt.Alignment)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setAlignment, doc_QAbstractSpinBox_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_alignment, "QAbstractSpinBox.alignment() -> Qt.Alignment");

extern "C" {static PyObject *meth_QAbstractSpinBox_alignment(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            Qt::Alignment*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment(sipCpp->alignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_alignment, doc_QAbstractSpinBox_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setFrame, "QAbstractSpinBox.setFrame(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setFrame(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFrame(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setFrame, doc_QAbstractSpinBox_setFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_hasFrame, "QAbstractSpinBox.hasFrame() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_hasFrame(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_hasFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFrame();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_hasFrame, doc_QAbstractSpinBox_hasFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_sizeHint, "QAbstractSpinBox.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QAbstractSpinBox_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QAbstractSpinBox::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_sizeHint, doc_QAbstractSpinBox_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_minimumSizeHint, "QAbstractSpinBox.minimumSizeHint() -> QSize");

extern "C" {static PyObject *meth_QAbstractSpinBox_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QAbstractSpinBox::minimumSizeHint() : sipCpp->minimumSizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_minimumSizeHint, doc_QAbstractSpinBox_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_interpretText, "QAbstractSpinBox.interpretText()");

extern "C" {static PyObject *meth_QAbstractSpinBox_interpretText(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_interpretText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->interpretText();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_interpretText, doc_QAbstractSpinBox_interpretText);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_event, "QAbstractSpinBox.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSpinBox::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_event, doc_QAbstractSpinBox_event);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_validate, "QAbstractSpinBox.validate(QString, int) -> (QValidator.State, int)");

extern "C" {static PyObject *meth_QAbstractSpinBox_validate(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        QString* a0;
        int a0State = 0;
        int a1;
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            QValidator::State sipRes;
            PyObject *sipResObj;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSpinBox::validate(*a0,a1) : sipCpp->validate(*a0,a1));
            Py_END_ALLOW_THREADS

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,NULL,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QString* a0;
        int a1;
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QString,&a0, &a1))
        {
            QValidator::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSpinBox::validate(*a0,a1) : sipCpp->validate(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(Fi)",sipRes,sipType_QValidator_State,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_validate, doc_QAbstractSpinBox_validate);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_fixup, "QAbstractSpinBox.fixup(QString)");

extern "C" {static PyObject *meth_QAbstractSpinBox_fixup(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_fixup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        QString* a0;
        int a0State = 0;
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            PyObject *sipResObj;

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::fixup(*a0) : sipCpp->fixup(*a0));
            Py_END_ALLOW_THREADS

            sipResObj = sipConvertFromType(a0,sipType_QString,NULL);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QString* a0;
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QString,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::fixup(*a0) : sipCpp->fixup(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_fixup, doc_QAbstractSpinBox_fixup);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_stepBy, "QAbstractSpinBox.stepBy(int)");

extern "C" {static PyObject *meth_QAbstractSpinBox_stepBy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_stepBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::stepBy(a0) : sipCpp->stepBy(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_stepBy, doc_QAbstractSpinBox_stepBy);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_stepUp, "QAbstractSpinBox.stepUp()");

extern "C" {static PyObject *meth_QAbstractSpinBox_stepUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_stepUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stepUp();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_stepUp, doc_QAbstractSpinBox_stepUp);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_stepDown, "QAbstractSpinBox.stepDown()");

extern "C" {static PyObject *meth_QAbstractSpinBox_stepDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_stepDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stepDown();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_stepDown, doc_QAbstractSpinBox_stepDown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_selectAll, "QAbstractSpinBox.selectAll()");

extern "C" {static PyObject *meth_QAbstractSpinBox_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectAll();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_selectAll, doc_QAbstractSpinBox_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_clear, "QAbstractSpinBox.clear()");

extern "C" {static PyObject *meth_QAbstractSpinBox_clear(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::clear() : sipCpp->clear());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_clear, doc_QAbstractSpinBox_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_resizeEvent, "QAbstractSpinBox.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_resizeEvent, doc_QAbstractSpinBox_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_keyPressEvent, "QAbstractSpinBox.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_keyPressEvent, doc_QAbstractSpinBox_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_keyReleaseEvent, "QAbstractSpinBox.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_keyReleaseEvent, doc_QAbstractSpinBox_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_wheelEvent, "QAbstractSpinBox.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_wheelEvent, doc_QAbstractSpinBox_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_focusInEvent, "QAbstractSpinBox.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_focusInEvent, doc_QAbstractSpinBox_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_focusOutEvent, "QAbstractSpinBox.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_focusOutEvent, doc_QAbstractSpinBox_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_contextMenuEvent, "QAbstractSpinBox.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_contextMenuEvent, doc_QAbstractSpinBox_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_changeEvent, "QAbstractSpinBox.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_changeEvent, doc_QAbstractSpinBox_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_closeEvent, "QAbstractSpinBox.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QCloseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::closeEvent(a0) : sipCpp->closeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_closeEvent, doc_QAbstractSpinBox_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_hideEvent, "QAbstractSpinBox.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QHideEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::hideEvent(a0) : sipCpp->hideEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_hideEvent, doc_QAbstractSpinBox_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_mousePressEvent, "QAbstractSpinBox.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_mousePressEvent, doc_QAbstractSpinBox_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_mouseReleaseEvent, "QAbstractSpinBox.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_mouseReleaseEvent, doc_QAbstractSpinBox_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_mouseMoveEvent, "QAbstractSpinBox.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_mouseMoveEvent, doc_QAbstractSpinBox_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_timerEvent, "QAbstractSpinBox.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_timerEvent, doc_QAbstractSpinBox_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_paintEvent, "QAbstractSpinBox.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_paintEvent, doc_QAbstractSpinBox_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_showEvent, "QAbstractSpinBox.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_showEvent, doc_QAbstractSpinBox_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_lineEdit, "QAbstractSpinBox.lineEdit() -> QLineEdit");

extern "C" {static PyObject *meth_QAbstractSpinBox_lineEdit(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_lineEdit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QLineEdit*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineEdit();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLineEdit,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_lineEdit, doc_QAbstractSpinBox_lineEdit);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setLineEdit, "QAbstractSpinBox.setLineEdit(QLineEdit)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setLineEdit(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setLineEdit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ:", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QLineEdit, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLineEdit(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setLineEdit, doc_QAbstractSpinBox_setLineEdit);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_stepEnabled, "QAbstractSpinBox.stepEnabled() -> QAbstractSpinBox.StepEnabled");

extern "C" {static PyObject *meth_QAbstractSpinBox_stepEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_stepEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QAbstractSpinBox::StepEnabled*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QAbstractSpinBox::StepEnabled((sipSelfWasArg ? sipCpp->QAbstractSpinBox::stepEnabled() : sipCpp->stepEnabled()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QAbstractSpinBox_StepEnabled,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_stepEnabled, doc_QAbstractSpinBox_stepEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setCorrectionMode, "QAbstractSpinBox.setCorrectionMode(QAbstractSpinBox.CorrectionMode)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setCorrectionMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setCorrectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox::CorrectionMode a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QAbstractSpinBox_CorrectionMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCorrectionMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setCorrectionMode, doc_QAbstractSpinBox_setCorrectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_correctionMode, "QAbstractSpinBox.correctionMode() -> QAbstractSpinBox.CorrectionMode");

extern "C" {static PyObject *meth_QAbstractSpinBox_correctionMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_correctionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QAbstractSpinBox::CorrectionMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->correctionMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractSpinBox_CorrectionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_correctionMode, doc_QAbstractSpinBox_correctionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_hasAcceptableInput, "QAbstractSpinBox.hasAcceptableInput() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_hasAcceptableInput(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_hasAcceptableInput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasAcceptableInput();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_hasAcceptableInput, doc_QAbstractSpinBox_hasAcceptableInput);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setAccelerated, "QAbstractSpinBox.setAccelerated(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setAccelerated(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setAccelerated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAccelerated(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setAccelerated, doc_QAbstractSpinBox_setAccelerated);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_isAccelerated, "QAbstractSpinBox.isAccelerated() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_isAccelerated(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_isAccelerated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAccelerated();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_isAccelerated, doc_QAbstractSpinBox_isAccelerated);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setKeyboardTracking, "QAbstractSpinBox.setKeyboardTracking(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setKeyboardTracking(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setKeyboardTracking(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setKeyboardTracking(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setKeyboardTracking, doc_QAbstractSpinBox_setKeyboardTracking);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_keyboardTracking, "QAbstractSpinBox.keyboardTracking() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_keyboardTracking(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_keyboardTracking(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->keyboardTracking();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_keyboardTracking, doc_QAbstractSpinBox_keyboardTracking);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_initStyleOption, "QAbstractSpinBox.initStyleOption(QStyleOptionSpinBox)");

extern "C" {static PyObject *meth_QAbstractSpinBox_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyleOptionSpinBox* a0;
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QStyleOptionSpinBox, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->initStyleOption(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_initStyleOption, doc_QAbstractSpinBox_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_inputMethodQuery, "QAbstractSpinBox.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QAbstractSpinBox_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QAbstractSpinBox::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_inputMethodQuery, doc_QAbstractSpinBox_inputMethodQuery);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractSpinBox(void *, const sipTypeDef *);}
static void *cast_QAbstractSpinBox(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractSpinBox)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QAbstractSpinBox *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractSpinBox(void *, int);}
static void release_QAbstractSpinBox(void *sipCppV,int)
{
    QAbstractSpinBox *sipCpp = reinterpret_cast<QAbstractSpinBox *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractSpinBox(sipSimpleWrapper *);}
static void dealloc_QAbstractSpinBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractSpinBox *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractSpinBox(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractSpinBox(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractSpinBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractSpinBox *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractSpinBox(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractSpinBox[] = {{755, 255, 1}};


static PyMethodDef methods_QAbstractSpinBox[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QAbstractSpinBox_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_alignment)},
    {SIP_MLNAME_CAST(sipName_buttonSymbols), meth_QAbstractSpinBox_buttonSymbols, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_buttonSymbols)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QAbstractSpinBox_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QAbstractSpinBox_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_clear)},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QAbstractSpinBox_closeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_closeEvent)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QAbstractSpinBox_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_correctionMode), meth_QAbstractSpinBox_correctionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_correctionMode)},
    {SIP_MLNAME_CAST(sipName_event), meth_QAbstractSpinBox_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_event)},
    {SIP_MLNAME_CAST(sipName_fixup), meth_QAbstractSpinBox_fixup, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_fixup)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QAbstractSpinBox_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QAbstractSpinBox_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_hasAcceptableInput), meth_QAbstractSpinBox_hasAcceptableInput, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_hasAcceptableInput)},
    {SIP_MLNAME_CAST(sipName_hasFrame), meth_QAbstractSpinBox_hasFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_hasFrame)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QAbstractSpinBox_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_hideEvent)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QAbstractSpinBox_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QAbstractSpinBox_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_interpretText), meth_QAbstractSpinBox_interpretText, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_interpretText)},
    {SIP_MLNAME_CAST(sipName_isAccelerated), meth_QAbstractSpinBox_isAccelerated, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_isAccelerated)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QAbstractSpinBox_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QAbstractSpinBox_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QAbstractSpinBox_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_keyboardTracking), meth_QAbstractSpinBox_keyboardTracking, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_keyboardTracking)},
    {SIP_MLNAME_CAST(sipName_lineEdit), meth_QAbstractSpinBox_lineEdit, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_lineEdit)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QAbstractSpinBox_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QAbstractSpinBox_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QAbstractSpinBox_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QAbstractSpinBox_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QAbstractSpinBox_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_paintEvent)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QAbstractSpinBox_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QAbstractSpinBox_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_selectAll)},
    {SIP_MLNAME_CAST(sipName_setAccelerated), meth_QAbstractSpinBox_setAccelerated, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setAccelerated)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QAbstractSpinBox_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setButtonSymbols), meth_QAbstractSpinBox_setButtonSymbols, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setButtonSymbols)},
    {SIP_MLNAME_CAST(sipName_setCorrectionMode), meth_QAbstractSpinBox_setCorrectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setCorrectionMode)},
    {SIP_MLNAME_CAST(sipName_setFrame), meth_QAbstractSpinBox_setFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setFrame)},
    {SIP_MLNAME_CAST(sipName_setKeyboardTracking), meth_QAbstractSpinBox_setKeyboardTracking, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setKeyboardTracking)},
    {SIP_MLNAME_CAST(sipName_setLineEdit), meth_QAbstractSpinBox_setLineEdit, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setLineEdit)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QAbstractSpinBox_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setSpecialValueText), meth_QAbstractSpinBox_setSpecialValueText, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setSpecialValueText)},
    {SIP_MLNAME_CAST(sipName_setWrapping), meth_QAbstractSpinBox_setWrapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setWrapping)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QAbstractSpinBox_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QAbstractSpinBox_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_sizeHint)},
    {SIP_MLNAME_CAST(sipName_specialValueText), meth_QAbstractSpinBox_specialValueText, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_specialValueText)},
    {SIP_MLNAME_CAST(sipName_stepBy), meth_QAbstractSpinBox_stepBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_stepBy)},
    {SIP_MLNAME_CAST(sipName_stepDown), meth_QAbstractSpinBox_stepDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_stepDown)},
    {SIP_MLNAME_CAST(sipName_stepEnabled), meth_QAbstractSpinBox_stepEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_stepEnabled)},
    {SIP_MLNAME_CAST(sipName_stepUp), meth_QAbstractSpinBox_stepUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_stepUp)},
    {SIP_MLNAME_CAST(sipName_text), meth_QAbstractSpinBox_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_text)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QAbstractSpinBox_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_timerEvent)},
    {SIP_MLNAME_CAST(sipName_validate), meth_QAbstractSpinBox_validate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_validate)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QAbstractSpinBox_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_wrapping), meth_QAbstractSpinBox_wrapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_wrapping)}
};

static sipEnumMemberDef enummembers_QAbstractSpinBox[] = {
    {sipName_CorrectToNearestValue, static_cast<int>(QAbstractSpinBox::CorrectToNearestValue), 27},
    {sipName_CorrectToPreviousValue, static_cast<int>(QAbstractSpinBox::CorrectToPreviousValue), 27},
    {sipName_NoButtons, static_cast<int>(QAbstractSpinBox::NoButtons), 26},
    {sipName_PlusMinus, static_cast<int>(QAbstractSpinBox::PlusMinus), 26},
    {sipName_StepDownEnabled, static_cast<int>(QAbstractSpinBox::StepDownEnabled), 29},
    {sipName_StepNone, static_cast<int>(QAbstractSpinBox::StepNone), 29},
    {sipName_StepUpEnabled, static_cast<int>(QAbstractSpinBox::StepUpEnabled), 29},
    {sipName_UpDownArrows, static_cast<int>(QAbstractSpinBox::UpDownArrows), 26},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QAbstractSpinBox[] = {
    {"editingFinished()", "\1QAbstractSpinBox.editingFinished", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractSpinBox, "\1QAbstractSpinBox(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QAbstractSpinBox = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractSpinBox,
        {0}
    },
    {
        sipNameNr_QAbstractSpinBox,
        {0, 0, 1},
        52, methods_QAbstractSpinBox,
        8, enummembers_QAbstractSpinBox,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractSpinBox,
    -1,
    -1,
    supers_QAbstractSpinBox,
    0,
    init_type_QAbstractSpinBox,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractSpinBox,
    0,
    0,
    0,
    release_QAbstractSpinBox,
    cast_QAbstractSpinBox,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractSpinBox::staticMetaObject,
    0,
    signals_QAbstractSpinBox,
};
