/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qdirmodel.sip"
#include <qdirmodel.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfileiconprovider.sip"
#include <qfileiconprovider.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 144 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qhash.sip"
#include <qhash.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 144 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQDirModel.cpp"


class sipQDirModel : public QDirModel
{
public:
    sipQDirModel(const QStringList&,QDir::Filters,QDir::SortFlags,QObject*);
    sipQDirModel(QObject*);
    virtual ~sipQDirModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void revert();
    bool submit();
    QSize span(const QModelIndex&) const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QModelIndex buddy(const QModelIndex&) const;
    bool canFetchMore(const QModelIndex&) const;
    void fetchMore(const QModelIndex&);
    bool removeColumns(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    bool insertRows(int,int,const QModelIndex&);
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    Qt::DropActions supportedDropActions() const;
    bool dropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    QMimeData* mimeData(const QModelIndexList&) const;
    QStringList mimeTypes() const;
    void sort(int,Qt::SortOrder);
    Qt::ItemFlags flags(const QModelIndex&) const;
    bool hasChildren(const QModelIndex&) const;
    QVariant headerData(int,Qt::Orientation,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant data(const QModelIndex&,int) const;
    int columnCount(const QModelIndex&) const;
    int rowCount(const QModelIndex&) const;
    QModelIndex parent(const QModelIndex&) const;
    QModelIndex index(int,int,const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDirModel(const sipQDirModel &);
    sipQDirModel &operator = (const sipQDirModel &);

    char sipPyMethods[35];
};

sipQDirModel::sipQDirModel(const QStringList& a0,QDir::Filters a1,QDir::SortFlags a2,QObject*a3): QDirModel(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDirModel::sipQDirModel(QObject*a0): QDirModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDirModel::~sipQDirModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDirModel::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QDirModel);
}

int sipQDirModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDirModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QDirModel,_c,_id,_a);

    return _id;
}

void *sipQDirModel::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QDirModel, _clname)) ? this : QDirModel::qt_metacast(_clname);
}

void sipQDirModel::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QDirModel::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDirModel::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QDirModel::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDirModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QDirModel::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDirModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QDirModel::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDirModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QDirModel::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDirModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QDirModel::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDirModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QDirModel::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDirModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
        QDirModel::revert();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQDirModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return QDirModel::submit();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQDirModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return QDirModel::span(a0);

    typedef QSize (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndexList sipQDirModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return QDirModel::match(a0,a1,a2,a3,a4);

    typedef QList<QModelIndex> (*sipVH_QtCore_48)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return ((sipVH_QtCore_48)(sipModuleAPI_QtGui_QtCore->em_virthandlers[48]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QModelIndex sipQDirModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return QDirModel::buddy(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtGui_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDirModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return QDirModel::canFetchMore(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDirModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
        QDirModel::fetchMore(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDirModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return QDirModel::removeColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQDirModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return QDirModel::removeRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQDirModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return QDirModel::insertColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQDirModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return QDirModel::insertRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQDirModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return QDirModel::setItemData(a0,a1);

    typedef bool (*sipVH_QtCore_55)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QMap<int,QVariant>&);

    return ((sipVH_QtCore_55)(sipModuleAPI_QtGui_QtCore->em_virthandlers[55]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QMap<int,QVariant> sipQDirModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return QDirModel::itemData(a0);

    typedef QMap<int,QVariant> (*sipVH_QtCore_56)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_56)(sipModuleAPI_QtGui_QtCore->em_virthandlers[56]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDirModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return QDirModel::setHeaderData(a0,a1,a2,a3);

    typedef bool (*sipVH_QtCore_57)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,const QVariant&,int);

    return ((sipVH_QtCore_57)(sipModuleAPI_QtGui_QtCore->em_virthandlers[57]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

Qt::DropActions sipQDirModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QDirModel::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtGui_QtCore->em_virthandlers[53]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQDirModel::dropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QDirModel::dropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtGui_QtCore->em_virthandlers[45]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QMimeData* sipQDirModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QDirModel::mimeData(a0);

    typedef QMimeData* (*sipVH_QtCore_54)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QModelIndex>&);

    return ((sipVH_QtCore_54)(sipModuleAPI_QtGui_QtCore->em_virthandlers[54]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStringList sipQDirModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QDirModel::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtGui_QtCore->em_virthandlers[27]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDirModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
        QDirModel::sort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_49)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);

    ((sipVH_QtCore_49)(sipModuleAPI_QtGui_QtCore->em_virthandlers[49]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

Qt::ItemFlags sipQDirModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return QDirModel::flags(a0);

    typedef Qt::ItemFlags (*sipVH_QtCore_50)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_50)(sipModuleAPI_QtGui_QtCore->em_virthandlers[50]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDirModel::hasChildren(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_hasChildren);

    if (!sipMeth)
        return QDirModel::hasChildren(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQDirModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return QDirModel::headerData(a0,a1,a2);

    typedef QVariant (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,int);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtGui_QtCore->em_virthandlers[58]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQDirModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return QDirModel::setData(a0,a1,a2);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QVariant&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_QtGui_QtCore->em_virthandlers[59]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipQDirModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QDirModel::data(a0,a1);

    typedef QVariant (*sipVH_QtCore_60)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int);

    return ((sipVH_QtCore_60)(sipModuleAPI_QtGui_QtCore->em_virthandlers[60]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQDirModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_columnCount);

    if (!sipMeth)
        return QDirModel::columnCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtGui_QtCore->em_virthandlers[43]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQDirModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return QDirModel::rowCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtGui_QtCore->em_virthandlers[43]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQDirModel::parent(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_parent);

    if (!sipMeth)
        return QDirModel::parent(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtGui_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQDirModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return QDirModel::index(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QDirModel_index, "QDirModel.index(int, int, QModelIndex parent=QModelIndex()) -> QModelIndex\n"
    "QDirModel.index(QString, int column=0) -> QModelIndex");

extern "C" {static PyObject *meth_QDirModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDirModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        const QDirModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QDirModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QDirModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        int a1 = 0;
        const QDirModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->index(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_index, doc_QDirModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_parent, "QDirModel.parent(QModelIndex) -> QModelIndex\n"
    "QDirModel.parent() -> QObject");

extern "C" {static PyObject *meth_QDirModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QDirModel::parent(*a0) : sipCpp->parent(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    {
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirModel, &sipCpp))
        {
            QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_parent, doc_QDirModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_rowCount, "QDirModel.rowCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QDirModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDirModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QDirModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDirModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_rowCount, doc_QDirModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_columnCount, "QDirModel.columnCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QDirModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDirModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QDirModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDirModel::columnCount(*a0) : sipCpp->columnCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_columnCount, doc_QDirModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_data, "QDirModel.data(QModelIndex, int role=Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QDirModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDirModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const QDirModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QDirModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_data, doc_QDirModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_setData, "QDirModel.setData(QModelIndex, QVariant, int role=Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QDirModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDirModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
        QDirModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|i", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant,&a1, &a1State, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDirModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_setData, doc_QDirModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_headerData, "QDirModel.headerData(int, Qt.Orientation, int role=Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QDirModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDirModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const QDirModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiE|i", &sipSelf, sipType_QDirModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QDirModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_headerData, doc_QDirModel_headerData);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_hasChildren, "QDirModel.hasChildren(QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QDirModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDirModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QDirModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDirModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_hasChildren, doc_QDirModel_hasChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_flags, "QDirModel.flags(QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QDirModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Qt::ItemFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags((sipSelfWasArg ? sipCpp->QDirModel::flags(*a0) : sipCpp->flags(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_flags, doc_QDirModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_sort, "QDirModel.sort(int, Qt.SortOrder order=Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QDirModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDirModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::SortOrder a1 = Qt::AscendingOrder;
        QDirModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QDirModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QDirModel::sort(a0,a1) : sipCpp->sort(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_sort, doc_QDirModel_sort);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_mimeTypes, "QDirModel.mimeTypes() -> QStringList");

extern "C" {static PyObject *meth_QDirModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirModel, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QDirModel::mimeTypes() : sipCpp->mimeTypes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_mimeTypes, doc_QDirModel_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_mimeData, "QDirModel.mimeData(list-of-QModelIndex) -> QMimeData");

extern "C" {static PyObject *meth_QDirModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndexList* a0;
        int a0State = 0;
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
            QMimeData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDirModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_mimeData, doc_QDirModel_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_dropMimeData, "QDirModel.dropMimeData(QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QDirModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        Qt::DropAction a1;
        int a2;
        int a3;
        const QModelIndex* a4;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDirModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_dropMimeData, doc_QDirModel_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_supportedDropActions, "QDirModel.supportedDropActions() -> Qt.DropActions");

extern "C" {static PyObject *meth_QDirModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirModel, &sipCpp))
        {
            Qt::DropActions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->QDirModel::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_supportedDropActions, doc_QDirModel_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_setIconProvider, "QDirModel.setIconProvider(QFileIconProvider)");

extern "C" {static PyObject *meth_QDirModel_setIconProvider(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_setIconProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileIconProvider* a0;
        PyObject *a0Keep;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QDirModel, &sipCpp, &a0Keep, sipType_QFileIconProvider, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconProvider(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -22, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_setIconProvider, doc_QDirModel_setIconProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_iconProvider, "QDirModel.iconProvider() -> QFileIconProvider");

extern "C" {static PyObject *meth_QDirModel_iconProvider(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_iconProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirModel, &sipCpp))
        {
            QFileIconProvider*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->iconProvider();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QFileIconProvider,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_iconProvider, doc_QDirModel_iconProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_setNameFilters, "QDirModel.setNameFilters(QStringList)");

extern "C" {static PyObject *meth_QDirModel_setNameFilters(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_setNameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNameFilters(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_setNameFilters, doc_QDirModel_setNameFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_nameFilters, "QDirModel.nameFilters() -> QStringList");

extern "C" {static PyObject *meth_QDirModel_nameFilters(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_nameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirModel, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->nameFilters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_nameFilters, doc_QDirModel_nameFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_setFilter, "QDirModel.setFilter(QDir.Filters)");

extern "C" {static PyObject *meth_QDirModel_setFilter(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_setFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir::Filters* a0;
        int a0State = 0;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QDir_Filters, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFilter(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_setFilter, doc_QDirModel_setFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_filter, "QDirModel.filter() -> QDir.Filters");

extern "C" {static PyObject *meth_QDirModel_filter(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirModel, &sipCpp))
        {
            QDir::Filters*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir::Filters(sipCpp->filter());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_filter, doc_QDirModel_filter);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_setSorting, "QDirModel.setSorting(QDir.SortFlags)");

extern "C" {static PyObject *meth_QDirModel_setSorting(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_setSorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir::SortFlags* a0;
        int a0State = 0;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QDir_SortFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSorting(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_SortFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_setSorting, doc_QDirModel_setSorting);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_sorting, "QDirModel.sorting() -> QDir.SortFlags");

extern "C" {static PyObject *meth_QDirModel_sorting(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_sorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirModel, &sipCpp))
        {
            QDir::SortFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir::SortFlags(sipCpp->sorting());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_sorting, doc_QDirModel_sorting);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_setResolveSymlinks, "QDirModel.setResolveSymlinks(bool)");

extern "C" {static PyObject *meth_QDirModel_setResolveSymlinks(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_setResolveSymlinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDirModel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResolveSymlinks(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_setResolveSymlinks, doc_QDirModel_setResolveSymlinks);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_resolveSymlinks, "QDirModel.resolveSymlinks() -> bool");

extern "C" {static PyObject *meth_QDirModel_resolveSymlinks(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_resolveSymlinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirModel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resolveSymlinks();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_resolveSymlinks, doc_QDirModel_resolveSymlinks);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_setReadOnly, "QDirModel.setReadOnly(bool)");

extern "C" {static PyObject *meth_QDirModel_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDirModel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadOnly(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_setReadOnly, doc_QDirModel_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_isReadOnly, "QDirModel.isReadOnly() -> bool");

extern "C" {static PyObject *meth_QDirModel_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirModel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadOnly();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_isReadOnly, doc_QDirModel_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_setLazyChildCount, "QDirModel.setLazyChildCount(bool)");

extern "C" {static PyObject *meth_QDirModel_setLazyChildCount(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_setLazyChildCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDirModel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLazyChildCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_setLazyChildCount, doc_QDirModel_setLazyChildCount);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_lazyChildCount, "QDirModel.lazyChildCount() -> bool");

extern "C" {static PyObject *meth_QDirModel_lazyChildCount(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_lazyChildCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirModel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lazyChildCount();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_lazyChildCount, doc_QDirModel_lazyChildCount);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_refresh, "QDirModel.refresh(QModelIndex parent=QModelIndex())");

extern "C" {static PyObject *meth_QDirModel_refresh(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDirModel_refresh(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        QDirModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->refresh(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_refresh, doc_QDirModel_refresh);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_isDir, "QDirModel.isDir(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QDirModel_isDir(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_isDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDir(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_isDir, doc_QDirModel_isDir);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_mkdir, "QDirModel.mkdir(QModelIndex, QString) -> QModelIndex");

extern "C" {static PyObject *meth_QDirModel_mkdir(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_mkdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QString* a1;
        int a1State = 0;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QString,&a1, &a1State))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->mkdir(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_mkdir, doc_QDirModel_mkdir);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_rmdir, "QDirModel.rmdir(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QDirModel_rmdir(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_rmdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rmdir(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_rmdir, doc_QDirModel_rmdir);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_remove, "QDirModel.remove(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QDirModel_remove(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_remove, doc_QDirModel_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_filePath, "QDirModel.filePath(QModelIndex) -> QString");

extern "C" {static PyObject *meth_QDirModel_filePath(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->filePath(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_filePath, doc_QDirModel_filePath);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_fileName, "QDirModel.fileName(QModelIndex) -> QString");

extern "C" {static PyObject *meth_QDirModel_fileName(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_fileName, doc_QDirModel_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_fileIcon, "QDirModel.fileIcon(QModelIndex) -> QIcon");

extern "C" {static PyObject *meth_QDirModel_fileIcon(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_fileIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->fileIcon(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_fileIcon, doc_QDirModel_fileIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QDirModel_fileInfo, "QDirModel.fileInfo(QModelIndex) -> QFileInfo");

extern "C" {static PyObject *meth_QDirModel_fileInfo(PyObject *, PyObject *);}
static PyObject *meth_QDirModel_fileInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QDirModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDirModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QFileInfo*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFileInfo(sipCpp->fileInfo(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFileInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirModel, sipName_fileInfo, doc_QDirModel_fileInfo);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDirModel(void *, const sipTypeDef *);}
static void *cast_QDirModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDirModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemModel)->ctd_cast((QAbstractItemModel *)(QDirModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDirModel(void *, int);}
static void release_QDirModel(void *sipCppV,int)
{
    QDirModel *sipCpp = reinterpret_cast<QDirModel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDirModel(sipSimpleWrapper *);}
static void dealloc_QDirModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDirModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDirModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QDirModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDirModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDirModel *sipCpp = 0;

    {
        const QStringList* a0;
        int a0State = 0;
        QDir::Filters* a1;
        int a1State = 0;
        QDir::SortFlags* a2;
        int a2State = 0;
        QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1J1|JH", sipType_QStringList,&a0, &a0State, sipType_QDir_Filters, &a1, &a1State, sipType_QDir_SortFlags, &a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDirModel(*a0,*a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(a1,sipType_QDir_Filters,a1State);
            sipReleaseType(a2,sipType_QDir_SortFlags,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDirModel(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDirModel[] = {{13, 0, 1}};


static PyMethodDef methods_QDirModel[] = {
    {SIP_MLNAME_CAST(sipName_columnCount), (PyCFunction)meth_QDirModel_columnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDirModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_QDirModel_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDirModel_data)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QDirModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_fileIcon), meth_QDirModel_fileIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_fileIcon)},
    {SIP_MLNAME_CAST(sipName_fileInfo), meth_QDirModel_fileInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_fileInfo)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QDirModel_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_fileName)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QDirModel_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_filePath)},
    {SIP_MLNAME_CAST(sipName_filter), meth_QDirModel_filter, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_filter)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QDirModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), (PyCFunction)meth_QDirModel_hasChildren, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDirModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_headerData), (PyCFunction)meth_QDirModel_headerData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDirModel_headerData)},
    {SIP_MLNAME_CAST(sipName_iconProvider), meth_QDirModel_iconProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_iconProvider)},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QDirModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDirModel_index)},
    {SIP_MLNAME_CAST(sipName_isDir), meth_QDirModel_isDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_isDir)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QDirModel_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_lazyChildCount), meth_QDirModel_lazyChildCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_lazyChildCount)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QDirModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QDirModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_mkdir), meth_QDirModel_mkdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_mkdir)},
    {SIP_MLNAME_CAST(sipName_nameFilters), meth_QDirModel_nameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_nameFilters)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QDirModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_parent)},
    {SIP_MLNAME_CAST(sipName_refresh), (PyCFunction)meth_QDirModel_refresh, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDirModel_refresh)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QDirModel_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_remove)},
    {SIP_MLNAME_CAST(sipName_resolveSymlinks), meth_QDirModel_resolveSymlinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_resolveSymlinks)},
    {SIP_MLNAME_CAST(sipName_rmdir), meth_QDirModel_rmdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_rmdir)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QDirModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDirModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QDirModel_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDirModel_setData)},
    {SIP_MLNAME_CAST(sipName_setFilter), meth_QDirModel_setFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_setFilter)},
    {SIP_MLNAME_CAST(sipName_setIconProvider), meth_QDirModel_setIconProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_setIconProvider)},
    {SIP_MLNAME_CAST(sipName_setLazyChildCount), meth_QDirModel_setLazyChildCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_setLazyChildCount)},
    {SIP_MLNAME_CAST(sipName_setNameFilters), meth_QDirModel_setNameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_setNameFilters)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QDirModel_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setResolveSymlinks), meth_QDirModel_setResolveSymlinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_setResolveSymlinks)},
    {SIP_MLNAME_CAST(sipName_setSorting), meth_QDirModel_setSorting, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_setSorting)},
    {SIP_MLNAME_CAST(sipName_sort), (PyCFunction)meth_QDirModel_sort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDirModel_sort)},
    {SIP_MLNAME_CAST(sipName_sorting), meth_QDirModel_sorting, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_sorting)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QDirModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirModel_supportedDropActions)}
};

static sipEnumMemberDef enummembers_QDirModel[] = {
    {sipName_FileIconRole, static_cast<int>(QDirModel::FileIconRole), 92},
    {sipName_FileNameRole, static_cast<int>(QDirModel::FileNameRole), 92},
    {sipName_FilePathRole, static_cast<int>(QDirModel::FilePathRole), 92},
};

PyDoc_STRVAR(doc_QDirModel, "\1QDirModel(QStringList, QDir.Filters, QDir.SortFlags, QObject parent=None)\n"
    "QDirModel(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QDirModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDirModel,
        {0}
    },
    {
        sipNameNr_QDirModel,
        {0, 0, 1},
        37, methods_QDirModel,
        3, enummembers_QDirModel,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDirModel,
    -1,
    -1,
    supers_QDirModel,
    0,
    init_type_QDirModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDirModel,
    0,
    0,
    0,
    release_QDirModel,
    cast_QDirModel,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QDirModel::staticMetaObject,
    0,
    0
};
