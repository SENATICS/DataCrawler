/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlistview.sip"
#include <qlistview.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 174 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 94 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 1135 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 94 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 127 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 233 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 236 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 239 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 242 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 245 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 248 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 251 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 254 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 257 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 260 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 263 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 266 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 269 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 272 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQListView.cpp"


class sipQListView : public QListView
{
public:
    sipQListView(QWidget*);
    virtual ~sipQListView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void inputMethodEvent(QInputMethodEvent*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void keyPressEvent(QKeyEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    bool viewportEvent(QEvent*);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent*) const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void editorDestroyed(QObject*);
    void commitData(QWidget*);
    void closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarAction(int);
    void verticalScrollbarAction(int);
    void updateEditorGeometries();
    void updateEditorData();
    void selectAll();
    int sizeHintForColumn(int) const;
    int sizeHintForRow(int) const;
    void keyboardSearch(const QString&);
    void setSelectionModel(QItemSelectionModel*);
    void setModel(QAbstractItemModel*);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    bool isIndexHidden(const QModelIndex&) const;
    void updateGeometries();
    QModelIndexList selectedIndexes() const;
    QRegion visualRegionForSelection(const QItemSelection&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    int verticalOffset() const;
    int horizontalOffset() const;
    void paintEvent(QPaintEvent*);
    QStyleOptionViewItem viewOptions() const;
    void startDrag(Qt::DropActions);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void resizeEvent(QResizeEvent*);
    void timerEvent(QTimerEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    bool event(QEvent*);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void dataChanged(const QModelIndex&,const QModelIndex&);
    void scrollContentsBy(int,int);
    void setRootIndex(const QModelIndex&);
    void reset();
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QRect visualRect(const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQListView(const sipQListView &);
    sipQListView &operator = (const sipQListView &);

    char sipPyMethods[86];
};

sipQListView::sipQListView(QWidget*a0): QListView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQListView::~sipQListView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQListView::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QListView);
}

int sipQListView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QListView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QListView,_c,_id,_a);

    return _id;
}

void *sipQListView::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QListView, _clname)) ? this : QListView::qt_metacast(_clname);
}

void sipQListView::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QListView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QListView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QListView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QListView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQListView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QListView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QListView::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QListView::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QListView::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QListView::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QListView::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQListView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QListView::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QListView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QListView::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QListView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QListView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QListView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QListView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QListView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QListView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QListView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQListView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QListView::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQListView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QListView::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QListView::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQListView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QListView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QListView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QListView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QListView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQListView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QListView::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQListView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QListView::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QListView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQListView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QListView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQListView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QListView::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QListView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QListView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QListView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QListView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QListView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QListView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQListView::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QListView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QItemSelectionModel::SelectionFlags sipQListView::selectionCommand(const QModelIndex& a0,const QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return QListView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtGui_233(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QEvent*);

    return sipVH_QtGui_233(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQListView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return QListView::edit(a0,a1,a2);

    extern bool sipVH_QtGui_234(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);

    return sipVH_QtGui_234(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQListView::editorDestroyed(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
        QListView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_235(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtGui_235(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::commitData(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QListView::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::closeEditor(QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
        QListView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_236(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_236(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
        QListView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
        QListView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
        QListView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
        QListView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
        QListView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
        QListView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QListView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQListView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return QListView::sizeHintForColumn(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQListView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return QListView::sizeHintForRow(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
        QListView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtGui_QtCore->em_virthandlers[33]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::setSelectionModel(QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
        QListView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QItemSelectionModel*);

    sipVH_QtGui_37(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::setModel(QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
        QListView::setModel(a0);
        return;
    }

    extern void sipVH_QtGui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemModel*);

    sipVH_QtGui_36(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
        QListView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
        QListView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,const QItemSelection&);

    sipVH_QtGui_46(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQListView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[58]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return QListView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
        QListView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QModelIndexList sipQListView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[60]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return QListView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtGui_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_49(sipGILState, 0, sipPySelf, sipMeth);
}

QRegion sipQListView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[61]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return QListView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtGui_50(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
        QListView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_51(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QModelIndex sipQListView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return QListView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtGui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemView::CursorAction,Qt::KeyboardModifiers);

    return sipVH_QtGui_52(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQListView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[64]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return QListView::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQListView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[65]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return QListView::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QListView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStyleOptionViewItem sipQListView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[67]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return QListView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtGui_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_71(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
        QListView::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_153(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::DropActions);

    sipVH_QtGui_153(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QListView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QListView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QListView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QListView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QListView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QListView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QListView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQListView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QListView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
        QListView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQListView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
        QListView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQListView::dataChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
        QListView::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QListView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[81],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
        QListView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QListView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QModelIndex sipQListView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[83]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return QListView::indexAt(a0);

    extern QModelIndex sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
        QListView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtGui_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtGui_55(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QRect sipQListView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[85]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return QListView::visualRect(a0);

    extern QRect sipVH_QtGui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtGui_56(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QListView_setMovement, "QListView.setMovement(QListView.Movement)");

extern "C" {static PyObject *meth_QListView_setMovement(PyObject *, PyObject *);}
static PyObject *meth_QListView_setMovement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView::Movement a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_Movement, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMovement(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setMovement, doc_QListView_setMovement);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_movement, "QListView.movement() -> QListView.Movement");

extern "C" {static PyObject *meth_QListView_movement(PyObject *, PyObject *);}
static PyObject *meth_QListView_movement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QListView::Movement sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->movement();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QListView_Movement);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_movement, doc_QListView_movement);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setFlow, "QListView.setFlow(QListView.Flow)");

extern "C" {static PyObject *meth_QListView_setFlow(PyObject *, PyObject *);}
static PyObject *meth_QListView_setFlow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView::Flow a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_Flow, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFlow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setFlow, doc_QListView_setFlow);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_flow, "QListView.flow() -> QListView.Flow");

extern "C" {static PyObject *meth_QListView_flow(PyObject *, PyObject *);}
static PyObject *meth_QListView_flow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QListView::Flow sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flow();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QListView_Flow);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_flow, doc_QListView_flow);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setWrapping, "QListView.setWrapping(bool)");

extern "C" {static PyObject *meth_QListView_setWrapping(PyObject *, PyObject *);}
static PyObject *meth_QListView_setWrapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWrapping(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setWrapping, doc_QListView_setWrapping);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isWrapping, "QListView.isWrapping() -> bool");

extern "C" {static PyObject *meth_QListView_isWrapping(PyObject *, PyObject *);}
static PyObject *meth_QListView_isWrapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isWrapping();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isWrapping, doc_QListView_isWrapping);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setResizeMode, "QListView.setResizeMode(QListView.ResizeMode)");

extern "C" {static PyObject *meth_QListView_setResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_setResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView::ResizeMode a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_ResizeMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResizeMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setResizeMode, doc_QListView_setResizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_resizeMode, "QListView.resizeMode() -> QListView.ResizeMode");

extern "C" {static PyObject *meth_QListView_resizeMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_resizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QListView::ResizeMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resizeMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QListView_ResizeMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_resizeMode, doc_QListView_resizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setLayoutMode, "QListView.setLayoutMode(QListView.LayoutMode)");

extern "C" {static PyObject *meth_QListView_setLayoutMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_setLayoutMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView::LayoutMode a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_LayoutMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLayoutMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setLayoutMode, doc_QListView_setLayoutMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_layoutMode, "QListView.layoutMode() -> QListView.LayoutMode");

extern "C" {static PyObject *meth_QListView_layoutMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_layoutMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QListView::LayoutMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->layoutMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QListView_LayoutMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_layoutMode, doc_QListView_layoutMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setSpacing, "QListView.setSpacing(int)");

extern "C" {static PyObject *meth_QListView_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QListView_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setSpacing, doc_QListView_setSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_spacing, "QListView.spacing() -> int");

extern "C" {static PyObject *meth_QListView_spacing(PyObject *, PyObject *);}
static PyObject *meth_QListView_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->spacing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_spacing, doc_QListView_spacing);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setGridSize, "QListView.setGridSize(QSize)");

extern "C" {static PyObject *meth_QListView_setGridSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_setGridSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGridSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setGridSize, doc_QListView_setGridSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_gridSize, "QListView.gridSize() -> QSize");

extern "C" {static PyObject *meth_QListView_gridSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_gridSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->gridSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_gridSize, doc_QListView_gridSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setViewMode, "QListView.setViewMode(QListView.ViewMode)");

extern "C" {static PyObject *meth_QListView_setViewMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_setViewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView::ViewMode a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_ViewMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setViewMode, doc_QListView_setViewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_viewMode, "QListView.viewMode() -> QListView.ViewMode");

extern "C" {static PyObject *meth_QListView_viewMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_viewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QListView::ViewMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->viewMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QListView_ViewMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_viewMode, doc_QListView_viewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_clearPropertyFlags, "QListView.clearPropertyFlags()");

extern "C" {static PyObject *meth_QListView_clearPropertyFlags(PyObject *, PyObject *);}
static PyObject *meth_QListView_clearPropertyFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearPropertyFlags();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_clearPropertyFlags, doc_QListView_clearPropertyFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isRowHidden, "QListView.isRowHidden(int) -> bool");

extern "C" {static PyObject *meth_QListView_isRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QListView_isRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRowHidden(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isRowHidden, doc_QListView_isRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setRowHidden, "QListView.setRowHidden(int, bool)");

extern "C" {static PyObject *meth_QListView_setRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QListView_setRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QListView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRowHidden(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setRowHidden, doc_QListView_setRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setModelColumn, "QListView.setModelColumn(int)");

extern "C" {static PyObject *meth_QListView_setModelColumn(PyObject *, PyObject *);}
static PyObject *meth_QListView_setModelColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setModelColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setModelColumn, doc_QListView_setModelColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_modelColumn, "QListView.modelColumn() -> int");

extern "C" {static PyObject *meth_QListView_modelColumn(PyObject *, PyObject *);}
static PyObject *meth_QListView_modelColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->modelColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_modelColumn, doc_QListView_modelColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setUniformItemSizes, "QListView.setUniformItemSizes(bool)");

extern "C" {static PyObject *meth_QListView_setUniformItemSizes(PyObject *, PyObject *);}
static PyObject *meth_QListView_setUniformItemSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformItemSizes(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setUniformItemSizes, doc_QListView_setUniformItemSizes);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_uniformItemSizes, "QListView.uniformItemSizes() -> bool");

extern "C" {static PyObject *meth_QListView_uniformItemSizes(PyObject *, PyObject *);}
static PyObject *meth_QListView_uniformItemSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->uniformItemSizes();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_uniformItemSizes, doc_QListView_uniformItemSizes);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_visualRect, "QListView.visualRect(QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QListView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QListView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect((sipSelfWasArg ? sipCpp->QListView::visualRect(*a0) : sipCpp->visualRect(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_visualRect, doc_QListView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_scrollTo, "QListView.scrollTo(QModelIndex, QAbstractItemView.ScrollHint hint=QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QListView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QListView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_scrollTo, doc_QListView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_indexAt, "QListView.indexAt(QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QListView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QListView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint* a0;
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QPoint, &a0))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QListView::indexAt(*a0) : sipCpp->indexAt(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_indexAt, doc_QListView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_reset, "QListView.reset()");

extern "C" {static PyObject *meth_QListView_reset(PyObject *, PyObject *);}
static PyObject *meth_QListView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::reset() : sipCpp->reset());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_reset, doc_QListView_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setRootIndex, "QListView.setRootIndex(QModelIndex)");

extern "C" {static PyObject *meth_QListView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QListView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setRootIndex, doc_QListView_setRootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_scrollContentsBy, "QListView.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QListView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QListView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QListView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_scrollContentsBy, doc_QListView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dataChanged, "QListView.dataChanged(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QListView_dataChanged(PyObject *, PyObject *);}
static PyObject *meth_QListView_dataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::dataChanged(*a0,*a1) : sipCpp->dataChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dataChanged, doc_QListView_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_rowsInserted, "QListView.rowsInserted(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QListView_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QListView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::rowsInserted(*a0,a1,a2) : sipCpp->rowsInserted(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_rowsInserted, doc_QListView_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_rowsAboutToBeRemoved, "QListView.rowsAboutToBeRemoved(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QListView_rowsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QListView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::rowsAboutToBeRemoved(*a0,a1,a2) : sipCpp->rowsAboutToBeRemoved(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_rowsAboutToBeRemoved, doc_QListView_rowsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_event, "QListView.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QListView_event(PyObject *, PyObject *);}
static PyObject *meth_QListView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QListView::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_event, doc_QListView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_mouseMoveEvent, "QListView.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QListView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_mouseMoveEvent, doc_QListView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_mouseReleaseEvent, "QListView.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QListView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_mouseReleaseEvent, doc_QListView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_timerEvent, "QListView.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QListView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_timerEvent, doc_QListView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_resizeEvent, "QListView.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QListView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_resizeEvent, doc_QListView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dragMoveEvent, "QListView.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QListView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dragMoveEvent, doc_QListView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dragLeaveEvent, "QListView.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QListView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dragLeaveEvent, doc_QListView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dropEvent, "QListView.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QListView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dropEvent, doc_QListView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_startDrag, "QListView.startDrag(Qt.DropActions)");

extern "C" {static PyObject *meth_QListView_startDrag(PyObject *, PyObject *);}
static PyObject *meth_QListView_startDrag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::DropActions* a0;
        int a0State = 0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QListView, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::startDrag(*a0) : sipCpp->startDrag(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_startDrag, doc_QListView_startDrag);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_viewOptions, "QListView.viewOptions() -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QListView_viewOptions(PyObject *, PyObject *);}
static PyObject *meth_QListView_viewOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QListView, &sipCpp))
        {
            QStyleOptionViewItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStyleOptionViewItem((sipSelfWasArg ? sipCpp->QListView::viewOptions() : sipCpp->viewOptions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_viewOptions, doc_QListView_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_paintEvent, "QListView.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QListView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_paintEvent, doc_QListView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_horizontalOffset, "QListView.horizontalOffset() -> int");

extern "C" {static PyObject *meth_QListView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QListView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QListView::horizontalOffset() : sipCpp->horizontalOffset());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_horizontalOffset, doc_QListView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_verticalOffset, "QListView.verticalOffset() -> int");

extern "C" {static PyObject *meth_QListView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QListView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QListView::verticalOffset() : sipCpp->verticalOffset());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_verticalOffset, doc_QListView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_moveCursor, "QListView.moveCursor(QAbstractItemView.CursorAction, Qt.KeyboardModifiers) -> QModelIndex");

extern "C" {static PyObject *meth_QListView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QListView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView::CursorAction a0;
        Qt::KeyboardModifiers* a1;
        int a1State = 0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QListView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QListView::moveCursor(a0,*a1) : sipCpp->moveCursor(a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_moveCursor, doc_QListView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_rectForIndex, "QListView.rectForIndex(QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QListView_rectForIndex(PyObject *, PyObject *);}
static PyObject *meth_QListView_rectForIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->rectForIndex(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_rectForIndex, doc_QListView_rectForIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setPositionForIndex, "QListView.setPositionForIndex(QPoint, QModelIndex)");

extern "C" {static PyObject *meth_QListView_setPositionForIndex(PyObject *, PyObject *);}
static PyObject *meth_QListView_setPositionForIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QModelIndex* a1;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QPoint, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPositionForIndex(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setPositionForIndex, doc_QListView_setPositionForIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setSelection, "QListView.setSelection(QRect, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QListView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QListView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QListView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::setSelection(*a0,*a1) : sipCpp->setSelection(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setSelection, doc_QListView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_visualRegionForSelection, "QListView.visualRegionForSelection(QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QListView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QListView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegion((sipSelfWasArg ? sipCpp->QListView::visualRegionForSelection(*a0) : sipCpp->visualRegionForSelection(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_visualRegionForSelection, doc_QListView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_selectedIndexes, "QListView.selectedIndexes() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QListView_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QListView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QListView, &sipCpp))
        {
            QModelIndexList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList((sipSelfWasArg ? sipCpp->QListView::selectedIndexes() : sipCpp->selectedIndexes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_selectedIndexes, doc_QListView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_updateGeometries, "QListView.updateGeometries()");

extern "C" {static PyObject *meth_QListView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QListView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QListView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::updateGeometries() : sipCpp->updateGeometries());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_updateGeometries, doc_QListView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isIndexHidden, "QListView.isIndexHidden(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QListView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QListView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QListView::isIndexHidden(*a0) : sipCpp->isIndexHidden(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isIndexHidden, doc_QListView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setBatchSize, "QListView.setBatchSize(int)");

extern "C" {static PyObject *meth_QListView_setBatchSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_setBatchSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBatchSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setBatchSize, doc_QListView_setBatchSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_batchSize, "QListView.batchSize() -> int");

extern "C" {static PyObject *meth_QListView_batchSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_batchSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->batchSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_batchSize, doc_QListView_batchSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setWordWrap, "QListView.setWordWrap(bool)");

extern "C" {static PyObject *meth_QListView_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QListView_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordWrap(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setWordWrap, doc_QListView_setWordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_wordWrap, "QListView.wordWrap() -> bool");

extern "C" {static PyObject *meth_QListView_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QListView_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordWrap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_wordWrap, doc_QListView_wordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setSelectionRectVisible, "QListView.setSelectionRectVisible(bool)");

extern "C" {static PyObject *meth_QListView_setSelectionRectVisible(PyObject *, PyObject *);}
static PyObject *meth_QListView_setSelectionRectVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelectionRectVisible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setSelectionRectVisible, doc_QListView_setSelectionRectVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isSelectionRectVisible, "QListView.isSelectionRectVisible() -> bool");

extern "C" {static PyObject *meth_QListView_isSelectionRectVisible(PyObject *, PyObject *);}
static PyObject *meth_QListView_isSelectionRectVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSelectionRectVisible();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isSelectionRectVisible, doc_QListView_isSelectionRectVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_selectionChanged, "QListView.selectionChanged(QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QListView_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QListView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QItemSelection* a1;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::selectionChanged(*a0,*a1) : sipCpp->selectionChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_selectionChanged, doc_QListView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_currentChanged, "QListView.currentChanged(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QListView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QListView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListView::currentChanged(*a0,*a1) : sipCpp->currentChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_currentChanged, doc_QListView_currentChanged);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QListView(void *, const sipTypeDef *);}
static void *cast_QListView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QListView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemView)->ctd_cast((QAbstractItemView *)(QListView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QListView(void *, int);}
static void release_QListView(void *sipCppV,int)
{
    QListView *sipCpp = reinterpret_cast<QListView *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QListView(sipSimpleWrapper *);}
static void dealloc_QListView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQListView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QListView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QListView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QListView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQListView *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQListView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QListView[] = {{5, 255, 1}};


static PyMethodDef methods_QListView[] = {
    {SIP_MLNAME_CAST(sipName_batchSize), meth_QListView_batchSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_batchSize)},
    {SIP_MLNAME_CAST(sipName_clearPropertyFlags), meth_QListView_clearPropertyFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_clearPropertyFlags)},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QListView_currentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_dataChanged), meth_QListView_dataChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_dataChanged)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QListView_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QListView_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QListView_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QListView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_event)},
    {SIP_MLNAME_CAST(sipName_flow), meth_QListView_flow, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_flow)},
    {SIP_MLNAME_CAST(sipName_gridSize), meth_QListView_gridSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_gridSize)},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QListView_horizontalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QListView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_indexAt)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QListView_isIndexHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_isRowHidden), meth_QListView_isRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isRowHidden)},
    {SIP_MLNAME_CAST(sipName_isSelectionRectVisible), meth_QListView_isSelectionRectVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isSelectionRectVisible)},
    {SIP_MLNAME_CAST(sipName_isWrapping), meth_QListView_isWrapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isWrapping)},
    {SIP_MLNAME_CAST(sipName_layoutMode), meth_QListView_layoutMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_layoutMode)},
    {SIP_MLNAME_CAST(sipName_modelColumn), meth_QListView_modelColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_modelColumn)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QListView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QListView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QListView_moveCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_movement), meth_QListView_movement, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_movement)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QListView_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_rectForIndex), meth_QListView_rectForIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_rectForIndex)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QListView_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_reset)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QListView_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeMode), meth_QListView_resizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_resizeMode)},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), meth_QListView_rowsAboutToBeRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_rowsAboutToBeRemoved)},
    {SIP_MLNAME_CAST(sipName_rowsInserted), meth_QListView_rowsInserted, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_rowsInserted)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QListView_scrollContentsBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QListView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QListView_selectedIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QListView_selectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_selectionChanged)},
    {SIP_MLNAME_CAST(sipName_setBatchSize), meth_QListView_setBatchSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setBatchSize)},
    {SIP_MLNAME_CAST(sipName_setFlow), meth_QListView_setFlow, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setFlow)},
    {SIP_MLNAME_CAST(sipName_setGridSize), meth_QListView_setGridSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setGridSize)},
    {SIP_MLNAME_CAST(sipName_setLayoutMode), meth_QListView_setLayoutMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setLayoutMode)},
    {SIP_MLNAME_CAST(sipName_setModelColumn), meth_QListView_setModelColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setModelColumn)},
    {SIP_MLNAME_CAST(sipName_setMovement), meth_QListView_setMovement, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setMovement)},
    {SIP_MLNAME_CAST(sipName_setPositionForIndex), meth_QListView_setPositionForIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setPositionForIndex)},
    {SIP_MLNAME_CAST(sipName_setResizeMode), meth_QListView_setResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setResizeMode)},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QListView_setRootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setRootIndex)},
    {SIP_MLNAME_CAST(sipName_setRowHidden), meth_QListView_setRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setRowHidden)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QListView_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionRectVisible), meth_QListView_setSelectionRectVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setSelectionRectVisible)},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QListView_setSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setSpacing)},
    {SIP_MLNAME_CAST(sipName_setUniformItemSizes), meth_QListView_setUniformItemSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setUniformItemSizes)},
    {SIP_MLNAME_CAST(sipName_setViewMode), meth_QListView_setViewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setViewMode)},
    {SIP_MLNAME_CAST(sipName_setWordWrap), meth_QListView_setWordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setWordWrap)},
    {SIP_MLNAME_CAST(sipName_setWrapping), meth_QListView_setWrapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setWrapping)},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QListView_spacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_spacing)},
    {SIP_MLNAME_CAST(sipName_startDrag), meth_QListView_startDrag, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_startDrag)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QListView_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_timerEvent)},
    {SIP_MLNAME_CAST(sipName_uniformItemSizes), meth_QListView_uniformItemSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_uniformItemSizes)},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QListView_updateGeometries, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QListView_verticalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_viewMode), meth_QListView_viewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_viewMode)},
    {SIP_MLNAME_CAST(sipName_viewOptions), meth_QListView_viewOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_viewOptions)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QListView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QListView_visualRegionForSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_visualRegionForSelection)},
    {SIP_MLNAME_CAST(sipName_wordWrap), meth_QListView_wordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_wordWrap)}
};

static sipEnumMemberDef enummembers_QListView[] = {
    {sipName_Adjust, static_cast<int>(QListView::Adjust), 318},
    {sipName_Batched, static_cast<int>(QListView::Batched), 316},
    {sipName_Fixed, static_cast<int>(QListView::Fixed), 318},
    {sipName_Free, static_cast<int>(QListView::Free), 317},
    {sipName_IconMode, static_cast<int>(QListView::IconMode), 319},
    {sipName_LeftToRight, static_cast<int>(QListView::LeftToRight), 315},
    {sipName_ListMode, static_cast<int>(QListView::ListMode), 319},
    {sipName_SinglePass, static_cast<int>(QListView::SinglePass), 316},
    {sipName_Snap, static_cast<int>(QListView::Snap), 317},
    {sipName_Static, static_cast<int>(QListView::Static), 317},
    {sipName_TopToBottom, static_cast<int>(QListView::TopToBottom), 315},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QListView[] = {
    {"indexesMoved(QModelIndexList)", "\1QListView.indexesMoved[list-of-QModelIndex]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QListView, "\1QListView(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QListView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QListView,
        {0}
    },
    {
        sipNameNr_QListView,
        {0, 0, 1},
        61, methods_QListView,
        11, enummembers_QListView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QListView,
    -1,
    -1,
    supers_QListView,
    0,
    init_type_QListView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QListView,
    0,
    0,
    0,
    release_QListView,
    cast_QListView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QListView::staticMetaObject,
    0,
    signals_QListView,
};
