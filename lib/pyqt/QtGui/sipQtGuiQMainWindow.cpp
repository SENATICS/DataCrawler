/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmainwindow.sip"
#include <qmainwindow.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qdockwidget.sip"
#include <qdockwidget.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtabwidget.sip"
#include <qtabwidget.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtoolbar.sip"
#include <qtoolbar.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmainwindow.sip"
#include <qmainwindow.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstatusbar.sip"
#include <qstatusbar.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmenubar.sip"
#include <qmenubar.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 233 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 236 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 239 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 242 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 245 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 248 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 251 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMainWindow.cpp"


class sipQMainWindow : public QMainWindow
{
public:
    sipQMainWindow(QWidget*,Qt::WindowFlags);
    virtual ~sipQMainWindow();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void changeEvent(QEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void resizeEvent(QResizeEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
    bool event(QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    QMenu* createPopupMenu();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMainWindow(const sipQMainWindow &);
    sipQMainWindow &operator = (const sipQMainWindow &);

    char sipPyMethods[48];
};

sipQMainWindow::sipQMainWindow(QWidget*a0,Qt::WindowFlags a1): QMainWindow(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMainWindow::~sipQMainWindow()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMainWindow::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QMainWindow);
}

int sipQMainWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMainWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QMainWindow,_c,_id,_a);

    return _id;
}

void *sipQMainWindow::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QMainWindow, _clname)) ? this : QMainWindow::qt_metacast(_clname);
}

void sipQMainWindow::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMainWindow::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMainWindow::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMainWindow::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMainWindow::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMainWindow::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMainWindow::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMainWindow::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQMainWindow::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QMainWindow::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQMainWindow::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QMainWindow::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QMainWindow::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QMainWindow::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QMainWindow::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMainWindow::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QMainWindow::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQMainWindow::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QMainWindow::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QMainWindow::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQMainWindow::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QMainWindow::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QMainWindow::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QMainWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QMainWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QMainWindow::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QMainWindow::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QMainWindow::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QMainWindow::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QMainWindow::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QMainWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QMainWindow::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QMainWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QMainWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QMainWindow::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QMainWindow::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QMainWindow::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QMainWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QMainWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QMainWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QMainWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QMainWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QMainWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QMainWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QMainWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QMainWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQMainWindow::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QMainWindow::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQMainWindow::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QMainWindow::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQMainWindow::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QMainWindow::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQMainWindow::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QMainWindow::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQMainWindow::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QMainWindow::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQMainWindow::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QMainWindow::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQMainWindow::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMainWindow::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QMainWindow::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QMenu* sipQMainWindow::createPopupMenu()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_createPopupMenu);

    if (!sipMeth)
        return QMainWindow::createPopupMenu();

    extern QMenu* sipVH_QtGui_147(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_147(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QMainWindow_iconSize, "QMainWindow.iconSize() -> QSize");

extern "C" {static PyObject *meth_QMainWindow_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->iconSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_iconSize, doc_QMainWindow_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setIconSize, "QMainWindow.setIconSize(QSize)");

extern "C" {static PyObject *meth_QMainWindow_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setIconSize, doc_QMainWindow_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_toolButtonStyle, "QMainWindow.toolButtonStyle() -> Qt.ToolButtonStyle");

extern "C" {static PyObject *meth_QMainWindow_toolButtonStyle(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_toolButtonStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            Qt::ToolButtonStyle sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toolButtonStyle();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_ToolButtonStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_toolButtonStyle, doc_QMainWindow_toolButtonStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setToolButtonStyle, "QMainWindow.setToolButtonStyle(Qt.ToolButtonStyle)");

extern "C" {static PyObject *meth_QMainWindow_setToolButtonStyle(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setToolButtonStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ToolButtonStyle a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_ToolButtonStyle, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setToolButtonStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setToolButtonStyle, doc_QMainWindow_setToolButtonStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_menuBar, "QMainWindow.menuBar() -> QMenuBar");

extern "C" {static PyObject *meth_QMainWindow_menuBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_menuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QMenuBar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->menuBar();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QMenuBar,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_menuBar, doc_QMainWindow_menuBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setMenuBar, "QMainWindow.setMenuBar(QMenuBar)");

extern "C" {static PyObject *meth_QMainWindow_setMenuBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setMenuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMenuBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QMenuBar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMenuBar(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setMenuBar, doc_QMainWindow_setMenuBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_statusBar, "QMainWindow.statusBar() -> QStatusBar");

extern "C" {static PyObject *meth_QMainWindow_statusBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_statusBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QStatusBar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->statusBar();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStatusBar,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_statusBar, doc_QMainWindow_statusBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setStatusBar, "QMainWindow.setStatusBar(QStatusBar)");

extern "C" {static PyObject *meth_QMainWindow_setStatusBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setStatusBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStatusBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QStatusBar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStatusBar(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setStatusBar, doc_QMainWindow_setStatusBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_centralWidget, "QMainWindow.centralWidget() -> QWidget");

extern "C" {static PyObject *meth_QMainWindow_centralWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_centralWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->centralWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_centralWidget, doc_QMainWindow_centralWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setCentralWidget, "QMainWindow.setCentralWidget(QWidget)");

extern "C" {static PyObject *meth_QMainWindow_setCentralWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setCentralWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCentralWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setCentralWidget, doc_QMainWindow_setCentralWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setCorner, "QMainWindow.setCorner(Qt.Corner, Qt.DockWidgetArea)");

extern "C" {static PyObject *meth_QMainWindow_setCorner(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setCorner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Corner a0;
        Qt::DockWidgetArea a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_Corner, &a0, sipType_Qt_DockWidgetArea, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCorner(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setCorner, doc_QMainWindow_setCorner);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_corner, "QMainWindow.corner(Qt.Corner) -> Qt.DockWidgetArea");

extern "C" {static PyObject *meth_QMainWindow_corner(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_corner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Corner a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_Corner, &a0))
        {
            Qt::DockWidgetArea sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->corner(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_DockWidgetArea);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_corner, doc_QMainWindow_corner);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_addToolBarBreak, "QMainWindow.addToolBarBreak(Qt.ToolBarArea area=Qt.TopToolBarArea)");

extern "C" {static PyObject *meth_QMainWindow_addToolBarBreak(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_addToolBarBreak(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ToolBarArea a0 = Qt::TopToolBarArea;
        QMainWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_area,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_ToolBarArea, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addToolBarBreak(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_addToolBarBreak, doc_QMainWindow_addToolBarBreak);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_insertToolBarBreak, "QMainWindow.insertToolBarBreak(QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_insertToolBarBreak(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_insertToolBarBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertToolBarBreak(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_insertToolBarBreak, doc_QMainWindow_insertToolBarBreak);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_addToolBar, "QMainWindow.addToolBar(Qt.ToolBarArea, QToolBar)\n"
    "QMainWindow.addToolBar(QToolBar)\n"
    "QMainWindow.addToolBar(QString) -> QToolBar");

extern "C" {static PyObject *meth_QMainWindow_addToolBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_addToolBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ToolBarArea a0;
        QToolBar* a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_ToolBarArea, &a0, sipType_QToolBar, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addToolBar(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QToolBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addToolBar(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QToolBar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addToolBar(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QToolBar,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_addToolBar, doc_QMainWindow_addToolBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_insertToolBar, "QMainWindow.insertToolBar(QToolBar, QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_insertToolBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_insertToolBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        QToolBar* a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0, sipType_QToolBar, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertToolBar(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_insertToolBar, doc_QMainWindow_insertToolBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_removeToolBar, "QMainWindow.removeToolBar(QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_removeToolBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_removeToolBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeToolBar(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_removeToolBar, doc_QMainWindow_removeToolBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_toolBarArea, "QMainWindow.toolBarArea(QToolBar) -> Qt.ToolBarArea");

extern "C" {static PyObject *meth_QMainWindow_toolBarArea(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_toolBarArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            Qt::ToolBarArea sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toolBarArea(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_ToolBarArea);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_toolBarArea, doc_QMainWindow_toolBarArea);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_addDockWidget, "QMainWindow.addDockWidget(Qt.DockWidgetArea, QDockWidget)\n"
    "QMainWindow.addDockWidget(Qt.DockWidgetArea, QDockWidget, Qt.Orientation)");

extern "C" {static PyObject *meth_QMainWindow_addDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_addDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DockWidgetArea a0;
        QDockWidget* a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetArea, &a0, sipType_QDockWidget, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addDockWidget(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::DockWidgetArea a0;
        QDockWidget* a1;
        Qt::Orientation a2;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ:E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetArea, &a0, sipType_QDockWidget, &a1, sipType_Qt_Orientation, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addDockWidget(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_addDockWidget, doc_QMainWindow_addDockWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_splitDockWidget, "QMainWindow.splitDockWidget(QDockWidget, QDockWidget, Qt.Orientation)");

extern "C" {static PyObject *meth_QMainWindow_splitDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_splitDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        QDockWidget* a1;
        Qt::Orientation a2;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J:E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0, sipType_QDockWidget, &a1, sipType_Qt_Orientation, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->splitDockWidget(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_splitDockWidget, doc_QMainWindow_splitDockWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_removeDockWidget, "QMainWindow.removeDockWidget(QDockWidget)");

extern "C" {static PyObject *meth_QMainWindow_removeDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_removeDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeDockWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_removeDockWidget, doc_QMainWindow_removeDockWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_dockWidgetArea, "QMainWindow.dockWidgetArea(QDockWidget) -> Qt.DockWidgetArea");

extern "C" {static PyObject *meth_QMainWindow_dockWidgetArea(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_dockWidgetArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            Qt::DockWidgetArea sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dockWidgetArea(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_DockWidgetArea);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_dockWidgetArea, doc_QMainWindow_dockWidgetArea);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_saveState, "QMainWindow.saveState(int version=0) -> QByteArray");

extern "C" {static PyObject *meth_QMainWindow_saveState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_saveState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        const QMainWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_version,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->saveState(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_saveState, doc_QMainWindow_saveState);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_restoreState, "QMainWindow.restoreState(QByteArray, int version=0) -> bool");

extern "C" {static PyObject *meth_QMainWindow_restoreState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_restoreState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        int a1 = 0;
        QMainWindow *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_version,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->restoreState(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_restoreState, doc_QMainWindow_restoreState);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_createPopupMenu, "QMainWindow.createPopupMenu() -> QMenu");

extern "C" {static PyObject *meth_QMainWindow_createPopupMenu(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_createPopupMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QMenu*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QMainWindow::createPopupMenu() : sipCpp->createPopupMenu());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_createPopupMenu, doc_QMainWindow_createPopupMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setAnimated, "QMainWindow.setAnimated(bool)");

extern "C" {static PyObject *meth_QMainWindow_setAnimated(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAnimated(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setAnimated, doc_QMainWindow_setAnimated);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setDockNestingEnabled, "QMainWindow.setDockNestingEnabled(bool)");

extern "C" {static PyObject *meth_QMainWindow_setDockNestingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setDockNestingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDockNestingEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setDockNestingEnabled, doc_QMainWindow_setDockNestingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_contextMenuEvent, "QMainWindow.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QMainWindow_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMainWindow::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_contextMenuEvent, doc_QMainWindow_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_event, "QMainWindow.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QMainWindow_event(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QMainWindow::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_event, doc_QMainWindow_event);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_isAnimated, "QMainWindow.isAnimated() -> bool");

extern "C" {static PyObject *meth_QMainWindow_isAnimated(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_isAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAnimated();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_isAnimated, doc_QMainWindow_isAnimated);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_isDockNestingEnabled, "QMainWindow.isDockNestingEnabled() -> bool");

extern "C" {static PyObject *meth_QMainWindow_isDockNestingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_isDockNestingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDockNestingEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_isDockNestingEnabled, doc_QMainWindow_isDockNestingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_isSeparator, "QMainWindow.isSeparator(QPoint) -> bool");

extern "C" {static PyObject *meth_QMainWindow_isSeparator(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_isSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSeparator(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_isSeparator, doc_QMainWindow_isSeparator);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_menuWidget, "QMainWindow.menuWidget() -> QWidget");

extern "C" {static PyObject *meth_QMainWindow_menuWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_menuWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->menuWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_menuWidget, doc_QMainWindow_menuWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setMenuWidget, "QMainWindow.setMenuWidget(QWidget)");

extern "C" {static PyObject *meth_QMainWindow_setMenuWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setMenuWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMenuWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setMenuWidget, doc_QMainWindow_setMenuWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_tabifyDockWidget, "QMainWindow.tabifyDockWidget(QDockWidget, QDockWidget)");

extern "C" {static PyObject *meth_QMainWindow_tabifyDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabifyDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        QDockWidget* a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0, sipType_QDockWidget, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->tabifyDockWidget(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabifyDockWidget, doc_QMainWindow_tabifyDockWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setDockOptions, "QMainWindow.setDockOptions(QMainWindow.DockOptions)");

extern "C" {static PyObject *meth_QMainWindow_setDockOptions(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setDockOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMainWindow::DockOptions* a0;
        int a0State = 0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QMainWindow_DockOptions, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDockOptions(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QMainWindow_DockOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setDockOptions, doc_QMainWindow_setDockOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_dockOptions, "QMainWindow.dockOptions() -> QMainWindow.DockOptions");

extern "C" {static PyObject *meth_QMainWindow_dockOptions(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_dockOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QMainWindow::DockOptions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMainWindow::DockOptions(sipCpp->dockOptions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMainWindow_DockOptions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_dockOptions, doc_QMainWindow_dockOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_removeToolBarBreak, "QMainWindow.removeToolBarBreak(QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_removeToolBarBreak(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_removeToolBarBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeToolBarBreak(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_removeToolBarBreak, doc_QMainWindow_removeToolBarBreak);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_toolBarBreak, "QMainWindow.toolBarBreak(QToolBar) -> bool");

extern "C" {static PyObject *meth_QMainWindow_toolBarBreak(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_toolBarBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toolBarBreak(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_toolBarBreak, doc_QMainWindow_toolBarBreak);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setUnifiedTitleAndToolBarOnMac, "QMainWindow.setUnifiedTitleAndToolBarOnMac(bool)");

extern "C" {static PyObject *meth_QMainWindow_setUnifiedTitleAndToolBarOnMac(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setUnifiedTitleAndToolBarOnMac(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUnifiedTitleAndToolBarOnMac(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setUnifiedTitleAndToolBarOnMac, doc_QMainWindow_setUnifiedTitleAndToolBarOnMac);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_unifiedTitleAndToolBarOnMac, "QMainWindow.unifiedTitleAndToolBarOnMac() -> bool");

extern "C" {static PyObject *meth_QMainWindow_unifiedTitleAndToolBarOnMac(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_unifiedTitleAndToolBarOnMac(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unifiedTitleAndToolBarOnMac();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_unifiedTitleAndToolBarOnMac, doc_QMainWindow_unifiedTitleAndToolBarOnMac);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_restoreDockWidget, "QMainWindow.restoreDockWidget(QDockWidget) -> bool");

extern "C" {static PyObject *meth_QMainWindow_restoreDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_restoreDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->restoreDockWidget(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_restoreDockWidget, doc_QMainWindow_restoreDockWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_documentMode, "QMainWindow.documentMode() -> bool");

extern "C" {static PyObject *meth_QMainWindow_documentMode(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_documentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->documentMode();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_documentMode, doc_QMainWindow_documentMode);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setDocumentMode, "QMainWindow.setDocumentMode(bool)");

extern "C" {static PyObject *meth_QMainWindow_setDocumentMode(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setDocumentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocumentMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setDocumentMode, doc_QMainWindow_setDocumentMode);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_tabShape, "QMainWindow.tabShape() -> QTabWidget.TabShape");

extern "C" {static PyObject *meth_QMainWindow_tabShape(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QTabWidget::TabShape sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabShape();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTabWidget_TabShape);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabShape, doc_QMainWindow_tabShape);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setTabShape, "QMainWindow.setTabShape(QTabWidget.TabShape)");

extern "C" {static PyObject *meth_QMainWindow_setTabShape(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setTabShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTabWidget::TabShape a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QTabWidget_TabShape, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabShape(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setTabShape, doc_QMainWindow_setTabShape);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_tabPosition, "QMainWindow.tabPosition(Qt.DockWidgetArea) -> QTabWidget.TabPosition");

extern "C" {static PyObject *meth_QMainWindow_tabPosition(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DockWidgetArea a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetArea, &a0))
        {
            QTabWidget::TabPosition sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabPosition(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTabWidget_TabPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabPosition, doc_QMainWindow_tabPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setTabPosition, "QMainWindow.setTabPosition(Qt.DockWidgetAreas, QTabWidget.TabPosition)");

extern "C" {static PyObject *meth_QMainWindow_setTabPosition(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setTabPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DockWidgetAreas* a0;
        int a0State = 0;
        QTabWidget::TabPosition a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetAreas, &a0, &a0State, sipType_QTabWidget_TabPosition, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabPosition(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_DockWidgetAreas,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setTabPosition, doc_QMainWindow_setTabPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_tabifiedDockWidgets, "QMainWindow.tabifiedDockWidgets(QDockWidget) -> list-of-QDockWidget");

extern "C" {static PyObject *meth_QMainWindow_tabifiedDockWidgets(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabifiedDockWidgets(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            QList<QDockWidget*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QDockWidget*>(sipCpp->tabifiedDockWidgets(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QDockWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabifiedDockWidgets, doc_QMainWindow_tabifiedDockWidgets);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMainWindow(void *, const sipTypeDef *);}
static void *cast_QMainWindow(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QMainWindow)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QMainWindow *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMainWindow(void *, int);}
static void release_QMainWindow(void *sipCppV,int)
{
    QMainWindow *sipCpp = reinterpret_cast<QMainWindow *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QMainWindow(sipSimpleWrapper *);}
static void dealloc_QMainWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMainWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMainWindow(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMainWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMainWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMainWindow *sipCpp = 0;

    {
        QWidget* a0 = 0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMainWindow(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMainWindow[] = {{755, 255, 1}};


static PyMethodDef methods_QMainWindow[] = {
    {SIP_MLNAME_CAST(sipName_addDockWidget), meth_QMainWindow_addDockWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_addDockWidget)},
    {SIP_MLNAME_CAST(sipName_addToolBar), meth_QMainWindow_addToolBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_addToolBar)},
    {SIP_MLNAME_CAST(sipName_addToolBarBreak), (PyCFunction)meth_QMainWindow_addToolBarBreak, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMainWindow_addToolBarBreak)},
    {SIP_MLNAME_CAST(sipName_centralWidget), meth_QMainWindow_centralWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_centralWidget)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QMainWindow_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_corner), meth_QMainWindow_corner, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_corner)},
    {SIP_MLNAME_CAST(sipName_createPopupMenu), meth_QMainWindow_createPopupMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_createPopupMenu)},
    {SIP_MLNAME_CAST(sipName_dockOptions), meth_QMainWindow_dockOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_dockOptions)},
    {SIP_MLNAME_CAST(sipName_dockWidgetArea), meth_QMainWindow_dockWidgetArea, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_dockWidgetArea)},
    {SIP_MLNAME_CAST(sipName_documentMode), meth_QMainWindow_documentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_documentMode)},
    {SIP_MLNAME_CAST(sipName_event), meth_QMainWindow_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_event)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QMainWindow_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_iconSize)},
    {SIP_MLNAME_CAST(sipName_insertToolBar), meth_QMainWindow_insertToolBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_insertToolBar)},
    {SIP_MLNAME_CAST(sipName_insertToolBarBreak), meth_QMainWindow_insertToolBarBreak, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_insertToolBarBreak)},
    {SIP_MLNAME_CAST(sipName_isAnimated), meth_QMainWindow_isAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_isAnimated)},
    {SIP_MLNAME_CAST(sipName_isDockNestingEnabled), meth_QMainWindow_isDockNestingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_isDockNestingEnabled)},
    {SIP_MLNAME_CAST(sipName_isSeparator), meth_QMainWindow_isSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_isSeparator)},
    {SIP_MLNAME_CAST(sipName_menuBar), meth_QMainWindow_menuBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_menuBar)},
    {SIP_MLNAME_CAST(sipName_menuWidget), meth_QMainWindow_menuWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_menuWidget)},
    {SIP_MLNAME_CAST(sipName_removeDockWidget), meth_QMainWindow_removeDockWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_removeDockWidget)},
    {SIP_MLNAME_CAST(sipName_removeToolBar), meth_QMainWindow_removeToolBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_removeToolBar)},
    {SIP_MLNAME_CAST(sipName_removeToolBarBreak), meth_QMainWindow_removeToolBarBreak, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_removeToolBarBreak)},
    {SIP_MLNAME_CAST(sipName_restoreDockWidget), meth_QMainWindow_restoreDockWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_restoreDockWidget)},
    {SIP_MLNAME_CAST(sipName_restoreState), (PyCFunction)meth_QMainWindow_restoreState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMainWindow_restoreState)},
    {SIP_MLNAME_CAST(sipName_saveState), (PyCFunction)meth_QMainWindow_saveState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMainWindow_saveState)},
    {SIP_MLNAME_CAST(sipName_setAnimated), meth_QMainWindow_setAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setAnimated)},
    {SIP_MLNAME_CAST(sipName_setCentralWidget), meth_QMainWindow_setCentralWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setCentralWidget)},
    {SIP_MLNAME_CAST(sipName_setCorner), meth_QMainWindow_setCorner, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setCorner)},
    {SIP_MLNAME_CAST(sipName_setDockNestingEnabled), meth_QMainWindow_setDockNestingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setDockNestingEnabled)},
    {SIP_MLNAME_CAST(sipName_setDockOptions), meth_QMainWindow_setDockOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setDockOptions)},
    {SIP_MLNAME_CAST(sipName_setDocumentMode), meth_QMainWindow_setDocumentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setDocumentMode)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QMainWindow_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setMenuBar), meth_QMainWindow_setMenuBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setMenuBar)},
    {SIP_MLNAME_CAST(sipName_setMenuWidget), meth_QMainWindow_setMenuWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setMenuWidget)},
    {SIP_MLNAME_CAST(sipName_setStatusBar), meth_QMainWindow_setStatusBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setStatusBar)},
    {SIP_MLNAME_CAST(sipName_setTabPosition), meth_QMainWindow_setTabPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setTabPosition)},
    {SIP_MLNAME_CAST(sipName_setTabShape), meth_QMainWindow_setTabShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setTabShape)},
    {SIP_MLNAME_CAST(sipName_setToolButtonStyle), meth_QMainWindow_setToolButtonStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setToolButtonStyle)},
    {SIP_MLNAME_CAST(sipName_setUnifiedTitleAndToolBarOnMac), meth_QMainWindow_setUnifiedTitleAndToolBarOnMac, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setUnifiedTitleAndToolBarOnMac)},
    {SIP_MLNAME_CAST(sipName_splitDockWidget), meth_QMainWindow_splitDockWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_splitDockWidget)},
    {SIP_MLNAME_CAST(sipName_statusBar), meth_QMainWindow_statusBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_statusBar)},
    {SIP_MLNAME_CAST(sipName_tabPosition), meth_QMainWindow_tabPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_tabPosition)},
    {SIP_MLNAME_CAST(sipName_tabShape), meth_QMainWindow_tabShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_tabShape)},
    {SIP_MLNAME_CAST(sipName_tabifiedDockWidgets), meth_QMainWindow_tabifiedDockWidgets, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_tabifiedDockWidgets)},
    {SIP_MLNAME_CAST(sipName_tabifyDockWidget), meth_QMainWindow_tabifyDockWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_tabifyDockWidget)},
    {SIP_MLNAME_CAST(sipName_toolBarArea), meth_QMainWindow_toolBarArea, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_toolBarArea)},
    {SIP_MLNAME_CAST(sipName_toolBarBreak), meth_QMainWindow_toolBarBreak, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_toolBarBreak)},
    {SIP_MLNAME_CAST(sipName_toolButtonStyle), meth_QMainWindow_toolButtonStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_toolButtonStyle)},
    {SIP_MLNAME_CAST(sipName_unifiedTitleAndToolBarOnMac), meth_QMainWindow_unifiedTitleAndToolBarOnMac, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_unifiedTitleAndToolBarOnMac)}
};

static sipEnumMemberDef enummembers_QMainWindow[] = {
    {sipName_AllowNestedDocks, static_cast<int>(QMainWindow::AllowNestedDocks), 324},
    {sipName_AllowTabbedDocks, static_cast<int>(QMainWindow::AllowTabbedDocks), 324},
    {sipName_AnimatedDocks, static_cast<int>(QMainWindow::AnimatedDocks), 324},
    {sipName_ForceTabbedDocks, static_cast<int>(QMainWindow::ForceTabbedDocks), 324},
    {sipName_VerticalTabs, static_cast<int>(QMainWindow::VerticalTabs), 324},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QMainWindow[] = {
    {"toolButtonStyleChanged(Qt::ToolButtonStyle)", "\1QMainWindow.toolButtonStyleChanged[Qt.ToolButtonStyle]", 0, 0},
    {"iconSizeChanged(QSize)", "\1QMainWindow.iconSizeChanged[QSize]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMainWindow, "\1QMainWindow(QWidget parent=None, Qt.WindowFlags flags=0)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QMainWindow = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QMainWindow,
        {0}
    },
    {
        sipNameNr_QMainWindow,
        {0, 0, 1},
        49, methods_QMainWindow,
        5, enummembers_QMainWindow,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMainWindow,
    -1,
    -1,
    supers_QMainWindow,
    0,
    init_type_QMainWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMainWindow,
    0,
    0,
    0,
    release_QMainWindow,
    cast_QMainWindow,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMainWindow::staticMetaObject,
    0,
    signals_QMainWindow,
};
