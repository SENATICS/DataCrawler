/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 812 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 1135 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 127 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQAbstractItemDelegate.cpp"


class sipQAbstractItemDelegate : public QAbstractItemDelegate
{
public:
    sipQAbstractItemDelegate(QObject*);
    virtual ~sipQAbstractItemDelegate();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool editorEvent(QEvent*,QAbstractItemModel*,const QStyleOptionViewItem&,const QModelIndex&);
    void updateEditorGeometry(QWidget*,const QStyleOptionViewItem&,const QModelIndex&) const;
    void setModelData(QWidget*,QAbstractItemModel*,const QModelIndex&) const;
    void setEditorData(QWidget*,const QModelIndex&) const;
    QWidget* createEditor(QWidget*,const QStyleOptionViewItem&,const QModelIndex&) const;
    QSize sizeHint(const QStyleOptionViewItem&,const QModelIndex&) const;
    void paint(QPainter*,const QStyleOptionViewItem&,const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractItemDelegate(const sipQAbstractItemDelegate &);
    sipQAbstractItemDelegate &operator = (const sipQAbstractItemDelegate &);

    char sipPyMethods[14];
};

sipQAbstractItemDelegate::sipQAbstractItemDelegate(QObject*a0): QAbstractItemDelegate(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractItemDelegate::~sipQAbstractItemDelegate()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractItemDelegate::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QAbstractItemDelegate);
}

int sipQAbstractItemDelegate::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractItemDelegate::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QAbstractItemDelegate,_c,_id,_a);

    return _id;
}

void *sipQAbstractItemDelegate::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QAbstractItemDelegate, _clname)) ? this : QAbstractItemDelegate::qt_metacast(_clname);
}

void sipQAbstractItemDelegate::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractItemDelegate::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemDelegate::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractItemDelegate::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemDelegate::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractItemDelegate::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemDelegate::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractItemDelegate::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemDelegate::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractItemDelegate::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemDelegate::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractItemDelegate::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractItemDelegate::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractItemDelegate::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemDelegate::editorEvent(QEvent*a0,QAbstractItemModel*a1,const QStyleOptionViewItem& a2,const QModelIndex& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_editorEvent);

    if (!sipMeth)
        return QAbstractItemDelegate::editorEvent(a0,a1,a2,a3);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*,QAbstractItemModel*,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQAbstractItemDelegate::updateEditorGeometry(QWidget*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_updateEditorGeometry);

    if (!sipMeth)
    {
        QAbstractItemDelegate::updateEditorGeometry(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_76(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractItemDelegate::setModelData(QWidget*a0,QAbstractItemModel*a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_setModelData);

    if (!sipMeth)
    {
        QAbstractItemDelegate::setModelData(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemModel*,const QModelIndex&);

    sipVH_QtGui_77(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractItemDelegate::setEditorData(QWidget*a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_setEditorData);

    if (!sipMeth)
    {
        QAbstractItemDelegate::setEditorData(a0,a1);
        return;
    }

    extern void sipVH_QtGui_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QModelIndex&);

    sipVH_QtGui_78(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QWidget* sipQAbstractItemDelegate::createEditor(QWidget*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_createEditor);

    if (!sipMeth)
        return QAbstractItemDelegate::createEditor(a0,a1,a2);

    extern QWidget* sipVH_QtGui_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtGui_79(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QSize sipQAbstractItemDelegate::sizeHint(const QStyleOptionViewItem& a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,sipName_QAbstractItemDelegate,sipName_sizeHint);

    if (!sipMeth)
        return QSize();

    extern QSize sipVH_QtGui_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtGui_80(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemDelegate::paint(QPainter*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,sipName_QAbstractItemDelegate,sipName_paint);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_48(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QAbstractItemDelegate_paint, "QAbstractItemDelegate.paint(QPainter, QStyleOptionViewItem, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemDelegate_paint(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        const QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J9", &sipSelf, sipType_QAbstractItemDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemDelegate, sipName_paint);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->paint(a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemDelegate, sipName_paint, doc_QAbstractItemDelegate_paint);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemDelegate_sizeHint, "QAbstractItemDelegate.sizeHint(QStyleOptionViewItem, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QAbstractItemDelegate_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QStyleOptionViewItem* a0;
        const QModelIndex* a1;
        const QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QAbstractItemDelegate, &sipCpp, sipType_QStyleOptionViewItem, &a0, sipType_QModelIndex, &a1))
        {
            QSize*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemDelegate, sipName_sizeHint);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->sizeHint(*a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemDelegate, sipName_sizeHint, doc_QAbstractItemDelegate_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemDelegate_createEditor, "QAbstractItemDelegate.createEditor(QWidget, QStyleOptionViewItem, QModelIndex) -> QWidget");

extern "C" {static PyObject *meth_QAbstractItemDelegate_createEditor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_createEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        sipWrapper *sipOwner = 0;
        const QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJHJ9J9", &sipSelf, sipType_QAbstractItemDelegate, &sipCpp, sipType_QWidget, &a0, &sipOwner, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemDelegate::createEditor(a0,*a1,*a2) : sipCpp->createEditor(a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWidget,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemDelegate, sipName_createEditor, doc_QAbstractItemDelegate_createEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemDelegate_setEditorData, "QAbstractItemDelegate.setEditorData(QWidget, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemDelegate_setEditorData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_setEditorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        const QModelIndex* a1;
        const QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QAbstractItemDelegate, &sipCpp, sipType_QWidget, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemDelegate::setEditorData(a0,*a1) : sipCpp->setEditorData(a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemDelegate, sipName_setEditorData, doc_QAbstractItemDelegate_setEditorData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemDelegate_setModelData, "QAbstractItemDelegate.setModelData(QWidget, QAbstractItemModel, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemDelegate_setModelData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_setModelData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QAbstractItemModel* a1;
        PyObject *a1Keep;
        const QModelIndex* a2;
        const QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8@J8J9", &sipSelf, sipType_QAbstractItemDelegate, &sipCpp, sipType_QWidget, &a0, &a1Keep, sipType_QAbstractItemModel, &a1, sipType_QModelIndex, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemDelegate::setModelData(a0,a1,*a2) : sipCpp->setModelData(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -2, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemDelegate, sipName_setModelData, doc_QAbstractItemDelegate_setModelData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemDelegate_updateEditorGeometry, "QAbstractItemDelegate.updateEditorGeometry(QWidget, QStyleOptionViewItem, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemDelegate_updateEditorGeometry(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_updateEditorGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        const QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J9", &sipSelf, sipType_QAbstractItemDelegate, &sipCpp, sipType_QWidget, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemDelegate::updateEditorGeometry(a0,*a1,*a2) : sipCpp->updateEditorGeometry(a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemDelegate, sipName_updateEditorGeometry, doc_QAbstractItemDelegate_updateEditorGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemDelegate_editorEvent, "QAbstractItemDelegate.editorEvent(QEvent, QAbstractItemModel, QStyleOptionViewItem, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemDelegate_editorEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_editorEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QAbstractItemModel* a1;
        const QStyleOptionViewItem* a2;
        const QModelIndex* a3;
        QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8J9J9", &sipSelf, sipType_QAbstractItemDelegate, &sipCpp, sipType_QEvent, &a0, sipType_QAbstractItemModel, &a1, sipType_QStyleOptionViewItem, &a2, sipType_QModelIndex, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemDelegate::editorEvent(a0,a1,*a2,*a3) : sipCpp->editorEvent(a0,a1,*a2,*a3));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemDelegate, sipName_editorEvent, doc_QAbstractItemDelegate_editorEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemDelegate_elidedText, "QAbstractItemDelegate.elidedText(QFontMetrics, int, Qt.TextElideMode, QString) -> QString");

extern "C" {static PyObject *meth_QAbstractItemDelegate_elidedText(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_elidedText(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFontMetrics* a0;
        int a1;
        Qt::TextElideMode a2;
        const QString* a3;
        int a3State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9iEJ1", sipType_QFontMetrics, &a0, &a1, sipType_Qt_TextElideMode, &a2, sipType_QString,&a3, &a3State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QAbstractItemDelegate::elidedText(*a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemDelegate, sipName_elidedText, doc_QAbstractItemDelegate_elidedText);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemDelegate_helpEvent, "QAbstractItemDelegate.helpEvent(QHelpEvent, QAbstractItemView, QStyleOptionViewItem, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemDelegate_helpEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_helpEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHelpEvent* a0;
        QAbstractItemView* a1;
        const QStyleOptionViewItem* a2;
        const QModelIndex* a3;
        QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8J9J9", &sipSelf, sipType_QAbstractItemDelegate, &sipCpp, sipType_QHelpEvent, &a0, sipType_QAbstractItemView, &a1, sipType_QStyleOptionViewItem, &a2, sipType_QModelIndex, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->helpEvent(a0,a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemDelegate, sipName_helpEvent, doc_QAbstractItemDelegate_helpEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractItemDelegate(void *, const sipTypeDef *);}
static void *cast_QAbstractItemDelegate(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractItemDelegate)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QAbstractItemDelegate *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractItemDelegate(void *, int);}
static void release_QAbstractItemDelegate(void *sipCppV,int)
{
    QAbstractItemDelegate *sipCpp = reinterpret_cast<QAbstractItemDelegate *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractItemDelegate(sipSimpleWrapper *);}
static void dealloc_QAbstractItemDelegate(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractItemDelegate *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractItemDelegate(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractItemDelegate(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractItemDelegate(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractItemDelegate *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractItemDelegate(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractItemDelegate[] = {{141, 0, 1}};


static PyMethodDef methods_QAbstractItemDelegate[] = {
    {SIP_MLNAME_CAST(sipName_createEditor), meth_QAbstractItemDelegate_createEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemDelegate_createEditor)},
    {SIP_MLNAME_CAST(sipName_editorEvent), meth_QAbstractItemDelegate_editorEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemDelegate_editorEvent)},
    {SIP_MLNAME_CAST(sipName_elidedText), meth_QAbstractItemDelegate_elidedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemDelegate_elidedText)},
    {SIP_MLNAME_CAST(sipName_helpEvent), meth_QAbstractItemDelegate_helpEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemDelegate_helpEvent)},
    {SIP_MLNAME_CAST(sipName_paint), meth_QAbstractItemDelegate_paint, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemDelegate_paint)},
    {SIP_MLNAME_CAST(sipName_setEditorData), meth_QAbstractItemDelegate_setEditorData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemDelegate_setEditorData)},
    {SIP_MLNAME_CAST(sipName_setModelData), meth_QAbstractItemDelegate_setModelData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemDelegate_setModelData)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QAbstractItemDelegate_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemDelegate_sizeHint)},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometry), meth_QAbstractItemDelegate_updateEditorGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemDelegate_updateEditorGeometry)}
};

static sipEnumMemberDef enummembers_QAbstractItemDelegate[] = {
    {sipName_EditNextItem, static_cast<int>(QAbstractItemDelegate::EditNextItem), 4},
    {sipName_EditPreviousItem, static_cast<int>(QAbstractItemDelegate::EditPreviousItem), 4},
    {sipName_NoHint, static_cast<int>(QAbstractItemDelegate::NoHint), 4},
    {sipName_RevertModelCache, static_cast<int>(QAbstractItemDelegate::RevertModelCache), 4},
    {sipName_SubmitModelCache, static_cast<int>(QAbstractItemDelegate::SubmitModelCache), 4},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QAbstractItemDelegate[] = {
    {"sizeHintChanged(QModelIndex)", "\1QAbstractItemDelegate.sizeHintChanged[QModelIndex]", 0, 0},
    {"closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint)", "\1QAbstractItemDelegate.closeEditor[QWidget, QAbstractItemDelegate.EndEditHint]", 0, 0},
    {"closeEditor(QWidget*)", "\1QAbstractItemDelegate.closeEditor[QWidget]", 0, 0},
    {"commitData(QWidget*)", "\1QAbstractItemDelegate.commitData[QWidget]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractItemDelegate, "\1QAbstractItemDelegate(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QAbstractItemDelegate = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractItemDelegate,
        {0}
    },
    {
        sipNameNr_QAbstractItemDelegate,
        {0, 0, 1},
        9, methods_QAbstractItemDelegate,
        5, enummembers_QAbstractItemDelegate,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractItemDelegate,
    -1,
    -1,
    supers_QAbstractItemDelegate,
    0,
    init_type_QAbstractItemDelegate,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractItemDelegate,
    0,
    0,
    0,
    release_QAbstractItemDelegate,
    cast_QAbstractItemDelegate,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractItemDelegate::staticMetaObject,
    0,
    signals_QAbstractItemDelegate,
};
