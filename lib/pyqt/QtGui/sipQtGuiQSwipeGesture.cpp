/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 141 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgesture.sip"
#include <qgesture.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgesture.sip"
#include <qgesture.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSwipeGesture.cpp"


class sipQSwipeGesture : public QSwipeGesture
{
public:
    sipQSwipeGesture(QObject*);
    virtual ~sipQSwipeGesture();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSwipeGesture(const sipQSwipeGesture &);
    sipQSwipeGesture &operator = (const sipQSwipeGesture &);

    char sipPyMethods[7];
};

sipQSwipeGesture::sipQSwipeGesture(QObject*a0): QSwipeGesture(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSwipeGesture::~sipQSwipeGesture()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSwipeGesture::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QSwipeGesture);
}

int sipQSwipeGesture::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSwipeGesture::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QSwipeGesture,_c,_id,_a);

    return _id;
}

void *sipQSwipeGesture::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QSwipeGesture, _clname)) ? this : QSwipeGesture::qt_metacast(_clname);
}

void sipQSwipeGesture::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSwipeGesture::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSwipeGesture::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSwipeGesture::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSwipeGesture::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSwipeGesture::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSwipeGesture::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSwipeGesture::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSwipeGesture::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSwipeGesture::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSwipeGesture::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSwipeGesture::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQSwipeGesture::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSwipeGesture::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSwipeGesture_horizontalDirection, "QSwipeGesture.horizontalDirection() -> QSwipeGesture.SwipeDirection");

extern "C" {static PyObject *meth_QSwipeGesture_horizontalDirection(PyObject *, PyObject *);}
static PyObject *meth_QSwipeGesture_horizontalDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSwipeGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSwipeGesture, &sipCpp))
        {
            QSwipeGesture::SwipeDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->horizontalDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSwipeGesture_SwipeDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSwipeGesture, sipName_horizontalDirection, doc_QSwipeGesture_horizontalDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QSwipeGesture_verticalDirection, "QSwipeGesture.verticalDirection() -> QSwipeGesture.SwipeDirection");

extern "C" {static PyObject *meth_QSwipeGesture_verticalDirection(PyObject *, PyObject *);}
static PyObject *meth_QSwipeGesture_verticalDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSwipeGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSwipeGesture, &sipCpp))
        {
            QSwipeGesture::SwipeDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verticalDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSwipeGesture_SwipeDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSwipeGesture, sipName_verticalDirection, doc_QSwipeGesture_verticalDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QSwipeGesture_swipeAngle, "QSwipeGesture.swipeAngle() -> float");

extern "C" {static PyObject *meth_QSwipeGesture_swipeAngle(PyObject *, PyObject *);}
static PyObject *meth_QSwipeGesture_swipeAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSwipeGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSwipeGesture, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->swipeAngle();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSwipeGesture, sipName_swipeAngle, doc_QSwipeGesture_swipeAngle);

    return NULL;
}


PyDoc_STRVAR(doc_QSwipeGesture_setSwipeAngle, "QSwipeGesture.setSwipeAngle(float)");

extern "C" {static PyObject *meth_QSwipeGesture_setSwipeAngle(PyObject *, PyObject *);}
static PyObject *meth_QSwipeGesture_setSwipeAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QSwipeGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QSwipeGesture, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSwipeAngle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSwipeGesture, sipName_setSwipeAngle, doc_QSwipeGesture_setSwipeAngle);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSwipeGesture(void *, const sipTypeDef *);}
static void *cast_QSwipeGesture(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSwipeGesture)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGesture)->ctd_cast((QGesture *)(QSwipeGesture *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSwipeGesture(void *, int);}
static void release_QSwipeGesture(void *sipCppV,int)
{
    QSwipeGesture *sipCpp = reinterpret_cast<QSwipeGesture *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSwipeGesture(sipSimpleWrapper *);}
static void dealloc_QSwipeGesture(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSwipeGesture *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSwipeGesture(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSwipeGesture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSwipeGesture(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSwipeGesture *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSwipeGesture(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSwipeGesture[] = {{147, 255, 1}};


static PyMethodDef methods_QSwipeGesture[] = {
    {SIP_MLNAME_CAST(sipName_horizontalDirection), meth_QSwipeGesture_horizontalDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QSwipeGesture_horizontalDirection)},
    {SIP_MLNAME_CAST(sipName_setSwipeAngle), meth_QSwipeGesture_setSwipeAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QSwipeGesture_setSwipeAngle)},
    {SIP_MLNAME_CAST(sipName_swipeAngle), meth_QSwipeGesture_swipeAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QSwipeGesture_swipeAngle)},
    {SIP_MLNAME_CAST(sipName_verticalDirection), meth_QSwipeGesture_verticalDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QSwipeGesture_verticalDirection)}
};

static sipEnumMemberDef enummembers_QSwipeGesture[] = {
    {sipName_Down, static_cast<int>(QSwipeGesture::Down), 623},
    {sipName_Left, static_cast<int>(QSwipeGesture::Left), 623},
    {sipName_NoDirection, static_cast<int>(QSwipeGesture::NoDirection), 623},
    {sipName_Right, static_cast<int>(QSwipeGesture::Right), 623},
    {sipName_Up, static_cast<int>(QSwipeGesture::Up), 623},
};

PyDoc_STRVAR(doc_QSwipeGesture, "\1QSwipeGesture(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QSwipeGesture = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSwipeGesture,
        {0}
    },
    {
        sipNameNr_QSwipeGesture,
        {0, 0, 1},
        4, methods_QSwipeGesture,
        5, enummembers_QSwipeGesture,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSwipeGesture,
    -1,
    -1,
    supers_QSwipeGesture,
    0,
    init_type_QSwipeGesture,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSwipeGesture,
    0,
    0,
    0,
    release_QSwipeGesture,
    cast_QSwipeGesture,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSwipeGesture::staticMetaObject,
    0,
    0
};
