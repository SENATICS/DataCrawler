/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qidentityproxymodel.sip"
#include <qidentityproxymodel.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 127 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 174 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 144 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 144 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qhash.sip"
#include <qhash.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQIdentityProxyModel.cpp"


class sipQIdentityProxyModel : public QIdentityProxyModel
{
public:
    sipQIdentityProxyModel(QObject*);
    virtual ~sipQIdentityProxyModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    Qt::DropActions supportedDropActions() const;
    QStringList mimeTypes() const;
    QMimeData* mimeData(const QModelIndexList&) const;
    bool hasChildren(const QModelIndex&) const;
    QSize span(const QModelIndex&) const;
    void sort(int,Qt::SortOrder);
    void fetchMore(const QModelIndex&);
    bool canFetchMore(const QModelIndex&) const;
    QModelIndex buddy(const QModelIndex&) const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    Qt::ItemFlags flags(const QModelIndex&) const;
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    QVariant headerData(int,Qt::Orientation,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant data(const QModelIndex&,int) const;
    void revert();
    bool submit();
    bool removeRows(int,int,const QModelIndex&);
    bool removeColumns(int,int,const QModelIndex&);
    bool insertRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    void setSourceModel(QAbstractItemModel*);
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QItemSelection mapSelectionToSource(const QItemSelection&) const;
    QItemSelection mapSelectionFromSource(const QItemSelection&) const;
    bool dropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    int rowCount(const QModelIndex&) const;
    QModelIndex parent(const QModelIndex&) const;
    QModelIndex mapToSource(const QModelIndex&) const;
    QModelIndex mapFromSource(const QModelIndex&) const;
    QModelIndex index(int,int,const QModelIndex&) const;
    int columnCount(const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQIdentityProxyModel(const sipQIdentityProxyModel &);
    sipQIdentityProxyModel &operator = (const sipQIdentityProxyModel &);

    char sipPyMethods[40];
};

sipQIdentityProxyModel::sipQIdentityProxyModel(QObject*a0): QIdentityProxyModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIdentityProxyModel::~sipQIdentityProxyModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQIdentityProxyModel::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QIdentityProxyModel);
}

int sipQIdentityProxyModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QIdentityProxyModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QIdentityProxyModel,_c,_id,_a);

    return _id;
}

void *sipQIdentityProxyModel::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QIdentityProxyModel, _clname)) ? this : QIdentityProxyModel::qt_metacast(_clname);
}

void sipQIdentityProxyModel::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QIdentityProxyModel::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QIdentityProxyModel::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QIdentityProxyModel::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QIdentityProxyModel::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QIdentityProxyModel::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QIdentityProxyModel::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQIdentityProxyModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QIdentityProxyModel::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

Qt::DropActions sipQIdentityProxyModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QIdentityProxyModel::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtGui_QtCore->em_virthandlers[53]))(sipGILState, 0, sipPySelf, sipMeth);
}

QStringList sipQIdentityProxyModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QIdentityProxyModel::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtGui_QtCore->em_virthandlers[27]))(sipGILState, 0, sipPySelf, sipMeth);
}

QMimeData* sipQIdentityProxyModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QIdentityProxyModel::mimeData(a0);

    typedef QMimeData* (*sipVH_QtCore_54)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QModelIndex>&);

    return ((sipVH_QtCore_54)(sipModuleAPI_QtGui_QtCore->em_virthandlers[54]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::hasChildren(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_hasChildren);

    if (!sipMeth)
        return QIdentityProxyModel::hasChildren(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQIdentityProxyModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return QIdentityProxyModel::span(a0);

    typedef QSize (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
        QIdentityProxyModel::sort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_49)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);

    ((sipVH_QtCore_49)(sipModuleAPI_QtGui_QtCore->em_virthandlers[49]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQIdentityProxyModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
        QIdentityProxyModel::fetchMore(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return QIdentityProxyModel::canFetchMore(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQIdentityProxyModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return QIdentityProxyModel::buddy(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtGui_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return QIdentityProxyModel::setItemData(a0,a1);

    typedef bool (*sipVH_QtCore_55)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QMap<int,QVariant>&);

    return ((sipVH_QtCore_55)(sipModuleAPI_QtGui_QtCore->em_virthandlers[55]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

Qt::ItemFlags sipQIdentityProxyModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return QIdentityProxyModel::flags(a0);

    typedef Qt::ItemFlags (*sipVH_QtCore_50)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_50)(sipModuleAPI_QtGui_QtCore->em_virthandlers[50]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QMap<int,QVariant> sipQIdentityProxyModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return QIdentityProxyModel::itemData(a0);

    typedef QMap<int,QVariant> (*sipVH_QtCore_56)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_56)(sipModuleAPI_QtGui_QtCore->em_virthandlers[56]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return QIdentityProxyModel::setHeaderData(a0,a1,a2,a3);

    typedef bool (*sipVH_QtCore_57)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,const QVariant&,int);

    return ((sipVH_QtCore_57)(sipModuleAPI_QtGui_QtCore->em_virthandlers[57]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QVariant sipQIdentityProxyModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return QIdentityProxyModel::headerData(a0,a1,a2);

    typedef QVariant (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,int);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtGui_QtCore->em_virthandlers[58]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return QIdentityProxyModel::setData(a0,a1,a2);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QVariant&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_QtGui_QtCore->em_virthandlers[59]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipQIdentityProxyModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QIdentityProxyModel::data(a0,a1);

    typedef QVariant (*sipVH_QtCore_60)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int);

    return ((sipVH_QtCore_60)(sipModuleAPI_QtGui_QtCore->em_virthandlers[60]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQIdentityProxyModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
        QIdentityProxyModel::revert();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQIdentityProxyModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return QIdentityProxyModel::submit();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQIdentityProxyModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return QIdentityProxyModel::removeRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return QIdentityProxyModel::removeColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return QIdentityProxyModel::insertRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return QIdentityProxyModel::insertColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQIdentityProxyModel::setSourceModel(QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_setSourceModel);

    if (!sipMeth)
    {
        QIdentityProxyModel::setSourceModel(a0);
        return;
    }

    extern void sipVH_QtGui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemModel*);

    sipVH_QtGui_36(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndexList sipQIdentityProxyModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return QIdentityProxyModel::match(a0,a1,a2,a3,a4);

    typedef QList<QModelIndex> (*sipVH_QtCore_48)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return ((sipVH_QtCore_48)(sipModuleAPI_QtGui_QtCore->em_virthandlers[48]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QItemSelection sipQIdentityProxyModel::mapSelectionToSource(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_mapSelectionToSource);

    if (!sipMeth)
        return QIdentityProxyModel::mapSelectionToSource(a0);

    extern QItemSelection sipVH_QtGui_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtGui_115(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QItemSelection sipQIdentityProxyModel::mapSelectionFromSource(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_mapSelectionFromSource);

    if (!sipMeth)
        return QIdentityProxyModel::mapSelectionFromSource(a0);

    extern QItemSelection sipVH_QtGui_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtGui_115(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::dropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QIdentityProxyModel::dropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtGui_QtCore->em_virthandlers[45]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

int sipQIdentityProxyModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return QIdentityProxyModel::rowCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtGui_QtCore->em_virthandlers[43]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQIdentityProxyModel::parent(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_parent);

    if (!sipMeth)
        return QIdentityProxyModel::parent(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtGui_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQIdentityProxyModel::mapToSource(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_mapToSource);

    if (!sipMeth)
        return QIdentityProxyModel::mapToSource(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtGui_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQIdentityProxyModel::mapFromSource(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_mapFromSource);

    if (!sipMeth)
        return QIdentityProxyModel::mapFromSource(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtGui_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQIdentityProxyModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return QIdentityProxyModel::index(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

int sipQIdentityProxyModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_columnCount);

    if (!sipMeth)
        return QIdentityProxyModel::columnCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtGui_QtCore->em_virthandlers[43]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QIdentityProxyModel_columnCount, "QIdentityProxyModel.columnCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QIdentityProxyModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::columnCount(*a0) : sipCpp->columnCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_columnCount, doc_QIdentityProxyModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_index, "QIdentityProxyModel.index(int, int, QModelIndex parent=QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        const QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QIdentityProxyModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_index, doc_QIdentityProxyModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapFromSource, "QIdentityProxyModel.mapFromSource(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapFromSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QIdentityProxyModel::mapFromSource(*a0) : sipCpp->mapFromSource(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapFromSource, doc_QIdentityProxyModel_mapFromSource);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapToSource, "QIdentityProxyModel.mapToSource(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapToSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QIdentityProxyModel::mapToSource(*a0) : sipCpp->mapToSource(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapToSource, doc_QIdentityProxyModel_mapToSource);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_parent, "QIdentityProxyModel.parent(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QIdentityProxyModel::parent(*a0) : sipCpp->parent(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_parent, doc_QIdentityProxyModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_rowCount, "QIdentityProxyModel.rowCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QIdentityProxyModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_rowCount, doc_QIdentityProxyModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_dropMimeData, "QIdentityProxyModel.dropMimeData(QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        Qt::DropAction a1;
        int a2;
        int a3;
        const QModelIndex* a4;
        QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_dropMimeData, doc_QIdentityProxyModel_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapSelectionFromSource, "QIdentityProxyModel.mapSelectionFromSource(QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapSelectionFromSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapSelectionFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
            QItemSelection*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelection((sipSelfWasArg ? sipCpp->QIdentityProxyModel::mapSelectionFromSource(*a0) : sipCpp->mapSelectionFromSource(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapSelectionFromSource, doc_QIdentityProxyModel_mapSelectionFromSource);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapSelectionToSource, "QIdentityProxyModel.mapSelectionToSource(QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapSelectionToSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapSelectionToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
            QItemSelection*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelection((sipSelfWasArg ? sipCpp->QIdentityProxyModel::mapSelectionToSource(*a0) : sipCpp->mapSelectionToSource(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapSelectionToSource, doc_QIdentityProxyModel_mapSelectionToSource);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_match, "QIdentityProxyModel.match(QModelIndex, int, QVariant, int hits=1, Qt.MatchFlags flags=Qt.MatchStartsWith|Qt.MatchWrap) -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_match(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_match(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        const QVariant* a2;
        int a2State = 0;
        int a3 = 1;
        Qt::MatchFlags a4def = Qt::MatchStartsWith|Qt::MatchWrap;
        Qt::MatchFlags* a4 = &a4def;
        int a4State = 0;
        const QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_hits,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9iJ1|iJ1", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QVariant,&a2, &a2State, &a3, sipType_Qt_MatchFlags, &a4, &a4State))
        {
            QModelIndexList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList((sipSelfWasArg ? sipCpp->QIdentityProxyModel::match(*a0,a1,*a2,a3,*a4) : sipCpp->match(*a0,a1,*a2,a3,*a4)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(a4,sipType_Qt_MatchFlags,a4State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_match, doc_QIdentityProxyModel_match);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_setSourceModel, "QIdentityProxyModel.setSourceModel(QAbstractItemModel)");

extern "C" {static PyObject *meth_QIdentityProxyModel_setSourceModel(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_setSourceModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel* a0;
        PyObject *a0Keep;
        QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QIdentityProxyModel::setSourceModel(a0) : sipCpp->setSourceModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -38, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_setSourceModel, doc_QIdentityProxyModel_setSourceModel);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_insertColumns, "QIdentityProxyModel.insertColumns(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_insertColumns, doc_QIdentityProxyModel_insertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_insertRows, "QIdentityProxyModel.insertRows(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_insertRows, doc_QIdentityProxyModel_insertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_removeColumns, "QIdentityProxyModel.removeColumns(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_removeColumns, doc_QIdentityProxyModel_removeColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_removeRows, "QIdentityProxyModel.removeRows(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_removeRows, doc_QIdentityProxyModel_removeRows);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QIdentityProxyModel(void *, const sipTypeDef *);}
static void *cast_QIdentityProxyModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QIdentityProxyModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractProxyModel)->ctd_cast((QAbstractProxyModel *)(QIdentityProxyModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIdentityProxyModel(void *, int);}
static void release_QIdentityProxyModel(void *sipCppV,int)
{
    QIdentityProxyModel *sipCpp = reinterpret_cast<QIdentityProxyModel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QIdentityProxyModel(sipSimpleWrapper *);}
static void dealloc_QIdentityProxyModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQIdentityProxyModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QIdentityProxyModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QIdentityProxyModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIdentityProxyModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQIdentityProxyModel *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQIdentityProxyModel(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QIdentityProxyModel[] = {{20, 255, 1}};


static PyMethodDef methods_QIdentityProxyModel[] = {
    {SIP_MLNAME_CAST(sipName_columnCount), (PyCFunction)meth_QIdentityProxyModel_columnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QIdentityProxyModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QIdentityProxyModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_index)},
    {SIP_MLNAME_CAST(sipName_insertColumns), (PyCFunction)meth_QIdentityProxyModel_insertColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRows), (PyCFunction)meth_QIdentityProxyModel_insertRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_mapFromSource), meth_QIdentityProxyModel_mapFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionFromSource), meth_QIdentityProxyModel_mapSelectionFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapSelectionFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionToSource), meth_QIdentityProxyModel_mapSelectionToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapSelectionToSource)},
    {SIP_MLNAME_CAST(sipName_mapToSource), meth_QIdentityProxyModel_mapToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapToSource)},
    {SIP_MLNAME_CAST(sipName_match), (PyCFunction)meth_QIdentityProxyModel_match, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_match)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QIdentityProxyModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_parent)},
    {SIP_MLNAME_CAST(sipName_removeColumns), (PyCFunction)meth_QIdentityProxyModel_removeColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRows), (PyCFunction)meth_QIdentityProxyModel_removeRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QIdentityProxyModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setSourceModel), meth_QIdentityProxyModel_setSourceModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_setSourceModel)}
};

PyDoc_STRVAR(doc_QIdentityProxyModel, "\1QIdentityProxyModel(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QIdentityProxyModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QIdentityProxyModel,
        {0}
    },
    {
        sipNameNr_QIdentityProxyModel,
        {0, 0, 1},
        15, methods_QIdentityProxyModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QIdentityProxyModel,
    -1,
    -1,
    supers_QIdentityProxyModel,
    0,
    init_type_QIdentityProxyModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QIdentityProxyModel,
    0,
    0,
    0,
    release_QIdentityProxyModel,
    cast_QIdentityProxyModel,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QIdentityProxyModel::staticMetaObject,
    0,
    0
};
