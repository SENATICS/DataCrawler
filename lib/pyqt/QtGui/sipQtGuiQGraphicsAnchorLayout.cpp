/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 54 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsanchorlayout.sip"
#include <qgraphicsanchorlayout.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsAnchorLayout.cpp"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicslayoutitem.sip"
#include <qgraphicslayoutitem.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsAnchorLayout.cpp"
#line 112 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsAnchorLayout.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsAnchorLayout.cpp"
#line 168 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsAnchorLayout.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsAnchorLayout.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsanchorlayout.sip"
#include <qgraphicsanchorlayout.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsAnchorLayout.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsAnchorLayout.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsAnchorLayout.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQGraphicsAnchorLayout.cpp"


class sipQGraphicsAnchorLayout : public QGraphicsAnchorLayout
{
public:
    sipQGraphicsAnchorLayout(QGraphicsLayoutItem*);
    virtual ~sipQGraphicsAnchorLayout();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void updateGeometry();
    void widgetEvent(QEvent*);
    void getContentsMargins(qreal*,qreal*,qreal*,qreal*) const;
    QSizeF sizeHint(Qt::SizeHint,const QSizeF&) const;
    void invalidate();
    QGraphicsLayoutItem* itemAt(int) const;
    int count() const;
    void setGeometry(const QRectF&);
    void removeAt(int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsAnchorLayout(const sipQGraphicsAnchorLayout &);
    sipQGraphicsAnchorLayout &operator = (const sipQGraphicsAnchorLayout &);

    char sipPyMethods[9];
};

sipQGraphicsAnchorLayout::sipQGraphicsAnchorLayout(QGraphicsLayoutItem*a0): QGraphicsAnchorLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsAnchorLayout::~sipQGraphicsAnchorLayout()
{
    sipCommonDtor(sipPySelf);
}

void sipQGraphicsAnchorLayout::updateGeometry()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_updateGeometry);

    if (!sipMeth)
    {
        QGraphicsAnchorLayout::updateGeometry();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsAnchorLayout::widgetEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_widgetEvent);

    if (!sipMeth)
    {
        QGraphicsAnchorLayout::widgetEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsAnchorLayout::getContentsMargins(qreal*a0,qreal*a1,qreal*a2,qreal*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_getContentsMargins);

    if (!sipMeth)
    {
        QGraphicsAnchorLayout::getContentsMargins(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_197(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, double*,double*,double*,double*);

    sipVH_QtGui_197(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QSizeF sipQGraphicsAnchorLayout::sizeHint(Qt::SizeHint a0,const QSizeF& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QGraphicsAnchorLayout::sizeHint(a0,a1);

    extern QSizeF sipVH_QtGui_192(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::SizeHint,const QSizeF&);

    return sipVH_QtGui_192(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsAnchorLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_invalidate);

    if (!sipMeth)
    {
        QGraphicsAnchorLayout::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QGraphicsLayoutItem* sipQGraphicsAnchorLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_itemAt);

    if (!sipMeth)
        return QGraphicsAnchorLayout::itemAt(a0);

    extern QGraphicsLayoutItem* sipVH_QtGui_204(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_204(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQGraphicsAnchorLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_count);

    if (!sipMeth)
        return QGraphicsAnchorLayout::count();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsAnchorLayout::setGeometry(const QRectF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
        QGraphicsAnchorLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtGui_137(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&);

    sipVH_QtGui_137(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsAnchorLayout::removeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_removeAt);

    if (!sipMeth)
    {
        QGraphicsAnchorLayout::removeAt(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_addAnchor, "QGraphicsAnchorLayout.addAnchor(QGraphicsLayoutItem, Qt.AnchorPoint, QGraphicsLayoutItem, Qt.AnchorPoint) -> QGraphicsAnchor");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_addAnchor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_addAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsLayoutItem* a0;
        Qt::AnchorPoint a1;
        QGraphicsLayoutItem* a2;
        Qt::AnchorPoint a3;
        QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:EJ:E", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, sipType_QGraphicsLayoutItem, &a0, sipType_Qt_AnchorPoint, &a1, sipType_QGraphicsLayoutItem, &a2, sipType_Qt_AnchorPoint, &a3))
        {
            QGraphicsAnchor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addAnchor(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QGraphicsAnchor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_addAnchor, doc_QGraphicsAnchorLayout_addAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_anchor, "QGraphicsAnchorLayout.anchor(QGraphicsLayoutItem, Qt.AnchorPoint, QGraphicsLayoutItem, Qt.AnchorPoint) -> QGraphicsAnchor");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_anchor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_anchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsLayoutItem* a0;
        Qt::AnchorPoint a1;
        QGraphicsLayoutItem* a2;
        Qt::AnchorPoint a3;
        QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EJ8E", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, sipType_QGraphicsLayoutItem, &a0, sipType_Qt_AnchorPoint, &a1, sipType_QGraphicsLayoutItem, &a2, sipType_Qt_AnchorPoint, &a3))
        {
            QGraphicsAnchor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->anchor(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QGraphicsAnchor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_anchor, doc_QGraphicsAnchorLayout_anchor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_addCornerAnchors, "QGraphicsAnchorLayout.addCornerAnchors(QGraphicsLayoutItem, Qt.Corner, QGraphicsLayoutItem, Qt.Corner)");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_addCornerAnchors(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_addCornerAnchors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsLayoutItem* a0;
        Qt::Corner a1;
        QGraphicsLayoutItem* a2;
        Qt::Corner a3;
        QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:EJ:E", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, sipType_QGraphicsLayoutItem, &a0, sipType_Qt_Corner, &a1, sipType_QGraphicsLayoutItem, &a2, sipType_Qt_Corner, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addCornerAnchors(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_addCornerAnchors, doc_QGraphicsAnchorLayout_addCornerAnchors);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_addAnchors, "QGraphicsAnchorLayout.addAnchors(QGraphicsLayoutItem, QGraphicsLayoutItem, Qt.Orientations orientations=Qt.Horizontal|Qt.Vertical)");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_addAnchors(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_addAnchors(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsLayoutItem* a0;
        QGraphicsLayoutItem* a1;
        Qt::Orientations a2def = Qt::Horizontal|Qt::Vertical;
        Qt::Orientations* a2 = &a2def;
        int a2State = 0;
        QGraphicsAnchorLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_orientations,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:J:|J1", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, sipType_QGraphicsLayoutItem, &a0, sipType_QGraphicsLayoutItem, &a1, sipType_Qt_Orientations, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addAnchors(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_Qt_Orientations,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_addAnchors, doc_QGraphicsAnchorLayout_addAnchors);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_setHorizontalSpacing, "QGraphicsAnchorLayout.setHorizontalSpacing(float)");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_setHorizontalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_setHorizontalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHorizontalSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_setHorizontalSpacing, doc_QGraphicsAnchorLayout_setHorizontalSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_setVerticalSpacing, "QGraphicsAnchorLayout.setVerticalSpacing(float)");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_setVerticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_setVerticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVerticalSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_setVerticalSpacing, doc_QGraphicsAnchorLayout_setVerticalSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_setSpacing, "QGraphicsAnchorLayout.setSpacing(float)");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_setSpacing, doc_QGraphicsAnchorLayout_setSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_horizontalSpacing, "QGraphicsAnchorLayout.horizontalSpacing() -> float");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_horizontalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_horizontalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->horizontalSpacing();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_horizontalSpacing, doc_QGraphicsAnchorLayout_horizontalSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_verticalSpacing, "QGraphicsAnchorLayout.verticalSpacing() -> float");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_verticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_verticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verticalSpacing();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_verticalSpacing, doc_QGraphicsAnchorLayout_verticalSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_removeAt, "QGraphicsAnchorLayout.removeAt(int)");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_removeAt(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_removeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsAnchorLayout::removeAt(a0) : sipCpp->removeAt(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_removeAt, doc_QGraphicsAnchorLayout_removeAt);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_setGeometry, "QGraphicsAnchorLayout.setGeometry(QRectF)");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF* a0;
        QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsAnchorLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_setGeometry, doc_QGraphicsAnchorLayout_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_count, "QGraphicsAnchorLayout.count() -> int");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QGraphicsAnchorLayout::count() : sipCpp->count());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_count, doc_QGraphicsAnchorLayout_count);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_itemAt, "QGraphicsAnchorLayout.itemAt(int) -> QGraphicsLayoutItem");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, &a0))
        {
            QGraphicsLayoutItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QGraphicsAnchorLayout::itemAt(a0) : sipCpp->itemAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QGraphicsLayoutItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_itemAt, doc_QGraphicsAnchorLayout_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_invalidate, "QGraphicsAnchorLayout.invalidate()");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsAnchorLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsAnchorLayout::invalidate() : sipCpp->invalidate());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_invalidate, doc_QGraphicsAnchorLayout_invalidate);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchorLayout_sizeHint, "QGraphicsAnchorLayout.sizeHint(Qt.SizeHint, QSizeF constraint=QSizeF()) -> QSizeF");

extern "C" {static PyObject *meth_QGraphicsAnchorLayout_sizeHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchorLayout_sizeHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::SizeHint a0;
        const QSizeF& a1def = QSizeF();
        const QSizeF* a1 = &a1def;
        const QGraphicsAnchorLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_constraint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pE|J9", &sipSelf, sipType_QGraphicsAnchorLayout, &sipCpp, sipType_Qt_SizeHint, &a0, sipType_QSizeF, &a1))
        {
            QSizeF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF((sipSelfWasArg ? sipCpp->QGraphicsAnchorLayout::sizeHint(a0,*a1) : sipCpp->sizeHint(a0,*a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchorLayout, sipName_sizeHint, doc_QGraphicsAnchorLayout_sizeHint);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsAnchorLayout(void *, const sipTypeDef *);}
static void *cast_QGraphicsAnchorLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsAnchorLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGraphicsLayout)->ctd_cast((QGraphicsLayout *)(QGraphicsAnchorLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsAnchorLayout(void *, int);}
static void release_QGraphicsAnchorLayout(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGraphicsAnchorLayout *>(sipCppV);
    else
        delete reinterpret_cast<QGraphicsAnchorLayout *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGraphicsAnchorLayout(sipSimpleWrapper *);}
static void dealloc_QGraphicsAnchorLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsAnchorLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsAnchorLayout(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGraphicsAnchorLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsAnchorLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsAnchorLayout *sipCpp = 0;

    {
        QGraphicsLayoutItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QGraphicsLayoutItem, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsAnchorLayout(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsAnchorLayout[] = {{179, 255, 1}};


static PyMethodDef methods_QGraphicsAnchorLayout[] = {
    {SIP_MLNAME_CAST(sipName_addAnchor), meth_QGraphicsAnchorLayout_addAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_addAnchor)},
    {SIP_MLNAME_CAST(sipName_addAnchors), (PyCFunction)meth_QGraphicsAnchorLayout_addAnchors, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_addAnchors)},
    {SIP_MLNAME_CAST(sipName_addCornerAnchors), meth_QGraphicsAnchorLayout_addCornerAnchors, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_addCornerAnchors)},
    {SIP_MLNAME_CAST(sipName_anchor), meth_QGraphicsAnchorLayout_anchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_anchor)},
    {SIP_MLNAME_CAST(sipName_count), meth_QGraphicsAnchorLayout_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_count)},
    {SIP_MLNAME_CAST(sipName_horizontalSpacing), meth_QGraphicsAnchorLayout_horizontalSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_horizontalSpacing)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QGraphicsAnchorLayout_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_invalidate)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QGraphicsAnchorLayout_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_itemAt)},
    {SIP_MLNAME_CAST(sipName_removeAt), meth_QGraphicsAnchorLayout_removeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_removeAt)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QGraphicsAnchorLayout_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setHorizontalSpacing), meth_QGraphicsAnchorLayout_setHorizontalSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_setHorizontalSpacing)},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QGraphicsAnchorLayout_setSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_setSpacing)},
    {SIP_MLNAME_CAST(sipName_setVerticalSpacing), meth_QGraphicsAnchorLayout_setVerticalSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_setVerticalSpacing)},
    {SIP_MLNAME_CAST(sipName_sizeHint), (PyCFunction)meth_QGraphicsAnchorLayout_sizeHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_sizeHint)},
    {SIP_MLNAME_CAST(sipName_verticalSpacing), meth_QGraphicsAnchorLayout_verticalSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchorLayout_verticalSpacing)}
};

PyDoc_STRVAR(doc_QGraphicsAnchorLayout, "\1QGraphicsAnchorLayout(QGraphicsLayoutItem parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QGraphicsAnchorLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QGraphicsAnchorLayout,
        {0}
    },
    {
        sipNameNr_QGraphicsAnchorLayout,
        {0, 0, 1},
        15, methods_QGraphicsAnchorLayout,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsAnchorLayout,
    -1,
    -1,
    supers_QGraphicsAnchorLayout,
    0,
    init_type_QGraphicsAnchorLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsAnchorLayout,
    0,
    0,
    0,
    release_QGraphicsAnchorLayout,
    cast_QGraphicsAnchorLayout,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
