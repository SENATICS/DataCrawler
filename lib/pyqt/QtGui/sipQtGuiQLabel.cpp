/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlabel.sip"
#include <qlabel.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmovie.sip"
#include <qmovie.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 233 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 236 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 239 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 242 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQLabel.cpp"


class sipQLabel : public QLabel
{
public:
    sipQLabel(QWidget*,Qt::WindowFlags);
    sipQLabel(const QString&,QWidget*,Qt::WindowFlags);
    virtual ~sipQLabel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void resizeEvent(QResizeEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    void setVisible(bool);
    int devType() const;
    bool focusNextPrevChild(bool);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void keyPressEvent(QKeyEvent*);
    void changeEvent(QEvent*);
    void paintEvent(QPaintEvent*);
    bool event(QEvent*);
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLabel(const sipQLabel &);
    sipQLabel &operator = (const sipQLabel &);

    char sipPyMethods[47];
};

sipQLabel::sipQLabel(QWidget*a0,Qt::WindowFlags a1): QLabel(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLabel::sipQLabel(const QString& a0,QWidget*a1,Qt::WindowFlags a2): QLabel(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLabel::~sipQLabel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQLabel::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QLabel);
}

int sipQLabel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QLabel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QLabel,_c,_id,_a);

    return _id;
}

void *sipQLabel::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QLabel, _clname)) ? this : QLabel::qt_metacast(_clname);
}

void sipQLabel::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QLabel::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QLabel::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QLabel::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QLabel::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QLabel::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQLabel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QLabel::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQLabel::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QLabel::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQLabel::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QLabel::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QLabel::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QLabel::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QLabel::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQLabel::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QLabel::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QLabel::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQLabel::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QLabel::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QLabel::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QLabel::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QLabel::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QLabel::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QLabel::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QLabel::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QLabel::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QLabel::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QLabel::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QLabel::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QLabel::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QLabel::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QLabel::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QLabel::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QLabel::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QLabel::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQLabel::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QLabel::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQLabel::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QLabel::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQLabel::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QLabel::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQLabel::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QLabel::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QLabel::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QLabel::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QLabel::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QLabel::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QLabel::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QLabel::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QLabel::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QLabel::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLabel::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QLabel::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQLabel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QLabel::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQLabel::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QLabel::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQLabel::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QLabel::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQLabel::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QLabel::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QLabel_text, "QLabel.text() -> QString");

extern "C" {static PyObject *meth_QLabel_text(PyObject *, PyObject *);}
static PyObject *meth_QLabel_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_text, doc_QLabel_text);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_pixmap, "QLabel.pixmap() -> QPixmap");

extern "C" {static PyObject *meth_QLabel_pixmap(PyObject *, PyObject *);}
static PyObject *meth_QLabel_pixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            const QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pixmap();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QPixmap *>(sipRes),sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_pixmap, doc_QLabel_pixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_picture, "QLabel.picture() -> QPicture");

extern "C" {static PyObject *meth_QLabel_picture(PyObject *, PyObject *);}
static PyObject *meth_QLabel_picture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            const QPicture*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->picture();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QPicture *>(sipRes),sipType_QPicture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_picture, doc_QLabel_picture);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_movie, "QLabel.movie() -> QMovie");

extern "C" {static PyObject *meth_QLabel_movie(PyObject *, PyObject *);}
static PyObject *meth_QLabel_movie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            QMovie*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->movie();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QMovie,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_movie, doc_QLabel_movie);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_textFormat, "QLabel.textFormat() -> Qt.TextFormat");

extern "C" {static PyObject *meth_QLabel_textFormat(PyObject *, PyObject *);}
static PyObject *meth_QLabel_textFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            Qt::TextFormat sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textFormat();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_TextFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_textFormat, doc_QLabel_textFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setTextFormat, "QLabel.setTextFormat(Qt.TextFormat)");

extern "C" {static PyObject *meth_QLabel_setTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::TextFormat a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLabel, &sipCpp, sipType_Qt_TextFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextFormat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setTextFormat, doc_QLabel_setTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_alignment, "QLabel.alignment() -> Qt.Alignment");

extern "C" {static PyObject *meth_QLabel_alignment(PyObject *, PyObject *);}
static PyObject *meth_QLabel_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            Qt::Alignment*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment(sipCpp->alignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_alignment, doc_QLabel_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setAlignment, "QLabel.setAlignment(Qt.Alignment)");

extern "C" {static PyObject *meth_QLabel_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLabel, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setAlignment, doc_QLabel_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setWordWrap, "QLabel.setWordWrap(bool)");

extern "C" {static PyObject *meth_QLabel_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordWrap(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setWordWrap, doc_QLabel_setWordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_wordWrap, "QLabel.wordWrap() -> bool");

extern "C" {static PyObject *meth_QLabel_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QLabel_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordWrap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_wordWrap, doc_QLabel_wordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_indent, "QLabel.indent() -> int");

extern "C" {static PyObject *meth_QLabel_indent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indent();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_indent, doc_QLabel_indent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setIndent, "QLabel.setIndent(int)");

extern "C" {static PyObject *meth_QLabel_setIndent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIndent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setIndent, doc_QLabel_setIndent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_margin, "QLabel.margin() -> int");

extern "C" {static PyObject *meth_QLabel_margin(PyObject *, PyObject *);}
static PyObject *meth_QLabel_margin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->margin();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_margin, doc_QLabel_margin);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setMargin, "QLabel.setMargin(int)");

extern "C" {static PyObject *meth_QLabel_setMargin(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setMargin, doc_QLabel_setMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_hasScaledContents, "QLabel.hasScaledContents() -> bool");

extern "C" {static PyObject *meth_QLabel_hasScaledContents(PyObject *, PyObject *);}
static PyObject *meth_QLabel_hasScaledContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasScaledContents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_hasScaledContents, doc_QLabel_hasScaledContents);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setScaledContents, "QLabel.setScaledContents(bool)");

extern "C" {static PyObject *meth_QLabel_setScaledContents(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setScaledContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScaledContents(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setScaledContents, doc_QLabel_setScaledContents);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_sizeHint, "QLabel.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QLabel_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLabel_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QLabel::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_sizeHint, doc_QLabel_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_minimumSizeHint, "QLabel.minimumSizeHint() -> QSize");

extern "C" {static PyObject *meth_QLabel_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLabel_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QLabel::minimumSizeHint() : sipCpp->minimumSizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_minimumSizeHint, doc_QLabel_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setBuddy, "QLabel.setBuddy(QWidget)");

extern "C" {static PyObject *meth_QLabel_setBuddy(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setBuddy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        PyObject *a0Keep;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLabel, &sipCpp, &a0Keep, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBuddy(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -44, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setBuddy, doc_QLabel_setBuddy);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_buddy, "QLabel.buddy() -> QWidget");

extern "C" {static PyObject *meth_QLabel_buddy(PyObject *, PyObject *);}
static PyObject *meth_QLabel_buddy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->buddy();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_buddy, doc_QLabel_buddy);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_heightForWidth, "QLabel.heightForWidth(int) -> int");

extern "C" {static PyObject *meth_QLabel_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QLabel_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QLabel::heightForWidth(a0) : sipCpp->heightForWidth(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_heightForWidth, doc_QLabel_heightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_openExternalLinks, "QLabel.openExternalLinks() -> bool");

extern "C" {static PyObject *meth_QLabel_openExternalLinks(PyObject *, PyObject *);}
static PyObject *meth_QLabel_openExternalLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->openExternalLinks();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_openExternalLinks, doc_QLabel_openExternalLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setTextInteractionFlags, "QLabel.setTextInteractionFlags(Qt.TextInteractionFlags)");

extern "C" {static PyObject *meth_QLabel_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::TextInteractionFlags* a0;
        int a0State = 0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLabel, &sipCpp, sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextInteractionFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setTextInteractionFlags, doc_QLabel_setTextInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_textInteractionFlags, "QLabel.textInteractionFlags() -> Qt.TextInteractionFlags");

extern "C" {static PyObject *meth_QLabel_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QLabel_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            Qt::TextInteractionFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::TextInteractionFlags(sipCpp->textInteractionFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_textInteractionFlags, doc_QLabel_textInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setOpenExternalLinks, "QLabel.setOpenExternalLinks(bool)");

extern "C" {static PyObject *meth_QLabel_setOpenExternalLinks(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setOpenExternalLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOpenExternalLinks(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setOpenExternalLinks, doc_QLabel_setOpenExternalLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_clear, "QLabel.clear()");

extern "C" {static PyObject *meth_QLabel_clear(PyObject *, PyObject *);}
static PyObject *meth_QLabel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_clear, doc_QLabel_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setMovie, "QLabel.setMovie(QMovie)");

extern "C" {static PyObject *meth_QLabel_setMovie(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setMovie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMovie* a0;
        PyObject *a0Keep;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLabel, &sipCpp, &a0Keep, sipType_QMovie, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMovie(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -45, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setMovie, doc_QLabel_setMovie);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setNum, "QLabel.setNum(float)\n"
    "QLabel.setNum(int)");

extern "C" {static PyObject *meth_QLabel_setNum(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setNum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXd", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNum(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNum(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setNum, doc_QLabel_setNum);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setPicture, "QLabel.setPicture(QPicture)");

extern "C" {static PyObject *meth_QLabel_setPicture(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setPicture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPicture* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLabel, &sipCpp, sipType_QPicture, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPicture(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setPicture, doc_QLabel_setPicture);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setPixmap, "QLabel.setPixmap(QPixmap)");

extern "C" {static PyObject *meth_QLabel_setPixmap(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLabel, &sipCpp, sipType_QPixmap, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPixmap(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setPixmap, doc_QLabel_setPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setText, "QLabel.setText(QString)");

extern "C" {static PyObject *meth_QLabel_setText(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLabel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setText, doc_QLabel_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_event, "QLabel.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QLabel_event(PyObject *, PyObject *);}
static PyObject *meth_QLabel_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QLabel::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_event, doc_QLabel_event);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_paintEvent, "QLabel.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QLabel_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLabel::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_paintEvent, doc_QLabel_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_changeEvent, "QLabel.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QLabel_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLabel::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_changeEvent, doc_QLabel_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_keyPressEvent, "QLabel.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QLabel_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLabel::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_keyPressEvent, doc_QLabel_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_mousePressEvent, "QLabel.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QLabel_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLabel::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_mousePressEvent, doc_QLabel_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_mouseMoveEvent, "QLabel.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QLabel_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLabel::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_mouseMoveEvent, doc_QLabel_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_mouseReleaseEvent, "QLabel.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QLabel_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLabel::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_mouseReleaseEvent, doc_QLabel_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_contextMenuEvent, "QLabel.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QLabel_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLabel::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_contextMenuEvent, doc_QLabel_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_focusInEvent, "QLabel.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QLabel_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLabel::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_focusInEvent, doc_QLabel_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_focusOutEvent, "QLabel.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QLabel_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLabel::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_focusOutEvent, doc_QLabel_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_focusNextPrevChild, "QLabel.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QLabel_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QLabel_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QLabel::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_focusNextPrevChild, doc_QLabel_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setSelection, "QLabel.setSelection(int, int)");

extern "C" {static PyObject *meth_QLabel_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QLabel, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelection(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setSelection, doc_QLabel_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_hasSelectedText, "QLabel.hasSelectedText() -> bool");

extern "C" {static PyObject *meth_QLabel_hasSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QLabel_hasSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasSelectedText();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_hasSelectedText, doc_QLabel_hasSelectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_selectedText, "QLabel.selectedText() -> QString");

extern "C" {static PyObject *meth_QLabel_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QLabel_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->selectedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_selectedText, doc_QLabel_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_selectionStart, "QLabel.selectionStart() -> int");

extern "C" {static PyObject *meth_QLabel_selectionStart(PyObject *, PyObject *);}
static PyObject *meth_QLabel_selectionStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->selectionStart();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_selectionStart, doc_QLabel_selectionStart);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QLabel(void *, const sipTypeDef *);}
static void *cast_QLabel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QLabel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QFrame)->ctd_cast((QFrame *)(QLabel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLabel(void *, int);}
static void release_QLabel(void *sipCppV,int)
{
    QLabel *sipCpp = reinterpret_cast<QLabel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QLabel(sipSimpleWrapper *);}
static void dealloc_QLabel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQLabel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QLabel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QLabel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLabel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLabel *sipCpp = 0;

    {
        QWidget* a0 = 0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQLabel(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QWidget* a1 = 0;
        Qt::WindowFlags a2def = 0;
        Qt::WindowFlags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JHJ1", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner, sipType_Qt_WindowFlags, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQLabel(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_Qt_WindowFlags,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLabel[] = {{143, 255, 1}};


static PyMethodDef methods_QLabel[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QLabel_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_alignment)},
    {SIP_MLNAME_CAST(sipName_buddy), meth_QLabel_buddy, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_buddy)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QLabel_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QLabel_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_clear)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QLabel_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QLabel_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_event)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QLabel_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QLabel_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QLabel_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_hasScaledContents), meth_QLabel_hasScaledContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_hasScaledContents)},
    {SIP_MLNAME_CAST(sipName_hasSelectedText), meth_QLabel_hasSelectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_hasSelectedText)},
    {SIP_MLNAME_CAST(sipName_heightForWidth), meth_QLabel_heightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_heightForWidth)},
    {SIP_MLNAME_CAST(sipName_indent), meth_QLabel_indent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_indent)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QLabel_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_margin), meth_QLabel_margin, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_margin)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QLabel_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QLabel_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QLabel_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QLabel_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_movie), meth_QLabel_movie, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_movie)},
    {SIP_MLNAME_CAST(sipName_openExternalLinks), meth_QLabel_openExternalLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_openExternalLinks)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QLabel_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_paintEvent)},
    {SIP_MLNAME_CAST(sipName_picture), meth_QLabel_picture, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_picture)},
    {SIP_MLNAME_CAST(sipName_pixmap), meth_QLabel_pixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_pixmap)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QLabel_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_selectedText)},
    {SIP_MLNAME_CAST(sipName_selectionStart), meth_QLabel_selectionStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_selectionStart)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QLabel_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setBuddy), meth_QLabel_setBuddy, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setBuddy)},
    {SIP_MLNAME_CAST(sipName_setIndent), meth_QLabel_setIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setIndent)},
    {SIP_MLNAME_CAST(sipName_setMargin), meth_QLabel_setMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setMargin)},
    {SIP_MLNAME_CAST(sipName_setMovie), meth_QLabel_setMovie, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setMovie)},
    {SIP_MLNAME_CAST(sipName_setNum), meth_QLabel_setNum, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setNum)},
    {SIP_MLNAME_CAST(sipName_setOpenExternalLinks), meth_QLabel_setOpenExternalLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setOpenExternalLinks)},
    {SIP_MLNAME_CAST(sipName_setPicture), meth_QLabel_setPicture, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setPicture)},
    {SIP_MLNAME_CAST(sipName_setPixmap), meth_QLabel_setPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setPixmap)},
    {SIP_MLNAME_CAST(sipName_setScaledContents), meth_QLabel_setScaledContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setScaledContents)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QLabel_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setSelection)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QLabel_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setText)},
    {SIP_MLNAME_CAST(sipName_setTextFormat), meth_QLabel_setTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setTextFormat)},
    {SIP_MLNAME_CAST(sipName_setTextInteractionFlags), meth_QLabel_setTextInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setTextInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_setWordWrap), meth_QLabel_setWordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setWordWrap)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QLabel_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_sizeHint)},
    {SIP_MLNAME_CAST(sipName_text), meth_QLabel_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_text)},
    {SIP_MLNAME_CAST(sipName_textFormat), meth_QLabel_textFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_textFormat)},
    {SIP_MLNAME_CAST(sipName_textInteractionFlags), meth_QLabel_textInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_textInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_wordWrap), meth_QLabel_wordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_wordWrap)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QLabel[] = {
    {"linkHovered(QString)", "\1QLabel.linkHovered[QString]", 0, 0},
    {"linkActivated(QString)", "\1QLabel.linkActivated[QString]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QLabel, "\1QLabel(QWidget parent=None, Qt.WindowFlags flags=0)\n"
    "QLabel(QString, QWidget parent=None, Qt.WindowFlags flags=0)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QLabel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QLabel,
        {0}
    },
    {
        sipNameNr_QLabel,
        {0, 0, 1},
        46, methods_QLabel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLabel,
    -1,
    -1,
    supers_QLabel,
    0,
    init_type_QLabel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLabel,
    0,
    0,
    0,
    release_QLabel,
    cast_QLabel,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QLabel::staticMetaObject,
    0,
    signals_QLabel,
};
