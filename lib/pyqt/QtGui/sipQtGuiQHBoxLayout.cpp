/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qboxlayout.sip"
#include <qboxlayout.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 81 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qboxlayout.sip"
#include <qboxlayout.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQHBoxLayout.cpp"


class sipQHBoxLayout : public QHBoxLayout
{
public:
    sipQHBoxLayout();
    sipQHBoxLayout(QWidget*);
    virtual ~sipQHBoxLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QSpacerItem* spacerItem();
    QWidget* widget();
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void childEvent(QChildEvent*);
    QLayout* layout();
    bool isEmpty() const;
    int indexOf(QWidget*) const;
    QRect geometry() const;
    void setGeometry(const QRect&);
    int count() const;
    QLayoutItem* takeAt(int);
    QLayoutItem* itemAt(int) const;
    void invalidate();
    Qt::Orientations expandingDirections() const;
    int minimumHeightForWidth(int) const;
    int heightForWidth(int) const;
    bool hasHeightForWidth() const;
    QSize maximumSize() const;
    QSize minimumSize() const;
    QSize sizeHint() const;
    void addItem(QLayoutItem*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHBoxLayout(const sipQHBoxLayout &);
    sipQHBoxLayout &operator = (const sipQHBoxLayout &);

    char sipPyMethods[26];
};

sipQHBoxLayout::sipQHBoxLayout(): QHBoxLayout(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHBoxLayout::sipQHBoxLayout(QWidget*a0): QHBoxLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHBoxLayout::~sipQHBoxLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQHBoxLayout::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QHBoxLayout);
}

int sipQHBoxLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QHBoxLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QHBoxLayout,_c,_id,_a);

    return _id;
}

void *sipQHBoxLayout::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QHBoxLayout, _clname)) ? this : QHBoxLayout::qt_metacast(_clname);
}

QSpacerItem* sipQHBoxLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_spacerItem);

    if (!sipMeth)
        return QHBoxLayout::spacerItem();

    extern QSpacerItem* sipVH_QtGui_156(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_156(sipGILState, 0, sipPySelf, sipMeth);
}

QWidget* sipQHBoxLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_widget);

    if (!sipMeth)
        return QHBoxLayout::widget();

    extern QWidget* sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_106(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQHBoxLayout::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QHBoxLayout::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QHBoxLayout::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QHBoxLayout::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QHBoxLayout::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQHBoxLayout::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QHBoxLayout::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQHBoxLayout::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QHBoxLayout::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QHBoxLayout::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QLayout* sipQHBoxLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_layout);

    if (!sipMeth)
        return QHBoxLayout::layout();

    extern QLayout* sipVH_QtGui_157(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_157(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQHBoxLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_isEmpty);

    if (!sipMeth)
        return QHBoxLayout::isEmpty();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQHBoxLayout::indexOf(QWidget*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_indexOf);

    if (!sipMeth)
        return QHBoxLayout::indexOf(a0);

    extern int sipVH_QtGui_158(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    return sipVH_QtGui_158(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QRect sipQHBoxLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_geometry);

    if (!sipMeth)
        return QHBoxLayout::geometry();

    extern QRect sipVH_QtGui_154(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_154(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQHBoxLayout::setGeometry(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
        QHBoxLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtGui_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&);

    sipVH_QtGui_102(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQHBoxLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_count);

    if (!sipMeth)
        return QHBoxLayout::count();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

QLayoutItem* sipQHBoxLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_takeAt);

    if (!sipMeth)
        return QHBoxLayout::takeAt(a0);

    extern QLayoutItem* sipVH_QtGui_103(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_103(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QLayoutItem* sipQHBoxLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_itemAt);

    if (!sipMeth)
        return QHBoxLayout::itemAt(a0);

    extern QLayoutItem* sipVH_QtGui_104(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_104(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_invalidate);

    if (!sipMeth)
    {
        QHBoxLayout::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

Qt::Orientations sipQHBoxLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_expandingDirections);

    if (!sipMeth)
        return QHBoxLayout::expandingDirections();

    extern Qt::Orientations sipVH_QtGui_155(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_155(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQHBoxLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!sipMeth)
        return QHBoxLayout::minimumHeightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQHBoxLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QHBoxLayout::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQHBoxLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QHBoxLayout::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQHBoxLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_maximumSize);

    if (!sipMeth)
        return QHBoxLayout::maximumSize();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQHBoxLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_minimumSize);

    if (!sipMeth)
        return QHBoxLayout::minimumSize();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQHBoxLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QHBoxLayout::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQHBoxLayout::addItem(QLayoutItem*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_addItem);

    if (!sipMeth)
    {
        QHBoxLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtGui_105(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QLayoutItem*);

    sipVH_QtGui_105(sipGILState, 0, sipPySelf, sipMeth, a0);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QHBoxLayout(void *, const sipTypeDef *);}
static void *cast_QHBoxLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QHBoxLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QBoxLayout)->ctd_cast((QBoxLayout *)(QHBoxLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHBoxLayout(void *, int);}
static void release_QHBoxLayout(void *sipCppV,int)
{
    QHBoxLayout *sipCpp = reinterpret_cast<QHBoxLayout *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QHBoxLayout(sipSimpleWrapper *);}
static void dealloc_QHBoxLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQHBoxLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QHBoxLayout(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QHBoxLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHBoxLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHBoxLayout *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHBoxLayout();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QWidget* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHBoxLayout(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHBoxLayout[] = {{44, 255, 1}};

PyDoc_STRVAR(doc_QHBoxLayout, "\1QHBoxLayout()\n"
    "QHBoxLayout(QWidget)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QHBoxLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QHBoxLayout,
        {0}
    },
    {
        sipNameNr_QHBoxLayout,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHBoxLayout,
    -1,
    -1,
    supers_QHBoxLayout,
    0,
    init_type_QHBoxLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHBoxLayout,
    0,
    0,
    0,
    release_QHBoxLayout,
    cast_QHBoxLayout,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QHBoxLayout::staticMetaObject,
    0,
    0
};
