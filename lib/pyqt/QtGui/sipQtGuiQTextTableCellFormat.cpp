/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 737 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 336 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 69 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 594 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 611 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 704 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 550 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 487 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 144 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTableCellFormat.cpp"


PyDoc_STRVAR(doc_QTextTableCellFormat_isValid, "QTextTableCellFormat.isValid() -> bool");

extern "C" {static PyObject *meth_QTextTableCellFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCellFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_isValid, doc_QTextTableCellFormat_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_setTopPadding, "QTextTableCellFormat.setTopPadding(float)");

extern "C" {static PyObject *meth_QTextTableCellFormat_setTopPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setTopPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableCellFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTopPadding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_setTopPadding, doc_QTextTableCellFormat_setTopPadding);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_topPadding, "QTextTableCellFormat.topPadding() -> float");

extern "C" {static PyObject *meth_QTextTableCellFormat_topPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_topPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCellFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->topPadding();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_topPadding, doc_QTextTableCellFormat_topPadding);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_setBottomPadding, "QTextTableCellFormat.setBottomPadding(float)");

extern "C" {static PyObject *meth_QTextTableCellFormat_setBottomPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setBottomPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableCellFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBottomPadding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_setBottomPadding, doc_QTextTableCellFormat_setBottomPadding);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_bottomPadding, "QTextTableCellFormat.bottomPadding() -> float");

extern "C" {static PyObject *meth_QTextTableCellFormat_bottomPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_bottomPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCellFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bottomPadding();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_bottomPadding, doc_QTextTableCellFormat_bottomPadding);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_setLeftPadding, "QTextTableCellFormat.setLeftPadding(float)");

extern "C" {static PyObject *meth_QTextTableCellFormat_setLeftPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setLeftPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableCellFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLeftPadding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_setLeftPadding, doc_QTextTableCellFormat_setLeftPadding);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_leftPadding, "QTextTableCellFormat.leftPadding() -> float");

extern "C" {static PyObject *meth_QTextTableCellFormat_leftPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_leftPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCellFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->leftPadding();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_leftPadding, doc_QTextTableCellFormat_leftPadding);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_setRightPadding, "QTextTableCellFormat.setRightPadding(float)");

extern "C" {static PyObject *meth_QTextTableCellFormat_setRightPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setRightPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableCellFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRightPadding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_setRightPadding, doc_QTextTableCellFormat_setRightPadding);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_rightPadding, "QTextTableCellFormat.rightPadding() -> float");

extern "C" {static PyObject *meth_QTextTableCellFormat_rightPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_rightPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCellFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rightPadding();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_rightPadding, doc_QTextTableCellFormat_rightPadding);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_setPadding, "QTextTableCellFormat.setPadding(float)");

extern "C" {static PyObject *meth_QTextTableCellFormat_setPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableCellFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPadding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_setPadding, doc_QTextTableCellFormat_setPadding);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextTableCellFormat(void *, const sipTypeDef *);}
static void *cast_QTextTableCellFormat(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextTableCellFormat)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextCharFormat)->ctd_cast((QTextCharFormat *)(QTextTableCellFormat *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextTableCellFormat(void *, int);}
static void release_QTextTableCellFormat(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextTableCellFormat *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextTableCellFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextTableCellFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextTableCellFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextTableCellFormat *>(sipSrc);
}


extern "C" {static void *array_QTextTableCellFormat(SIP_SSIZE_T);}
static void *array_QTextTableCellFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextTableCellFormat[sipNrElem];
}


extern "C" {static void *copy_QTextTableCellFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextTableCellFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextTableCellFormat(reinterpret_cast<const QTextTableCellFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextTableCellFormat(sipSimpleWrapper *);}
static void dealloc_QTextTableCellFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextTableCellFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextTableCellFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextTableCellFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextTableCellFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextTableCellFormat();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QTextTableCellFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextTableCellFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextTableCellFormat(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextTableCellFormat[] = {{652, 255, 1}};


static PyMethodDef methods_QTextTableCellFormat[] = {
    {SIP_MLNAME_CAST(sipName_bottomPadding), meth_QTextTableCellFormat_bottomPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_bottomPadding)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextTableCellFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_leftPadding), meth_QTextTableCellFormat_leftPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_leftPadding)},
    {SIP_MLNAME_CAST(sipName_rightPadding), meth_QTextTableCellFormat_rightPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_rightPadding)},
    {SIP_MLNAME_CAST(sipName_setBottomPadding), meth_QTextTableCellFormat_setBottomPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_setBottomPadding)},
    {SIP_MLNAME_CAST(sipName_setLeftPadding), meth_QTextTableCellFormat_setLeftPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_setLeftPadding)},
    {SIP_MLNAME_CAST(sipName_setPadding), meth_QTextTableCellFormat_setPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_setPadding)},
    {SIP_MLNAME_CAST(sipName_setRightPadding), meth_QTextTableCellFormat_setRightPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_setRightPadding)},
    {SIP_MLNAME_CAST(sipName_setTopPadding), meth_QTextTableCellFormat_setTopPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_setTopPadding)},
    {SIP_MLNAME_CAST(sipName_topPadding), meth_QTextTableCellFormat_topPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_topPadding)}
};

PyDoc_STRVAR(doc_QTextTableCellFormat, "\1QTextTableCellFormat()\n"
    "QTextTableCellFormat(QTextTableCellFormat)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextTableCellFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextTableCellFormat,
        {0}
    },
    {
        sipNameNr_QTextTableCellFormat,
        {0, 0, 1},
        10, methods_QTextTableCellFormat,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextTableCellFormat,
    -1,
    -1,
    supers_QTextTableCellFormat,
    0,
    init_type_QTextTableCellFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextTableCellFormat,
    assign_QTextTableCellFormat,
    array_QTextTableCellFormat,
    copy_QTextTableCellFormat,
    release_QTextTableCellFormat,
    cast_QTextTableCellFormat,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
