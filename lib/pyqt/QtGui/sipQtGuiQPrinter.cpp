/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPrinter.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qprinterinfo.sip"
#include <qprinterinfo.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPrinter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qprintengine.sip"
#include <qprintengine.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPrinter.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPrinter.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPrinter.cpp"
#line 112 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPrinter.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPrinter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPrinter.cpp"
#line 168 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPrinter.cpp"
#line 628 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPrinter.cpp"


class sipQPrinter : public QPrinter
{
public:
    sipQPrinter(QPrinter::PrinterMode);
    sipQPrinter(const QPrinterInfo&,QPrinter::PrinterMode);
    virtual ~sipQPrinter();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int metric(QPaintDevice::PaintDeviceMetric) const;
    QPaintEngine* paintEngine() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPrinter(const sipQPrinter &);
    sipQPrinter &operator = (const sipQPrinter &);

    char sipPyMethods[2];
};

sipQPrinter::sipQPrinter(QPrinter::PrinterMode a0): QPrinter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPrinter::sipQPrinter(const QPrinterInfo& a0,QPrinter::PrinterMode a1): QPrinter(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPrinter::~sipQPrinter()
{
    sipCommonDtor(sipPySelf);
}

int sipQPrinter::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QPrinter::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQPrinter::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QPrinter::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QPrinter_setPrinterName, "QPrinter.setPrinterName(QString)");

extern "C" {static PyObject *meth_QPrinter_setPrinterName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrinterName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrinterName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrinterName, doc_QPrinter_setPrinterName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printerName, "QPrinter.printerName() -> QString");

extern "C" {static PyObject *meth_QPrinter_printerName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->printerName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printerName, doc_QPrinter_printerName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setOutputFileName, "QPrinter.setOutputFileName(QString)");

extern "C" {static PyObject *meth_QPrinter_setOutputFileName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setOutputFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOutputFileName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setOutputFileName, doc_QPrinter_setOutputFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_outputFileName, "QPrinter.outputFileName() -> QString");

extern "C" {static PyObject *meth_QPrinter_outputFileName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_outputFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->outputFileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_outputFileName, doc_QPrinter_outputFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPrintProgram, "QPrinter.setPrintProgram(QString)");

extern "C" {static PyObject *meth_QPrinter_setPrintProgram(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrintProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrintProgram(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrintProgram, doc_QPrinter_setPrintProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printProgram, "QPrinter.printProgram() -> QString");

extern "C" {static PyObject *meth_QPrinter_printProgram(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->printProgram());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printProgram, doc_QPrinter_printProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setDocName, "QPrinter.setDocName(QString)");

extern "C" {static PyObject *meth_QPrinter_setDocName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setDocName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setDocName, doc_QPrinter_setDocName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_docName, "QPrinter.docName() -> QString");

extern "C" {static PyObject *meth_QPrinter_docName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_docName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->docName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_docName, doc_QPrinter_docName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setCreator, "QPrinter.setCreator(QString)");

extern "C" {static PyObject *meth_QPrinter_setCreator(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setCreator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCreator(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setCreator, doc_QPrinter_setCreator);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_creator, "QPrinter.creator() -> QString");

extern "C" {static PyObject *meth_QPrinter_creator(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_creator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->creator());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_creator, doc_QPrinter_creator);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setOrientation, "QPrinter.setOrientation(QPrinter.Orientation)");

extern "C" {static PyObject *meth_QPrinter_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::Orientation a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Orientation, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOrientation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setOrientation, doc_QPrinter_setOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_orientation, "QPrinter.orientation() -> QPrinter.Orientation");

extern "C" {static PyObject *meth_QPrinter_orientation(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::Orientation sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->orientation();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_orientation, doc_QPrinter_orientation);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPageSize, "QPrinter.setPageSize(QPrinter.PageSize)");

extern "C" {static PyObject *meth_QPrinter_setPageSize(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PageSize a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PageSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPageSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPageSize, doc_QPrinter_setPageSize);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_pageSize, "QPrinter.pageSize() -> QPrinter.PageSize");

extern "C" {static PyObject *meth_QPrinter_pageSize(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_pageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PageSize sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageSize();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PageSize);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_pageSize, doc_QPrinter_pageSize);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPageOrder, "QPrinter.setPageOrder(QPrinter.PageOrder)");

extern "C" {static PyObject *meth_QPrinter_setPageOrder(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPageOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PageOrder a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PageOrder, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPageOrder(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPageOrder, doc_QPrinter_setPageOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_pageOrder, "QPrinter.pageOrder() -> QPrinter.PageOrder");

extern "C" {static PyObject *meth_QPrinter_pageOrder(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_pageOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PageOrder sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageOrder();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PageOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_pageOrder, doc_QPrinter_pageOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setResolution, "QPrinter.setResolution(int)");

extern "C" {static PyObject *meth_QPrinter_setResolution(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResolution(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setResolution, doc_QPrinter_setResolution);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_resolution, "QPrinter.resolution() -> int");

extern "C" {static PyObject *meth_QPrinter_resolution(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_resolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resolution();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_resolution, doc_QPrinter_resolution);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setColorMode, "QPrinter.setColorMode(QPrinter.ColorMode)");

extern "C" {static PyObject *meth_QPrinter_setColorMode(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setColorMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::ColorMode a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_ColorMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColorMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setColorMode, doc_QPrinter_setColorMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_colorMode, "QPrinter.colorMode() -> QPrinter.ColorMode");

extern "C" {static PyObject *meth_QPrinter_colorMode(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_colorMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::ColorMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->colorMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_ColorMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_colorMode, doc_QPrinter_colorMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setCollateCopies, "QPrinter.setCollateCopies(bool)");

extern "C" {static PyObject *meth_QPrinter_setCollateCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setCollateCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCollateCopies(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setCollateCopies, doc_QPrinter_setCollateCopies);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_collateCopies, "QPrinter.collateCopies() -> bool");

extern "C" {static PyObject *meth_QPrinter_collateCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_collateCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->collateCopies();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_collateCopies, doc_QPrinter_collateCopies);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setFullPage, "QPrinter.setFullPage(bool)");

extern "C" {static PyObject *meth_QPrinter_setFullPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setFullPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFullPage(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setFullPage, doc_QPrinter_setFullPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_fullPage, "QPrinter.fullPage() -> bool");

extern "C" {static PyObject *meth_QPrinter_fullPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_fullPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fullPage();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_fullPage, doc_QPrinter_fullPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setNumCopies, "QPrinter.setNumCopies(int)");

extern "C" {static PyObject *meth_QPrinter_setNumCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setNumCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNumCopies(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setNumCopies, doc_QPrinter_setNumCopies);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_numCopies, "QPrinter.numCopies() -> int");

extern "C" {static PyObject *meth_QPrinter_numCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_numCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numCopies();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_numCopies, doc_QPrinter_numCopies);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPaperSource, "QPrinter.setPaperSource(QPrinter.PaperSource)");

extern "C" {static PyObject *meth_QPrinter_setPaperSource(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPaperSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PaperSource a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PaperSource, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPaperSource(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPaperSource, doc_QPrinter_setPaperSource);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_paperSource, "QPrinter.paperSource() -> QPrinter.PaperSource");

extern "C" {static PyObject *meth_QPrinter_paperSource(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paperSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PaperSource sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->paperSource();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PaperSource);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paperSource, doc_QPrinter_paperSource);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_supportedResolutions, "QPrinter.supportedResolutions() -> list-of-int");

extern "C" {static PyObject *meth_QPrinter_supportedResolutions(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_supportedResolutions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QList<int>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<int>(sipCpp->supportedResolutions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_supportedResolutions, doc_QPrinter_supportedResolutions);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_paperRect, "QPrinter.paperRect() -> QRect\n"
    "QPrinter.paperRect(QPrinter.Unit) -> QRectF");

extern "C" {static PyObject *meth_QPrinter_paperRect(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paperRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->paperRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        QPrinter::Unit a0;
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a0))
        {
            QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->paperRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paperRect, doc_QPrinter_paperRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_pageRect, "QPrinter.pageRect() -> QRect\n"
    "QPrinter.pageRect(QPrinter.Unit) -> QRectF");

extern "C" {static PyObject *meth_QPrinter_pageRect(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_pageRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->pageRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        QPrinter::Unit a0;
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a0))
        {
            QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->pageRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_pageRect, doc_QPrinter_pageRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printerSelectionOption, "QPrinter.printerSelectionOption() -> QString");

extern "C" {static PyObject *meth_QPrinter_printerSelectionOption(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printerSelectionOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->printerSelectionOption());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printerSelectionOption, doc_QPrinter_printerSelectionOption);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPrinterSelectionOption, "QPrinter.setPrinterSelectionOption(QString)");

extern "C" {static PyObject *meth_QPrinter_setPrinterSelectionOption(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrinterSelectionOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrinterSelectionOption(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrinterSelectionOption, doc_QPrinter_setPrinterSelectionOption);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_newPage, "QPrinter.newPage() -> bool");

extern "C" {static PyObject *meth_QPrinter_newPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_newPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->newPage();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_newPage, doc_QPrinter_newPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_abort, "QPrinter.abort() -> bool");

extern "C" {static PyObject *meth_QPrinter_abort(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->abort();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_abort, doc_QPrinter_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printerState, "QPrinter.printerState() -> QPrinter.PrinterState");

extern "C" {static PyObject *meth_QPrinter_printerState(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printerState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PrinterState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->printerState();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PrinterState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printerState, doc_QPrinter_printerState);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_paintEngine, "QPrinter.paintEngine() -> QPaintEngine");

extern "C" {static PyObject *meth_QPrinter_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPaintEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPrinter::paintEngine() : sipCpp->paintEngine());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paintEngine, doc_QPrinter_paintEngine);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setOutputFormat, "QPrinter.setOutputFormat(QPrinter.OutputFormat)");

extern "C" {static PyObject *meth_QPrinter_setOutputFormat(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setOutputFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::OutputFormat a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_OutputFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOutputFormat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setOutputFormat, doc_QPrinter_setOutputFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_outputFormat, "QPrinter.outputFormat() -> QPrinter.OutputFormat");

extern "C" {static PyObject *meth_QPrinter_outputFormat(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_outputFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::OutputFormat sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->outputFormat();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_OutputFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_outputFormat, doc_QPrinter_outputFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setFontEmbeddingEnabled, "QPrinter.setFontEmbeddingEnabled(bool)");

extern "C" {static PyObject *meth_QPrinter_setFontEmbeddingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setFontEmbeddingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontEmbeddingEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setFontEmbeddingEnabled, doc_QPrinter_setFontEmbeddingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_fontEmbeddingEnabled, "QPrinter.fontEmbeddingEnabled() -> bool");

extern "C" {static PyObject *meth_QPrinter_fontEmbeddingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_fontEmbeddingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontEmbeddingEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_fontEmbeddingEnabled, doc_QPrinter_fontEmbeddingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printEngine, "QPrinter.printEngine() -> QPrintEngine");

extern "C" {static PyObject *meth_QPrinter_printEngine(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrintEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->printEngine();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPrintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printEngine, doc_QPrinter_printEngine);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setFromTo, "QPrinter.setFromTo(int, int)");

extern "C" {static PyObject *meth_QPrinter_setFromTo(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setFromTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPrinter, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFromTo(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setFromTo, doc_QPrinter_setFromTo);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_fromPage, "QPrinter.fromPage() -> int");

extern "C" {static PyObject *meth_QPrinter_fromPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_fromPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fromPage();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_fromPage, doc_QPrinter_fromPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_toPage, "QPrinter.toPage() -> int");

extern "C" {static PyObject *meth_QPrinter_toPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_toPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toPage();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_toPage, doc_QPrinter_toPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPrintRange, "QPrinter.setPrintRange(QPrinter.PrintRange)");

extern "C" {static PyObject *meth_QPrinter_setPrintRange(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrintRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PrintRange a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PrintRange, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrintRange(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrintRange, doc_QPrinter_setPrintRange);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printRange, "QPrinter.printRange() -> QPrinter.PrintRange");

extern "C" {static PyObject *meth_QPrinter_printRange(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PrintRange sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->printRange();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PrintRange);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printRange, doc_QPrinter_printRange);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setDoubleSidedPrinting, "QPrinter.setDoubleSidedPrinting(bool)");

extern "C" {static PyObject *meth_QPrinter_setDoubleSidedPrinting(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setDoubleSidedPrinting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDoubleSidedPrinting(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setDoubleSidedPrinting, doc_QPrinter_setDoubleSidedPrinting);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_doubleSidedPrinting, "QPrinter.doubleSidedPrinting() -> bool");

extern "C" {static PyObject *meth_QPrinter_doubleSidedPrinting(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_doubleSidedPrinting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->doubleSidedPrinting();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_doubleSidedPrinting, doc_QPrinter_doubleSidedPrinting);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_isValid, "QPrinter.isValid() -> bool");

extern "C" {static PyObject *meth_QPrinter_isValid(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_isValid, doc_QPrinter_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPaperSize, "QPrinter.setPaperSize(QPrinter.PageSize)\n"
    "QPrinter.setPaperSize(QSizeF, QPrinter.Unit)");

extern "C" {static PyObject *meth_QPrinter_setPaperSize(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPaperSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PageSize a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PageSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPaperSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QSizeF* a0;
        QPrinter::Unit a1;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QSizeF, &a0, sipType_QPrinter_Unit, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPaperSize(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPaperSize, doc_QPrinter_setPaperSize);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_paperSize, "QPrinter.paperSize() -> QPrinter.PageSize\n"
    "QPrinter.paperSize(QPrinter.Unit) -> QSizeF");

extern "C" {static PyObject *meth_QPrinter_paperSize(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paperSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PageSize sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->paperSize();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PageSize);
        }
    }

    {
        QPrinter::Unit a0;
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a0))
        {
            QSizeF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF(sipCpp->paperSize(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paperSize, doc_QPrinter_paperSize);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setDuplex, "QPrinter.setDuplex(QPrinter.DuplexMode)");

extern "C" {static PyObject *meth_QPrinter_setDuplex(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setDuplex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::DuplexMode a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_DuplexMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDuplex(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setDuplex, doc_QPrinter_setDuplex);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_duplex, "QPrinter.duplex() -> QPrinter.DuplexMode");

extern "C" {static PyObject *meth_QPrinter_duplex(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_duplex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::DuplexMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->duplex();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_DuplexMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_duplex, doc_QPrinter_duplex);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPageMargins, "QPrinter.setPageMargins(float, float, float, float, QPrinter.Unit)");

extern "C" {static PyObject *meth_QPrinter_setPageMargins(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPageMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QPrinter::Unit a4;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BddddE", &sipSelf, sipType_QPrinter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPrinter_Unit, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPageMargins(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPageMargins, doc_QPrinter_setPageMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_getPageMargins, "QPrinter.getPageMargins(QPrinter.Unit) -> (float, float, float, float)");

extern "C" {static PyObject *meth_QPrinter_getPageMargins(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_getPageMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QPrinter::Unit a4;
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getPageMargins(&a0,&a1,&a2,&a3,a4);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_getPageMargins, doc_QPrinter_getPageMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_actualNumCopies, "QPrinter.actualNumCopies() -> int");

extern "C" {static PyObject *meth_QPrinter_actualNumCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_actualNumCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->actualNumCopies();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_actualNumCopies, doc_QPrinter_actualNumCopies);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_metric, "QPrinter.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QPrinter_metric(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPrinter::metric(a0) : sipCpp->metric(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_metric, doc_QPrinter_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setEngines, "QPrinter.setEngines(QPrintEngine, QPaintEngine)");

extern "C" {static PyObject *meth_QPrinter_setEngines(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setEngines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintEngine* a0;
        PyObject *a0Keep;
        QPaintEngine* a1;
        PyObject *a1Keep;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p@J8@J8", &sipSelf, sipType_QPrinter, &sipCpp, &a0Keep, sipType_QPrintEngine, &a0, &a1Keep, sipType_QPaintEngine, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEngines(a0,a1);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -53, a0Keep);

            sipKeepReference(sipSelf, -54, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setEngines, doc_QPrinter_setEngines);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setCopyCount, "QPrinter.setCopyCount(int)");

extern "C" {static PyObject *meth_QPrinter_setCopyCount(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setCopyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCopyCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setCopyCount, doc_QPrinter_setCopyCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_copyCount, "QPrinter.copyCount() -> int");

extern "C" {static PyObject *meth_QPrinter_copyCount(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_copyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->copyCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_copyCount, doc_QPrinter_copyCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_supportsMultipleCopies, "QPrinter.supportsMultipleCopies() -> bool");

extern "C" {static PyObject *meth_QPrinter_supportsMultipleCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_supportsMultipleCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsMultipleCopies();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_supportsMultipleCopies, doc_QPrinter_supportsMultipleCopies);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPrinter(void *, const sipTypeDef *);}
static void *cast_QPrinter(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPrinter)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPaintDevice)->ctd_cast((QPaintDevice *)(QPrinter *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPrinter(void *, int);}
static void release_QPrinter(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPrinter *>(sipCppV);
    else
        delete reinterpret_cast<QPrinter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPrinter(sipSimpleWrapper *);}
static void dealloc_QPrinter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPrinter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPrinter(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPrinter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPrinter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPrinter *sipCpp = 0;

    {
        QPrinter::PrinterMode a0 = QPrinter::ScreenResolution;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_QPrinter_PrinterMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPrinter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPrinterInfo* a0;
        QPrinter::PrinterMode a1 = QPrinter::ScreenResolution;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|E", sipType_QPrinterInfo, &a0, sipType_QPrinter_PrinterMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPrinter(*a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPrinter[] = {{362, 255, 1}};


static PyMethodDef methods_QPrinter[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QPrinter_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_abort)},
    {SIP_MLNAME_CAST(sipName_actualNumCopies), meth_QPrinter_actualNumCopies, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_actualNumCopies)},
    {SIP_MLNAME_CAST(sipName_collateCopies), meth_QPrinter_collateCopies, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_collateCopies)},
    {SIP_MLNAME_CAST(sipName_colorMode), meth_QPrinter_colorMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_colorMode)},
    {SIP_MLNAME_CAST(sipName_copyCount), meth_QPrinter_copyCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_copyCount)},
    {SIP_MLNAME_CAST(sipName_creator), meth_QPrinter_creator, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_creator)},
    {SIP_MLNAME_CAST(sipName_docName), meth_QPrinter_docName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_docName)},
    {SIP_MLNAME_CAST(sipName_doubleSidedPrinting), meth_QPrinter_doubleSidedPrinting, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_doubleSidedPrinting)},
    {SIP_MLNAME_CAST(sipName_duplex), meth_QPrinter_duplex, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_duplex)},
    {SIP_MLNAME_CAST(sipName_fontEmbeddingEnabled), meth_QPrinter_fontEmbeddingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_fontEmbeddingEnabled)},
    {SIP_MLNAME_CAST(sipName_fromPage), meth_QPrinter_fromPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_fromPage)},
    {SIP_MLNAME_CAST(sipName_fullPage), meth_QPrinter_fullPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_fullPage)},
    {SIP_MLNAME_CAST(sipName_getPageMargins), meth_QPrinter_getPageMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_getPageMargins)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QPrinter_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_isValid)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QPrinter_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_metric)},
    {SIP_MLNAME_CAST(sipName_newPage), meth_QPrinter_newPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_newPage)},
    {SIP_MLNAME_CAST(sipName_numCopies), meth_QPrinter_numCopies, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_numCopies)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QPrinter_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_orientation)},
    {SIP_MLNAME_CAST(sipName_outputFileName), meth_QPrinter_outputFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_outputFileName)},
    {SIP_MLNAME_CAST(sipName_outputFormat), meth_QPrinter_outputFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_outputFormat)},
    {SIP_MLNAME_CAST(sipName_pageOrder), meth_QPrinter_pageOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_pageOrder)},
    {SIP_MLNAME_CAST(sipName_pageRect), meth_QPrinter_pageRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_pageRect)},
    {SIP_MLNAME_CAST(sipName_pageSize), meth_QPrinter_pageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_pageSize)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPrinter_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_paintEngine)},
    {SIP_MLNAME_CAST(sipName_paperRect), meth_QPrinter_paperRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_paperRect)},
    {SIP_MLNAME_CAST(sipName_paperSize), meth_QPrinter_paperSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_paperSize)},
    {SIP_MLNAME_CAST(sipName_paperSource), meth_QPrinter_paperSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_paperSource)},
    {SIP_MLNAME_CAST(sipName_printEngine), meth_QPrinter_printEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printEngine)},
    {SIP_MLNAME_CAST(sipName_printProgram), meth_QPrinter_printProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printProgram)},
    {SIP_MLNAME_CAST(sipName_printRange), meth_QPrinter_printRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printRange)},
    {SIP_MLNAME_CAST(sipName_printerName), meth_QPrinter_printerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printerName)},
    {SIP_MLNAME_CAST(sipName_printerSelectionOption), meth_QPrinter_printerSelectionOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printerSelectionOption)},
    {SIP_MLNAME_CAST(sipName_printerState), meth_QPrinter_printerState, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printerState)},
    {SIP_MLNAME_CAST(sipName_resolution), meth_QPrinter_resolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_resolution)},
    {SIP_MLNAME_CAST(sipName_setCollateCopies), meth_QPrinter_setCollateCopies, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setCollateCopies)},
    {SIP_MLNAME_CAST(sipName_setColorMode), meth_QPrinter_setColorMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setColorMode)},
    {SIP_MLNAME_CAST(sipName_setCopyCount), meth_QPrinter_setCopyCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setCopyCount)},
    {SIP_MLNAME_CAST(sipName_setCreator), meth_QPrinter_setCreator, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setCreator)},
    {SIP_MLNAME_CAST(sipName_setDocName), meth_QPrinter_setDocName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setDocName)},
    {SIP_MLNAME_CAST(sipName_setDoubleSidedPrinting), meth_QPrinter_setDoubleSidedPrinting, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setDoubleSidedPrinting)},
    {SIP_MLNAME_CAST(sipName_setDuplex), meth_QPrinter_setDuplex, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setDuplex)},
    {SIP_MLNAME_CAST(sipName_setEngines), meth_QPrinter_setEngines, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setEngines)},
    {SIP_MLNAME_CAST(sipName_setFontEmbeddingEnabled), meth_QPrinter_setFontEmbeddingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setFontEmbeddingEnabled)},
    {SIP_MLNAME_CAST(sipName_setFromTo), meth_QPrinter_setFromTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setFromTo)},
    {SIP_MLNAME_CAST(sipName_setFullPage), meth_QPrinter_setFullPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setFullPage)},
    {SIP_MLNAME_CAST(sipName_setNumCopies), meth_QPrinter_setNumCopies, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setNumCopies)},
    {SIP_MLNAME_CAST(sipName_setOrientation), meth_QPrinter_setOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setOrientation)},
    {SIP_MLNAME_CAST(sipName_setOutputFileName), meth_QPrinter_setOutputFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setOutputFileName)},
    {SIP_MLNAME_CAST(sipName_setOutputFormat), meth_QPrinter_setOutputFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setOutputFormat)},
    {SIP_MLNAME_CAST(sipName_setPageMargins), meth_QPrinter_setPageMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPageMargins)},
    {SIP_MLNAME_CAST(sipName_setPageOrder), meth_QPrinter_setPageOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPageOrder)},
    {SIP_MLNAME_CAST(sipName_setPageSize), meth_QPrinter_setPageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPageSize)},
    {SIP_MLNAME_CAST(sipName_setPaperSize), meth_QPrinter_setPaperSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPaperSize)},
    {SIP_MLNAME_CAST(sipName_setPaperSource), meth_QPrinter_setPaperSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPaperSource)},
    {SIP_MLNAME_CAST(sipName_setPrintProgram), meth_QPrinter_setPrintProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPrintProgram)},
    {SIP_MLNAME_CAST(sipName_setPrintRange), meth_QPrinter_setPrintRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPrintRange)},
    {SIP_MLNAME_CAST(sipName_setPrinterName), meth_QPrinter_setPrinterName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPrinterName)},
    {SIP_MLNAME_CAST(sipName_setPrinterSelectionOption), meth_QPrinter_setPrinterSelectionOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPrinterSelectionOption)},
    {SIP_MLNAME_CAST(sipName_setResolution), meth_QPrinter_setResolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setResolution)},
    {SIP_MLNAME_CAST(sipName_supportedResolutions), meth_QPrinter_supportedResolutions, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_supportedResolutions)},
    {SIP_MLNAME_CAST(sipName_supportsMultipleCopies), meth_QPrinter_supportsMultipleCopies, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_supportsMultipleCopies)},
    {SIP_MLNAME_CAST(sipName_toPage), meth_QPrinter_toPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_toPage)}
};

static sipEnumMemberDef enummembers_QPrinter[] = {
    {sipName_A0, static_cast<int>(QPrinter::A0), 416},
    {sipName_A1, static_cast<int>(QPrinter::A1), 416},
    {sipName_A2, static_cast<int>(QPrinter::A2), 416},
    {sipName_A3, static_cast<int>(QPrinter::A3), 416},
    {sipName_A4, static_cast<int>(QPrinter::A4), 416},
    {sipName_A5, static_cast<int>(QPrinter::A5), 416},
    {sipName_A6, static_cast<int>(QPrinter::A6), 416},
    {sipName_A7, static_cast<int>(QPrinter::A7), 416},
    {sipName_A8, static_cast<int>(QPrinter::A8), 416},
    {sipName_A9, static_cast<int>(QPrinter::A9), 416},
    {sipName_Aborted, static_cast<int>(QPrinter::Aborted), 420},
    {sipName_Active, static_cast<int>(QPrinter::Active), 420},
    {sipName_AllPages, static_cast<int>(QPrinter::AllPages), 418},
    {sipName_Auto, static_cast<int>(QPrinter::Auto), 417},
    {sipName_B0, static_cast<int>(QPrinter::B0), 416},
    {sipName_B1, static_cast<int>(QPrinter::B1), 416},
    {sipName_B10, static_cast<int>(QPrinter::B10), 416},
    {sipName_B2, static_cast<int>(QPrinter::B2), 416},
    {sipName_B3, static_cast<int>(QPrinter::B3), 416},
    {sipName_B4, static_cast<int>(QPrinter::B4), 416},
    {sipName_B5, static_cast<int>(QPrinter::B5), 416},
    {sipName_B6, static_cast<int>(QPrinter::B6), 416},
    {sipName_B7, static_cast<int>(QPrinter::B7), 416},
    {sipName_B8, static_cast<int>(QPrinter::B8), 416},
    {sipName_B9, static_cast<int>(QPrinter::B9), 416},
    {sipName_C5E, static_cast<int>(QPrinter::C5E), 416},
    {sipName_Cassette, static_cast<int>(QPrinter::Cassette), 417},
    {sipName_Cicero, static_cast<int>(QPrinter::Cicero), 421},
    {sipName_Color, static_cast<int>(QPrinter::Color), 411},
    {sipName_Comm10E, static_cast<int>(QPrinter::Comm10E), 416},
    {sipName_CurrentPage, static_cast<int>(QPrinter::CurrentPage), 418},
    {sipName_Custom, static_cast<int>(QPrinter::Custom), 416},
    {sipName_DLE, static_cast<int>(QPrinter::DLE), 416},
    {sipName_DevicePixel, static_cast<int>(QPrinter::DevicePixel), 421},
    {sipName_Didot, static_cast<int>(QPrinter::Didot), 421},
    {sipName_DuplexAuto, static_cast<int>(QPrinter::DuplexAuto), 412},
    {sipName_DuplexLongSide, static_cast<int>(QPrinter::DuplexLongSide), 412},
    {sipName_DuplexNone, static_cast<int>(QPrinter::DuplexNone), 412},
    {sipName_DuplexShortSide, static_cast<int>(QPrinter::DuplexShortSide), 412},
    {sipName_Envelope, static_cast<int>(QPrinter::Envelope), 417},
    {sipName_EnvelopeManual, static_cast<int>(QPrinter::EnvelopeManual), 417},
    {sipName_Error, static_cast<int>(QPrinter::Error), 420},
    {sipName_Executive, static_cast<int>(QPrinter::Executive), 416},
    {sipName_FirstPageFirst, static_cast<int>(QPrinter::FirstPageFirst), 415},
    {sipName_Folio, static_cast<int>(QPrinter::Folio), 416},
    {sipName_FormSource, static_cast<int>(QPrinter::FormSource), 417},
    {sipName_GrayScale, static_cast<int>(QPrinter::GrayScale), 411},
    {sipName_HighResolution, static_cast<int>(QPrinter::HighResolution), 419},
    {sipName_Idle, static_cast<int>(QPrinter::Idle), 420},
    {sipName_Inch, static_cast<int>(QPrinter::Inch), 421},
    {sipName_Landscape, static_cast<int>(QPrinter::Landscape), 413},
    {sipName_LargeCapacity, static_cast<int>(QPrinter::LargeCapacity), 417},
    {sipName_LargeFormat, static_cast<int>(QPrinter::LargeFormat), 417},
    {sipName_LastPageFirst, static_cast<int>(QPrinter::LastPageFirst), 415},
    {sipName_Ledger, static_cast<int>(QPrinter::Ledger), 416},
    {sipName_Legal, static_cast<int>(QPrinter::Legal), 416},
    {sipName_Letter, static_cast<int>(QPrinter::Letter), 416},
    {sipName_Lower, static_cast<int>(QPrinter::Lower), 417},
    {sipName_Manual, static_cast<int>(QPrinter::Manual), 417},
    {sipName_MaxPageSource, static_cast<int>(QPrinter::MaxPageSource), 417},
    {sipName_Middle, static_cast<int>(QPrinter::Middle), 417},
    {sipName_Millimeter, static_cast<int>(QPrinter::Millimeter), 421},
    {sipName_NativeFormat, static_cast<int>(QPrinter::NativeFormat), 414},
    {sipName_OnlyOne, static_cast<int>(QPrinter::OnlyOne), 417},
    {sipName_PageRange, static_cast<int>(QPrinter::PageRange), 418},
    {sipName_PdfFormat, static_cast<int>(QPrinter::PdfFormat), 414},
    {sipName_Pica, static_cast<int>(QPrinter::Pica), 421},
    {sipName_Point, static_cast<int>(QPrinter::Point), 421},
    {sipName_Portrait, static_cast<int>(QPrinter::Portrait), 413},
    {sipName_PostScriptFormat, static_cast<int>(QPrinter::PostScriptFormat), 414},
    {sipName_PrinterResolution, static_cast<int>(QPrinter::PrinterResolution), 419},
    {sipName_ScreenResolution, static_cast<int>(QPrinter::ScreenResolution), 419},
    {sipName_Selection, static_cast<int>(QPrinter::Selection), 418},
    {sipName_SmallFormat, static_cast<int>(QPrinter::SmallFormat), 417},
    {sipName_Tabloid, static_cast<int>(QPrinter::Tabloid), 416},
    {sipName_Tractor, static_cast<int>(QPrinter::Tractor), 417},
};

PyDoc_STRVAR(doc_QPrinter, "\1QPrinter(QPrinter.PrinterMode mode=QPrinter.ScreenResolution)\n"
    "QPrinter(QPrinterInfo, QPrinter.PrinterMode mode=QPrinter.ScreenResolution)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QPrinter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QPrinter,
        {0}
    },
    {
        sipNameNr_QPrinter,
        {0, 0, 1},
        62, methods_QPrinter,
        76, enummembers_QPrinter,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPrinter,
    -1,
    -1,
    supers_QPrinter,
    0,
    init_type_QPrinter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPrinter,
    0,
    0,
    0,
    release_QPrinter,
    cast_QPrinter,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
