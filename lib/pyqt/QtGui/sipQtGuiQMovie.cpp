/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmovie.sip"
#include <qmovie.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qimagereader.sip"
#include <qimagereader.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMovie.cpp"


class sipQMovie : public QMovie
{
public:
    sipQMovie(QObject*);
    sipQMovie(QIODevice*,const QByteArray&,QObject*);
    sipQMovie(const QString&,const QByteArray&,QObject*);
    virtual ~sipQMovie();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMovie(const sipQMovie &);
    sipQMovie &operator = (const sipQMovie &);

    char sipPyMethods[7];
};

sipQMovie::sipQMovie(QObject*a0): QMovie(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMovie::sipQMovie(QIODevice*a0,const QByteArray& a1,QObject*a2): QMovie(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMovie::sipQMovie(const QString& a0,const QByteArray& a1,QObject*a2): QMovie(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMovie::~sipQMovie()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMovie::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QMovie);
}

int sipQMovie::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMovie::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QMovie,_c,_id,_a);

    return _id;
}

void *sipQMovie::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QMovie, _clname)) ? this : QMovie::qt_metacast(_clname);
}

void sipQMovie::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMovie::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMovie::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMovie::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMovie::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMovie::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMovie::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMovie::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMovie::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMovie::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMovie::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMovie::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQMovie::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMovie::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QMovie_supportedFormats, "QMovie.supportedFormats() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QMovie_supportedFormats(PyObject *, PyObject *);}
static PyObject *meth_QMovie_supportedFormats(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QByteArray>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(QMovie::supportedFormats());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_supportedFormats, doc_QMovie_supportedFormats);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_setDevice, "QMovie.setDevice(QIODevice)");

extern "C" {static PyObject *meth_QMovie_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMovie, &sipCpp, sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setDevice, doc_QMovie_setDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_device, "QMovie.device() -> QIODevice");

extern "C" {static PyObject *meth_QMovie_device(PyObject *, PyObject *);}
static PyObject *meth_QMovie_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            QIODevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_device, doc_QMovie_device);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_setFileName, "QMovie.setFileName(QString)");

extern "C" {static PyObject *meth_QMovie_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMovie, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFileName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setFileName, doc_QMovie_setFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_fileName, "QMovie.fileName() -> QString");

extern "C" {static PyObject *meth_QMovie_fileName(PyObject *, PyObject *);}
static PyObject *meth_QMovie_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_fileName, doc_QMovie_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_setFormat, "QMovie.setFormat(QByteArray)");

extern "C" {static PyObject *meth_QMovie_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMovie, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormat(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setFormat, doc_QMovie_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_format, "QMovie.format() -> QByteArray");

extern "C" {static PyObject *meth_QMovie_format(PyObject *, PyObject *);}
static PyObject *meth_QMovie_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->format());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_format, doc_QMovie_format);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_setBackgroundColor, "QMovie.setBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QMovie_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMovie, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackgroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setBackgroundColor, doc_QMovie_setBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_backgroundColor, "QMovie.backgroundColor() -> QColor");

extern "C" {static PyObject *meth_QMovie_backgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QMovie_backgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            QColor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->backgroundColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_backgroundColor, doc_QMovie_backgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_state, "QMovie.state() -> QMovie.MovieState");

extern "C" {static PyObject *meth_QMovie_state(PyObject *, PyObject *);}
static PyObject *meth_QMovie_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            QMovie::MovieState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QMovie_MovieState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_state, doc_QMovie_state);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_frameRect, "QMovie.frameRect() -> QRect");

extern "C" {static PyObject *meth_QMovie_frameRect(PyObject *, PyObject *);}
static PyObject *meth_QMovie_frameRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->frameRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_frameRect, doc_QMovie_frameRect);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_currentImage, "QMovie.currentImage() -> QImage");

extern "C" {static PyObject *meth_QMovie_currentImage(PyObject *, PyObject *);}
static PyObject *meth_QMovie_currentImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            QImage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->currentImage());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_currentImage, doc_QMovie_currentImage);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_currentPixmap, "QMovie.currentPixmap() -> QPixmap");

extern "C" {static PyObject *meth_QMovie_currentPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMovie_currentPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->currentPixmap());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_currentPixmap, doc_QMovie_currentPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_isValid, "QMovie.isValid() -> bool");

extern "C" {static PyObject *meth_QMovie_isValid(PyObject *, PyObject *);}
static PyObject *meth_QMovie_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_isValid, doc_QMovie_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_jumpToFrame, "QMovie.jumpToFrame(int) -> bool");

extern "C" {static PyObject *meth_QMovie_jumpToFrame(PyObject *, PyObject *);}
static PyObject *meth_QMovie_jumpToFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMovie, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->jumpToFrame(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_jumpToFrame, doc_QMovie_jumpToFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_loopCount, "QMovie.loopCount() -> int");

extern "C" {static PyObject *meth_QMovie_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QMovie_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->loopCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_loopCount, doc_QMovie_loopCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_frameCount, "QMovie.frameCount() -> int");

extern "C" {static PyObject *meth_QMovie_frameCount(PyObject *, PyObject *);}
static PyObject *meth_QMovie_frameCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->frameCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_frameCount, doc_QMovie_frameCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_nextFrameDelay, "QMovie.nextFrameDelay() -> int");

extern "C" {static PyObject *meth_QMovie_nextFrameDelay(PyObject *, PyObject *);}
static PyObject *meth_QMovie_nextFrameDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nextFrameDelay();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_nextFrameDelay, doc_QMovie_nextFrameDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_currentFrameNumber, "QMovie.currentFrameNumber() -> int");

extern "C" {static PyObject *meth_QMovie_currentFrameNumber(PyObject *, PyObject *);}
static PyObject *meth_QMovie_currentFrameNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentFrameNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_currentFrameNumber, doc_QMovie_currentFrameNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_setSpeed, "QMovie.setSpeed(int)");

extern "C" {static PyObject *meth_QMovie_setSpeed(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMovie, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpeed(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setSpeed, doc_QMovie_setSpeed);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_speed, "QMovie.speed() -> int");

extern "C" {static PyObject *meth_QMovie_speed(PyObject *, PyObject *);}
static PyObject *meth_QMovie_speed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->speed();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_speed, doc_QMovie_speed);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_scaledSize, "QMovie.scaledSize() -> QSize");

extern "C" {static PyObject *meth_QMovie_scaledSize(PyObject *, PyObject *);}
static PyObject *meth_QMovie_scaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->scaledSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_scaledSize, doc_QMovie_scaledSize);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_setScaledSize, "QMovie.setScaledSize(QSize)");

extern "C" {static PyObject *meth_QMovie_setScaledSize(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setScaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMovie, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScaledSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setScaledSize, doc_QMovie_setScaledSize);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_cacheMode, "QMovie.cacheMode() -> QMovie.CacheMode");

extern "C" {static PyObject *meth_QMovie_cacheMode(PyObject *, PyObject *);}
static PyObject *meth_QMovie_cacheMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            QMovie::CacheMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cacheMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QMovie_CacheMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_cacheMode, doc_QMovie_cacheMode);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_setCacheMode, "QMovie.setCacheMode(QMovie.CacheMode)");

extern "C" {static PyObject *meth_QMovie_setCacheMode(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setCacheMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMovie::CacheMode a0;
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMovie, &sipCpp, sipType_QMovie_CacheMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCacheMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setCacheMode, doc_QMovie_setCacheMode);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_start, "QMovie.start()");

extern "C" {static PyObject *meth_QMovie_start(PyObject *, PyObject *);}
static PyObject *meth_QMovie_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->start();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_start, doc_QMovie_start);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_jumpToNextFrame, "QMovie.jumpToNextFrame() -> bool");

extern "C" {static PyObject *meth_QMovie_jumpToNextFrame(PyObject *, PyObject *);}
static PyObject *meth_QMovie_jumpToNextFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->jumpToNextFrame();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_jumpToNextFrame, doc_QMovie_jumpToNextFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_setPaused, "QMovie.setPaused(bool)");

extern "C" {static PyObject *meth_QMovie_setPaused(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMovie, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPaused(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setPaused, doc_QMovie_setPaused);

    return NULL;
}


PyDoc_STRVAR(doc_QMovie_stop, "QMovie.stop()");

extern "C" {static PyObject *meth_QMovie_stop(PyObject *, PyObject *);}
static PyObject *meth_QMovie_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_stop, doc_QMovie_stop);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMovie(void *, const sipTypeDef *);}
static void *cast_QMovie(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QMovie)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QMovie *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMovie(void *, int);}
static void release_QMovie(void *sipCppV,int)
{
    QMovie *sipCpp = reinterpret_cast<QMovie *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QMovie(sipSimpleWrapper *);}
static void dealloc_QMovie(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMovie *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMovie(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMovie(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMovie(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMovie *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMovie(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QIODevice* a0;
        const QByteArray& a1def = QByteArray();
        const QByteArray* a1 = &a1def;
        int a1State = 0;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1JH", sipType_QIODevice, &a0, sipType_QByteArray, &a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMovie(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QByteArray& a1def = QByteArray();
        const QByteArray* a1 = &a1def;
        int a1State = 0;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1JH", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMovie(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMovie[] = {{141, 0, 1}};


static PyMethodDef methods_QMovie[] = {
    {SIP_MLNAME_CAST(sipName_backgroundColor), meth_QMovie_backgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_backgroundColor)},
    {SIP_MLNAME_CAST(sipName_cacheMode), meth_QMovie_cacheMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_cacheMode)},
    {SIP_MLNAME_CAST(sipName_currentFrameNumber), meth_QMovie_currentFrameNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_currentFrameNumber)},
    {SIP_MLNAME_CAST(sipName_currentImage), meth_QMovie_currentImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_currentImage)},
    {SIP_MLNAME_CAST(sipName_currentPixmap), meth_QMovie_currentPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_currentPixmap)},
    {SIP_MLNAME_CAST(sipName_device), meth_QMovie_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_device)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QMovie_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QMovie_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_format)},
    {SIP_MLNAME_CAST(sipName_frameCount), meth_QMovie_frameCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_frameCount)},
    {SIP_MLNAME_CAST(sipName_frameRect), meth_QMovie_frameRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_frameRect)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QMovie_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_isValid)},
    {SIP_MLNAME_CAST(sipName_jumpToFrame), meth_QMovie_jumpToFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_jumpToFrame)},
    {SIP_MLNAME_CAST(sipName_jumpToNextFrame), meth_QMovie_jumpToNextFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_jumpToNextFrame)},
    {SIP_MLNAME_CAST(sipName_loopCount), meth_QMovie_loopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_loopCount)},
    {SIP_MLNAME_CAST(sipName_nextFrameDelay), meth_QMovie_nextFrameDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_nextFrameDelay)},
    {SIP_MLNAME_CAST(sipName_scaledSize), meth_QMovie_scaledSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_scaledSize)},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_QMovie_setBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setCacheMode), meth_QMovie_setCacheMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setCacheMode)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QMovie_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QMovie_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setFileName)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QMovie_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setFormat)},
    {SIP_MLNAME_CAST(sipName_setPaused), meth_QMovie_setPaused, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setPaused)},
    {SIP_MLNAME_CAST(sipName_setScaledSize), meth_QMovie_setScaledSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setScaledSize)},
    {SIP_MLNAME_CAST(sipName_setSpeed), meth_QMovie_setSpeed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setSpeed)},
    {SIP_MLNAME_CAST(sipName_speed), meth_QMovie_speed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_speed)},
    {SIP_MLNAME_CAST(sipName_start), meth_QMovie_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_start)},
    {SIP_MLNAME_CAST(sipName_state), meth_QMovie_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QMovie_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_stop)},
    {SIP_MLNAME_CAST(sipName_supportedFormats), meth_QMovie_supportedFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_supportedFormats)}
};

static sipEnumMemberDef enummembers_QMovie[] = {
    {sipName_CacheAll, static_cast<int>(QMovie::CacheAll), 357},
    {sipName_CacheNone, static_cast<int>(QMovie::CacheNone), 357},
    {sipName_NotRunning, static_cast<int>(QMovie::NotRunning), 358},
    {sipName_Paused, static_cast<int>(QMovie::Paused), 358},
    {sipName_Running, static_cast<int>(QMovie::Running), 358},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QMovie[] = {
    {"frameChanged(int)", "\1QMovie.frameChanged[int]", 0, 0},
    {"finished()", "\1QMovie.finished", 0, 0},
    {"error(QImageReader::ImageReaderError)", "\1QMovie.error[QImageReader.ImageReaderError]", 0, 0},
    {"stateChanged(QMovie::MovieState)", "\1QMovie.stateChanged[QMovie.MovieState]", 0, 0},
    {"updated(QRect)", "\1QMovie.updated[QRect]", 0, 0},
    {"resized(QSize)", "\1QMovie.resized[QSize]", 0, 0},
    {"started()", "\1QMovie.started", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMovie, "\1QMovie(QObject parent=None)\n"
    "QMovie(QIODevice, QByteArray format=QByteArray(), QObject parent=None)\n"
    "QMovie(QString, QByteArray format=QByteArray(), QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QMovie = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QMovie,
        {0}
    },
    {
        sipNameNr_QMovie,
        {0, 0, 1},
        29, methods_QMovie,
        5, enummembers_QMovie,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMovie,
    -1,
    -1,
    supers_QMovie,
    0,
    init_type_QMovie,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMovie,
    0,
    0,
    0,
    release_QMovie,
    cast_QMovie,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMovie::staticMetaObject,
    0,
    signals_QMovie,
};
