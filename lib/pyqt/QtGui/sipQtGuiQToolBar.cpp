/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtoolbar.sip"
#include <qtoolbar.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 1786 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQToolBar.cpp"


class sipQToolBar : public QToolBar
{
public:
    sipQToolBar(const QString&,QWidget*);
    sipQToolBar(QWidget*);
    virtual ~sipQToolBar();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
    bool event(QEvent*);
    void resizeEvent(QResizeEvent*);
    void paintEvent(QPaintEvent*);
    void childEvent(QChildEvent*);
    void changeEvent(QEvent*);
    void actionEvent(QActionEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQToolBar(const sipQToolBar &);
    sipQToolBar &operator = (const sipQToolBar &);

    char sipPyMethods[47];
};

sipQToolBar::sipQToolBar(const QString& a0,QWidget*a1): QToolBar(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQToolBar::sipQToolBar(QWidget*a0): QToolBar(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQToolBar::~sipQToolBar()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQToolBar::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QToolBar);
}

int sipQToolBar::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QToolBar::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QToolBar,_c,_id,_a);

    return _id;
}

void *sipQToolBar::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QToolBar, _clname)) ? this : QToolBar::qt_metacast(_clname);
}

void sipQToolBar::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QToolBar::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QToolBar::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QToolBar::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QToolBar::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQToolBar::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QToolBar::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQToolBar::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QToolBar::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQToolBar::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QToolBar::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QToolBar::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QToolBar::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QToolBar::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQToolBar::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QToolBar::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQToolBar::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QToolBar::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QToolBar::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQToolBar::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QToolBar::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QToolBar::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QToolBar::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QToolBar::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QToolBar::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QToolBar::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QToolBar::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QToolBar::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QToolBar::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QToolBar::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QToolBar::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QToolBar::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QToolBar::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QToolBar::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QToolBar::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QToolBar::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QToolBar::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QToolBar::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QToolBar::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QToolBar::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QToolBar::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QToolBar::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQToolBar::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QToolBar::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQToolBar::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QToolBar::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQToolBar::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QToolBar::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQToolBar::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QToolBar::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQToolBar::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QToolBar::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQToolBar::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QToolBar::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQToolBar::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QToolBar::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QToolBar::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QToolBar::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QToolBar::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QToolBar::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQToolBar::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QToolBar::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QToolBar_setMovable, "QToolBar.setMovable(bool)");

extern "C" {static PyObject *meth_QToolBar_setMovable(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_setMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QToolBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMovable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_setMovable, doc_QToolBar_setMovable);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_isMovable, "QToolBar.isMovable() -> bool");

extern "C" {static PyObject *meth_QToolBar_isMovable(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_isMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolBar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isMovable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_isMovable, doc_QToolBar_isMovable);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_setAllowedAreas, "QToolBar.setAllowedAreas(Qt.ToolBarAreas)");

extern "C" {static PyObject *meth_QToolBar_setAllowedAreas(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_setAllowedAreas(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ToolBarAreas* a0;
        int a0State = 0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QToolBar, &sipCpp, sipType_Qt_ToolBarAreas, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAllowedAreas(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_ToolBarAreas,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_setAllowedAreas, doc_QToolBar_setAllowedAreas);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_allowedAreas, "QToolBar.allowedAreas() -> Qt.ToolBarAreas");

extern "C" {static PyObject *meth_QToolBar_allowedAreas(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_allowedAreas(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolBar, &sipCpp))
        {
            Qt::ToolBarAreas*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ToolBarAreas(sipCpp->allowedAreas());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ToolBarAreas,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_allowedAreas, doc_QToolBar_allowedAreas);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_isAreaAllowed, "QToolBar.isAreaAllowed(Qt.ToolBarArea) -> bool");

extern "C" {static PyObject *meth_QToolBar_isAreaAllowed(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_isAreaAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ToolBarArea a0;
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QToolBar, &sipCpp, sipType_Qt_ToolBarArea, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAreaAllowed(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_isAreaAllowed, doc_QToolBar_isAreaAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_setOrientation, "QToolBar.setOrientation(Qt.Orientation)");

extern "C" {static PyObject *meth_QToolBar_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Orientation a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QToolBar, &sipCpp, sipType_Qt_Orientation, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOrientation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_setOrientation, doc_QToolBar_setOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_orientation, "QToolBar.orientation() -> Qt.Orientation");

extern "C" {static PyObject *meth_QToolBar_orientation(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolBar, &sipCpp))
        {
            Qt::Orientation sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->orientation();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_orientation, doc_QToolBar_orientation);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_clear, "QToolBar.clear()");

extern "C" {static PyObject *meth_QToolBar_clear(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolBar, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_clear, doc_QToolBar_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_addAction, "QToolBar.addAction(QAction)\n"
    "QToolBar.addAction(QString) -> QAction\n"
    "QToolBar.addAction(QIcon, QString) -> QAction\n"
    "QToolBar.addAction(QString, QObject, SLOT()) -> QAction\n"
    "QToolBar.addAction(QString, callable) -> QAction\n"
    "QToolBar.addAction(QIcon, QString, QObject, SLOT()) -> QAction\n"
    "QToolBar.addAction(QIcon, QString, callable) -> QAction");

extern "C" {static PyObject *meth_QToolBar_addAction(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_addAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QAction, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addAction(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addAction(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addAction(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1;
        char* a2;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1qS", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QString,&a0, &a0State, "()", &a1, &a2, &a2))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addAction(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1;
        char* a2;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1y", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QString,&a0, &a0State, "()", &a1, &a2))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addAction(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;
        QObject* a2;
        char* a3;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1qS", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State, "()", &a2, &a3, &a3))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addAction(*a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;
        QObject* a2;
        char* a3;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1y", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State, "()", &a2, &a3))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addAction(*a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_addAction, doc_QToolBar_addAction);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_addSeparator, "QToolBar.addSeparator() -> QAction");

extern "C" {static PyObject *meth_QToolBar_addSeparator(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_addSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolBar, &sipCpp))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addSeparator();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_addSeparator, doc_QToolBar_addSeparator);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_insertSeparator, "QToolBar.insertSeparator(QAction) -> QAction");

extern "C" {static PyObject *meth_QToolBar_insertSeparator(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_insertSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QAction, &a0))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertSeparator(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_insertSeparator, doc_QToolBar_insertSeparator);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_addWidget, "QToolBar.addWidget(QWidget) -> QAction");

extern "C" {static PyObject *meth_QToolBar_addWidget(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_addWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QWidget, &a0))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addWidget(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_addWidget, doc_QToolBar_addWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_insertWidget, "QToolBar.insertWidget(QAction, QWidget) -> QAction");

extern "C" {static PyObject *meth_QToolBar_insertWidget(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_insertWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QWidget* a1;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J:", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QAction, &a0, sipType_QWidget, &a1))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertWidget(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_insertWidget, doc_QToolBar_insertWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_actionGeometry, "QToolBar.actionGeometry(QAction) -> QRect");

extern "C" {static PyObject *meth_QToolBar_actionGeometry(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_actionGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QAction, &a0))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->actionGeometry(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_actionGeometry, doc_QToolBar_actionGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_actionAt, "QToolBar.actionAt(QPoint) -> QAction\n"
    "QToolBar.actionAt(int, int) -> QAction");

extern "C" {static PyObject *meth_QToolBar_actionAt(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_actionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QPoint, &a0))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->actionAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QToolBar, &sipCpp, &a0, &a1))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->actionAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_actionAt, doc_QToolBar_actionAt);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_toggleViewAction, "QToolBar.toggleViewAction() -> QAction");

extern "C" {static PyObject *meth_QToolBar_toggleViewAction(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_toggleViewAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolBar, &sipCpp))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toggleViewAction();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_toggleViewAction, doc_QToolBar_toggleViewAction);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_iconSize, "QToolBar.iconSize() -> QSize");

extern "C" {static PyObject *meth_QToolBar_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolBar, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->iconSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_iconSize, doc_QToolBar_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_toolButtonStyle, "QToolBar.toolButtonStyle() -> Qt.ToolButtonStyle");

extern "C" {static PyObject *meth_QToolBar_toolButtonStyle(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_toolButtonStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolBar, &sipCpp))
        {
            Qt::ToolButtonStyle sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toolButtonStyle();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_ToolButtonStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_toolButtonStyle, doc_QToolBar_toolButtonStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_widgetForAction, "QToolBar.widgetForAction(QAction) -> QWidget");

extern "C" {static PyObject *meth_QToolBar_widgetForAction(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_widgetForAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QAction, &a0))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widgetForAction(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_widgetForAction, doc_QToolBar_widgetForAction);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_setIconSize, "QToolBar.setIconSize(QSize)");

extern "C" {static PyObject *meth_QToolBar_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_setIconSize, doc_QToolBar_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_setToolButtonStyle, "QToolBar.setToolButtonStyle(Qt.ToolButtonStyle)");

extern "C" {static PyObject *meth_QToolBar_setToolButtonStyle(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_setToolButtonStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ToolButtonStyle a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QToolBar, &sipCpp, sipType_Qt_ToolButtonStyle, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setToolButtonStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_setToolButtonStyle, doc_QToolBar_setToolButtonStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_initStyleOption, "QToolBar.initStyleOption(QStyleOptionToolBar)");

extern "C" {static PyObject *meth_QToolBar_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyleOptionToolBar* a0;
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QStyleOptionToolBar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->initStyleOption(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_initStyleOption, doc_QToolBar_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_actionEvent, "QToolBar.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QToolBar_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QActionEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QToolBar::actionEvent(a0) : sipCpp->actionEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_actionEvent, doc_QToolBar_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_changeEvent, "QToolBar.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QToolBar_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QToolBar::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_changeEvent, doc_QToolBar_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_childEvent, "QToolBar.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QToolBar_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QToolBar::childEvent(a0) : sipCpp->childEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_childEvent, doc_QToolBar_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_paintEvent, "QToolBar.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QToolBar_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QToolBar::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_paintEvent, doc_QToolBar_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_resizeEvent, "QToolBar.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QToolBar_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QToolBar::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_resizeEvent, doc_QToolBar_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_event, "QToolBar.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QToolBar_event(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolBar, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QToolBar::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_event, doc_QToolBar_event);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_isFloatable, "QToolBar.isFloatable() -> bool");

extern "C" {static PyObject *meth_QToolBar_isFloatable(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_isFloatable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolBar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFloatable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_isFloatable, doc_QToolBar_isFloatable);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_setFloatable, "QToolBar.setFloatable(bool)");

extern "C" {static PyObject *meth_QToolBar_setFloatable(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_setFloatable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QToolBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFloatable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_setFloatable, doc_QToolBar_setFloatable);

    return NULL;
}


PyDoc_STRVAR(doc_QToolBar_isFloating, "QToolBar.isFloating() -> bool");

extern "C" {static PyObject *meth_QToolBar_isFloating(PyObject *, PyObject *);}
static PyObject *meth_QToolBar_isFloating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolBar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFloating();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QToolBar, sipName_isFloating, doc_QToolBar_isFloating);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QToolBar(void *, const sipTypeDef *);}
static void *cast_QToolBar(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QToolBar)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QToolBar *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QToolBar(void *, int);}
static void release_QToolBar(void *sipCppV,int)
{
    QToolBar *sipCpp = reinterpret_cast<QToolBar *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QToolBar(sipSimpleWrapper *);}
static void dealloc_QToolBar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQToolBar *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QToolBar(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QToolBar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QToolBar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQToolBar *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;
        QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQToolBar(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQToolBar(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QToolBar[] = {{755, 255, 1}};


static PyMethodDef methods_QToolBar[] = {
    {SIP_MLNAME_CAST(sipName_actionAt), meth_QToolBar_actionAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_actionAt)},
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_QToolBar_actionEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_actionEvent)},
    {SIP_MLNAME_CAST(sipName_actionGeometry), meth_QToolBar_actionGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_actionGeometry)},
    {SIP_MLNAME_CAST(sipName_addAction), meth_QToolBar_addAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_addAction)},
    {SIP_MLNAME_CAST(sipName_addSeparator), meth_QToolBar_addSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_addSeparator)},
    {SIP_MLNAME_CAST(sipName_addWidget), meth_QToolBar_addWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_addWidget)},
    {SIP_MLNAME_CAST(sipName_allowedAreas), meth_QToolBar_allowedAreas, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_allowedAreas)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QToolBar_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_changeEvent)},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QToolBar_childEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_childEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QToolBar_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_clear)},
    {SIP_MLNAME_CAST(sipName_event), meth_QToolBar_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_event)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QToolBar_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_iconSize)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QToolBar_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_insertSeparator), meth_QToolBar_insertSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_insertSeparator)},
    {SIP_MLNAME_CAST(sipName_insertWidget), meth_QToolBar_insertWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_insertWidget)},
    {SIP_MLNAME_CAST(sipName_isAreaAllowed), meth_QToolBar_isAreaAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_isAreaAllowed)},
    {SIP_MLNAME_CAST(sipName_isFloatable), meth_QToolBar_isFloatable, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_isFloatable)},
    {SIP_MLNAME_CAST(sipName_isFloating), meth_QToolBar_isFloating, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_isFloating)},
    {SIP_MLNAME_CAST(sipName_isMovable), meth_QToolBar_isMovable, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_isMovable)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QToolBar_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_orientation)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QToolBar_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_paintEvent)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QToolBar_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_setAllowedAreas), meth_QToolBar_setAllowedAreas, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_setAllowedAreas)},
    {SIP_MLNAME_CAST(sipName_setFloatable), meth_QToolBar_setFloatable, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_setFloatable)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QToolBar_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setMovable), meth_QToolBar_setMovable, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_setMovable)},
    {SIP_MLNAME_CAST(sipName_setOrientation), meth_QToolBar_setOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_setOrientation)},
    {SIP_MLNAME_CAST(sipName_setToolButtonStyle), meth_QToolBar_setToolButtonStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_setToolButtonStyle)},
    {SIP_MLNAME_CAST(sipName_toggleViewAction), meth_QToolBar_toggleViewAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_toggleViewAction)},
    {SIP_MLNAME_CAST(sipName_toolButtonStyle), meth_QToolBar_toolButtonStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_toolButtonStyle)},
    {SIP_MLNAME_CAST(sipName_widgetForAction), meth_QToolBar_widgetForAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QToolBar_widgetForAction)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QToolBar[] = {
    {"visibilityChanged(bool)", "\1QToolBar.visibilityChanged[bool]", 0, 0},
    {"topLevelChanged(bool)", "\1QToolBar.topLevelChanged[bool]", 0, 0},
    {"toolButtonStyleChanged(Qt::ToolButtonStyle)", "\1QToolBar.toolButtonStyleChanged[Qt.ToolButtonStyle]", 0, 0},
    {"iconSizeChanged(QSize)", "\1QToolBar.iconSizeChanged[QSize]", 0, 0},
    {"orientationChanged(Qt::Orientation)", "\1QToolBar.orientationChanged[Qt.Orientation]", 0, 0},
    {"allowedAreasChanged(Qt::ToolBarAreas)", "\1QToolBar.allowedAreasChanged[Qt.ToolBarAreas]", 0, 0},
    {"movableChanged(bool)", "\1QToolBar.movableChanged[bool]", 0, 0},
    {"actionTriggered(QAction*)", "\1QToolBar.actionTriggered[QAction]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QToolBar, "\1QToolBar(QString, QWidget parent=None)\n"
    "QToolBar(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QToolBar = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QToolBar,
        {0}
    },
    {
        sipNameNr_QToolBar,
        {0, 0, 1},
        31, methods_QToolBar,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QToolBar,
    -1,
    -1,
    supers_QToolBar,
    0,
    init_type_QToolBar,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QToolBar,
    0,
    0,
    0,
    release_QToolBar,
    cast_QToolBar,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QToolBar::staticMetaObject,
    0,
    signals_QToolBar,
};
