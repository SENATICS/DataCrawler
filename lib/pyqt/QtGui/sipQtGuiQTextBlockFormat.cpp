/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 487 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 43 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 69 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 46 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 737 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 52 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 55 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 69 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 594 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 64 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 611 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 67 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 704 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 70 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 550 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 73 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 336 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 76 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 144 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 79 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 82 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 85 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 88 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 91 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 94 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 97 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 100 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextBlockFormat.cpp"


PyDoc_STRVAR(doc_QTextBlockFormat_isValid, "QTextBlockFormat.isValid() -> bool");

extern "C" {static PyObject *meth_QTextBlockFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_isValid, doc_QTextBlockFormat_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_alignment, "QTextBlockFormat.alignment() -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextBlockFormat_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            Qt::Alignment*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment(sipCpp->alignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_alignment, doc_QTextBlockFormat_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setTopMargin, "QTextBlockFormat.setTopMargin(float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setTopMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTopMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTopMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTopMargin, doc_QTextBlockFormat_setTopMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_topMargin, "QTextBlockFormat.topMargin() -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_topMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_topMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->topMargin();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_topMargin, doc_QTextBlockFormat_topMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setBottomMargin, "QTextBlockFormat.setBottomMargin(float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setBottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setBottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBottomMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setBottomMargin, doc_QTextBlockFormat_setBottomMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_bottomMargin, "QTextBlockFormat.bottomMargin() -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_bottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_bottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bottomMargin();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_bottomMargin, doc_QTextBlockFormat_bottomMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setLeftMargin, "QTextBlockFormat.setLeftMargin(float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setLeftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setLeftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLeftMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setLeftMargin, doc_QTextBlockFormat_setLeftMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_leftMargin, "QTextBlockFormat.leftMargin() -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_leftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_leftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->leftMargin();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_leftMargin, doc_QTextBlockFormat_leftMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setRightMargin, "QTextBlockFormat.setRightMargin(float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setRightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setRightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRightMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setRightMargin, doc_QTextBlockFormat_setRightMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_rightMargin, "QTextBlockFormat.rightMargin() -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_rightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_rightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rightMargin();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_rightMargin, doc_QTextBlockFormat_rightMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setTextIndent, "QTextBlockFormat.setTextIndent(float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setTextIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTextIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextIndent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTextIndent, doc_QTextBlockFormat_setTextIndent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_textIndent, "QTextBlockFormat.textIndent() -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_textIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_textIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textIndent();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_textIndent, doc_QTextBlockFormat_textIndent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_indent, "QTextBlockFormat.indent() -> int");

extern "C" {static PyObject *meth_QTextBlockFormat_indent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indent();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_indent, doc_QTextBlockFormat_indent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setNonBreakableLines, "QTextBlockFormat.setNonBreakableLines(bool)");

extern "C" {static PyObject *meth_QTextBlockFormat_setNonBreakableLines(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setNonBreakableLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNonBreakableLines(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setNonBreakableLines, doc_QTextBlockFormat_setNonBreakableLines);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_nonBreakableLines, "QTextBlockFormat.nonBreakableLines() -> bool");

extern "C" {static PyObject *meth_QTextBlockFormat_nonBreakableLines(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_nonBreakableLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nonBreakableLines();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_nonBreakableLines, doc_QTextBlockFormat_nonBreakableLines);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setAlignment, "QTextBlockFormat.setAlignment(Qt.Alignment)");

extern "C" {static PyObject *meth_QTextBlockFormat_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setAlignment, doc_QTextBlockFormat_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setIndent, "QTextBlockFormat.setIndent(int)");

extern "C" {static PyObject *meth_QTextBlockFormat_setIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIndent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setIndent, doc_QTextBlockFormat_setIndent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setPageBreakPolicy, "QTextBlockFormat.setPageBreakPolicy(QTextFormat.PageBreakFlags)");

extern "C" {static PyObject *meth_QTextBlockFormat_setPageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setPageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat::PageBreakFlags* a0;
        int a0State = 0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_QTextFormat_PageBreakFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPageBreakPolicy(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QTextFormat_PageBreakFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setPageBreakPolicy, doc_QTextBlockFormat_setPageBreakPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_pageBreakPolicy, "QTextBlockFormat.pageBreakPolicy() -> QTextFormat.PageBreakFlags");

extern "C" {static PyObject *meth_QTextBlockFormat_pageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_pageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            QTextFormat::PageBreakFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextFormat::PageBreakFlags(sipCpp->pageBreakPolicy());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_pageBreakPolicy, doc_QTextBlockFormat_pageBreakPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setTabPositions, "QTextBlockFormat.setTabPositions(list-of-QTextOption.Tab)");

extern "C" {static PyObject *meth_QTextBlockFormat_setTabPositions(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTabPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTextOption::Tab>* a0;
        int a0State = 0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_QList_0100QTextOption_Tab,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabPositions(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTextOption::Tab> *>(a0),sipType_QList_0100QTextOption_Tab,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTabPositions, doc_QTextBlockFormat_setTabPositions);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_tabPositions, "QTextBlockFormat.tabPositions() -> list-of-QTextOption.Tab");

extern "C" {static PyObject *meth_QTextBlockFormat_tabPositions(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_tabPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            QList<QTextOption::Tab>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTextOption::Tab>(sipCpp->tabPositions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextOption_Tab,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_tabPositions, doc_QTextBlockFormat_tabPositions);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setLineHeight, "QTextBlockFormat.setLineHeight(float, int)");

extern "C" {static PyObject *meth_QTextBlockFormat_setLineHeight(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setLineHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        int a1;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdi", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLineHeight(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setLineHeight, doc_QTextBlockFormat_setLineHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_lineHeight, "QTextBlockFormat.lineHeight(float, float) -> float\n"
    "QTextBlockFormat.lineHeight() -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_lineHeight(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_lineHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0, &a1))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineHeight(a0,a1);
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineHeight();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_lineHeight, doc_QTextBlockFormat_lineHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBlockFormat_lineHeightType, "QTextBlockFormat.lineHeightType() -> int");

extern "C" {static PyObject *meth_QTextBlockFormat_lineHeightType(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_lineHeightType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineHeightType();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_lineHeightType, doc_QTextBlockFormat_lineHeightType);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextBlockFormat(void *, const sipTypeDef *);}
static void *cast_QTextBlockFormat(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextBlockFormat)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextFormat)->ctd_cast((QTextFormat *)(QTextBlockFormat *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBlockFormat(void *, int);}
static void release_QTextBlockFormat(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextBlockFormat *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextBlockFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextBlockFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextBlockFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextBlockFormat *>(sipSrc);
}


extern "C" {static void *array_QTextBlockFormat(SIP_SSIZE_T);}
static void *array_QTextBlockFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextBlockFormat[sipNrElem];
}


extern "C" {static void *copy_QTextBlockFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextBlockFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextBlockFormat(reinterpret_cast<const QTextBlockFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextBlockFormat(sipSimpleWrapper *);}
static void dealloc_QTextBlockFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextBlockFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextBlockFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBlockFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextBlockFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextBlockFormat();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QTextBlockFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextBlockFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextBlockFormat(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextBlockFormat[] = {{672, 255, 1}};


static PyMethodDef methods_QTextBlockFormat[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QTextBlockFormat_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_alignment)},
    {SIP_MLNAME_CAST(sipName_bottomMargin), meth_QTextBlockFormat_bottomMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_bottomMargin)},
    {SIP_MLNAME_CAST(sipName_indent), meth_QTextBlockFormat_indent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_indent)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextBlockFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_leftMargin), meth_QTextBlockFormat_leftMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_leftMargin)},
    {SIP_MLNAME_CAST(sipName_lineHeight), meth_QTextBlockFormat_lineHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_lineHeight)},
    {SIP_MLNAME_CAST(sipName_lineHeightType), meth_QTextBlockFormat_lineHeightType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_lineHeightType)},
    {SIP_MLNAME_CAST(sipName_nonBreakableLines), meth_QTextBlockFormat_nonBreakableLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_nonBreakableLines)},
    {SIP_MLNAME_CAST(sipName_pageBreakPolicy), meth_QTextBlockFormat_pageBreakPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_pageBreakPolicy)},
    {SIP_MLNAME_CAST(sipName_rightMargin), meth_QTextBlockFormat_rightMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_rightMargin)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QTextBlockFormat_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setBottomMargin), meth_QTextBlockFormat_setBottomMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setBottomMargin)},
    {SIP_MLNAME_CAST(sipName_setIndent), meth_QTextBlockFormat_setIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setIndent)},
    {SIP_MLNAME_CAST(sipName_setLeftMargin), meth_QTextBlockFormat_setLeftMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setLeftMargin)},
    {SIP_MLNAME_CAST(sipName_setLineHeight), meth_QTextBlockFormat_setLineHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setLineHeight)},
    {SIP_MLNAME_CAST(sipName_setNonBreakableLines), meth_QTextBlockFormat_setNonBreakableLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setNonBreakableLines)},
    {SIP_MLNAME_CAST(sipName_setPageBreakPolicy), meth_QTextBlockFormat_setPageBreakPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setPageBreakPolicy)},
    {SIP_MLNAME_CAST(sipName_setRightMargin), meth_QTextBlockFormat_setRightMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setRightMargin)},
    {SIP_MLNAME_CAST(sipName_setTabPositions), meth_QTextBlockFormat_setTabPositions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setTabPositions)},
    {SIP_MLNAME_CAST(sipName_setTextIndent), meth_QTextBlockFormat_setTextIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setTextIndent)},
    {SIP_MLNAME_CAST(sipName_setTopMargin), meth_QTextBlockFormat_setTopMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setTopMargin)},
    {SIP_MLNAME_CAST(sipName_tabPositions), meth_QTextBlockFormat_tabPositions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_tabPositions)},
    {SIP_MLNAME_CAST(sipName_textIndent), meth_QTextBlockFormat_textIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_textIndent)},
    {SIP_MLNAME_CAST(sipName_topMargin), meth_QTextBlockFormat_topMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_topMargin)}
};

static sipEnumMemberDef enummembers_QTextBlockFormat[] = {
    {sipName_FixedHeight, static_cast<int>(QTextBlockFormat::FixedHeight), 648},
    {sipName_LineDistanceHeight, static_cast<int>(QTextBlockFormat::LineDistanceHeight), 648},
    {sipName_MinimumHeight, static_cast<int>(QTextBlockFormat::MinimumHeight), 648},
    {sipName_ProportionalHeight, static_cast<int>(QTextBlockFormat::ProportionalHeight), 648},
    {sipName_SingleHeight, static_cast<int>(QTextBlockFormat::SingleHeight), 648},
};

PyDoc_STRVAR(doc_QTextBlockFormat, "\1QTextBlockFormat()\n"
    "QTextBlockFormat(QTextBlockFormat)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextBlockFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextBlockFormat,
        {0}
    },
    {
        sipNameNr_QTextBlockFormat,
        {0, 0, 1},
        24, methods_QTextBlockFormat,
        5, enummembers_QTextBlockFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextBlockFormat,
    -1,
    -1,
    supers_QTextBlockFormat,
    0,
    init_type_QTextBlockFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextBlockFormat,
    assign_QTextBlockFormat,
    array_QTextBlockFormat,
    copy_QTextBlockFormat,
    release_QTextBlockFormat,
    cast_QTextBlockFormat,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
