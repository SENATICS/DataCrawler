/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 674 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQInputMethodEventAttribute.cpp"

#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 40 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQInputMethodEventAttribute.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 43 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQInputMethodEventAttribute.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QInputMethodEvent_Attribute(void *, const sipTypeDef *);}
static void *cast_QInputMethodEvent_Attribute(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QInputMethodEvent_Attribute)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QInputMethodEvent_Attribute(void *, int);}
static void release_QInputMethodEvent_Attribute(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QInputMethodEvent::Attribute *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QInputMethodEvent_Attribute(sipSimpleWrapper *);}
static void dealloc_QInputMethodEvent_Attribute(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QInputMethodEvent_Attribute(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QInputMethodEvent_Attribute(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QInputMethodEvent_Attribute(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QInputMethodEvent::Attribute *sipCpp = 0;

    {
        QInputMethodEvent::AttributeType a0;
        int a1;
        int a2;
        QVariant* a3;
        int a3State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "EiiJ1", sipType_QInputMethodEvent_AttributeType, &a0, &a1, &a2, sipType_QVariant,&a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QInputMethodEvent::Attribute(a0,a1,a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(a3,sipType_QVariant,a3State);

            return sipCpp;
        }
    }

    {
        const QInputMethodEvent::Attribute* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QInputMethodEvent_Attribute, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QInputMethodEvent::Attribute(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_QInputMethodEvent_Attribute_length(void *, PyObject *, PyObject *);}
static PyObject *varget_QInputMethodEvent_Attribute_length(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
    QInputMethodEvent::Attribute *sipCpp = reinterpret_cast<QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = sipCpp->length;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QInputMethodEvent_Attribute_length(void *, PyObject *, PyObject *);}
static int varset_QInputMethodEvent_Attribute_length(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    QInputMethodEvent::Attribute *sipCpp = reinterpret_cast<QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->length = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QInputMethodEvent_Attribute_start(void *, PyObject *, PyObject *);}
static PyObject *varget_QInputMethodEvent_Attribute_start(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
    QInputMethodEvent::Attribute *sipCpp = reinterpret_cast<QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = sipCpp->start;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QInputMethodEvent_Attribute_start(void *, PyObject *, PyObject *);}
static int varset_QInputMethodEvent_Attribute_start(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    QInputMethodEvent::Attribute *sipCpp = reinterpret_cast<QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->start = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QInputMethodEvent_Attribute_type(void *, PyObject *, PyObject *);}
static PyObject *varget_QInputMethodEvent_Attribute_type(void *sipSelf, PyObject *, PyObject *)
{
    QInputMethodEvent::AttributeType sipVal;
    QInputMethodEvent::Attribute *sipCpp = reinterpret_cast<QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = sipCpp->type;

    return sipConvertFromEnum(sipVal, sipType_QInputMethodEvent_AttributeType);
}


extern "C" {static int varset_QInputMethodEvent_Attribute_type(void *, PyObject *, PyObject *);}
static int varset_QInputMethodEvent_Attribute_type(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QInputMethodEvent::AttributeType sipVal;
    QInputMethodEvent::Attribute *sipCpp = reinterpret_cast<QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = (QInputMethodEvent::AttributeType)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->type = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QInputMethodEvent_Attribute_value(void *, PyObject *, PyObject *);}
static PyObject *varget_QInputMethodEvent_Attribute_value(void *sipSelf, PyObject *, PyObject *)
{
    QVariant*sipVal;
    QInputMethodEvent::Attribute *sipCpp = reinterpret_cast<QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = &sipCpp->value;

    return sipConvertFromType(sipVal, sipType_QVariant, NULL);
}


extern "C" {static int varset_QInputMethodEvent_Attribute_value(void *, PyObject *, PyObject *);}
static int varset_QInputMethodEvent_Attribute_value(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QVariant*sipVal;
    QInputMethodEvent::Attribute *sipCpp = reinterpret_cast<QInputMethodEvent::Attribute *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QVariant *>(sipForceConvertToType(sipPy,sipType_QVariant,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->value = *sipVal;

    sipReleaseType(sipVal, sipType_QVariant, sipValState);

    return 0;
}

sipVariableDef variables_QInputMethodEvent_Attribute[] = {
    {InstanceVariable, sipName_length, (PyMethodDef *)varget_QInputMethodEvent_Attribute_length, (PyMethodDef *)varset_QInputMethodEvent_Attribute_length, NULL, NULL},
    {InstanceVariable, sipName_start, (PyMethodDef *)varget_QInputMethodEvent_Attribute_start, (PyMethodDef *)varset_QInputMethodEvent_Attribute_start, NULL, NULL},
    {InstanceVariable, sipName_type, (PyMethodDef *)varget_QInputMethodEvent_Attribute_type, (PyMethodDef *)varset_QInputMethodEvent_Attribute_type, NULL, NULL},
    {InstanceVariable, sipName_value, (PyMethodDef *)varget_QInputMethodEvent_Attribute_value, (PyMethodDef *)varset_QInputMethodEvent_Attribute_value, NULL, NULL},
};

PyDoc_STRVAR(doc_QInputMethodEvent_Attribute, "\1QInputMethodEvent.Attribute(QInputMethodEvent.AttributeType, int, int, QVariant)\n"
    "QInputMethodEvent.Attribute(QInputMethodEvent.Attribute)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QInputMethodEvent_Attribute = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QInputMethodEvent__Attribute,
        {0}
    },
    {
        sipNameNr_Attribute,
        {253, 255, 0},
        0, 0,
        0, 0,
        4, variables_QInputMethodEvent_Attribute,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QInputMethodEvent_Attribute,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QInputMethodEvent_Attribute,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QInputMethodEvent_Attribute,
    0,
    0,
    0,
    release_QInputMethodEvent_Attribute,
    cast_QInputMethodEvent_Attribute,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
