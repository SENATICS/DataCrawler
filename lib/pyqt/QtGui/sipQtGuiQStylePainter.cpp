/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstylepainter.sip"
#include <qstylepainter.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 1370 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 168 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstatictext.sip"
#include <qstatictext.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qline.sip"
#include <qline.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qline.sip"
#include <qline.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStylePainter.cpp"


PyDoc_STRVAR(doc_QStylePainter_begin, "QStylePainter.begin(QWidget) -> bool\n"
    "QStylePainter.begin(QPaintDevice, QWidget) -> bool");

extern "C" {static PyObject *meth_QStylePainter_begin(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QWidget, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->begin(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QPaintDevice* a0;
        QWidget* a1;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QPaintDevice, &a0, sipType_QWidget, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->begin(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_begin, doc_QStylePainter_begin);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_style, "QStylePainter.style() -> QStyle");

extern "C" {static PyObject *meth_QStylePainter_style(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStylePainter, &sipCpp))
        {
            QStyle*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->style();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_style, doc_QStylePainter_style);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_drawPrimitive, "QStylePainter.drawPrimitive(QStyle.PrimitiveElement, QStyleOption)");

extern "C" {static PyObject *meth_QStylePainter_drawPrimitive(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawPrimitive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyle::PrimitiveElement a0;
        const QStyleOption* a1;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QStyle_PrimitiveElement, &a0, sipType_QStyleOption, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPrimitive(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_drawPrimitive, doc_QStylePainter_drawPrimitive);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_drawControl, "QStylePainter.drawControl(QStyle.ControlElement, QStyleOption)");

extern "C" {static PyObject *meth_QStylePainter_drawControl(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyle::ControlElement a0;
        const QStyleOption* a1;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QStyle_ControlElement, &a0, sipType_QStyleOption, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawControl(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_drawControl, doc_QStylePainter_drawControl);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_drawComplexControl, "QStylePainter.drawComplexControl(QStyle.ComplexControl, QStyleOptionComplex)");

extern "C" {static PyObject *meth_QStylePainter_drawComplexControl(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawComplexControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyle::ComplexControl a0;
        const QStyleOptionComplex* a1;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawComplexControl(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_drawComplexControl, doc_QStylePainter_drawComplexControl);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_drawItemText, "QStylePainter.drawItemText(QRect, int, QPalette, bool, QString, QPalette.ColorRole textRole=QPalette.NoRole)");

extern "C" {static PyObject *meth_QStylePainter_drawItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        int a1;
        const QPalette* a2;
        bool a3;
        const QString* a4;
        int a4State = 0;
        QPalette::ColorRole a5 = QPalette::NoRole;
        QStylePainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_textRole,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9iJ9bJ1|E", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QRect, &a0, &a1, sipType_QPalette, &a2, &a3, sipType_QString,&a4, &a4State, sipType_QPalette_ColorRole, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawItemText(*a0,a1,*a2,a3,*a4,a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_drawItemText, doc_QStylePainter_drawItemText);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_drawItemPixmap, "QStylePainter.drawItemPixmap(QRect, int, QPixmap)");

extern "C" {static PyObject *meth_QStylePainter_drawItemPixmap(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawItemPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        int a1;
        const QPixmap* a2;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ9", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QRect, &a0, &a1, sipType_QPixmap, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawItemPixmap(*a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_drawItemPixmap, doc_QStylePainter_drawItemPixmap);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStylePainter(void *, const sipTypeDef *);}
static void *cast_QStylePainter(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QStylePainter)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPainter)->ctd_cast((QPainter *)(QStylePainter *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStylePainter(void *, int);}
static void release_QStylePainter(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QStylePainter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QStylePainter(sipSimpleWrapper *);}
static void dealloc_QStylePainter(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QStylePainter(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QStylePainter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStylePainter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QStylePainter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStylePainter();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QWidget* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStylePainter(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QPaintDevice* a0;
        QWidget* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J8", sipType_QPaintDevice, &a0, sipType_QWidget, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStylePainter(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStylePainter[] = {{373, 255, 1}};


static PyMethodDef methods_QStylePainter[] = {
    {SIP_MLNAME_CAST(sipName_begin), meth_QStylePainter_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_begin)},
    {SIP_MLNAME_CAST(sipName_drawComplexControl), meth_QStylePainter_drawComplexControl, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_drawComplexControl)},
    {SIP_MLNAME_CAST(sipName_drawControl), meth_QStylePainter_drawControl, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_drawControl)},
    {SIP_MLNAME_CAST(sipName_drawItemPixmap), meth_QStylePainter_drawItemPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_drawItemPixmap)},
    {SIP_MLNAME_CAST(sipName_drawItemText), (PyCFunction)meth_QStylePainter_drawItemText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStylePainter_drawItemText)},
    {SIP_MLNAME_CAST(sipName_drawPrimitive), meth_QStylePainter_drawPrimitive, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_drawPrimitive)},
    {SIP_MLNAME_CAST(sipName_style), meth_QStylePainter_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_style)}
};

PyDoc_STRVAR(doc_QStylePainter, "\1QStylePainter()\n"
    "QStylePainter(QWidget)\n"
    "QStylePainter(QPaintDevice, QWidget)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QStylePainter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QStylePainter,
        {0}
    },
    {
        sipNameNr_QStylePainter,
        {0, 0, 1},
        7, methods_QStylePainter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStylePainter,
    -1,
    -1,
    supers_QStylePainter,
    0,
    init_type_QStylePainter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStylePainter,
    0,
    0,
    0,
    release_QStylePainter,
    cast_QStylePainter,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
