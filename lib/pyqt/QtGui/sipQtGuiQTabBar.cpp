/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtabbar.sip"
#include <qtabbar.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 768 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"


class sipQTabBar : public QTabBar
{
public:
    sipQTabBar(QWidget*);
    virtual ~sipQTabBar();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void wheelEvent(QWheelEvent*);
    void hideEvent(QHideEvent*);
    void changeEvent(QEvent*);
    void keyPressEvent(QKeyEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void paintEvent(QPaintEvent*);
    void showEvent(QShowEvent*);
    void resizeEvent(QResizeEvent*);
    bool event(QEvent*);
    void tabLayoutChange();
    void tabRemoved(int);
    void tabInserted(int);
    QSize tabSizeHint(int) const;
    QSize minimumSizeHint() const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTabBar(const sipQTabBar &);
    sipQTabBar &operator = (const sipQTabBar &);

    char sipPyMethods[51];
};

sipQTabBar::sipQTabBar(QWidget*a0): QTabBar(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTabBar::~sipQTabBar()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTabBar::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTabBar);
}

int sipQTabBar::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTabBar::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTabBar,_c,_id,_a);

    return _id;
}

void *sipQTabBar::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTabBar, _clname)) ? this : QTabBar::qt_metacast(_clname);
}

void sipQTabBar::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTabBar::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTabBar::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTabBar::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTabBar::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTabBar::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTabBar::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTabBar::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTabBar::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QTabBar::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTabBar::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QTabBar::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QTabBar::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QTabBar::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QTabBar::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTabBar::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QTabBar::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQTabBar::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QTabBar::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QTabBar::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTabBar::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QTabBar::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QTabBar::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QTabBar::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QTabBar::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QTabBar::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QTabBar::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QTabBar::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QTabBar::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QTabBar::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QTabBar::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QTabBar::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QTabBar::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QTabBar::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QTabBar::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QTabBar::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QTabBar::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQTabBar::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QTabBar::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTabBar::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QTabBar::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QTabBar::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTabBar::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QTabBar::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTabBar::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QTabBar::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QTabBar::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QTabBar::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QTabBar::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QTabBar::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QTabBar::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QTabBar::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QTabBar::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QTabBar::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QTabBar::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTabBar::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTabBar::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::tabLayoutChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_tabLayoutChange);

    if (!sipMeth)
    {
        QTabBar::tabLayoutChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTabBar::tabRemoved(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_tabRemoved);

    if (!sipMeth)
    {
        QTabBar::tabRemoved(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTabBar::tabInserted(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_tabInserted);

    if (!sipMeth)
    {
        QTabBar::tabInserted(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQTabBar::tabSizeHint(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[48]),sipPySelf,NULL,sipName_tabSizeHint);

    if (!sipMeth)
        return QTabBar::tabSizeHint(a0);

    extern QSize sipVH_QtGui_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_72(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQTabBar::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QTabBar::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQTabBar::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QTabBar::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QTabBar_shape, "QTabBar.shape() -> QTabBar.Shape");

extern "C" {static PyObject *meth_QTabBar_shape(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_shape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            QTabBar::Shape sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->shape();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTabBar_Shape);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_shape, doc_QTabBar_shape);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setShape, "QTabBar.setShape(QTabBar.Shape)");

extern "C" {static PyObject *meth_QTabBar_setShape(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTabBar::Shape a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QTabBar_Shape, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setShape(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setShape, doc_QTabBar_setShape);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_addTab, "QTabBar.addTab(QString) -> int\n"
    "QTabBar.addTab(QIcon, QString) -> int");

extern "C" {static PyObject *meth_QTabBar_addTab(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_addTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addTab(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addTab(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_addTab, doc_QTabBar_addTab);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_insertTab, "QTabBar.insertTab(int, QString) -> int\n"
    "QTabBar.insertTab(int, QIcon, QString) -> int");

extern "C" {static PyObject *meth_QTabBar_insertTab(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_insertTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertTab(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        const QIcon* a1;
        const QString* a2;
        int a2State = 0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9J1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QIcon, &a1, sipType_QString,&a2, &a2State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertTab(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_insertTab, doc_QTabBar_insertTab);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_removeTab, "QTabBar.removeTab(int)");

extern "C" {static PyObject *meth_QTabBar_removeTab(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_removeTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeTab(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_removeTab, doc_QTabBar_removeTab);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_isTabEnabled, "QTabBar.isTabEnabled(int) -> bool");

extern "C" {static PyObject *meth_QTabBar_isTabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_isTabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isTabEnabled(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_isTabEnabled, doc_QTabBar_isTabEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setTabEnabled, "QTabBar.setTabEnabled(int, bool)");

extern "C" {static PyObject *meth_QTabBar_setTabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTabBar, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabEnabled(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabEnabled, doc_QTabBar_setTabEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabText, "QTabBar.tabText(int) -> QString");

extern "C" {static PyObject *meth_QTabBar_tabText(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->tabText(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabText, doc_QTabBar_tabText);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setTabText, "QTabBar.setTabText(int, QString)");

extern "C" {static PyObject *meth_QTabBar_setTabText(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabText(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabText, doc_QTabBar_setTabText);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabTextColor, "QTabBar.tabTextColor(int) -> QColor");

extern "C" {static PyObject *meth_QTabBar_tabTextColor(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            QColor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->tabTextColor(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabTextColor, doc_QTabBar_tabTextColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setTabTextColor, "QTabBar.setTabTextColor(int, QColor)");

extern "C" {static PyObject *meth_QTabBar_setTabTextColor(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QColor* a1;
        int a1State = 0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabTextColor(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabTextColor, doc_QTabBar_setTabTextColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabIcon, "QTabBar.tabIcon(int) -> QIcon");

extern "C" {static PyObject *meth_QTabBar_tabIcon(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->tabIcon(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabIcon, doc_QTabBar_tabIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setTabIcon, "QTabBar.setTabIcon(int, QIcon)");

extern "C" {static PyObject *meth_QTabBar_setTabIcon(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QIcon* a1;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QIcon, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabIcon(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabIcon, doc_QTabBar_setTabIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setTabToolTip, "QTabBar.setTabToolTip(int, QString)");

extern "C" {static PyObject *meth_QTabBar_setTabToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabToolTip(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabToolTip, doc_QTabBar_setTabToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabToolTip, "QTabBar.tabToolTip(int) -> QString");

extern "C" {static PyObject *meth_QTabBar_tabToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->tabToolTip(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabToolTip, doc_QTabBar_tabToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setTabWhatsThis, "QTabBar.setTabWhatsThis(int, QString)");

extern "C" {static PyObject *meth_QTabBar_setTabWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabWhatsThis(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabWhatsThis, doc_QTabBar_setTabWhatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabWhatsThis, "QTabBar.tabWhatsThis(int) -> QString");

extern "C" {static PyObject *meth_QTabBar_tabWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->tabWhatsThis(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabWhatsThis, doc_QTabBar_tabWhatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setTabData, "QTabBar.setTabData(int, QVariant)");

extern "C" {static PyObject *meth_QTabBar_setTabData(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QVariant* a1;
        int a1State = 0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabData(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabData, doc_QTabBar_setTabData);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabData, "QTabBar.tabData(int) -> QVariant");

extern "C" {static PyObject *meth_QTabBar_tabData(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->tabData(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabData, doc_QTabBar_tabData);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabAt, "QTabBar.tabAt(QPoint) -> int");

extern "C" {static PyObject *meth_QTabBar_tabAt(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabAt(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabAt, doc_QTabBar_tabAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabRect, "QTabBar.tabRect(int) -> QRect");

extern "C" {static PyObject *meth_QTabBar_tabRect(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->tabRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabRect, doc_QTabBar_tabRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_currentIndex, "QTabBar.currentIndex() -> int");

extern "C" {static PyObject *meth_QTabBar_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_currentIndex, doc_QTabBar_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_count, "QTabBar.count() -> int");

extern "C" {static PyObject *meth_QTabBar_count(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_count, doc_QTabBar_count);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_sizeHint, "QTabBar.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QTabBar_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QTabBar::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_sizeHint, doc_QTabBar_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_minimumSizeHint, "QTabBar.minimumSizeHint() -> QSize");

extern "C" {static PyObject *meth_QTabBar_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QTabBar::minimumSizeHint() : sipCpp->minimumSizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_minimumSizeHint, doc_QTabBar_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setDrawBase, "QTabBar.setDrawBase(bool)");

extern "C" {static PyObject *meth_QTabBar_setDrawBase(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setDrawBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDrawBase(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setDrawBase, doc_QTabBar_setDrawBase);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_drawBase, "QTabBar.drawBase() -> bool");

extern "C" {static PyObject *meth_QTabBar_drawBase(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_drawBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->drawBase();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_drawBase, doc_QTabBar_drawBase);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_iconSize, "QTabBar.iconSize() -> QSize");

extern "C" {static PyObject *meth_QTabBar_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->iconSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_iconSize, doc_QTabBar_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setIconSize, "QTabBar.setIconSize(QSize)");

extern "C" {static PyObject *meth_QTabBar_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setIconSize, doc_QTabBar_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_elideMode, "QTabBar.elideMode() -> Qt.TextElideMode");

extern "C" {static PyObject *meth_QTabBar_elideMode(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_elideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            Qt::TextElideMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->elideMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_TextElideMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_elideMode, doc_QTabBar_elideMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setElideMode, "QTabBar.setElideMode(Qt.TextElideMode)");

extern "C" {static PyObject *meth_QTabBar_setElideMode(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setElideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::TextElideMode a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabBar, &sipCpp, sipType_Qt_TextElideMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setElideMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setElideMode, doc_QTabBar_setElideMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setUsesScrollButtons, "QTabBar.setUsesScrollButtons(bool)");

extern "C" {static PyObject *meth_QTabBar_setUsesScrollButtons(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setUsesScrollButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUsesScrollButtons(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setUsesScrollButtons, doc_QTabBar_setUsesScrollButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_usesScrollButtons, "QTabBar.usesScrollButtons() -> bool");

extern "C" {static PyObject *meth_QTabBar_usesScrollButtons(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_usesScrollButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->usesScrollButtons();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_usesScrollButtons, doc_QTabBar_usesScrollButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setCurrentIndex, "QTabBar.setCurrentIndex(int)");

extern "C" {static PyObject *meth_QTabBar_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentIndex(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setCurrentIndex, doc_QTabBar_setCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_initStyleOption, "QTabBar.initStyleOption(QStyleOptionTab, int)");

extern "C" {static PyObject *meth_QTabBar_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyleOptionTab* a0;
        int a1;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8i", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QStyleOptionTab, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->initStyleOption(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_initStyleOption, doc_QTabBar_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabSizeHint, "QTabBar.tabSizeHint(int) -> QSize");

extern "C" {static PyObject *meth_QTabBar_tabSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QTabBar::tabSizeHint(a0) : sipCpp->tabSizeHint(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabSizeHint, doc_QTabBar_tabSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabInserted, "QTabBar.tabInserted(int)");

extern "C" {static PyObject *meth_QTabBar_tabInserted(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::tabInserted(a0) : sipCpp->tabInserted(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabInserted, doc_QTabBar_tabInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabRemoved, "QTabBar.tabRemoved(int)");

extern "C" {static PyObject *meth_QTabBar_tabRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::tabRemoved(a0) : sipCpp->tabRemoved(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabRemoved, doc_QTabBar_tabRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabLayoutChange, "QTabBar.tabLayoutChange()");

extern "C" {static PyObject *meth_QTabBar_tabLayoutChange(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabLayoutChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::tabLayoutChange() : sipCpp->tabLayoutChange());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabLayoutChange, doc_QTabBar_tabLayoutChange);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_event, "QTabBar.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QTabBar_event(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTabBar::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_event, doc_QTabBar_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_resizeEvent, "QTabBar.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QTabBar_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_resizeEvent, doc_QTabBar_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_showEvent, "QTabBar.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QTabBar_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_showEvent, doc_QTabBar_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_paintEvent, "QTabBar.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QTabBar_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_paintEvent, doc_QTabBar_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_mousePressEvent, "QTabBar.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTabBar_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_mousePressEvent, doc_QTabBar_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_mouseMoveEvent, "QTabBar.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTabBar_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_mouseMoveEvent, doc_QTabBar_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_mouseReleaseEvent, "QTabBar.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTabBar_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_mouseReleaseEvent, doc_QTabBar_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_keyPressEvent, "QTabBar.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTabBar_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_keyPressEvent, doc_QTabBar_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_changeEvent, "QTabBar.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QTabBar_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_changeEvent, doc_QTabBar_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_moveTab, "QTabBar.moveTab(int, int)");

extern "C" {static PyObject *meth_QTabBar_moveTab(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_moveTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTabBar, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTab(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_moveTab, doc_QTabBar_moveTab);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabsClosable, "QTabBar.tabsClosable() -> bool");

extern "C" {static PyObject *meth_QTabBar_tabsClosable(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabsClosable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabsClosable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabsClosable, doc_QTabBar_tabsClosable);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setTabsClosable, "QTabBar.setTabsClosable(bool)");

extern "C" {static PyObject *meth_QTabBar_setTabsClosable(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabsClosable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabsClosable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabsClosable, doc_QTabBar_setTabsClosable);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setTabButton, "QTabBar.setTabButton(int, QTabBar.ButtonPosition, QWidget)");

extern "C" {static PyObject *meth_QTabBar_setTabButton(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTabBar::ButtonPosition a1;
        QWidget* a2;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QTabBar_ButtonPosition, &a1, sipType_QWidget, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabButton(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabButton, doc_QTabBar_setTabButton);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_tabButton, "QTabBar.tabButton(int, QTabBar.ButtonPosition) -> QWidget");

extern "C" {static PyObject *meth_QTabBar_tabButton(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTabBar::ButtonPosition a1;
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QTabBar_ButtonPosition, &a1))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabButton(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabButton, doc_QTabBar_tabButton);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_selectionBehaviorOnRemove, "QTabBar.selectionBehaviorOnRemove() -> QTabBar.SelectionBehavior");

extern "C" {static PyObject *meth_QTabBar_selectionBehaviorOnRemove(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_selectionBehaviorOnRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            QTabBar::SelectionBehavior sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->selectionBehaviorOnRemove();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTabBar_SelectionBehavior);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_selectionBehaviorOnRemove, doc_QTabBar_selectionBehaviorOnRemove);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setSelectionBehaviorOnRemove, "QTabBar.setSelectionBehaviorOnRemove(QTabBar.SelectionBehavior)");

extern "C" {static PyObject *meth_QTabBar_setSelectionBehaviorOnRemove(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setSelectionBehaviorOnRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTabBar::SelectionBehavior a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QTabBar_SelectionBehavior, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelectionBehaviorOnRemove(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setSelectionBehaviorOnRemove, doc_QTabBar_setSelectionBehaviorOnRemove);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_expanding, "QTabBar.expanding() -> bool");

extern "C" {static PyObject *meth_QTabBar_expanding(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_expanding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->expanding();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_expanding, doc_QTabBar_expanding);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setExpanding, "QTabBar.setExpanding(bool)");

extern "C" {static PyObject *meth_QTabBar_setExpanding(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setExpanding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExpanding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setExpanding, doc_QTabBar_setExpanding);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_isMovable, "QTabBar.isMovable() -> bool");

extern "C" {static PyObject *meth_QTabBar_isMovable(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_isMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isMovable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_isMovable, doc_QTabBar_isMovable);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setMovable, "QTabBar.setMovable(bool)");

extern "C" {static PyObject *meth_QTabBar_setMovable(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMovable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setMovable, doc_QTabBar_setMovable);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_documentMode, "QTabBar.documentMode() -> bool");

extern "C" {static PyObject *meth_QTabBar_documentMode(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_documentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->documentMode();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_documentMode, doc_QTabBar_documentMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_setDocumentMode, "QTabBar.setDocumentMode(bool)");

extern "C" {static PyObject *meth_QTabBar_setDocumentMode(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setDocumentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocumentMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setDocumentMode, doc_QTabBar_setDocumentMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_hideEvent, "QTabBar.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QTabBar_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QHideEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::hideEvent(a0) : sipCpp->hideEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_hideEvent, doc_QTabBar_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabBar_wheelEvent, "QTabBar.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QTabBar_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTabBar::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_wheelEvent, doc_QTabBar_wheelEvent);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QTabBar___len__(PyObject *);}
static SIP_SSIZE_T slot_QTabBar___len__(PyObject *sipSelf)
{
    QTabBar *sipCpp = reinterpret_cast<QTabBar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTabBar));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 3166 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTabBar.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTabBar(void *, const sipTypeDef *);}
static void *cast_QTabBar(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTabBar)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QTabBar *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTabBar(void *, int);}
static void release_QTabBar(void *sipCppV,int)
{
    QTabBar *sipCpp = reinterpret_cast<QTabBar *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTabBar(sipSimpleWrapper *);}
static void dealloc_QTabBar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTabBar *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTabBar(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTabBar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTabBar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTabBar *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTabBar(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTabBar[] = {{755, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QTabBar[] = {
    {(void *)slot_QTabBar___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTabBar[] = {
    {SIP_MLNAME_CAST(sipName_addTab), meth_QTabBar_addTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_addTab)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QTabBar_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_changeEvent)},
    {SIP_MLNAME_CAST(sipName_count), meth_QTabBar_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_count)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QTabBar_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_currentIndex)},
    {SIP_MLNAME_CAST(sipName_documentMode), meth_QTabBar_documentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_documentMode)},
    {SIP_MLNAME_CAST(sipName_drawBase), meth_QTabBar_drawBase, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_drawBase)},
    {SIP_MLNAME_CAST(sipName_elideMode), meth_QTabBar_elideMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_elideMode)},
    {SIP_MLNAME_CAST(sipName_event), meth_QTabBar_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_event)},
    {SIP_MLNAME_CAST(sipName_expanding), meth_QTabBar_expanding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_expanding)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QTabBar_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_hideEvent)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QTabBar_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_iconSize)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QTabBar_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_insertTab), meth_QTabBar_insertTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_insertTab)},
    {SIP_MLNAME_CAST(sipName_isMovable), meth_QTabBar_isMovable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_isMovable)},
    {SIP_MLNAME_CAST(sipName_isTabEnabled), meth_QTabBar_isTabEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_isTabEnabled)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QTabBar_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QTabBar_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QTabBar_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QTabBar_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QTabBar_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveTab), meth_QTabBar_moveTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_moveTab)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QTabBar_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_paintEvent)},
    {SIP_MLNAME_CAST(sipName_removeTab), meth_QTabBar_removeTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_removeTab)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QTabBar_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_selectionBehaviorOnRemove), meth_QTabBar_selectionBehaviorOnRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_selectionBehaviorOnRemove)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QTabBar_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setDocumentMode), meth_QTabBar_setDocumentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setDocumentMode)},
    {SIP_MLNAME_CAST(sipName_setDrawBase), meth_QTabBar_setDrawBase, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setDrawBase)},
    {SIP_MLNAME_CAST(sipName_setElideMode), meth_QTabBar_setElideMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setElideMode)},
    {SIP_MLNAME_CAST(sipName_setExpanding), meth_QTabBar_setExpanding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setExpanding)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QTabBar_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setMovable), meth_QTabBar_setMovable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setMovable)},
    {SIP_MLNAME_CAST(sipName_setSelectionBehaviorOnRemove), meth_QTabBar_setSelectionBehaviorOnRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setSelectionBehaviorOnRemove)},
    {SIP_MLNAME_CAST(sipName_setShape), meth_QTabBar_setShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setShape)},
    {SIP_MLNAME_CAST(sipName_setTabButton), meth_QTabBar_setTabButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setTabButton)},
    {SIP_MLNAME_CAST(sipName_setTabData), meth_QTabBar_setTabData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setTabData)},
    {SIP_MLNAME_CAST(sipName_setTabEnabled), meth_QTabBar_setTabEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setTabEnabled)},
    {SIP_MLNAME_CAST(sipName_setTabIcon), meth_QTabBar_setTabIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setTabIcon)},
    {SIP_MLNAME_CAST(sipName_setTabText), meth_QTabBar_setTabText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setTabText)},
    {SIP_MLNAME_CAST(sipName_setTabTextColor), meth_QTabBar_setTabTextColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setTabTextColor)},
    {SIP_MLNAME_CAST(sipName_setTabToolTip), meth_QTabBar_setTabToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setTabToolTip)},
    {SIP_MLNAME_CAST(sipName_setTabWhatsThis), meth_QTabBar_setTabWhatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setTabWhatsThis)},
    {SIP_MLNAME_CAST(sipName_setTabsClosable), meth_QTabBar_setTabsClosable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setTabsClosable)},
    {SIP_MLNAME_CAST(sipName_setUsesScrollButtons), meth_QTabBar_setUsesScrollButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_setUsesScrollButtons)},
    {SIP_MLNAME_CAST(sipName_shape), meth_QTabBar_shape, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_shape)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QTabBar_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QTabBar_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_sizeHint)},
    {SIP_MLNAME_CAST(sipName_tabAt), meth_QTabBar_tabAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabAt)},
    {SIP_MLNAME_CAST(sipName_tabButton), meth_QTabBar_tabButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabButton)},
    {SIP_MLNAME_CAST(sipName_tabData), meth_QTabBar_tabData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabData)},
    {SIP_MLNAME_CAST(sipName_tabIcon), meth_QTabBar_tabIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabIcon)},
    {SIP_MLNAME_CAST(sipName_tabInserted), meth_QTabBar_tabInserted, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabInserted)},
    {SIP_MLNAME_CAST(sipName_tabLayoutChange), meth_QTabBar_tabLayoutChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabLayoutChange)},
    {SIP_MLNAME_CAST(sipName_tabRect), meth_QTabBar_tabRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabRect)},
    {SIP_MLNAME_CAST(sipName_tabRemoved), meth_QTabBar_tabRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabRemoved)},
    {SIP_MLNAME_CAST(sipName_tabSizeHint), meth_QTabBar_tabSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabSizeHint)},
    {SIP_MLNAME_CAST(sipName_tabText), meth_QTabBar_tabText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabText)},
    {SIP_MLNAME_CAST(sipName_tabTextColor), meth_QTabBar_tabTextColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabTextColor)},
    {SIP_MLNAME_CAST(sipName_tabToolTip), meth_QTabBar_tabToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabToolTip)},
    {SIP_MLNAME_CAST(sipName_tabWhatsThis), meth_QTabBar_tabWhatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabWhatsThis)},
    {SIP_MLNAME_CAST(sipName_tabsClosable), meth_QTabBar_tabsClosable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_tabsClosable)},
    {SIP_MLNAME_CAST(sipName_usesScrollButtons), meth_QTabBar_usesScrollButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_usesScrollButtons)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QTabBar_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabBar_wheelEvent)}
};

static sipEnumMemberDef enummembers_QTabBar[] = {
    {sipName_LeftSide, static_cast<int>(QTabBar::LeftSide), 629},
    {sipName_RightSide, static_cast<int>(QTabBar::RightSide), 629},
    {sipName_RoundedEast, static_cast<int>(QTabBar::RoundedEast), 631},
    {sipName_RoundedNorth, static_cast<int>(QTabBar::RoundedNorth), 631},
    {sipName_RoundedSouth, static_cast<int>(QTabBar::RoundedSouth), 631},
    {sipName_RoundedWest, static_cast<int>(QTabBar::RoundedWest), 631},
    {sipName_SelectLeftTab, static_cast<int>(QTabBar::SelectLeftTab), 630},
    {sipName_SelectPreviousTab, static_cast<int>(QTabBar::SelectPreviousTab), 630},
    {sipName_SelectRightTab, static_cast<int>(QTabBar::SelectRightTab), 630},
    {sipName_TriangularEast, static_cast<int>(QTabBar::TriangularEast), 631},
    {sipName_TriangularNorth, static_cast<int>(QTabBar::TriangularNorth), 631},
    {sipName_TriangularSouth, static_cast<int>(QTabBar::TriangularSouth), 631},
    {sipName_TriangularWest, static_cast<int>(QTabBar::TriangularWest), 631},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QTabBar[] = {
    {"tabMoved(int,int)", "\1QTabBar.tabMoved[int, int]", 0, 0},
    {"tabCloseRequested(int)", "\1QTabBar.tabCloseRequested[int]", 0, 0},
    {"currentChanged(int)", "\1QTabBar.currentChanged[int]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTabBar, "\1QTabBar(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTabBar = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTabBar,
        {0}
    },
    {
        sipNameNr_QTabBar,
        {0, 0, 1},
        63, methods_QTabBar,
        13, enummembers_QTabBar,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTabBar,
    -1,
    -1,
    supers_QTabBar,
    slots_QTabBar,
    init_type_QTabBar,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTabBar,
    0,
    0,
    0,
    release_QTabBar,
    cast_QTabBar,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTabBar::staticMetaObject,
    0,
    signals_QTabBar,
};
