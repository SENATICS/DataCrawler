/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qimagewriter.sip"
#include <qimagewriter.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQImageWriter.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQImageWriter.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQImageWriter.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQImageWriter.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQImageWriter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQImageWriter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQImageWriter.cpp"


PyDoc_STRVAR(doc_QImageWriter_setFormat, "QImageWriter.setFormat(QByteArray)");

extern "C" {static PyObject *meth_QImageWriter_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormat(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setFormat, doc_QImageWriter_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_format, "QImageWriter.format() -> QByteArray");

extern "C" {static PyObject *meth_QImageWriter_format(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->format());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_format, doc_QImageWriter_format);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_setDevice, "QImageWriter.setDevice(QIODevice)");

extern "C" {static PyObject *meth_QImageWriter_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setDevice, doc_QImageWriter_setDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_device, "QImageWriter.device() -> QIODevice");

extern "C" {static PyObject *meth_QImageWriter_device(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            QIODevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_device, doc_QImageWriter_device);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_setFileName, "QImageWriter.setFileName(QString)");

extern "C" {static PyObject *meth_QImageWriter_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFileName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setFileName, doc_QImageWriter_setFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_fileName, "QImageWriter.fileName() -> QString");

extern "C" {static PyObject *meth_QImageWriter_fileName(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_fileName, doc_QImageWriter_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_setQuality, "QImageWriter.setQuality(int)");

extern "C" {static PyObject *meth_QImageWriter_setQuality(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setQuality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImageWriter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQuality(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setQuality, doc_QImageWriter_setQuality);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_quality, "QImageWriter.quality() -> int");

extern "C" {static PyObject *meth_QImageWriter_quality(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_quality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->quality();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_quality, doc_QImageWriter_quality);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_setGamma, "QImageWriter.setGamma(float)");

extern "C" {static PyObject *meth_QImageWriter_setGamma(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setGamma(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QImageWriter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGamma(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setGamma, doc_QImageWriter_setGamma);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_gamma, "QImageWriter.gamma() -> float");

extern "C" {static PyObject *meth_QImageWriter_gamma(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_gamma(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->gamma();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_gamma, doc_QImageWriter_gamma);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_setDescription, "QImageWriter.setDescription(QString)");

extern "C" {static PyObject *meth_QImageWriter_setDescription(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDescription(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setDescription, doc_QImageWriter_setDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_description, "QImageWriter.description() -> QString");

extern "C" {static PyObject *meth_QImageWriter_description(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->description());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_description, doc_QImageWriter_description);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_canWrite, "QImageWriter.canWrite() -> bool");

extern "C" {static PyObject *meth_QImageWriter_canWrite(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_canWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canWrite();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_canWrite, doc_QImageWriter_canWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_write, "QImageWriter.write(QImage) -> bool");

extern "C" {static PyObject *meth_QImageWriter_write(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage* a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QImage, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->write(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_write, doc_QImageWriter_write);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_error, "QImageWriter.error() -> QImageWriter.ImageWriterError");

extern "C" {static PyObject *meth_QImageWriter_error(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            QImageWriter::ImageWriterError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QImageWriter_ImageWriterError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_error, doc_QImageWriter_error);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_errorString, "QImageWriter.errorString() -> QString");

extern "C" {static PyObject *meth_QImageWriter_errorString(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_errorString, doc_QImageWriter_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_supportedImageFormats, "QImageWriter.supportedImageFormats() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QImageWriter_supportedImageFormats(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_supportedImageFormats(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QByteArray>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(QImageWriter::supportedImageFormats());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_supportedImageFormats, doc_QImageWriter_supportedImageFormats);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_setText, "QImageWriter.setText(QString, QString)");

extern "C" {static PyObject *meth_QImageWriter_setText(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setText, doc_QImageWriter_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_supportsOption, "QImageWriter.supportsOption(QImageIOHandler.ImageOption) -> bool");

extern "C" {static PyObject *meth_QImageWriter_supportsOption(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_supportsOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QImageIOHandler::ImageOption a0;
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QImageIOHandler_ImageOption, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsOption(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_supportsOption, doc_QImageWriter_supportsOption);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_setCompression, "QImageWriter.setCompression(int)");

extern "C" {static PyObject *meth_QImageWriter_setCompression(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setCompression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImageWriter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCompression(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setCompression, doc_QImageWriter_setCompression);

    return NULL;
}


PyDoc_STRVAR(doc_QImageWriter_compression, "QImageWriter.compression() -> int");

extern "C" {static PyObject *meth_QImageWriter_compression(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_compression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compression();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_compression, doc_QImageWriter_compression);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QImageWriter(void *, const sipTypeDef *);}
static void *cast_QImageWriter(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QImageWriter)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImageWriter(void *, int);}
static void release_QImageWriter(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QImageWriter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QImageWriter(sipSimpleWrapper *);}
static void dealloc_QImageWriter(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QImageWriter(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QImageWriter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QImageWriter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QImageWriter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QImageWriter();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QIODevice* a0;
        const QByteArray* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J1", sipType_QIODevice, &a0, sipType_QByteArray, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QImageWriter(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QByteArray& a1def = QByteArray();
        const QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QImageWriter(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QImageWriter[] = {
    {SIP_MLNAME_CAST(sipName_canWrite), meth_QImageWriter_canWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_canWrite)},
    {SIP_MLNAME_CAST(sipName_compression), meth_QImageWriter_compression, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_compression)},
    {SIP_MLNAME_CAST(sipName_description), meth_QImageWriter_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_description)},
    {SIP_MLNAME_CAST(sipName_device), meth_QImageWriter_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_device)},
    {SIP_MLNAME_CAST(sipName_error), meth_QImageWriter_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QImageWriter_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_errorString)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QImageWriter_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QImageWriter_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_format)},
    {SIP_MLNAME_CAST(sipName_gamma), meth_QImageWriter_gamma, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_gamma)},
    {SIP_MLNAME_CAST(sipName_quality), meth_QImageWriter_quality, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_quality)},
    {SIP_MLNAME_CAST(sipName_setCompression), meth_QImageWriter_setCompression, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setCompression)},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_QImageWriter_setDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setDescription)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QImageWriter_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QImageWriter_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setFileName)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QImageWriter_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setFormat)},
    {SIP_MLNAME_CAST(sipName_setGamma), meth_QImageWriter_setGamma, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setGamma)},
    {SIP_MLNAME_CAST(sipName_setQuality), meth_QImageWriter_setQuality, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setQuality)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QImageWriter_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setText)},
    {SIP_MLNAME_CAST(sipName_supportedImageFormats), meth_QImageWriter_supportedImageFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_supportedImageFormats)},
    {SIP_MLNAME_CAST(sipName_supportsOption), meth_QImageWriter_supportsOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_supportsOption)},
    {SIP_MLNAME_CAST(sipName_write), meth_QImageWriter_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_write)}
};

static sipEnumMemberDef enummembers_QImageWriter[] = {
    {sipName_DeviceError, static_cast<int>(QImageWriter::DeviceError), 244},
    {sipName_UnknownError, static_cast<int>(QImageWriter::UnknownError), 244},
    {sipName_UnsupportedFormatError, static_cast<int>(QImageWriter::UnsupportedFormatError), 244},
};

PyDoc_STRVAR(doc_QImageWriter, "\1QImageWriter()\n"
    "QImageWriter(QIODevice, QByteArray)\n"
    "QImageWriter(QString, QByteArray format=QByteArray())");


pyqt4ClassTypeDef sipTypeDef_QtGui_QImageWriter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QImageWriter,
        {0}
    },
    {
        sipNameNr_QImageWriter,
        {0, 0, 1},
        21, methods_QImageWriter,
        3, enummembers_QImageWriter,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QImageWriter,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QImageWriter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QImageWriter,
    0,
    0,
    0,
    release_QImageWriter,
    cast_QImageWriter,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
