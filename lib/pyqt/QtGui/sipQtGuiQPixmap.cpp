/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qimagereader.sip"
#include <qimagereader.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"


class sipQPixmap : public QPixmap
{
public:
    sipQPixmap();
    sipQPixmap(int,int);
    sipQPixmap(const QSize&);
    sipQPixmap(const QString&,const char*,Qt::ImageConversionFlags);
    sipQPixmap(const char**);
    sipQPixmap(const QPixmap&);
    virtual ~sipQPixmap();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int metric(QPaintDevice::PaintDeviceMetric) const;
    QPaintEngine* paintEngine() const;
    int devType() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPixmap(const sipQPixmap &);
    sipQPixmap &operator = (const sipQPixmap &);

    char sipPyMethods[3];
};

sipQPixmap::sipQPixmap(): QPixmap(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(int a0,int a1): QPixmap(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const QSize& a0): QPixmap(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const QString& a0,const char*a1,Qt::ImageConversionFlags a2): QPixmap(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const char**a0): QPixmap(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const QPixmap& a0): QPixmap(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::~sipQPixmap()
{
    sipCommonDtor(sipPySelf);
}

int sipQPixmap::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QPixmap::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQPixmap::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QPixmap::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQPixmap::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QPixmap::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QPixmap_isNull, "QPixmap.isNull() -> bool");

extern "C" {static PyObject *meth_QPixmap_isNull(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_isNull, doc_QPixmap_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_devType, "QPixmap.devType() -> int");

extern "C" {static PyObject *meth_QPixmap_devType(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPixmap::devType() : sipCpp->devType());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_devType, doc_QPixmap_devType);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_width, "QPixmap.width() -> int");

extern "C" {static PyObject *meth_QPixmap_width(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->width();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_width, doc_QPixmap_width);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_height, "QPixmap.height() -> int");

extern "C" {static PyObject *meth_QPixmap_height(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->height();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_height, doc_QPixmap_height);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_size, "QPixmap.size() -> QSize");

extern "C" {static PyObject *meth_QPixmap_size(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_size, doc_QPixmap_size);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_rect, "QPixmap.rect() -> QRect");

extern "C" {static PyObject *meth_QPixmap_rect(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->rect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_rect, doc_QPixmap_rect);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_depth, "QPixmap.depth() -> int");

extern "C" {static PyObject *meth_QPixmap_depth(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->depth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_depth, doc_QPixmap_depth);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_defaultDepth, "QPixmap.defaultDepth() -> int");

extern "C" {static PyObject *meth_QPixmap_defaultDepth(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_defaultDepth(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QPixmap::defaultDepth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_defaultDepth, doc_QPixmap_defaultDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_fill, "QPixmap.fill(QColor color=Qt.white)\n"
    "QPixmap.fill(QWidget, QPoint)\n"
    "QPixmap.fill(QWidget, int, int)");

extern "C" {static PyObject *meth_QPixmap_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor& a0def = Qt::white;
        const QColor* a0 = &a0def;
        int a0State = 0;
        QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            sipName_color,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QWidget* a0;
        const QPoint* a1;
        QPixmap *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QWidget, &a0, sipType_QPoint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QWidget* a0;
        int a1;
        int a2;
        QPixmap *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8ii", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QWidget, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_fill, doc_QPixmap_fill);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_mask, "QPixmap.mask() -> QBitmap");

extern "C" {static PyObject *meth_QPixmap_mask(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_mask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            QBitmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBitmap(sipCpp->mask());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBitmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_mask, doc_QPixmap_mask);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_setMask, "QPixmap.setMask(QBitmap)");

extern "C" {static PyObject *meth_QPixmap_setMask(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_setMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBitmap* a0;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QBitmap, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMask(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_setMask, doc_QPixmap_setMask);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_alphaChannel, "QPixmap.alphaChannel() -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_alphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_alphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->alphaChannel());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_alphaChannel, doc_QPixmap_alphaChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_setAlphaChannel, "QPixmap.setAlphaChannel(QPixmap)");

extern "C" {static PyObject *meth_QPixmap_setAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_setAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap* a0;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QPixmap, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlphaChannel(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_setAlphaChannel, doc_QPixmap_setAlphaChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_hasAlpha, "QPixmap.hasAlpha() -> bool");

extern "C" {static PyObject *meth_QPixmap_hasAlpha(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_hasAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasAlpha();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_hasAlpha, doc_QPixmap_hasAlpha);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_hasAlphaChannel, "QPixmap.hasAlphaChannel() -> bool");

extern "C" {static PyObject *meth_QPixmap_hasAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_hasAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasAlphaChannel();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_hasAlphaChannel, doc_QPixmap_hasAlphaChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_createHeuristicMask, "QPixmap.createHeuristicMask(bool clipTight=True) -> QBitmap");

extern "C" {static PyObject *meth_QPixmap_createHeuristicMask(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_createHeuristicMask(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        const QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            sipName_clipTight,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QPixmap, &sipCpp, &a0))
        {
            QBitmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBitmap(sipCpp->createHeuristicMask(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBitmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_createHeuristicMask, doc_QPixmap_createHeuristicMask);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_createMaskFromColor, "QPixmap.createMaskFromColor(QColor, Qt.MaskMode) -> QBitmap\n"
    "QPixmap.createMaskFromColor(QColor) -> QBitmap");

extern "C" {static PyObject *meth_QPixmap_createMaskFromColor(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_createMaskFromColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        Qt::MaskMode a1;
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QColor, &a0, &a0State, sipType_Qt_MaskMode, &a1))
        {
            QBitmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBitmap(sipCpp->createMaskFromColor(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBitmap,NULL);
        }
    }

    {
        const QColor* a0;
        int a0State = 0;
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            QBitmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBitmap(sipCpp->createMaskFromColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBitmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_createMaskFromColor, doc_QPixmap_createMaskFromColor);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_grabWindow, "QPixmap.grabWindow(int, int x=0, int y=0, int width=-1, int height=-1) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_grabWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_grabWindow(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0;
        int a1 = 0;
        int a2 = 0;
        int a3 = -1;
        int a4 = -1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "m|iiii", &a0, &a1, &a2, &a3, &a4))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::grabWindow(a0,a1,a2,a3,a4));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_grabWindow, doc_QPixmap_grabWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_grabWidget, "QPixmap.grabWidget(QWidget, QRect) -> QPixmap\n"
    "QPixmap.grabWidget(QWidget, int x=0, int y=0, int width=-1, int height=-1) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_grabWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_grabWidget(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QRect* a1;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J8J9", sipType_QWidget, &a0, sipType_QRect, &a1))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::grabWidget(a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    {
        QWidget* a0;
        int a1 = 0;
        int a2 = 0;
        int a3 = -1;
        int a4 = -1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|iiii", sipType_QWidget, &a0, &a1, &a2, &a3, &a4))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::grabWidget(a0,a1,a2,a3,a4));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_grabWidget, doc_QPixmap_grabWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_scaled, "QPixmap.scaled(int, int, Qt.AspectRatioMode aspectRatioMode=Qt.IgnoreAspectRatio, Qt.TransformationMode transformMode=Qt.FastTransformation) -> QPixmap\n"
    "QPixmap.scaled(QSize, Qt.AspectRatioMode aspectRatioMode=Qt.IgnoreAspectRatio, Qt.TransformationMode transformMode=Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_scaled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        Qt::AspectRatioMode a2 = Qt::IgnoreAspectRatio;
        Qt::TransformationMode a3 = Qt::FastTransformation;
        const QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_aspectRatioMode,
            sipName_transformMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|EE", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2, sipType_Qt_TransformationMode, &a3))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->scaled(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    {
        const QSize* a0;
        Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
        Qt::TransformationMode a2 = Qt::FastTransformation;
        const QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_aspectRatioMode,
            sipName_transformMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EE", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QSize, &a0, sipType_Qt_AspectRatioMode, &a1, sipType_Qt_TransformationMode, &a2))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->scaled(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scaled, doc_QPixmap_scaled);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_scaledToWidth, "QPixmap.scaledToWidth(int, Qt.TransformationMode mode=Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_scaledToWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaledToWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        const QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QPixmap, &sipCpp, &a0, sipType_Qt_TransformationMode, &a1))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->scaledToWidth(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scaledToWidth, doc_QPixmap_scaledToWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_scaledToHeight, "QPixmap.scaledToHeight(int, Qt.TransformationMode mode=Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_scaledToHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaledToHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        const QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QPixmap, &sipCpp, &a0, sipType_Qt_TransformationMode, &a1))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->scaledToHeight(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scaledToHeight, doc_QPixmap_scaledToHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_transformed, "QPixmap.transformed(QMatrix, Qt.TransformationMode mode=Qt.FastTransformation) -> QPixmap\n"
    "QPixmap.transformed(QTransform, Qt.TransformationMode mode=Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_transformed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_transformed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix* a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        const QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QMatrix, &a0, sipType_Qt_TransformationMode, &a1))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->transformed(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    {
        const QTransform* a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        const QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QTransform, &a0, sipType_Qt_TransformationMode, &a1))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->transformed(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_transformed, doc_QPixmap_transformed);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_trueMatrix, "QPixmap.trueMatrix(QMatrix, int, int) -> QMatrix\n"
    "QPixmap.trueMatrix(QTransform, int, int) -> QTransform");

extern "C" {static PyObject *meth_QPixmap_trueMatrix(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_trueMatrix(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix* a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9ii", sipType_QMatrix, &a0, &a1, &a2))
        {
            QMatrix*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(QPixmap::trueMatrix(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    {
        const QTransform* a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9ii", sipType_QTransform, &a0, &a1, &a2))
        {
            QTransform*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(QPixmap::trueMatrix(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_trueMatrix, doc_QPixmap_trueMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_toImage, "QPixmap.toImage() -> QImage");

extern "C" {static PyObject *meth_QPixmap_toImage(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_toImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            QImage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->toImage());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_toImage, doc_QPixmap_toImage);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_fromImage, "QPixmap.fromImage(QImage, Qt.ImageConversionFlags flags=Qt.AutoColor) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_fromImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fromImage(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage* a0;
        Qt::ImageConversionFlags a1def = Qt::AutoColor;
        Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J9|J1", sipType_QImage, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::fromImage(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_fromImage, doc_QPixmap_fromImage);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_fromImageReader, "QPixmap.fromImageReader(QImageReader, Qt.ImageConversionFlags flags=Qt.AutoColor) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_fromImageReader(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fromImageReader(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QImageReader* a0;
        Qt::ImageConversionFlags a1def = Qt::AutoColor;
        Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|J1", sipType_QImageReader, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::fromImageReader(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_fromImageReader, doc_QPixmap_fromImageReader);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_convertFromImage, "QPixmap.convertFromImage(QImage, Qt.ImageConversionFlags flags=Qt.AutoColor) -> bool");

extern "C" {static PyObject *meth_QPixmap_convertFromImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_convertFromImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage* a0;
        Qt::ImageConversionFlags a1def = Qt::AutoColor;
        Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;
        QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QImage, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->convertFromImage(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_convertFromImage, doc_QPixmap_convertFromImage);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_load, "QPixmap.load(QString, str format=None, Qt.ImageConversionFlags flags=Qt.AutoColor) -> bool");

extern "C" {static PyObject *meth_QPixmap_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        Qt::ImageConversionFlags a2def = Qt::AutoColor;
        Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;
        QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|sJ1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_load, doc_QPixmap_load);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_loadFromData, "QPixmap.loadFromData(str, str format=None, Qt.ImageConversionFlags flags=Qt.AutoColor) -> bool\n"
    "QPixmap.loadFromData(QByteArray, str format=None, Qt.ImageConversionFlags flags=Qt.AutoColor) -> bool");

extern "C" {static PyObject *meth_QPixmap_loadFromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_loadFromData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const uchar* a0;
        SIP_SSIZE_T a1;
        const char* a2 = 0;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
        QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bk|sJ1", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->loadFromData(a0,(uint)a1,a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        const char* a1 = 0;
        Qt::ImageConversionFlags a2def = Qt::AutoColor;
        Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;
        QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|sJ1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->loadFromData(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_loadFromData, doc_QPixmap_loadFromData);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_save, "QPixmap.save(QString, str format=None, int quality=-1) -> bool\n"
    "QPixmap.save(QIODevice, str format=None, int quality=-1) -> bool");

extern "C" {static PyObject *meth_QPixmap_save(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_save(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        int a2 = -1;
        const QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|si", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QIODevice* a0;
        const char* a1 = 0;
        int a2 = -1;
        const QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|si", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QIODevice, &a0, &a1, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_save, doc_QPixmap_save);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_copy, "QPixmap.copy(QRect rect=QRect()) -> QPixmap\n"
    "QPixmap.copy(int, int, int, int) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect& a0def = QRect();
        const QRect* a0 = &a0def;
        const QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QRect, &a0))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->copy(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QPixmap *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biiii", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, &a2, &a3))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->copy(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_copy, doc_QPixmap_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_serialNumber, "QPixmap.serialNumber() -> int");

extern "C" {static PyObject *meth_QPixmap_serialNumber(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_serialNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->serialNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_serialNumber, doc_QPixmap_serialNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_detach, "QPixmap.detach()");

extern "C" {static PyObject *meth_QPixmap_detach(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_detach, doc_QPixmap_detach);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_x11PictureHandle, "QPixmap.x11PictureHandle() -> int");

extern "C" {static PyObject *meth_QPixmap_x11PictureHandle(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_x11PictureHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x11PictureHandle();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_x11PictureHandle, doc_QPixmap_x11PictureHandle);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_isQBitmap, "QPixmap.isQBitmap() -> bool");

extern "C" {static PyObject *meth_QPixmap_isQBitmap(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_isQBitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isQBitmap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_isQBitmap, doc_QPixmap_isQBitmap);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_x11Info, "QPixmap.x11Info() -> QX11Info");

extern "C" {static PyObject *meth_QPixmap_x11Info(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_x11Info(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            QX11Info*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QX11Info(sipCpp->x11Info());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QX11Info,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_x11Info, doc_QPixmap_x11Info);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_handle, "QPixmap.handle() -> int");

extern "C" {static PyObject *meth_QPixmap_handle(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->handle();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_handle, doc_QPixmap_handle);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_paintEngine, "QPixmap.paintEngine() -> QPaintEngine");

extern "C" {static PyObject *meth_QPixmap_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            QPaintEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPixmap::paintEngine() : sipCpp->paintEngine());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_paintEngine, doc_QPixmap_paintEngine);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_metric, "QPixmap.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QPixmap_metric(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPixmap::metric(a0) : sipCpp->metric(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_metric, doc_QPixmap_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_cacheKey, "QPixmap.cacheKey() -> int");

extern "C" {static PyObject *meth_QPixmap_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cacheKey();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_cacheKey, doc_QPixmap_cacheKey);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_fromX11Pixmap, "QPixmap.fromX11Pixmap(int, QPixmap.ShareMode mode=QPixmap.ImplicitlyShared) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_fromX11Pixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fromX11Pixmap(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::HANDLE a0;
        QPixmap::ShareMode a1 = QPixmap::ImplicitlyShared;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "m|E", &a0, sipType_QPixmap_ShareMode, &a1))
        {
            QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::fromX11Pixmap(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_fromX11Pixmap, doc_QPixmap_fromX11Pixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_scroll, "QPixmap.scroll(int, int, QRect) -> QRegion\n"
    "QPixmap.scroll(int, int, int, int, int, int) -> QRegion");

extern "C" {static PyObject *meth_QPixmap_scroll(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scroll(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QRect* a2;
        QRegion* a3;
        QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiJ9", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, sipType_QRect, &a2))
        {
            a3 = new QRegion();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->scroll(a0,a1,*a2,a3);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(a3,sipType_QRegion,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
        QRegion* a6;
        QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            a6 = new QRegion();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->scroll(a0,a1,a2,a3,a4,a5,a6);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(a6,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scroll, doc_QPixmap_scroll);

    return NULL;
}


PyDoc_STRVAR(doc_QPixmap_swap, "QPixmap.swap(QPixmap)");

extern "C" {static PyObject *meth_QPixmap_swap(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPixmap* a0;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QPixmap, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->swap(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_swap, doc_QPixmap_swap);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPixmap(void *, const sipTypeDef *);}
static void *cast_QPixmap(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPixmap)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPaintDevice)->ctd_cast((QPaintDevice *)(QPixmap *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPixmap(void *, int);}
static void release_QPixmap(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPixmap *>(sipCppV);
    else
        delete reinterpret_cast<QPixmap *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QPixmap(void *, SIP_SSIZE_T, const void *);}
static void assign_QPixmap(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPixmap *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPixmap *>(sipSrc);
}


extern "C" {static void *array_QPixmap(SIP_SSIZE_T);}
static void *array_QPixmap(SIP_SSIZE_T sipNrElem)
{
    return new QPixmap[sipNrElem];
}


extern "C" {static void *copy_QPixmap(const void *, SIP_SSIZE_T);}
static void *copy_QPixmap(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPixmap(reinterpret_cast<const QPixmap *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPixmap(sipSimpleWrapper *);}
static void dealloc_QPixmap(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPixmap *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPixmap(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPixmap(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPixmap(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPixmap *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPixmap();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "ii", &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPixmap(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QSize* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPixmap(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        Qt::ImageConversionFlags a2def = Qt::AutoColor;
        Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|sJ1", sipType_QString,&a0, &a0State, &a1, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPixmap(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpixmap.sip"
        // The Python interface is a list of strings that make up the image.
        
        const char **str = QtGui_ListToArray(a0);
        
        if (str)
        {
            sipCpp = new sipQPixmap(str);
            QtGui_DeleteArray(str);
        }
        else
            sipIsErr = 1;
#line 2054 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPixmap* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPixmap, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPixmap(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QVariant* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QVariant,&a0, &a0State))
        {
#line 66 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpixmap.sip"
        #if QT_VERSION >= 0x050000
        sipCpp = new sipQPixmap(a0->value<QPixmap>());
        #else
        sipCpp = new sipQPixmap(qVariantValue<QPixmap>(*a0));
        #endif
#line 2100 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQPixmap.cpp"
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPixmap[] = {{362, 255, 1}};


static PyMethodDef methods_QPixmap[] = {
    {SIP_MLNAME_CAST(sipName_alphaChannel), meth_QPixmap_alphaChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_alphaChannel)},
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QPixmap_cacheKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_cacheKey)},
    {SIP_MLNAME_CAST(sipName_convertFromImage), (PyCFunction)meth_QPixmap_convertFromImage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_convertFromImage)},
    {SIP_MLNAME_CAST(sipName_copy), (PyCFunction)meth_QPixmap_copy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_copy)},
    {SIP_MLNAME_CAST(sipName_createHeuristicMask), (PyCFunction)meth_QPixmap_createHeuristicMask, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_createHeuristicMask)},
    {SIP_MLNAME_CAST(sipName_createMaskFromColor), meth_QPixmap_createMaskFromColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_createMaskFromColor)},
    {SIP_MLNAME_CAST(sipName_defaultDepth), meth_QPixmap_defaultDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_defaultDepth)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QPixmap_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_depth)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QPixmap_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_detach)},
    {SIP_MLNAME_CAST(sipName_devType), meth_QPixmap_devType, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_devType)},
    {SIP_MLNAME_CAST(sipName_fill), (PyCFunction)meth_QPixmap_fill, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_fill)},
    {SIP_MLNAME_CAST(sipName_fromImage), (PyCFunction)meth_QPixmap_fromImage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_fromImage)},
    {SIP_MLNAME_CAST(sipName_fromImageReader), (PyCFunction)meth_QPixmap_fromImageReader, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_fromImageReader)},
    {SIP_MLNAME_CAST(sipName_fromX11Pixmap), (PyCFunction)meth_QPixmap_fromX11Pixmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_fromX11Pixmap)},
    {SIP_MLNAME_CAST(sipName_grabWidget), (PyCFunction)meth_QPixmap_grabWidget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_grabWidget)},
    {SIP_MLNAME_CAST(sipName_grabWindow), (PyCFunction)meth_QPixmap_grabWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_grabWindow)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QPixmap_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_handle)},
    {SIP_MLNAME_CAST(sipName_hasAlpha), meth_QPixmap_hasAlpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_hasAlpha)},
    {SIP_MLNAME_CAST(sipName_hasAlphaChannel), meth_QPixmap_hasAlphaChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_hasAlphaChannel)},
    {SIP_MLNAME_CAST(sipName_height), meth_QPixmap_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_height)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QPixmap_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_isNull)},
    {SIP_MLNAME_CAST(sipName_isQBitmap), meth_QPixmap_isQBitmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_isQBitmap)},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QPixmap_load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_load)},
    {SIP_MLNAME_CAST(sipName_loadFromData), (PyCFunction)meth_QPixmap_loadFromData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_loadFromData)},
    {SIP_MLNAME_CAST(sipName_mask), meth_QPixmap_mask, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_mask)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QPixmap_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_metric)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPixmap_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_paintEngine)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QPixmap_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_rect)},
    {SIP_MLNAME_CAST(sipName_save), (PyCFunction)meth_QPixmap_save, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_save)},
    {SIP_MLNAME_CAST(sipName_scaled), (PyCFunction)meth_QPixmap_scaled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_scaled)},
    {SIP_MLNAME_CAST(sipName_scaledToHeight), (PyCFunction)meth_QPixmap_scaledToHeight, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_scaledToHeight)},
    {SIP_MLNAME_CAST(sipName_scaledToWidth), (PyCFunction)meth_QPixmap_scaledToWidth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_scaledToWidth)},
    {SIP_MLNAME_CAST(sipName_scroll), (PyCFunction)meth_QPixmap_scroll, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_scroll)},
    {SIP_MLNAME_CAST(sipName_serialNumber), meth_QPixmap_serialNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_serialNumber)},
    {SIP_MLNAME_CAST(sipName_setAlphaChannel), meth_QPixmap_setAlphaChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_setAlphaChannel)},
    {SIP_MLNAME_CAST(sipName_setMask), meth_QPixmap_setMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_setMask)},
    {SIP_MLNAME_CAST(sipName_size), meth_QPixmap_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_size)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPixmap_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_swap)},
    {SIP_MLNAME_CAST(sipName_toImage), meth_QPixmap_toImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_toImage)},
    {SIP_MLNAME_CAST(sipName_transformed), (PyCFunction)meth_QPixmap_transformed, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_transformed)},
    {SIP_MLNAME_CAST(sipName_trueMatrix), meth_QPixmap_trueMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_trueMatrix)},
    {SIP_MLNAME_CAST(sipName_width), meth_QPixmap_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_width)},
    {SIP_MLNAME_CAST(sipName_x11Info), meth_QPixmap_x11Info, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_x11Info)},
    {SIP_MLNAME_CAST(sipName_x11PictureHandle), meth_QPixmap_x11PictureHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_x11PictureHandle)}
};

static sipEnumMemberDef enummembers_QPixmap[] = {
    {sipName_ExplicitlyShared, static_cast<int>(QPixmap::ExplicitlyShared), 395},
    {sipName_ImplicitlyShared, static_cast<int>(QPixmap::ImplicitlyShared), 395},
};

PyDoc_STRVAR(doc_QPixmap, "\1QPixmap()\n"
    "QPixmap(int, int)\n"
    "QPixmap(QSize)\n"
    "QPixmap(QString, str format=None, Qt.ImageConversionFlags flags=Qt.AutoColor)\n"
    "QPixmap(list-of-str)\n"
    "QPixmap(QPixmap)\n"
    "QPixmap(QVariant)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QPixmap = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QPixmap,
        {0}
    },
    {
        sipNameNr_QPixmap,
        {0, 0, 1},
        44, methods_QPixmap,
        2, enummembers_QPixmap,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPixmap,
    -1,
    -1,
    supers_QPixmap,
    0,
    init_type_QPixmap,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPixmap,
    assign_QPixmap,
    array_QPixmap,
    copy_QPixmap,
    release_QPixmap,
    cast_QPixmap,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
