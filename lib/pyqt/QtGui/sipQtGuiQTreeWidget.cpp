/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtreewidget.sip"
#include <qtreewidget.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 127 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 94 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtreewidget.sip"
#include <qtreewidget.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 94 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 174 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 1135 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qheaderview.sip"
#include <qheaderview.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 233 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 236 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 239 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 242 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 245 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 248 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 251 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 254 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 257 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 260 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 263 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 266 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 269 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 272 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 275 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 278 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 281 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 284 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 287 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 290 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"


class sipQTreeWidget : public QTreeWidget
{
public:
    sipQTreeWidget(QWidget*);
    virtual ~sipQTreeWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void inputMethodEvent(QInputMethodEvent*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void resizeEvent(QResizeEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    QStyleOptionViewItem viewOptions() const;
    void startDrag(Qt::DropActions);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent*) const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void editorDestroyed(QObject*);
    void commitData(QWidget*);
    void closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void verticalScrollbarAction(int);
    void updateEditorGeometries();
    void updateEditorData();
    int sizeHintForRow(int) const;
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    bool viewportEvent(QEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    bool isIndexHidden(const QModelIndex&) const;
    void horizontalScrollbarAction(int);
    int sizeHintForColumn(int) const;
    void updateGeometries();
    void keyPressEvent(QKeyEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void drawBranches(QPainter*,const QRect&,const QModelIndex&) const;
    void drawRow(QPainter*,const QStyleOptionViewItem&,const QModelIndex&) const;
    void mouseReleaseEvent(QMouseEvent*);
    void timerEvent(QTimerEvent*);
    void paintEvent(QPaintEvent*);
    QModelIndexList selectedIndexes() const;
    QRegion visualRegionForSelection(const QItemSelection&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    int verticalOffset() const;
    int horizontalOffset() const;
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void scrollContentsBy(int,int);
    void selectAll();
    void dataChanged(const QModelIndex&,const QModelIndex&);
    void reset();
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QRect visualRect(const QModelIndex&) const;
    void keyboardSearch(const QString&);
    void setRootIndex(const QModelIndex&);
    void setSelectionModel(QItemSelectionModel*);
    void dropEvent(QDropEvent*);
    bool event(QEvent*);
    Qt::DropActions supportedDropActions() const;
    bool dropMimeData(QTreeWidgetItem*,int,const QMimeData*,Qt::DropAction);
    QMimeData* mimeData(const QList<QTreeWidgetItem*>) const;
    QStringList mimeTypes() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeWidget(const sipQTreeWidget &);
    sipQTreeWidget &operator = (const sipQTreeWidget &);

    char sipPyMethods[91];
};

sipQTreeWidget::sipQTreeWidget(QWidget*a0): QTreeWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidget::~sipQTreeWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTreeWidget::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTreeWidget);
}

int sipQTreeWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTreeWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTreeWidget,_c,_id,_a);

    return _id;
}

void *sipQTreeWidget::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTreeWidget, _clname)) ? this : QTreeWidget::qt_metacast(_clname);
}

void sipQTreeWidget::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTreeWidget::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTreeWidget::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTreeWidget::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTreeWidget::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeWidget::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTreeWidget::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QTreeWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QTreeWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QTreeWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QTreeWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QTreeWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTreeWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QTreeWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QTreeWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QTreeWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QTreeWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QTreeWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QTreeWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QTreeWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QTreeWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QTreeWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QTreeWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQTreeWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QTreeWidget::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTreeWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QTreeWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QTreeWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTreeWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QTreeWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QTreeWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QTreeWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QTreeWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQTreeWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QTreeWidget::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQTreeWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QTreeWidget::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QTreeWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QTreeWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQTreeWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QTreeWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QTreeWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QTreeWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QTreeWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QTreeWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QTreeWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStyleOptionViewItem sipQTreeWidget::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return QTreeWidget::viewOptions();

    extern QStyleOptionViewItem sipVH_QtGui_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_71(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
        QTreeWidget::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_153(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::DropActions);

    sipVH_QtGui_153(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QItemSelectionModel::SelectionFlags sipQTreeWidget::selectionCommand(const QModelIndex& a0,const QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return QTreeWidget::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtGui_233(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QEvent*);

    return sipVH_QtGui_233(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTreeWidget::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return QTreeWidget::edit(a0,a1,a2);

    extern bool sipVH_QtGui_234(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);

    return sipVH_QtGui_234(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::editorDestroyed(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
        QTreeWidget::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_235(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtGui_235(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::commitData(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QTreeWidget::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::closeEditor(QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
        QTreeWidget::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_236(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_236(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTreeWidget::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTreeWidget::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
        QTreeWidget::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
        QTreeWidget::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
        QTreeWidget::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTreeWidget::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return QTreeWidget::sizeHintForRow(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
        QTreeWidget::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
        QTreeWidget::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,const QItemSelection&);

    sipVH_QtGui_46(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTreeWidget::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QTreeWidget::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QTreeWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeWidget::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[54]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return QTreeWidget::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
        QTreeWidget::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTreeWidget::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[56]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return QTreeWidget::sizeHintForColumn(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
        QTreeWidget::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QTreeWidget::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QTreeWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QTreeWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QTreeWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::drawBranches(QPainter*a0,const QRect& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[62]),sipPySelf,NULL,sipName_drawBranches);

    if (!sipMeth)
    {
        QTreeWidget::drawBranches(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRect&,const QModelIndex&);

    sipVH_QtGui_47(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::drawRow(QPainter*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[63]),sipPySelf,NULL,sipName_drawRow);

    if (!sipMeth)
    {
        QTreeWidget::drawRow(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_48(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QTreeWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTreeWidget::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QTreeWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndexList sipQTreeWidget::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[67]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return QTreeWidget::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtGui_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_49(sipGILState, 0, sipPySelf, sipMeth);
}

QRegion sipQTreeWidget::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[68]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return QTreeWidget::visualRegionForSelection(a0);

    extern QRegion sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtGui_50(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
        QTreeWidget::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_51(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQTreeWidget::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[70]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return QTreeWidget::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTreeWidget::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[71]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return QTreeWidget::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

QModelIndex sipQTreeWidget::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return QTreeWidget::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtGui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemView::CursorAction,Qt::KeyboardModifiers);

    return sipVH_QtGui_52(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
        QTreeWidget::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
        QTreeWidget::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QTreeWidget::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QTreeWidget::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::dataChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
        QTreeWidget::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QTreeWidget::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QModelIndex sipQTreeWidget::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[79]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return QTreeWidget::indexAt(a0);

    extern QModelIndex sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
        QTreeWidget::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtGui_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtGui_55(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QRect sipQTreeWidget::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return QTreeWidget::visualRect(a0);

    extern QRect sipVH_QtGui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtGui_56(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
        QTreeWidget::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtGui_QtCore->em_virthandlers[33]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
        QTreeWidget::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::setSelectionModel(QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
        QTreeWidget::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QItemSelectionModel*);

    sipVH_QtGui_37(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QTreeWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeWidget::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTreeWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

Qt::DropActions sipQTreeWidget::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[87]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QTreeWidget::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtGui_QtCore->em_virthandlers[53]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTreeWidget::dropMimeData(QTreeWidgetItem*a0,int a1,const QMimeData*a2,Qt::DropAction a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[88],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QTreeWidget::dropMimeData(a0,a1,a2,a3);

    extern bool sipVH_QtGui_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTreeWidgetItem*,int,const QMimeData*,Qt::DropAction);

    return sipVH_QtGui_38(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QMimeData* sipQTreeWidget::mimeData(const QList<QTreeWidgetItem*> a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[89]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QTreeWidget::mimeData(a0);

    extern QMimeData* sipVH_QtGui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QTreeWidgetItem*>);

    return sipVH_QtGui_39(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStringList sipQTreeWidget::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[90]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QTreeWidget::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtGui_QtCore->em_virthandlers[27]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QTreeWidget_columnCount, "QTreeWidget.columnCount() -> int");

extern "C" {static PyObject *meth_QTreeWidget_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_columnCount, doc_QTreeWidget_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setColumnCount, "QTreeWidget.setColumnCount(int)");

extern "C" {static PyObject *meth_QTreeWidget_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setColumnCount, doc_QTreeWidget_setColumnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_topLevelItem, "QTreeWidget.topLevelItem(int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_topLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_topLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            QTreeWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->topLevelItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_topLevelItem, doc_QTreeWidget_topLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_topLevelItemCount, "QTreeWidget.topLevelItemCount() -> int");

extern "C" {static PyObject *meth_QTreeWidget_topLevelItemCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_topLevelItemCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->topLevelItemCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_topLevelItemCount, doc_QTreeWidget_topLevelItemCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_insertTopLevelItem, "QTreeWidget.insertTopLevelItem(int, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_insertTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_insertTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem* a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_QTreeWidgetItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertTopLevelItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_insertTopLevelItem, doc_QTreeWidget_insertTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_addTopLevelItem, "QTreeWidget.addTopLevelItem(QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_addTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_addTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addTopLevelItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_addTopLevelItem, doc_QTreeWidget_addTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_takeTopLevelItem, "QTreeWidget.takeTopLevelItem(int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_takeTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_takeTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            QTreeWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeTopLevelItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_takeTopLevelItem, doc_QTreeWidget_takeTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_indexOfTopLevelItem, "QTreeWidget.indexOfTopLevelItem(QTreeWidgetItem) -> int");

extern "C" {static PyObject *meth_QTreeWidget_indexOfTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_indexOfTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfTopLevelItem(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_indexOfTopLevelItem, doc_QTreeWidget_indexOfTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_insertTopLevelItems, "QTreeWidget.insertTopLevelItems(int, list-of-QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_insertTopLevelItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_insertTopLevelItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList<QTreeWidgetItem*>* a1;
        int a1State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_QList_0101QTreeWidgetItem,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertTopLevelItems(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem*> *>(a1),sipType_QList_0101QTreeWidgetItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_insertTopLevelItems, doc_QTreeWidget_insertTopLevelItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_addTopLevelItems, "QTreeWidget.addTopLevelItems(list-of-QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_addTopLevelItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_addTopLevelItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTreeWidgetItem*>* a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addTopLevelItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem*> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_addTopLevelItems, doc_QTreeWidget_addTopLevelItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_headerItem, "QTreeWidget.headerItem() -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_headerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_headerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->headerItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_headerItem, doc_QTreeWidget_headerItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setHeaderItem, "QTreeWidget.setHeaderItem(QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_setHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderItem, doc_QTreeWidget_setHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setHeaderLabels, "QTreeWidget.setHeaderLabels(QStringList)");

extern "C" {static PyObject *meth_QTreeWidget_setHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderLabels(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderLabels, doc_QTreeWidget_setHeaderLabels);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_currentItem, "QTreeWidget.currentItem() -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_currentItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_currentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_currentItem, doc_QTreeWidget_currentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_currentColumn, "QTreeWidget.currentColumn() -> int");

extern "C" {static PyObject *meth_QTreeWidget_currentColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_currentColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_currentColumn, doc_QTreeWidget_currentColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setCurrentItem, "QTreeWidget.setCurrentItem(QTreeWidgetItem)\n"
    "QTreeWidget.setCurrentItem(QTreeWidgetItem, int)\n"
    "QTreeWidget.setCurrentItem(QTreeWidgetItem, int, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QTreeWidget_setCurrentItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setCurrentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTreeWidgetItem* a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTreeWidgetItem* a0;
        int a1;
        QItemSelectionModel::SelectionFlags* a2;
        int a2State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QItemSelectionModel_SelectionFlags, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QItemSelectionModel_SelectionFlags,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setCurrentItem, doc_QTreeWidget_setCurrentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemAt, "QTreeWidget.itemAt(QPoint) -> QTreeWidgetItem\n"
    "QTreeWidget.itemAt(int, int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPoint, &a0))
        {
            QTreeWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1))
        {
            QTreeWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemAt, doc_QTreeWidget_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_visualItemRect, "QTreeWidget.visualItemRect(QTreeWidgetItem) -> QRect");

extern "C" {static PyObject *meth_QTreeWidget_visualItemRect(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_visualItemRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->visualItemRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_visualItemRect, doc_QTreeWidget_visualItemRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_sortColumn, "QTreeWidget.sortColumn() -> int");

extern "C" {static PyObject *meth_QTreeWidget_sortColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_sortColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sortColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_sortColumn, doc_QTreeWidget_sortColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_sortItems, "QTreeWidget.sortItems(int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QTreeWidget_sortItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_sortItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortItems(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_sortItems, doc_QTreeWidget_sortItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setSortingEnabled, "QTreeWidget.setSortingEnabled(bool)");

extern "C" {static PyObject *meth_QTreeWidget_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSortingEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setSortingEnabled, doc_QTreeWidget_setSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isSortingEnabled, "QTreeWidget.isSortingEnabled() -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSortingEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isSortingEnabled, doc_QTreeWidget_isSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_editItem, "QTreeWidget.editItem(QTreeWidgetItem, int column=0)");

extern "C" {static PyObject *meth_QTreeWidget_editItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_editItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->editItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_editItem, doc_QTreeWidget_editItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_openPersistentEditor, "QTreeWidget.openPersistentEditor(QTreeWidgetItem, int column=0)");

extern "C" {static PyObject *meth_QTreeWidget_openPersistentEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_openPersistentEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->openPersistentEditor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_openPersistentEditor, doc_QTreeWidget_openPersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_closePersistentEditor, "QTreeWidget.closePersistentEditor(QTreeWidgetItem, int column=0)");

extern "C" {static PyObject *meth_QTreeWidget_closePersistentEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_closePersistentEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->closePersistentEditor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_closePersistentEditor, doc_QTreeWidget_closePersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemWidget, "QTreeWidget.itemWidget(QTreeWidgetItem, int) -> QWidget");

extern "C" {static PyObject *meth_QTreeWidget_itemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemWidget(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemWidget, doc_QTreeWidget_itemWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setItemWidget, "QTreeWidget.setItemWidget(QTreeWidgetItem, int, QWidget)");

extern "C" {static PyObject *meth_QTreeWidget_setItemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1;
        QWidget* a2;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QWidget, &a2))
        {
#line 251 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtreewidget.sip"
        // We have to break the association with any existing widget.  Note that I'm
        // not sure this is really necessary as it should get tidied up when Qt
        // destroys any current widget, except (possibly) when the widget wasn't
        // created from PyQt.  See also removeItemWidget(), QListWidget and
        // QTableWidget.
        QWidget *w = sipCpp->itemWidget(a0, a1);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setItemWidget(a0, a1, a2);
        Py_END_ALLOW_THREADS
#line 2872 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemWidget, doc_QTreeWidget_setItemWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isItemSelected, "QTreeWidget.isItemSelected(QTreeWidgetItem) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isItemSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isItemSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemSelected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isItemSelected, doc_QTreeWidget_isItemSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setItemSelected, "QTreeWidget.setItemSelected(QTreeWidgetItem, bool)");

extern "C" {static PyObject *meth_QTreeWidget_setItemSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemSelected(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemSelected, doc_QTreeWidget_setItemSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_selectedItems, "QTreeWidget.selectedItems() -> list-of-QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_selectedItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_selectedItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QList<QTreeWidgetItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTreeWidgetItem*>(sipCpp->selectedItems());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_selectedItems, doc_QTreeWidget_selectedItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_findItems, "QTreeWidget.findItems(QString, Qt.MatchFlags, int column=0) -> list-of-QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_findItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_findItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Qt::MatchFlags* a1;
        int a1State = 0;
        int a2 = 0;
        const QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_MatchFlags, &a1, &a1State, &a2))
        {
            QList<QTreeWidgetItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTreeWidgetItem*>(sipCpp->findItems(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_findItems, doc_QTreeWidget_findItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isItemHidden, "QTreeWidget.isItemHidden(QTreeWidgetItem) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isItemHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isItemHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemHidden(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isItemHidden, doc_QTreeWidget_isItemHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setItemHidden, "QTreeWidget.setItemHidden(QTreeWidgetItem, bool)");

extern "C" {static PyObject *meth_QTreeWidget_setItemHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemHidden(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemHidden, doc_QTreeWidget_setItemHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isItemExpanded, "QTreeWidget.isItemExpanded(QTreeWidgetItem) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isItemExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isItemExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemExpanded(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isItemExpanded, doc_QTreeWidget_isItemExpanded);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setItemExpanded, "QTreeWidget.setItemExpanded(QTreeWidgetItem, bool)");

extern "C" {static PyObject *meth_QTreeWidget_setItemExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemExpanded(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemExpanded, doc_QTreeWidget_setItemExpanded);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_scrollToItem, "QTreeWidget.scrollToItem(QTreeWidgetItem, QAbstractItemView.ScrollHint hint=QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QTreeWidget_scrollToItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_scrollToItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|E", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollToItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_scrollToItem, doc_QTreeWidget_scrollToItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_expandItem, "QTreeWidget.expandItem(QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_expandItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_expandItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->expandItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_expandItem, doc_QTreeWidget_expandItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_collapseItem, "QTreeWidget.collapseItem(QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_collapseItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_collapseItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->collapseItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_collapseItem, doc_QTreeWidget_collapseItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_clear, "QTreeWidget.clear()");

extern "C" {static PyObject *meth_QTreeWidget_clear(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_clear, doc_QTreeWidget_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_mimeTypes, "QTreeWidget.mimeTypes() -> QStringList");

extern "C" {static PyObject *meth_QTreeWidget_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QTreeWidget::mimeTypes() : sipCpp->mimeTypes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mimeTypes, doc_QTreeWidget_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_mimeData, "QTreeWidget.mimeData(list-of-QTreeWidgetItem) -> QMimeData");

extern "C" {static PyObject *meth_QTreeWidget_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QList<QTreeWidgetItem*>* a0;
        int a0State = 0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            QMimeData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidget::mimeData(*a0) : sipCpp->mimeData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem*> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mimeData, doc_QTreeWidget_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_dropMimeData, "QTreeWidget.dropMimeData(QTreeWidgetItem, int, QMimeData, Qt.DropAction) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeWidgetItem* a0;
        int a1;
        const QMimeData* a2;
        Qt::DropAction a3;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8iJ8E", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QMimeData, &a2, sipType_Qt_DropAction, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidget::dropMimeData(a0,a1,a2,a3) : sipCpp->dropMimeData(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dropMimeData, doc_QTreeWidget_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_supportedDropActions, "QTreeWidget.supportedDropActions() -> Qt.DropActions");

extern "C" {static PyObject *meth_QTreeWidget_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Qt::DropActions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->QTreeWidget::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_supportedDropActions, doc_QTreeWidget_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_items, "QTreeWidget.items(QMimeData) -> list-of-QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_items(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_items(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QMimeData, &a0))
        {
            QList<QTreeWidgetItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTreeWidgetItem*>(sipCpp->items(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_items, doc_QTreeWidget_items);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_indexFromItem, "QTreeWidget.indexFromItem(QTreeWidgetItem, int column=0) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeWidget_indexFromItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_indexFromItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1 = 0;
        const QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->indexFromItem(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_indexFromItem, doc_QTreeWidget_indexFromItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemFromIndex, "QTreeWidget.itemFromIndex(QModelIndex) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            QTreeWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemFromIndex(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemFromIndex, doc_QTreeWidget_itemFromIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_event, "QTreeWidget.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidget::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_event, doc_QTreeWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_dropEvent, "QTreeWidget.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QTreeWidget_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeWidget::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dropEvent, doc_QTreeWidget_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_invisibleRootItem, "QTreeWidget.invisibleRootItem() -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_invisibleRootItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_invisibleRootItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->invisibleRootItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_invisibleRootItem, doc_QTreeWidget_invisibleRootItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setHeaderLabel, "QTreeWidget.setHeaderLabel(QString)");

extern "C" {static PyObject *meth_QTreeWidget_setHeaderLabel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderLabel(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderLabel, doc_QTreeWidget_setHeaderLabel);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isFirstItemColumnSpanned, "QTreeWidget.isFirstItemColumnSpanned(QTreeWidgetItem) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isFirstItemColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isFirstItemColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFirstItemColumnSpanned(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isFirstItemColumnSpanned, doc_QTreeWidget_isFirstItemColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setFirstItemColumnSpanned, "QTreeWidget.setFirstItemColumnSpanned(QTreeWidgetItem, bool)");

extern "C" {static PyObject *meth_QTreeWidget_setFirstItemColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setFirstItemColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFirstItemColumnSpanned(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setFirstItemColumnSpanned, doc_QTreeWidget_setFirstItemColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemAbove, "QTreeWidget.itemAbove(QTreeWidgetItem) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemAbove(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemAbove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QTreeWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAbove(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemAbove, doc_QTreeWidget_itemAbove);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemBelow, "QTreeWidget.itemBelow(QTreeWidgetItem) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemBelow(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemBelow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QTreeWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemBelow(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemBelow, doc_QTreeWidget_itemBelow);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_removeItemWidget, "QTreeWidget.removeItemWidget(QTreeWidgetItem, int)");

extern "C" {static PyObject *meth_QTreeWidget_removeItemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_removeItemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
#line 333 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtreewidget.sip"
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->itemWidget(a0, a1);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->removeItemWidget(a0, a1);
        Py_END_ALLOW_THREADS
#line 3751 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_removeItemWidget, doc_QTreeWidget_removeItemWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setSelectionModel, "QTreeWidget.setSelectionModel(QItemSelectionModel)");

extern "C" {static PyObject *meth_QTreeWidget_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel* a0;
        PyObject *a0Keep;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeWidget::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -71, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setSelectionModel, doc_QTreeWidget_setSelectionModel);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setModel(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QTreeWidget, sipName_setModel, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTreeWidget(void *, const sipTypeDef *);}
static void *cast_QTreeWidget(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTreeWidget)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTreeView)->ctd_cast((QTreeView *)(QTreeWidget *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeWidget(void *, int);}
static void release_QTreeWidget(void *sipCppV,int)
{
    QTreeWidget *sipCpp = reinterpret_cast<QTreeWidget *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTreeWidget(sipSimpleWrapper *);}
static void dealloc_QTreeWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTreeWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTreeWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTreeWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTreeWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTreeWidget *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidget(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTreeWidget[] = {{723, 255, 1}};


static PyMethodDef methods_QTreeWidget[] = {
    {SIP_MLNAME_CAST(sipName_addTopLevelItem), meth_QTreeWidget_addTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_addTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_addTopLevelItems), meth_QTreeWidget_addTopLevelItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_addTopLevelItems)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTreeWidget_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_clear)},
    {SIP_MLNAME_CAST(sipName_closePersistentEditor), (PyCFunction)meth_QTreeWidget_closePersistentEditor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_closePersistentEditor)},
    {SIP_MLNAME_CAST(sipName_collapseItem), meth_QTreeWidget_collapseItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_collapseItem)},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QTreeWidget_columnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_columnCount)},
    {SIP_MLNAME_CAST(sipName_currentColumn), meth_QTreeWidget_currentColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_currentColumn)},
    {SIP_MLNAME_CAST(sipName_currentItem), meth_QTreeWidget_currentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_currentItem)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QTreeWidget_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_dropEvent)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QTreeWidget_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_editItem), (PyCFunction)meth_QTreeWidget_editItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_editItem)},
    {SIP_MLNAME_CAST(sipName_event), meth_QTreeWidget_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_event)},
    {SIP_MLNAME_CAST(sipName_expandItem), meth_QTreeWidget_expandItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_expandItem)},
    {SIP_MLNAME_CAST(sipName_findItems), (PyCFunction)meth_QTreeWidget_findItems, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_findItems)},
    {SIP_MLNAME_CAST(sipName_headerItem), meth_QTreeWidget_headerItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_headerItem)},
    {SIP_MLNAME_CAST(sipName_indexFromItem), (PyCFunction)meth_QTreeWidget_indexFromItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_indexFromItem)},
    {SIP_MLNAME_CAST(sipName_indexOfTopLevelItem), meth_QTreeWidget_indexOfTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_indexOfTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_insertTopLevelItem), meth_QTreeWidget_insertTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_insertTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_insertTopLevelItems), meth_QTreeWidget_insertTopLevelItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_insertTopLevelItems)},
    {SIP_MLNAME_CAST(sipName_invisibleRootItem), meth_QTreeWidget_invisibleRootItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_invisibleRootItem)},
    {SIP_MLNAME_CAST(sipName_isFirstItemColumnSpanned), meth_QTreeWidget_isFirstItemColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isFirstItemColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_isItemExpanded), meth_QTreeWidget_isItemExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isItemExpanded)},
    {SIP_MLNAME_CAST(sipName_isItemHidden), meth_QTreeWidget_isItemHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isItemHidden)},
    {SIP_MLNAME_CAST(sipName_isItemSelected), meth_QTreeWidget_isItemSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isItemSelected)},
    {SIP_MLNAME_CAST(sipName_isSortingEnabled), meth_QTreeWidget_isSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_itemAbove), meth_QTreeWidget_itemAbove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemAbove)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QTreeWidget_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemAt)},
    {SIP_MLNAME_CAST(sipName_itemBelow), meth_QTreeWidget_itemBelow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemBelow)},
    {SIP_MLNAME_CAST(sipName_itemFromIndex), meth_QTreeWidget_itemFromIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemFromIndex)},
    {SIP_MLNAME_CAST(sipName_itemWidget), meth_QTreeWidget_itemWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemWidget)},
    {SIP_MLNAME_CAST(sipName_items), meth_QTreeWidget_items, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_items)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QTreeWidget_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QTreeWidget_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_openPersistentEditor), (PyCFunction)meth_QTreeWidget_openPersistentEditor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_openPersistentEditor)},
    {SIP_MLNAME_CAST(sipName_removeItemWidget), meth_QTreeWidget_removeItemWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_removeItemWidget)},
    {SIP_MLNAME_CAST(sipName_scrollToItem), (PyCFunction)meth_QTreeWidget_scrollToItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_scrollToItem)},
    {SIP_MLNAME_CAST(sipName_selectedItems), meth_QTreeWidget_selectedItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_selectedItems)},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QTreeWidget_setColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setColumnCount)},
    {SIP_MLNAME_CAST(sipName_setCurrentItem), meth_QTreeWidget_setCurrentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setCurrentItem)},
    {SIP_MLNAME_CAST(sipName_setFirstItemColumnSpanned), meth_QTreeWidget_setFirstItemColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setFirstItemColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_setHeaderItem), meth_QTreeWidget_setHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setHeaderLabel), meth_QTreeWidget_setHeaderLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setHeaderLabel)},
    {SIP_MLNAME_CAST(sipName_setHeaderLabels), meth_QTreeWidget_setHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_setItemExpanded), meth_QTreeWidget_setItemExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setItemExpanded)},
    {SIP_MLNAME_CAST(sipName_setItemHidden), meth_QTreeWidget_setItemHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setItemHidden)},
    {SIP_MLNAME_CAST(sipName_setItemSelected), meth_QTreeWidget_setItemSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setItemSelected)},
    {SIP_MLNAME_CAST(sipName_setItemWidget), meth_QTreeWidget_setItemWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setItemWidget)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QTreeWidget_setModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QTreeWidget_setSelectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setSelectionModel)},
    {SIP_MLNAME_CAST(sipName_setSortingEnabled), meth_QTreeWidget_setSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_sortColumn), meth_QTreeWidget_sortColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_sortColumn)},
    {SIP_MLNAME_CAST(sipName_sortItems), meth_QTreeWidget_sortItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_sortItems)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QTreeWidget_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_supportedDropActions)},
    {SIP_MLNAME_CAST(sipName_takeTopLevelItem), meth_QTreeWidget_takeTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_takeTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_topLevelItem), meth_QTreeWidget_topLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_topLevelItem)},
    {SIP_MLNAME_CAST(sipName_topLevelItemCount), meth_QTreeWidget_topLevelItemCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_topLevelItemCount)},
    {SIP_MLNAME_CAST(sipName_visualItemRect), meth_QTreeWidget_visualItemRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_visualItemRect)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QTreeWidget[] = {
    {"itemSelectionChanged()", "\1QTreeWidget.itemSelectionChanged", 0, 0},
    {"currentItemChanged(QTreeWidgetItem*,QTreeWidgetItem*)", "\1QTreeWidget.currentItemChanged[QTreeWidgetItem, QTreeWidgetItem]", 0, 0},
    {"itemCollapsed(QTreeWidgetItem*)", "\1QTreeWidget.itemCollapsed[QTreeWidgetItem]", 0, 0},
    {"itemExpanded(QTreeWidgetItem*)", "\1QTreeWidget.itemExpanded[QTreeWidgetItem]", 0, 0},
    {"itemChanged(QTreeWidgetItem*,int)", "\1QTreeWidget.itemChanged[QTreeWidgetItem, int]", 0, 0},
    {"itemEntered(QTreeWidgetItem*,int)", "\1QTreeWidget.itemEntered[QTreeWidgetItem, int]", 0, 0},
    {"itemActivated(QTreeWidgetItem*,int)", "\1QTreeWidget.itemActivated[QTreeWidgetItem, int]", 0, 0},
    {"itemDoubleClicked(QTreeWidgetItem*,int)", "\1QTreeWidget.itemDoubleClicked[QTreeWidgetItem, int]", 0, 0},
    {"itemClicked(QTreeWidgetItem*,int)", "\1QTreeWidget.itemClicked[QTreeWidgetItem, int]", 0, 0},
    {"itemPressed(QTreeWidgetItem*,int)", "\1QTreeWidget.itemPressed[QTreeWidgetItem, int]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTreeWidget, "\1QTreeWidget(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTreeWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTreeWidget,
        {0}
    },
    {
        sipNameNr_QTreeWidget,
        {0, 0, 1},
        57, methods_QTreeWidget,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTreeWidget,
    -1,
    -1,
    supers_QTreeWidget,
    0,
    init_type_QTreeWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTreeWidget,
    0,
    0,
    0,
    release_QTreeWidget,
    cast_QTreeWidget,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTreeWidget::staticMetaObject,
    0,
    signals_QTreeWidget,
};
