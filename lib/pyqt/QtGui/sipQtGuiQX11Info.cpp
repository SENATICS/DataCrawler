/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQX11Info.cpp"



PyDoc_STRVAR(doc_QX11Info_display, "QX11Info.display() -> Display");

extern "C" {static PyObject *meth_QX11Info_display(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_display(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Display*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::display();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Display,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_display, doc_QX11Info_display);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appClass, "QX11Info.appClass() -> str");

extern "C" {static PyObject *meth_QX11Info_appClass(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appClass(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            const char*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appClass();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appClass, doc_QX11Info_appClass);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_screen, "QX11Info.screen() -> int");

extern "C" {static PyObject *meth_QX11Info_screen(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_screen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QX11Info *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QX11Info, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->screen();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_screen, doc_QX11Info_screen);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_depth, "QX11Info.depth() -> int");

extern "C" {static PyObject *meth_QX11Info_depth(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QX11Info *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QX11Info, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->depth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_depth, doc_QX11Info_depth);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_cells, "QX11Info.cells() -> int");

extern "C" {static PyObject *meth_QX11Info_cells(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_cells(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QX11Info *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QX11Info, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cells();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_cells, doc_QX11Info_cells);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_colormap, "QX11Info.colormap() -> int");

extern "C" {static PyObject *meth_QX11Info_colormap(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_colormap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QX11Info *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QX11Info, &sipCpp))
        {
            Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->colormap();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_colormap, doc_QX11Info_colormap);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_defaultColormap, "QX11Info.defaultColormap() -> bool");

extern "C" {static PyObject *meth_QX11Info_defaultColormap(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_defaultColormap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QX11Info *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QX11Info, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->defaultColormap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_defaultColormap, doc_QX11Info_defaultColormap);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_visual, "QX11Info.visual() -> sip.voidptr");

extern "C" {static PyObject *meth_QX11Info_visual(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_visual(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QX11Info *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QX11Info, &sipCpp))
        {
            void*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->visual();
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_visual, doc_QX11Info_visual);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_defaultVisual, "QX11Info.defaultVisual() -> bool");

extern "C" {static PyObject *meth_QX11Info_defaultVisual(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_defaultVisual(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QX11Info *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QX11Info, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->defaultVisual();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_defaultVisual, doc_QX11Info_defaultVisual);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appScreen, "QX11Info.appScreen() -> int");

extern "C" {static PyObject *meth_QX11Info_appScreen(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appScreen(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appScreen();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appScreen, doc_QX11Info_appScreen);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appDepth, "QX11Info.appDepth(int screen=-1) -> int");

extern "C" {static PyObject *meth_QX11Info_appDepth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appDepth(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appDepth(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appDepth, doc_QX11Info_appDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appCells, "QX11Info.appCells(int screen=-1) -> int");

extern "C" {static PyObject *meth_QX11Info_appCells(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appCells(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appCells(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appCells, doc_QX11Info_appCells);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appColormap, "QX11Info.appColormap(int screen=-1) -> int");

extern "C" {static PyObject *meth_QX11Info_appColormap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appColormap(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appColormap(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appColormap, doc_QX11Info_appColormap);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appVisual, "QX11Info.appVisual(int screen=-1) -> sip.voidptr");

extern "C" {static PyObject *meth_QX11Info_appVisual(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appVisual(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            void*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appVisual(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appVisual, doc_QX11Info_appVisual);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appRootWindow, "QX11Info.appRootWindow(int screen=-1) -> int");

extern "C" {static PyObject *meth_QX11Info_appRootWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appRootWindow(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appRootWindow(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appRootWindow, doc_QX11Info_appRootWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appDefaultColormap, "QX11Info.appDefaultColormap(int screen=-1) -> bool");

extern "C" {static PyObject *meth_QX11Info_appDefaultColormap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appDefaultColormap(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appDefaultColormap(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appDefaultColormap, doc_QX11Info_appDefaultColormap);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appDefaultVisual, "QX11Info.appDefaultVisual(int screen=-1) -> bool");

extern "C" {static PyObject *meth_QX11Info_appDefaultVisual(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appDefaultVisual(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appDefaultVisual(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appDefaultVisual, doc_QX11Info_appDefaultVisual);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appDpiX, "QX11Info.appDpiX(int screen=-1) -> int");

extern "C" {static PyObject *meth_QX11Info_appDpiX(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appDpiX(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appDpiX(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appDpiX, doc_QX11Info_appDpiX);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appDpiY, "QX11Info.appDpiY(int screen=-1) -> int");

extern "C" {static PyObject *meth_QX11Info_appDpiY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appDpiY(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appDpiY(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appDpiY, doc_QX11Info_appDpiY);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_setAppDpiX, "QX11Info.setAppDpiX(int, int)");

extern "C" {static PyObject *meth_QX11Info_setAppDpiX(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_setAppDpiX(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ii", &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QX11Info::setAppDpiX(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_setAppDpiX, doc_QX11Info_setAppDpiX);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_setAppDpiY, "QX11Info.setAppDpiY(int, int)");

extern "C" {static PyObject *meth_QX11Info_setAppDpiY(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_setAppDpiY(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ii", &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QX11Info::setAppDpiY(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_setAppDpiY, doc_QX11Info_setAppDpiY);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appTime, "QX11Info.appTime() -> int");

extern "C" {static PyObject *meth_QX11Info_appTime(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            unsigned long sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appTime, doc_QX11Info_appTime);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_appUserTime, "QX11Info.appUserTime() -> int");

extern "C" {static PyObject *meth_QX11Info_appUserTime(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_appUserTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            unsigned long sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::appUserTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_appUserTime, doc_QX11Info_appUserTime);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_setAppTime, "QX11Info.setAppTime(int)");

extern "C" {static PyObject *meth_QX11Info_setAppTime(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_setAppTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "m", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QX11Info::setAppTime(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_setAppTime, doc_QX11Info_setAppTime);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_setAppUserTime, "QX11Info.setAppUserTime(int)");

extern "C" {static PyObject *meth_QX11Info_setAppUserTime(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_setAppUserTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "m", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QX11Info::setAppUserTime(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_setAppUserTime, doc_QX11Info_setAppUserTime);

    return NULL;
}


PyDoc_STRVAR(doc_QX11Info_isCompositingManagerRunning, "QX11Info.isCompositingManagerRunning() -> bool");

extern "C" {static PyObject *meth_QX11Info_isCompositingManagerRunning(PyObject *, PyObject *);}
static PyObject *meth_QX11Info_isCompositingManagerRunning(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QX11Info::isCompositingManagerRunning();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QX11Info, sipName_isCompositingManagerRunning, doc_QX11Info_isCompositingManagerRunning);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QX11Info(void *, const sipTypeDef *);}
static void *cast_QX11Info(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QX11Info)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QX11Info(void *, int);}
static void release_QX11Info(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QX11Info *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QX11Info(void *, SIP_SSIZE_T, const void *);}
static void assign_QX11Info(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QX11Info *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QX11Info *>(sipSrc);
}


extern "C" {static void *array_QX11Info(SIP_SSIZE_T);}
static void *array_QX11Info(SIP_SSIZE_T sipNrElem)
{
    return new QX11Info[sipNrElem];
}


extern "C" {static void *copy_QX11Info(const void *, SIP_SSIZE_T);}
static void *copy_QX11Info(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QX11Info(reinterpret_cast<const QX11Info *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QX11Info(sipSimpleWrapper *);}
static void dealloc_QX11Info(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QX11Info(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QX11Info(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QX11Info(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QX11Info *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QX11Info();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QX11Info* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QX11Info, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QX11Info(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QX11Info[] = {
    {SIP_MLNAME_CAST(sipName_appCells), (PyCFunction)meth_QX11Info_appCells, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QX11Info_appCells)},
    {SIP_MLNAME_CAST(sipName_appClass), meth_QX11Info_appClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_appClass)},
    {SIP_MLNAME_CAST(sipName_appColormap), (PyCFunction)meth_QX11Info_appColormap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QX11Info_appColormap)},
    {SIP_MLNAME_CAST(sipName_appDefaultColormap), (PyCFunction)meth_QX11Info_appDefaultColormap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QX11Info_appDefaultColormap)},
    {SIP_MLNAME_CAST(sipName_appDefaultVisual), (PyCFunction)meth_QX11Info_appDefaultVisual, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QX11Info_appDefaultVisual)},
    {SIP_MLNAME_CAST(sipName_appDepth), (PyCFunction)meth_QX11Info_appDepth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QX11Info_appDepth)},
    {SIP_MLNAME_CAST(sipName_appDpiX), (PyCFunction)meth_QX11Info_appDpiX, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QX11Info_appDpiX)},
    {SIP_MLNAME_CAST(sipName_appDpiY), (PyCFunction)meth_QX11Info_appDpiY, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QX11Info_appDpiY)},
    {SIP_MLNAME_CAST(sipName_appRootWindow), (PyCFunction)meth_QX11Info_appRootWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QX11Info_appRootWindow)},
    {SIP_MLNAME_CAST(sipName_appScreen), meth_QX11Info_appScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_appScreen)},
    {SIP_MLNAME_CAST(sipName_appTime), meth_QX11Info_appTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_appTime)},
    {SIP_MLNAME_CAST(sipName_appUserTime), meth_QX11Info_appUserTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_appUserTime)},
    {SIP_MLNAME_CAST(sipName_appVisual), (PyCFunction)meth_QX11Info_appVisual, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QX11Info_appVisual)},
    {SIP_MLNAME_CAST(sipName_cells), meth_QX11Info_cells, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_cells)},
    {SIP_MLNAME_CAST(sipName_colormap), meth_QX11Info_colormap, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_colormap)},
    {SIP_MLNAME_CAST(sipName_defaultColormap), meth_QX11Info_defaultColormap, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_defaultColormap)},
    {SIP_MLNAME_CAST(sipName_defaultVisual), meth_QX11Info_defaultVisual, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_defaultVisual)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QX11Info_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_depth)},
    {SIP_MLNAME_CAST(sipName_display), meth_QX11Info_display, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_display)},
    {SIP_MLNAME_CAST(sipName_isCompositingManagerRunning), meth_QX11Info_isCompositingManagerRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_isCompositingManagerRunning)},
    {SIP_MLNAME_CAST(sipName_screen), meth_QX11Info_screen, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_screen)},
    {SIP_MLNAME_CAST(sipName_setAppDpiX), meth_QX11Info_setAppDpiX, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_setAppDpiX)},
    {SIP_MLNAME_CAST(sipName_setAppDpiY), meth_QX11Info_setAppDpiY, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_setAppDpiY)},
    {SIP_MLNAME_CAST(sipName_setAppTime), meth_QX11Info_setAppTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_setAppTime)},
    {SIP_MLNAME_CAST(sipName_setAppUserTime), meth_QX11Info_setAppUserTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_setAppUserTime)},
    {SIP_MLNAME_CAST(sipName_visual), meth_QX11Info_visual, METH_VARARGS, SIP_MLDOC_CAST(doc_QX11Info_visual)}
};

PyDoc_STRVAR(doc_QX11Info, "\1QX11Info()\n"
    "QX11Info(QX11Info)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QX11Info = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QX11Info,
        {0}
    },
    {
        sipNameNr_QX11Info,
        {0, 0, 1},
        26, methods_QX11Info,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QX11Info,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QX11Info,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QX11Info,
    assign_QX11Info,
    array_QX11Info,
    copy_QX11Info,
    release_QX11Info,
    cast_QX11Info,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
