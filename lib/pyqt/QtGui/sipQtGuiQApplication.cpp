/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 458 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qapplication.sip"
#include <qapplication.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsessionmanager.sip"
#include <qsessionmanager.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qapplication.sip"
#include <qapplication.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qclipboard.sip"
#include <qclipboard.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qdesktopwidget.sip"
#include <qdesktopwidget.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 73 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"


class sipQApplication : public QApplication
{
public:
    sipQApplication(int&,char**);
    sipQApplication(int&,char**,bool);
    sipQApplication(int&,char**,QApplication::Type);
    sipQApplication(Display*,Qt::HANDLE,Qt::HANDLE);
    sipQApplication(Display*,int&,char**,Qt::HANDLE,Qt::HANDLE);
    virtual ~sipQApplication();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool notify(QObject*,QEvent*);
    void saveState(QSessionManager&);
    void commitData(QSessionManager&);
    bool x11EventFilter(XEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQApplication(const sipQApplication &);
    sipQApplication &operator = (const sipQApplication &);

    char sipPyMethods[11];
};

sipQApplication::sipQApplication(int& a0,char**a1): QApplication(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::sipQApplication(int& a0,char**a1,bool a2): QApplication(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::sipQApplication(int& a0,char**a1,QApplication::Type a2): QApplication(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::sipQApplication(Display*a0,Qt::HANDLE a1,Qt::HANDLE a2): QApplication(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::sipQApplication(Display*a0,int& a1,char**a2,Qt::HANDLE a3,Qt::HANDLE a4): QApplication(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::~sipQApplication()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQApplication::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QApplication);
}

int sipQApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QApplication,_c,_id,_a);

    return _id;
}

void *sipQApplication::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QApplication, _clname)) ? this : QApplication::qt_metacast(_clname);
}

void sipQApplication::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QApplication::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQApplication::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QApplication::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQApplication::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QApplication::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQApplication::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QApplication::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQApplication::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QApplication::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQApplication::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QApplication::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQApplication::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QApplication::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQApplication::notify(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_notify);

    if (!sipMeth)
        return QApplication::notify(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQApplication::saveState(QSessionManager& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_saveState);

    if (!sipMeth)
    {
        QApplication::saveState(a0);
        return;
    }

    extern void sipVH_QtGui_227(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSessionManager&);

    sipVH_QtGui_227(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQApplication::commitData(QSessionManager& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QApplication::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_227(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSessionManager&);

    sipVH_QtGui_227(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQApplication::x11EventFilter(XEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_x11EventFilter);

    if (!sipMeth)
        return QApplication::x11EventFilter(a0);

    extern bool sipVH_QtGui_228(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, XEvent*);

    return sipVH_QtGui_228(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QApplication_type, "QApplication.type() -> QApplication.Type");

extern "C" {static PyObject *meth_QApplication_type(PyObject *, PyObject *);}
static PyObject *meth_QApplication_type(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QApplication::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QApplication_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_type, doc_QApplication_type);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_style, "QApplication.style() -> QStyle");

extern "C" {static PyObject *meth_QApplication_style(PyObject *, PyObject *);}
static PyObject *meth_QApplication_style(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStyle*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::style();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_style, doc_QApplication_style);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setStyle, "QApplication.setStyle(QStyle)\n"
    "QApplication.setStyle(QString) -> QStyle");

extern "C" {static PyObject *meth_QApplication_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStyle(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyle* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J:", sipType_QStyle, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QStyle*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::setStyle(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setStyle, doc_QApplication_setStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_colorSpec, "QApplication.colorSpec() -> int");

extern "C" {static PyObject *meth_QApplication_colorSpec(PyObject *, PyObject *);}
static PyObject *meth_QApplication_colorSpec(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::colorSpec();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_colorSpec, doc_QApplication_colorSpec);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setColorSpec, "QApplication.setColorSpec(int)");

extern "C" {static PyObject *meth_QApplication_setColorSpec(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setColorSpec(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setColorSpec(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setColorSpec, doc_QApplication_setColorSpec);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_overrideCursor, "QApplication.overrideCursor() -> QCursor");

extern "C" {static PyObject *meth_QApplication_overrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QApplication_overrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QCursor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::overrideCursor();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_overrideCursor, doc_QApplication_overrideCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setOverrideCursor, "QApplication.setOverrideCursor(QCursor)");

extern "C" {static PyObject *meth_QApplication_setOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCursor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QCursor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setOverrideCursor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setOverrideCursor, doc_QApplication_setOverrideCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_changeOverrideCursor, "QApplication.changeOverrideCursor(QCursor)");

extern "C" {static PyObject *meth_QApplication_changeOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QApplication_changeOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCursor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QCursor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::changeOverrideCursor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_changeOverrideCursor, doc_QApplication_changeOverrideCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_restoreOverrideCursor, "QApplication.restoreOverrideCursor()");

extern "C" {static PyObject *meth_QApplication_restoreOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QApplication_restoreOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::restoreOverrideCursor();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_restoreOverrideCursor, doc_QApplication_restoreOverrideCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_palette, "QApplication.palette() -> QPalette\n"
    "QApplication.palette(QWidget) -> QPalette\n"
    "QApplication.palette(str) -> QPalette");

extern "C" {static PyObject *meth_QApplication_palette(PyObject *, PyObject *);}
static PyObject *meth_QApplication_palette(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QPalette*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPalette(QApplication::palette());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    {
        const QWidget* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QWidget, &a0))
        {
            QPalette*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPalette(QApplication::palette(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    {
        const char* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "s", &a0))
        {
            QPalette*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPalette(QApplication::palette(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_palette, doc_QApplication_palette);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setPalette, "QApplication.setPalette(QPalette, str className=None)");

extern "C" {static PyObject *meth_QApplication_setPalette(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QApplication_setPalette(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette* a0;
        const char* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_className,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J9|s", sipType_QPalette, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setPalette(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setPalette, doc_QApplication_setPalette);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setFont, "QApplication.setFont(QFont, str className=None)");

extern "C" {static PyObject *meth_QApplication_setFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QApplication_setFont(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        const char* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_className,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J9|s", sipType_QFont, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setFont(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setFont, doc_QApplication_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_fontMetrics, "QApplication.fontMetrics() -> QFontMetrics");

extern "C" {static PyObject *meth_QApplication_fontMetrics(PyObject *, PyObject *);}
static PyObject *meth_QApplication_fontMetrics(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QFontMetrics*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFontMetrics(QApplication::fontMetrics());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFontMetrics,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_fontMetrics, doc_QApplication_fontMetrics);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setWindowIcon, "QApplication.setWindowIcon(QIcon)");

extern "C" {static PyObject *meth_QApplication_setWindowIcon(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setWindowIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QIcon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setWindowIcon(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setWindowIcon, doc_QApplication_setWindowIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_windowIcon, "QApplication.windowIcon() -> QIcon");

extern "C" {static PyObject *meth_QApplication_windowIcon(PyObject *, PyObject *);}
static PyObject *meth_QApplication_windowIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(QApplication::windowIcon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_windowIcon, doc_QApplication_windowIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_allWidgets, "QApplication.allWidgets() -> list-of-QWidget");

extern "C" {static PyObject *meth_QApplication_allWidgets(PyObject *, PyObject *);}
static PyObject *meth_QApplication_allWidgets(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidgetList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QWidgetList(QApplication::allWidgets());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_allWidgets, doc_QApplication_allWidgets);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_topLevelWidgets, "QApplication.topLevelWidgets() -> list-of-QWidget");

extern "C" {static PyObject *meth_QApplication_topLevelWidgets(PyObject *, PyObject *);}
static PyObject *meth_QApplication_topLevelWidgets(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidgetList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QWidgetList(QApplication::topLevelWidgets());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_topLevelWidgets, doc_QApplication_topLevelWidgets);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_desktop, "QApplication.desktop() -> QDesktopWidget");

extern "C" {static PyObject *meth_QApplication_desktop(PyObject *, PyObject *);}
static PyObject *meth_QApplication_desktop(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QDesktopWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::desktop();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesktopWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_desktop, doc_QApplication_desktop);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_activePopupWidget, "QApplication.activePopupWidget() -> QWidget");

extern "C" {static PyObject *meth_QApplication_activePopupWidget(PyObject *, PyObject *);}
static PyObject *meth_QApplication_activePopupWidget(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::activePopupWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_activePopupWidget, doc_QApplication_activePopupWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_activeModalWidget, "QApplication.activeModalWidget() -> QWidget");

extern "C" {static PyObject *meth_QApplication_activeModalWidget(PyObject *, PyObject *);}
static PyObject *meth_QApplication_activeModalWidget(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::activeModalWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_activeModalWidget, doc_QApplication_activeModalWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_clipboard, "QApplication.clipboard() -> QClipboard");

extern "C" {static PyObject *meth_QApplication_clipboard(PyObject *, PyObject *);}
static PyObject *meth_QApplication_clipboard(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QClipboard*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::clipboard();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QClipboard,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_clipboard, doc_QApplication_clipboard);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_focusWidget, "QApplication.focusWidget() -> QWidget");

extern "C" {static PyObject *meth_QApplication_focusWidget(PyObject *, PyObject *);}
static PyObject *meth_QApplication_focusWidget(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::focusWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_focusWidget, doc_QApplication_focusWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_activeWindow, "QApplication.activeWindow() -> QWidget");

extern "C" {static PyObject *meth_QApplication_activeWindow(PyObject *, PyObject *);}
static PyObject *meth_QApplication_activeWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::activeWindow();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_activeWindow, doc_QApplication_activeWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setActiveWindow, "QApplication.setActiveWindow(QWidget)");

extern "C" {static PyObject *meth_QApplication_setActiveWindow(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setActiveWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setActiveWindow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setActiveWindow, doc_QApplication_setActiveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_widgetAt, "QApplication.widgetAt(QPoint) -> QWidget\n"
    "QApplication.widgetAt(int, int) -> QWidget");

extern "C" {static PyObject *meth_QApplication_widgetAt(PyObject *, PyObject *);}
static PyObject *meth_QApplication_widgetAt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPoint, &a0))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::widgetAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ii", &a0, &a1))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::widgetAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_widgetAt, doc_QApplication_widgetAt);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_topLevelAt, "QApplication.topLevelAt(QPoint) -> QWidget\n"
    "QApplication.topLevelAt(int, int) -> QWidget");

extern "C" {static PyObject *meth_QApplication_topLevelAt(PyObject *, PyObject *);}
static PyObject *meth_QApplication_topLevelAt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPoint, &a0))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::topLevelAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ii", &a0, &a1))
        {
            QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::topLevelAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_topLevelAt, doc_QApplication_topLevelAt);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_syncX, "QApplication.syncX()");

extern "C" {static PyObject *meth_QApplication_syncX(PyObject *, PyObject *);}
static PyObject *meth_QApplication_syncX(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::syncX();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_syncX, doc_QApplication_syncX);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_beep, "QApplication.beep()");

extern "C" {static PyObject *meth_QApplication_beep(PyObject *, PyObject *);}
static PyObject *meth_QApplication_beep(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::beep();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_beep, doc_QApplication_beep);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_keyboardModifiers, "QApplication.keyboardModifiers() -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QApplication_keyboardModifiers(PyObject *, PyObject *);}
static PyObject *meth_QApplication_keyboardModifiers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Qt::KeyboardModifiers*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::KeyboardModifiers(QApplication::keyboardModifiers());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_keyboardModifiers, doc_QApplication_keyboardModifiers);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_mouseButtons, "QApplication.mouseButtons() -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QApplication_mouseButtons(PyObject *, PyObject *);}
static PyObject *meth_QApplication_mouseButtons(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Qt::MouseButtons*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::MouseButtons(QApplication::mouseButtons());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_mouseButtons, doc_QApplication_mouseButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setDesktopSettingsAware, "QApplication.setDesktopSettingsAware(bool)");

extern "C" {static PyObject *meth_QApplication_setDesktopSettingsAware(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setDesktopSettingsAware(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setDesktopSettingsAware(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setDesktopSettingsAware, doc_QApplication_setDesktopSettingsAware);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_desktopSettingsAware, "QApplication.desktopSettingsAware() -> bool");

extern "C" {static PyObject *meth_QApplication_desktopSettingsAware(PyObject *, PyObject *);}
static PyObject *meth_QApplication_desktopSettingsAware(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::desktopSettingsAware();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_desktopSettingsAware, doc_QApplication_desktopSettingsAware);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setCursorFlashTime, "QApplication.setCursorFlashTime(int)");

extern "C" {static PyObject *meth_QApplication_setCursorFlashTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setCursorFlashTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setCursorFlashTime(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setCursorFlashTime, doc_QApplication_setCursorFlashTime);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_cursorFlashTime, "QApplication.cursorFlashTime() -> int");

extern "C" {static PyObject *meth_QApplication_cursorFlashTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_cursorFlashTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::cursorFlashTime();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_cursorFlashTime, doc_QApplication_cursorFlashTime);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setDoubleClickInterval, "QApplication.setDoubleClickInterval(int)");

extern "C" {static PyObject *meth_QApplication_setDoubleClickInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setDoubleClickInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setDoubleClickInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setDoubleClickInterval, doc_QApplication_setDoubleClickInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_doubleClickInterval, "QApplication.doubleClickInterval() -> int");

extern "C" {static PyObject *meth_QApplication_doubleClickInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_doubleClickInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::doubleClickInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_doubleClickInterval, doc_QApplication_doubleClickInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setKeyboardInputInterval, "QApplication.setKeyboardInputInterval(int)");

extern "C" {static PyObject *meth_QApplication_setKeyboardInputInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setKeyboardInputInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setKeyboardInputInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setKeyboardInputInterval, doc_QApplication_setKeyboardInputInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_keyboardInputInterval, "QApplication.keyboardInputInterval() -> int");

extern "C" {static PyObject *meth_QApplication_keyboardInputInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_keyboardInputInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::keyboardInputInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_keyboardInputInterval, doc_QApplication_keyboardInputInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setWheelScrollLines, "QApplication.setWheelScrollLines(int)");

extern "C" {static PyObject *meth_QApplication_setWheelScrollLines(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setWheelScrollLines(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setWheelScrollLines(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setWheelScrollLines, doc_QApplication_setWheelScrollLines);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_wheelScrollLines, "QApplication.wheelScrollLines() -> int");

extern "C" {static PyObject *meth_QApplication_wheelScrollLines(PyObject *, PyObject *);}
static PyObject *meth_QApplication_wheelScrollLines(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::wheelScrollLines();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_wheelScrollLines, doc_QApplication_wheelScrollLines);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setGlobalStrut, "QApplication.setGlobalStrut(QSize)");

extern "C" {static PyObject *meth_QApplication_setGlobalStrut(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setGlobalStrut(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setGlobalStrut(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setGlobalStrut, doc_QApplication_setGlobalStrut);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_globalStrut, "QApplication.globalStrut() -> QSize");

extern "C" {static PyObject *meth_QApplication_globalStrut(PyObject *, PyObject *);}
static PyObject *meth_QApplication_globalStrut(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(QApplication::globalStrut());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_globalStrut, doc_QApplication_globalStrut);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setStartDragTime, "QApplication.setStartDragTime(int)");

extern "C" {static PyObject *meth_QApplication_setStartDragTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStartDragTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setStartDragTime(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setStartDragTime, doc_QApplication_setStartDragTime);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_startDragTime, "QApplication.startDragTime() -> int");

extern "C" {static PyObject *meth_QApplication_startDragTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_startDragTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::startDragTime();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_startDragTime, doc_QApplication_startDragTime);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setStartDragDistance, "QApplication.setStartDragDistance(int)");

extern "C" {static PyObject *meth_QApplication_setStartDragDistance(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStartDragDistance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setStartDragDistance(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setStartDragDistance, doc_QApplication_setStartDragDistance);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_startDragDistance, "QApplication.startDragDistance() -> int");

extern "C" {static PyObject *meth_QApplication_startDragDistance(PyObject *, PyObject *);}
static PyObject *meth_QApplication_startDragDistance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::startDragDistance();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_startDragDistance, doc_QApplication_startDragDistance);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setLayoutDirection, "QApplication.setLayoutDirection(Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QApplication_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setLayoutDirection(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::LayoutDirection a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_Qt_LayoutDirection, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setLayoutDirection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setLayoutDirection, doc_QApplication_setLayoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_layoutDirection, "QApplication.layoutDirection() -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QApplication_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QApplication_layoutDirection(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::layoutDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_layoutDirection, doc_QApplication_layoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_isRightToLeft, "QApplication.isRightToLeft() -> bool");

extern "C" {static PyObject *meth_QApplication_isRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QApplication_isRightToLeft(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::isRightToLeft();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_isRightToLeft, doc_QApplication_isRightToLeft);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_isLeftToRight, "QApplication.isLeftToRight() -> bool");

extern "C" {static PyObject *meth_QApplication_isLeftToRight(PyObject *, PyObject *);}
static PyObject *meth_QApplication_isLeftToRight(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::isLeftToRight();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_isLeftToRight, doc_QApplication_isLeftToRight);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_isEffectEnabled, "QApplication.isEffectEnabled(Qt.UIEffect) -> bool");

extern "C" {static PyObject *meth_QApplication_isEffectEnabled(PyObject *, PyObject *);}
static PyObject *meth_QApplication_isEffectEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::UIEffect a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_Qt_UIEffect, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::isEffectEnabled(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_isEffectEnabled, doc_QApplication_isEffectEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setEffectEnabled, "QApplication.setEffectEnabled(Qt.UIEffect, bool enabled=True)");

extern "C" {static PyObject *meth_QApplication_setEffectEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QApplication_setEffectEnabled(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::UIEffect a0;
        bool a1 = 1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "E|b", sipType_Qt_UIEffect, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setEffectEnabled(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setEffectEnabled, doc_QApplication_setEffectEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_x11EventFilter, "QApplication.x11EventFilter(sip.voidptr) -> bool");

extern "C" {static PyObject *meth_QApplication_x11EventFilter(PyObject *, PyObject *);}
static PyObject *meth_QApplication_x11EventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        XEvent* a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0", &sipSelf, sipType_QApplication, &sipCpp, sipType_XEvent,&a0,NULL))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QApplication::x11EventFilter(a0) : sipCpp->x11EventFilter(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_x11EventFilter, doc_QApplication_x11EventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_x11ProcessEvent, "QApplication.x11ProcessEvent(sip.voidptr) -> int");

extern "C" {static PyObject *meth_QApplication_x11ProcessEvent(PyObject *, PyObject *);}
static PyObject *meth_QApplication_x11ProcessEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        XEvent* a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0", &sipSelf, sipType_QApplication, &sipCpp, sipType_XEvent,&a0,NULL))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x11ProcessEvent(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_x11ProcessEvent, doc_QApplication_x11ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_isSessionRestored, "QApplication.isSessionRestored() -> bool");

extern "C" {static PyObject *meth_QApplication_isSessionRestored(PyObject *, PyObject *);}
static PyObject *meth_QApplication_isSessionRestored(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QApplication, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSessionRestored();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_isSessionRestored, doc_QApplication_isSessionRestored);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_sessionId, "QApplication.sessionId() -> QString");

extern "C" {static PyObject *meth_QApplication_sessionId(PyObject *, PyObject *);}
static PyObject *meth_QApplication_sessionId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QApplication, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sessionId());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_sessionId, doc_QApplication_sessionId);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_sessionKey, "QApplication.sessionKey() -> QString");

extern "C" {static PyObject *meth_QApplication_sessionKey(PyObject *, PyObject *);}
static PyObject *meth_QApplication_sessionKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QApplication, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sessionKey());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_sessionKey, doc_QApplication_sessionKey);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_commitData, "QApplication.commitData(QSessionManager)");

extern "C" {static PyObject *meth_QApplication_commitData(PyObject *, PyObject *);}
static PyObject *meth_QApplication_commitData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSessionManager* a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QApplication, &sipCpp, sipType_QSessionManager, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QApplication::commitData(*a0) : sipCpp->commitData(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_commitData, doc_QApplication_commitData);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_saveState, "QApplication.saveState(QSessionManager)");

extern "C" {static PyObject *meth_QApplication_saveState(PyObject *, PyObject *);}
static PyObject *meth_QApplication_saveState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSessionManager* a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QApplication, &sipCpp, sipType_QSessionManager, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QApplication::saveState(*a0) : sipCpp->saveState(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_saveState, doc_QApplication_saveState);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setInputContext, "QApplication.setInputContext(QInputContext)");

extern "C" {static PyObject *meth_QApplication_setInputContext(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QInputContext* a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QApplication, &sipCpp, sipType_QInputContext, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setInputContext(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setInputContext, doc_QApplication_setInputContext);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_inputContext, "QApplication.inputContext() -> QInputContext");

extern "C" {static PyObject *meth_QApplication_inputContext(PyObject *, PyObject *);}
static PyObject *meth_QApplication_inputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QApplication, &sipCpp))
        {
            QInputContext*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->inputContext();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QInputContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_inputContext, doc_QApplication_inputContext);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_exec_, "QApplication.exec_() -> int");

extern "C" {static PyObject *meth_QApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QApplication_exec_(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_exec_, doc_QApplication_exec_);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_notify, "QApplication.notify(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QApplication, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QApplication::notify(a0,a1) : sipCpp->notify(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_notify, doc_QApplication_notify);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setQuitOnLastWindowClosed, "QApplication.setQuitOnLastWindowClosed(bool)");

extern "C" {static PyObject *meth_QApplication_setQuitOnLastWindowClosed(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setQuitOnLastWindowClosed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setQuitOnLastWindowClosed(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setQuitOnLastWindowClosed, doc_QApplication_setQuitOnLastWindowClosed);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_quitOnLastWindowClosed, "QApplication.quitOnLastWindowClosed() -> bool");

extern "C" {static PyObject *meth_QApplication_quitOnLastWindowClosed(PyObject *, PyObject *);}
static PyObject *meth_QApplication_quitOnLastWindowClosed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::quitOnLastWindowClosed();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_quitOnLastWindowClosed, doc_QApplication_quitOnLastWindowClosed);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_aboutQt, "QApplication.aboutQt()");

extern "C" {static PyObject *meth_QApplication_aboutQt(PyObject *, PyObject *);}
static PyObject *meth_QApplication_aboutQt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::aboutQt();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_aboutQt, doc_QApplication_aboutQt);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_closeAllWindows, "QApplication.closeAllWindows()");

extern "C" {static PyObject *meth_QApplication_closeAllWindows(PyObject *, PyObject *);}
static PyObject *meth_QApplication_closeAllWindows(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::closeAllWindows();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_closeAllWindows, doc_QApplication_closeAllWindows);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setStyleSheet, "QApplication.setStyleSheet(QString)");

extern "C" {static PyObject *meth_QApplication_setStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QApplication, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStyleSheet(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setStyleSheet, doc_QApplication_setStyleSheet);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_event, "QApplication.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QApplication_event(PyObject *, PyObject *);}
static PyObject *meth_QApplication_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QApplication, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QApplication::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_event, doc_QApplication_event);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_font, "QApplication.font() -> QFont\n"
    "QApplication.font(QWidget) -> QFont\n"
    "QApplication.font(str) -> QFont");

extern "C" {static PyObject *meth_QApplication_font(PyObject *, PyObject *);}
static PyObject *meth_QApplication_font(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QFont*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(QApplication::font());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    {
        const QWidget* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QWidget, &a0))
        {
            QFont*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(QApplication::font(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    {
        const char* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "s", &a0))
        {
            QFont*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(QApplication::font(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_font, doc_QApplication_font);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_keyboardInputLocale, "QApplication.keyboardInputLocale() -> QLocale");

extern "C" {static PyObject *meth_QApplication_keyboardInputLocale(PyObject *, PyObject *);}
static PyObject *meth_QApplication_keyboardInputLocale(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QLocale*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale(QApplication::keyboardInputLocale());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_keyboardInputLocale, doc_QApplication_keyboardInputLocale);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_keyboardInputDirection, "QApplication.keyboardInputDirection() -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QApplication_keyboardInputDirection(PyObject *, PyObject *);}
static PyObject *meth_QApplication_keyboardInputDirection(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::keyboardInputDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_keyboardInputDirection, doc_QApplication_keyboardInputDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_styleSheet, "QApplication.styleSheet() -> QString");

extern "C" {static PyObject *meth_QApplication_styleSheet(PyObject *, PyObject *);}
static PyObject *meth_QApplication_styleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QApplication, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->styleSheet());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_styleSheet, doc_QApplication_styleSheet);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_alert, "QApplication.alert(QWidget, int msecs=0)");

extern "C" {static PyObject *meth_QApplication_alert(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QApplication_alert(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|i", sipType_QWidget, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::alert(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_alert, doc_QApplication_alert);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setGraphicsSystem, "QApplication.setGraphicsSystem(QString)");

extern "C" {static PyObject *meth_QApplication_setGraphicsSystem(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setGraphicsSystem(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setGraphicsSystem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setGraphicsSystem, doc_QApplication_setGraphicsSystem);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setAutoSipEnabled, "QApplication.setAutoSipEnabled(bool)");

extern "C" {static PyObject *meth_QApplication_setAutoSipEnabled(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setAutoSipEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QApplication, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoSipEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setAutoSipEnabled, doc_QApplication_setAutoSipEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_autoSipEnabled, "QApplication.autoSipEnabled() -> bool");

extern "C" {static PyObject *meth_QApplication_autoSipEnabled(PyObject *, PyObject *);}
static PyObject *meth_QApplication_autoSipEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QApplication, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoSipEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_autoSipEnabled, doc_QApplication_autoSipEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_queryKeyboardModifiers, "QApplication.queryKeyboardModifiers() -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QApplication_queryKeyboardModifiers(PyObject *, PyObject *);}
static PyObject *meth_QApplication_queryKeyboardModifiers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Qt::KeyboardModifiers*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::KeyboardModifiers(QApplication::queryKeyboardModifiers());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_queryKeyboardModifiers, doc_QApplication_queryKeyboardModifiers);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QApplication(void *, const sipTypeDef *);}
static void *cast_QApplication(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QApplication)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QCoreApplication)->ctd_cast((QCoreApplication *)(QApplication *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QApplication(void *, int);}
static void release_QApplication(void *sipCppV,int)
{
    QApplication *sipCpp = reinterpret_cast<QApplication *>(sipCppV);

#line 983 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qapplication.sip"
        // Make sure all top level widgets are not owned by Python and so won't be
        // destroyed by the garbage collector after QApplication is destroyed.
        QWidgetList tlw = QApplication::topLevelWidgets();
        
        for (int i = 0; i < tlw.count(); ++i)
        {
            PyObject *sw = sipGetPyObject(tlw.at(i), sipType_QWidget);
        
            if (sw)
                sipTransferTo(sw, 0);
        }
        
        // Handle all other QObject instances that we want to make sure are deleted
        // before the QApplication is deleted.
        qtgui_delete_tracked();
#line 2779 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QApplication(sipSimpleWrapper *);}
static void dealloc_QApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQApplication *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QApplication(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QApplication(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQApplication *sipCpp = 0;

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 871 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = qpycore_ArgvToC(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(nargc, argv);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            qpycore_UpdatePyArgv(a0, argc, argv);
        }
#line 2839 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    {
        PyObject * a0;
        bool a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "Tb", &PyList_Type, &a0, &a1))
        {
            int sipIsErr = 0;

#line 896 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = qpycore_ArgvToC(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(nargc, argv, a1);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            qpycore_UpdatePyArgv(a0, argc, argv);
        }
#line 2890 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    {
        PyObject * a0;
        QApplication::Type a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "TXE", &PyList_Type, &a0, sipType_QApplication_Type, &a1))
        {
            int sipIsErr = 0;

#line 928 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = qpycore_ArgvToC(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(nargc, argv, a1);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            qpycore_UpdatePyArgv(a0, argc, argv);
        }
#line 2941 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    {
        Display* a0;
        Qt::HANDLE a1 = 0;
        Qt::HANDLE a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_visual,
            sipName_colormap,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|mm", sipType_Display, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    {
        Display* a0;
        PyObject * a1;
        Qt::HANDLE a2 = 0;
        Qt::HANDLE a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_visual,
            sipName_cmap,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8T|mm", sipType_Display, &a0, &PyList_Type, &a1, &a2, &a3))
        {
            int sipIsErr = 0;

#line 957 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = qpycore_ArgvToC(a1, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(a0, nargc, argv, a2, a3);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            qpycore_UpdatePyArgv(a1, argc, argv);
        }
#line 3026 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQApplication.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QApplication[] = {{33, 0, 1}};


static PyMethodDef methods_QApplication[] = {
    {SIP_MLNAME_CAST(sipName_aboutQt), meth_QApplication_aboutQt, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_aboutQt)},
    {SIP_MLNAME_CAST(sipName_activeModalWidget), meth_QApplication_activeModalWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_activeModalWidget)},
    {SIP_MLNAME_CAST(sipName_activePopupWidget), meth_QApplication_activePopupWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_activePopupWidget)},
    {SIP_MLNAME_CAST(sipName_activeWindow), meth_QApplication_activeWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_activeWindow)},
    {SIP_MLNAME_CAST(sipName_alert), (PyCFunction)meth_QApplication_alert, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QApplication_alert)},
    {SIP_MLNAME_CAST(sipName_allWidgets), meth_QApplication_allWidgets, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_allWidgets)},
    {SIP_MLNAME_CAST(sipName_autoSipEnabled), meth_QApplication_autoSipEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_autoSipEnabled)},
    {SIP_MLNAME_CAST(sipName_beep), meth_QApplication_beep, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_beep)},
    {SIP_MLNAME_CAST(sipName_changeOverrideCursor), meth_QApplication_changeOverrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_changeOverrideCursor)},
    {SIP_MLNAME_CAST(sipName_clipboard), meth_QApplication_clipboard, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_clipboard)},
    {SIP_MLNAME_CAST(sipName_closeAllWindows), meth_QApplication_closeAllWindows, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_closeAllWindows)},
    {SIP_MLNAME_CAST(sipName_colorSpec), meth_QApplication_colorSpec, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_colorSpec)},
    {SIP_MLNAME_CAST(sipName_commitData), meth_QApplication_commitData, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_commitData)},
    {SIP_MLNAME_CAST(sipName_cursorFlashTime), meth_QApplication_cursorFlashTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_cursorFlashTime)},
    {SIP_MLNAME_CAST(sipName_desktop), meth_QApplication_desktop, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_desktop)},
    {SIP_MLNAME_CAST(sipName_desktopSettingsAware), meth_QApplication_desktopSettingsAware, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_desktopSettingsAware)},
    {SIP_MLNAME_CAST(sipName_doubleClickInterval), meth_QApplication_doubleClickInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_doubleClickInterval)},
    {SIP_MLNAME_CAST(sipName_event), meth_QApplication_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_event)},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QApplication_exec_, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_exec_)},
    {SIP_MLNAME_CAST(sipName_focusWidget), meth_QApplication_focusWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_focusWidget)},
    {SIP_MLNAME_CAST(sipName_font), meth_QApplication_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_font)},
    {SIP_MLNAME_CAST(sipName_fontMetrics), meth_QApplication_fontMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_fontMetrics)},
    {SIP_MLNAME_CAST(sipName_globalStrut), meth_QApplication_globalStrut, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_globalStrut)},
    {SIP_MLNAME_CAST(sipName_inputContext), meth_QApplication_inputContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_inputContext)},
    {SIP_MLNAME_CAST(sipName_isEffectEnabled), meth_QApplication_isEffectEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_isEffectEnabled)},
    {SIP_MLNAME_CAST(sipName_isLeftToRight), meth_QApplication_isLeftToRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_isLeftToRight)},
    {SIP_MLNAME_CAST(sipName_isRightToLeft), meth_QApplication_isRightToLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_isRightToLeft)},
    {SIP_MLNAME_CAST(sipName_isSessionRestored), meth_QApplication_isSessionRestored, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_isSessionRestored)},
    {SIP_MLNAME_CAST(sipName_keyboardInputDirection), meth_QApplication_keyboardInputDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_keyboardInputDirection)},
    {SIP_MLNAME_CAST(sipName_keyboardInputInterval), meth_QApplication_keyboardInputInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_keyboardInputInterval)},
    {SIP_MLNAME_CAST(sipName_keyboardInputLocale), meth_QApplication_keyboardInputLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_keyboardInputLocale)},
    {SIP_MLNAME_CAST(sipName_keyboardModifiers), meth_QApplication_keyboardModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_keyboardModifiers)},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QApplication_layoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_layoutDirection)},
    {SIP_MLNAME_CAST(sipName_mouseButtons), meth_QApplication_mouseButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_mouseButtons)},
    {SIP_MLNAME_CAST(sipName_notify), meth_QApplication_notify, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_notify)},
    {SIP_MLNAME_CAST(sipName_overrideCursor), meth_QApplication_overrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_overrideCursor)},
    {SIP_MLNAME_CAST(sipName_palette), meth_QApplication_palette, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_palette)},
    {SIP_MLNAME_CAST(sipName_queryKeyboardModifiers), meth_QApplication_queryKeyboardModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_queryKeyboardModifiers)},
    {SIP_MLNAME_CAST(sipName_quitOnLastWindowClosed), meth_QApplication_quitOnLastWindowClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_quitOnLastWindowClosed)},
    {SIP_MLNAME_CAST(sipName_restoreOverrideCursor), meth_QApplication_restoreOverrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_restoreOverrideCursor)},
    {SIP_MLNAME_CAST(sipName_saveState), meth_QApplication_saveState, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_saveState)},
    {SIP_MLNAME_CAST(sipName_sessionId), meth_QApplication_sessionId, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_sessionId)},
    {SIP_MLNAME_CAST(sipName_sessionKey), meth_QApplication_sessionKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_sessionKey)},
    {SIP_MLNAME_CAST(sipName_setActiveWindow), meth_QApplication_setActiveWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setActiveWindow)},
    {SIP_MLNAME_CAST(sipName_setAutoSipEnabled), meth_QApplication_setAutoSipEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setAutoSipEnabled)},
    {SIP_MLNAME_CAST(sipName_setColorSpec), meth_QApplication_setColorSpec, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setColorSpec)},
    {SIP_MLNAME_CAST(sipName_setCursorFlashTime), meth_QApplication_setCursorFlashTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setCursorFlashTime)},
    {SIP_MLNAME_CAST(sipName_setDesktopSettingsAware), meth_QApplication_setDesktopSettingsAware, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setDesktopSettingsAware)},
    {SIP_MLNAME_CAST(sipName_setDoubleClickInterval), meth_QApplication_setDoubleClickInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setDoubleClickInterval)},
    {SIP_MLNAME_CAST(sipName_setEffectEnabled), (PyCFunction)meth_QApplication_setEffectEnabled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QApplication_setEffectEnabled)},
    {SIP_MLNAME_CAST(sipName_setFont), (PyCFunction)meth_QApplication_setFont, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QApplication_setFont)},
    {SIP_MLNAME_CAST(sipName_setGlobalStrut), meth_QApplication_setGlobalStrut, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setGlobalStrut)},
    {SIP_MLNAME_CAST(sipName_setGraphicsSystem), meth_QApplication_setGraphicsSystem, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setGraphicsSystem)},
    {SIP_MLNAME_CAST(sipName_setInputContext), meth_QApplication_setInputContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setInputContext)},
    {SIP_MLNAME_CAST(sipName_setKeyboardInputInterval), meth_QApplication_setKeyboardInputInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setKeyboardInputInterval)},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QApplication_setLayoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setLayoutDirection)},
    {SIP_MLNAME_CAST(sipName_setOverrideCursor), meth_QApplication_setOverrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setOverrideCursor)},
    {SIP_MLNAME_CAST(sipName_setPalette), (PyCFunction)meth_QApplication_setPalette, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QApplication_setPalette)},
    {SIP_MLNAME_CAST(sipName_setQuitOnLastWindowClosed), meth_QApplication_setQuitOnLastWindowClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setQuitOnLastWindowClosed)},
    {SIP_MLNAME_CAST(sipName_setStartDragDistance), meth_QApplication_setStartDragDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setStartDragDistance)},
    {SIP_MLNAME_CAST(sipName_setStartDragTime), meth_QApplication_setStartDragTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setStartDragTime)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QApplication_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setStyle)},
    {SIP_MLNAME_CAST(sipName_setStyleSheet), meth_QApplication_setStyleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setStyleSheet)},
    {SIP_MLNAME_CAST(sipName_setWheelScrollLines), meth_QApplication_setWheelScrollLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setWheelScrollLines)},
    {SIP_MLNAME_CAST(sipName_setWindowIcon), meth_QApplication_setWindowIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setWindowIcon)},
    {SIP_MLNAME_CAST(sipName_startDragDistance), meth_QApplication_startDragDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_startDragDistance)},
    {SIP_MLNAME_CAST(sipName_startDragTime), meth_QApplication_startDragTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_startDragTime)},
    {SIP_MLNAME_CAST(sipName_style), meth_QApplication_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_style)},
    {SIP_MLNAME_CAST(sipName_styleSheet), meth_QApplication_styleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_styleSheet)},
    {SIP_MLNAME_CAST(sipName_syncX), meth_QApplication_syncX, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_syncX)},
    {SIP_MLNAME_CAST(sipName_topLevelAt), meth_QApplication_topLevelAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_topLevelAt)},
    {SIP_MLNAME_CAST(sipName_topLevelWidgets), meth_QApplication_topLevelWidgets, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_topLevelWidgets)},
    {SIP_MLNAME_CAST(sipName_type), meth_QApplication_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_type)},
    {SIP_MLNAME_CAST(sipName_wheelScrollLines), meth_QApplication_wheelScrollLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_wheelScrollLines)},
    {SIP_MLNAME_CAST(sipName_widgetAt), meth_QApplication_widgetAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_widgetAt)},
    {SIP_MLNAME_CAST(sipName_windowIcon), meth_QApplication_windowIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_windowIcon)},
    {SIP_MLNAME_CAST(sipName_x11EventFilter), meth_QApplication_x11EventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_x11EventFilter)},
    {SIP_MLNAME_CAST(sipName_x11ProcessEvent), meth_QApplication_x11ProcessEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_x11ProcessEvent)}
};

static sipEnumMemberDef enummembers_QApplication[] = {
    {sipName_CustomColor, static_cast<int>(QApplication::CustomColor), 41},
    {sipName_GuiClient, static_cast<int>(QApplication::GuiClient), 42},
    {sipName_GuiServer, static_cast<int>(QApplication::GuiServer), 42},
    {sipName_ManyColor, static_cast<int>(QApplication::ManyColor), 41},
    {sipName_NormalColor, static_cast<int>(QApplication::NormalColor), 41},
    {sipName_Tty, static_cast<int>(QApplication::Tty), 42},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QApplication[] = {
    {"fontDatabaseChanged()", "\1QApplication.fontDatabaseChanged", 0, 0},
    {"saveStateRequest(QSessionManager&)", "\1QApplication.saveStateRequest[QSessionManager]", 0, 0},
    {"lastWindowClosed()", "\1QApplication.lastWindowClosed", 0, 0},
    {"focusChanged(QWidget*,QWidget*)", "\1QApplication.focusChanged[QWidget, QWidget]", 0, 0},
    {"commitDataRequest(QSessionManager&)", "\1QApplication.commitDataRequest[QSessionManager]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QApplication, "\1QApplication(list-of-str)\n"
    "QApplication(list-of-str, bool)\n"
    "QApplication(list-of-str, QApplication.Type)\n"
    "QApplication(Display, int visual=0, int colormap=0)\n"
    "QApplication(Display, list-of-str, int visual=0, int cmap=0)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QApplication = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QApplication,
        {0}
    },
    {
        sipNameNr_QApplication,
        {0, 0, 1},
        78, methods_QApplication,
        6, enummembers_QApplication,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QApplication,
    -1,
    -1,
    supers_QApplication,
    0,
    init_type_QApplication,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QApplication,
    0,
    0,
    0,
    release_QApplication,
    cast_QApplication,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QApplication::staticMetaObject,
    0,
    signals_QApplication,
};
