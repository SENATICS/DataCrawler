/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmouseeventtransition.sip"
#include <qmouseeventtransition.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQMouseEventTransition.cpp"


class sipQMouseEventTransition : public QMouseEventTransition
{
public:
    sipQMouseEventTransition(QState*);
    sipQMouseEventTransition(QObject*,QEvent::Type,Qt::MouseButton,QState*);
    virtual ~sipQMouseEventTransition();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool eventTest(QEvent*);
    void onTransition(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMouseEventTransition(const sipQMouseEventTransition &);
    sipQMouseEventTransition &operator = (const sipQMouseEventTransition &);

    char sipPyMethods[9];
};

sipQMouseEventTransition::sipQMouseEventTransition(QState*a0): QMouseEventTransition(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMouseEventTransition::sipQMouseEventTransition(QObject*a0,QEvent::Type a1,Qt::MouseButton a2,QState*a3): QMouseEventTransition(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMouseEventTransition::~sipQMouseEventTransition()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMouseEventTransition::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QMouseEventTransition);
}

int sipQMouseEventTransition::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMouseEventTransition::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QMouseEventTransition,_c,_id,_a);

    return _id;
}

void *sipQMouseEventTransition::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QMouseEventTransition, _clname)) ? this : QMouseEventTransition::qt_metacast(_clname);
}

void sipQMouseEventTransition::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMouseEventTransition::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMouseEventTransition::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMouseEventTransition::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMouseEventTransition::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMouseEventTransition::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMouseEventTransition::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMouseEventTransition::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMouseEventTransition::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMouseEventTransition::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMouseEventTransition::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMouseEventTransition::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQMouseEventTransition::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMouseEventTransition::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMouseEventTransition::eventTest(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_eventTest);

    if (!sipMeth)
        return QMouseEventTransition::eventTest(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMouseEventTransition::onTransition(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_onTransition);

    if (!sipMeth)
    {
        QMouseEventTransition::onTransition(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QMouseEventTransition_button, "QMouseEventTransition.button() -> Qt.MouseButton");

extern "C" {static PyObject *meth_QMouseEventTransition_button(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEventTransition, &sipCpp))
        {
            Qt::MouseButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->button();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_MouseButton);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_button, doc_QMouseEventTransition_button);

    return NULL;
}


PyDoc_STRVAR(doc_QMouseEventTransition_setButton, "QMouseEventTransition.setButton(Qt.MouseButton)");

extern "C" {static PyObject *meth_QMouseEventTransition_setButton(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_setButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::MouseButton a0;
        QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMouseEventTransition, &sipCpp, sipType_Qt_MouseButton, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setButton(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_setButton, doc_QMouseEventTransition_setButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMouseEventTransition_modifierMask, "QMouseEventTransition.modifierMask() -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QMouseEventTransition_modifierMask(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_modifierMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEventTransition, &sipCpp))
        {
            Qt::KeyboardModifiers*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::KeyboardModifiers(sipCpp->modifierMask());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_modifierMask, doc_QMouseEventTransition_modifierMask);

    return NULL;
}


PyDoc_STRVAR(doc_QMouseEventTransition_setModifierMask, "QMouseEventTransition.setModifierMask(Qt.KeyboardModifiers)");

extern "C" {static PyObject *meth_QMouseEventTransition_setModifierMask(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_setModifierMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::KeyboardModifiers* a0;
        int a0State = 0;
        QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMouseEventTransition, &sipCpp, sipType_Qt_KeyboardModifiers, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setModifierMask(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_KeyboardModifiers,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_setModifierMask, doc_QMouseEventTransition_setModifierMask);

    return NULL;
}


PyDoc_STRVAR(doc_QMouseEventTransition_hitTestPath, "QMouseEventTransition.hitTestPath() -> QPainterPath");

extern "C" {static PyObject *meth_QMouseEventTransition_hitTestPath(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_hitTestPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEventTransition, &sipCpp))
        {
            QPainterPath*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPainterPath(sipCpp->hitTestPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_hitTestPath, doc_QMouseEventTransition_hitTestPath);

    return NULL;
}


PyDoc_STRVAR(doc_QMouseEventTransition_setHitTestPath, "QMouseEventTransition.setHitTestPath(QPainterPath)");

extern "C" {static PyObject *meth_QMouseEventTransition_setHitTestPath(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_setHitTestPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMouseEventTransition, &sipCpp, sipType_QPainterPath, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHitTestPath(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_setHitTestPath, doc_QMouseEventTransition_setHitTestPath);

    return NULL;
}


PyDoc_STRVAR(doc_QMouseEventTransition_onTransition, "QMouseEventTransition.onTransition(QEvent)");

extern "C" {static PyObject *meth_QMouseEventTransition_onTransition(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_onTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMouseEventTransition, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QMouseEventTransition::onTransition(a0) : sipCpp->onTransition(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_onTransition, doc_QMouseEventTransition_onTransition);

    return NULL;
}


PyDoc_STRVAR(doc_QMouseEventTransition_eventTest, "QMouseEventTransition.eventTest(QEvent) -> bool");

extern "C" {static PyObject *meth_QMouseEventTransition_eventTest(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_eventTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMouseEventTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QMouseEventTransition::eventTest(a0) : sipCpp->eventTest(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_eventTest, doc_QMouseEventTransition_eventTest);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMouseEventTransition(void *, const sipTypeDef *);}
static void *cast_QMouseEventTransition(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QMouseEventTransition)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QEventTransition)->ctd_cast((QEventTransition *)(QMouseEventTransition *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMouseEventTransition(void *, int);}
static void release_QMouseEventTransition(void *sipCppV,int)
{
    QMouseEventTransition *sipCpp = reinterpret_cast<QMouseEventTransition *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QMouseEventTransition(sipSimpleWrapper *);}
static void dealloc_QMouseEventTransition(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMouseEventTransition *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMouseEventTransition(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMouseEventTransition(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMouseEventTransition(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMouseEventTransition *sipCpp = 0;

    {
        QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMouseEventTransition(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0;
        PyObject *a0Keep;
        QEvent::Type a1;
        Qt::MouseButton a2;
        QState* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8EE|JH", &a0Keep, sipType_QObject, &a0, sipType_QEvent_Type, &a1, sipType_Qt_MouseButton, &a2, sipType_QState, &a3, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMouseEventTransition(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            sipKeepReference((PyObject *)sipSelf, 10, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMouseEventTransition[] = {{63, 0, 1}};


static PyMethodDef methods_QMouseEventTransition[] = {
    {SIP_MLNAME_CAST(sipName_button), meth_QMouseEventTransition_button, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEventTransition_button)},
    {SIP_MLNAME_CAST(sipName_eventTest), meth_QMouseEventTransition_eventTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEventTransition_eventTest)},
    {SIP_MLNAME_CAST(sipName_hitTestPath), meth_QMouseEventTransition_hitTestPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEventTransition_hitTestPath)},
    {SIP_MLNAME_CAST(sipName_modifierMask), meth_QMouseEventTransition_modifierMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEventTransition_modifierMask)},
    {SIP_MLNAME_CAST(sipName_onTransition), meth_QMouseEventTransition_onTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEventTransition_onTransition)},
    {SIP_MLNAME_CAST(sipName_setButton), meth_QMouseEventTransition_setButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEventTransition_setButton)},
    {SIP_MLNAME_CAST(sipName_setHitTestPath), meth_QMouseEventTransition_setHitTestPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEventTransition_setHitTestPath)},
    {SIP_MLNAME_CAST(sipName_setModifierMask), meth_QMouseEventTransition_setModifierMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEventTransition_setModifierMask)}
};

PyDoc_STRVAR(doc_QMouseEventTransition, "\1QMouseEventTransition(QState sourceState=None)\n"
    "QMouseEventTransition(QObject, QEvent.Type, Qt.MouseButton, QState sourceState=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QMouseEventTransition = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QMouseEventTransition,
        {0}
    },
    {
        sipNameNr_QMouseEventTransition,
        {0, 0, 1},
        8, methods_QMouseEventTransition,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMouseEventTransition,
    -1,
    -1,
    supers_QMouseEventTransition,
    0,
    init_type_QMouseEventTransition,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMouseEventTransition,
    0,
    0,
    0,
    release_QMouseEventTransition,
    cast_QMouseEventTransition,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMouseEventTransition::staticMetaObject,
    0,
    0
};
