/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 70 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"

#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 611 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 70 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 87 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 46 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 52 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 69 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 55 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 67 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 73 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 76 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 85 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 88 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 91 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 94 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextFrame.cpp"


class sipQTextFrame : public QTextFrame
{
public:
    sipQTextFrame(QTextDocument*);
    virtual ~sipQTextFrame();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextFrame(const sipQTextFrame &);
    sipQTextFrame &operator = (const sipQTextFrame &);

    char sipPyMethods[7];
};

sipQTextFrame::sipQTextFrame(QTextDocument*a0): QTextFrame(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextFrame::~sipQTextFrame()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTextFrame::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextFrame);
}

int sipQTextFrame::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTextFrame::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextFrame,_c,_id,_a);

    return _id;
}

void *sipQTextFrame::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextFrame, _clname)) ? this : QTextFrame::qt_metacast(_clname);
}

void sipQTextFrame::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTextFrame::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextFrame::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTextFrame::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextFrame::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTextFrame::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextFrame::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTextFrame::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextFrame::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTextFrame::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTextFrame::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTextFrame::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTextFrame::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTextFrame::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTextFrame_frameFormat, "QTextFrame.frameFormat() -> QTextFrameFormat");

extern "C" {static PyObject *meth_QTextFrame_frameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_frameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            QTextFrameFormat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextFrameFormat(sipCpp->frameFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextFrameFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_frameFormat, doc_QTextFrame_frameFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrame_firstCursorPosition, "QTextFrame.firstCursorPosition() -> QTextCursor");

extern "C" {static PyObject *meth_QTextFrame_firstCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_firstCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            QTextCursor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCursor(sipCpp->firstCursorPosition());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_firstCursorPosition, doc_QTextFrame_firstCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrame_lastCursorPosition, "QTextFrame.lastCursorPosition() -> QTextCursor");

extern "C" {static PyObject *meth_QTextFrame_lastCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_lastCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            QTextCursor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCursor(sipCpp->lastCursorPosition());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_lastCursorPosition, doc_QTextFrame_lastCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrame_firstPosition, "QTextFrame.firstPosition() -> int");

extern "C" {static PyObject *meth_QTextFrame_firstPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_firstPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->firstPosition();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_firstPosition, doc_QTextFrame_firstPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrame_lastPosition, "QTextFrame.lastPosition() -> int");

extern "C" {static PyObject *meth_QTextFrame_lastPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_lastPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastPosition();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_lastPosition, doc_QTextFrame_lastPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrame_childFrames, "QTextFrame.childFrames() -> list-of-QTextFrame");

extern "C" {static PyObject *meth_QTextFrame_childFrames(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_childFrames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            QList<QTextFrame*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTextFrame*>(sipCpp->childFrames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTextFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_childFrames, doc_QTextFrame_childFrames);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrame_parentFrame, "QTextFrame.parentFrame() -> QTextFrame");

extern "C" {static PyObject *meth_QTextFrame_parentFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_parentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            QTextFrame*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parentFrame();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_parentFrame, doc_QTextFrame_parentFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrame_begin, "QTextFrame.begin() -> QTextFrame.iterator");

extern "C" {static PyObject *meth_QTextFrame_begin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            QTextFrame::iterator*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextFrame::iterator(sipCpp->begin());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextFrame_iterator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_begin, doc_QTextFrame_begin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrame_end, "QTextFrame.end() -> QTextFrame.iterator");

extern "C" {static PyObject *meth_QTextFrame_end(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            QTextFrame::iterator*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextFrame::iterator(sipCpp->end());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextFrame_iterator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_end, doc_QTextFrame_end);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrame_setFrameFormat, "QTextFrame.setFrameFormat(QTextFrameFormat)");

extern "C" {static PyObject *meth_QTextFrame_setFrameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_setFrameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat* a0;
        QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFrame, &sipCpp, sipType_QTextFrameFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFrameFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_setFrameFormat, doc_QTextFrame_setFrameFormat);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextFrame(void *, const sipTypeDef *);}
static void *cast_QTextFrame(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextFrame)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextObject)->ctd_cast((QTextObject *)(QTextFrame *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFrame(void *, int);}
static void release_QTextFrame(void *sipCppV,int)
{
    QTextFrame *sipCpp = reinterpret_cast<QTextFrame *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTextFrame(sipSimpleWrapper *);}
static void dealloc_QTextFrame(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTextFrame *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTextFrame(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTextFrame(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextFrame(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextFrame *sipCpp = 0;

    {
        QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextFrame(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextFrame[] = {{700, 255, 1}};


static PyMethodDef methods_QTextFrame[] = {
    {SIP_MLNAME_CAST(sipName_begin), meth_QTextFrame_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_begin)},
    {SIP_MLNAME_CAST(sipName_childFrames), meth_QTextFrame_childFrames, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_childFrames)},
    {SIP_MLNAME_CAST(sipName_end), meth_QTextFrame_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_end)},
    {SIP_MLNAME_CAST(sipName_firstCursorPosition), meth_QTextFrame_firstCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_firstCursorPosition)},
    {SIP_MLNAME_CAST(sipName_firstPosition), meth_QTextFrame_firstPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_firstPosition)},
    {SIP_MLNAME_CAST(sipName_frameFormat), meth_QTextFrame_frameFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_frameFormat)},
    {SIP_MLNAME_CAST(sipName_lastCursorPosition), meth_QTextFrame_lastCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_lastCursorPosition)},
    {SIP_MLNAME_CAST(sipName_lastPosition), meth_QTextFrame_lastPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_lastPosition)},
    {SIP_MLNAME_CAST(sipName_parentFrame), meth_QTextFrame_parentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_parentFrame)},
    {SIP_MLNAME_CAST(sipName_setFrameFormat), meth_QTextFrame_setFrameFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_setFrameFormat)}
};

PyDoc_STRVAR(doc_QTextFrame, "\1QTextFrame(QTextDocument)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextFrame = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTextFrame,
        {0}
    },
    {
        sipNameNr_QTextFrame,
        {0, 0, 1},
        10, methods_QTextFrame,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextFrame,
    -1,
    -1,
    supers_QTextFrame,
    0,
    init_type_QTextFrame,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextFrame,
    0,
    0,
    0,
    release_QTextFrame,
    cast_QTextFrame,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTextFrame::staticMetaObject,
    0,
    0
};
