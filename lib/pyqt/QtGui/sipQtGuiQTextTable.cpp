/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtexttable.sip"
#include <qtexttable.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"

#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 704 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtexttable.sip"
#include <qtexttable.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 611 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 70 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 87 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 55 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 70 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 58 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 73 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 76 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 79 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 82 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 88 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 91 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 94 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 97 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 100 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTextTable.cpp"


class sipQTextTable : public QTextTable
{
public:
    sipQTextTable(QTextDocument*);
    virtual ~sipQTextTable();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextTable(const sipQTextTable &);
    sipQTextTable &operator = (const sipQTextTable &);

    char sipPyMethods[7];
};

sipQTextTable::sipQTextTable(QTextDocument*a0): QTextTable(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextTable::~sipQTextTable()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTextTable::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextTable);
}

int sipQTextTable::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTextTable::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextTable,_c,_id,_a);

    return _id;
}

void *sipQTextTable::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextTable, _clname)) ? this : QTextTable::qt_metacast(_clname);
}

void sipQTextTable::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTextTable::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextTable::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTextTable::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextTable::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTextTable::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextTable::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTextTable::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextTable::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTextTable::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTextTable::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTextTable::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTextTable::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTextTable::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTextTable_resize, "QTextTable.resize(int, int)");

extern "C" {static PyObject *meth_QTextTable_resize(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resize(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_resize, doc_QTextTable_resize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_insertRows, "QTextTable.insertRows(int, int)");

extern "C" {static PyObject *meth_QTextTable_insertRows(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_insertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRows(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_insertRows, doc_QTextTable_insertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_insertColumns, "QTextTable.insertColumns(int, int)");

extern "C" {static PyObject *meth_QTextTable_insertColumns(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_insertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertColumns(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_insertColumns, doc_QTextTable_insertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_removeRows, "QTextTable.removeRows(int, int)");

extern "C" {static PyObject *meth_QTextTable_removeRows(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_removeRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeRows(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_removeRows, doc_QTextTable_removeRows);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_removeColumns, "QTextTable.removeColumns(int, int)");

extern "C" {static PyObject *meth_QTextTable_removeColumns(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_removeColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeColumns(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_removeColumns, doc_QTextTable_removeColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_mergeCells, "QTextTable.mergeCells(int, int, int, int)\n"
    "QTextTable.mergeCells(QTextCursor)");

extern "C" {static PyObject *meth_QTextTable_mergeCells(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_mergeCells(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->mergeCells(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QTextCursor* a0;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTable, &sipCpp, sipType_QTextCursor, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->mergeCells(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_mergeCells, doc_QTextTable_mergeCells);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_splitCell, "QTextTable.splitCell(int, int, int, int)");

extern "C" {static PyObject *meth_QTextTable_splitCell(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_splitCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->splitCell(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_splitCell, doc_QTextTable_splitCell);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_rows, "QTextTable.rows() -> int");

extern "C" {static PyObject *meth_QTextTable_rows(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_rows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTable, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rows();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_rows, doc_QTextTable_rows);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_columns, "QTextTable.columns() -> int");

extern "C" {static PyObject *meth_QTextTable_columns(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_columns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTable, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columns();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_columns, doc_QTextTable_columns);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_cellAt, "QTextTable.cellAt(int, int) -> QTextTableCell\n"
    "QTextTable.cellAt(int) -> QTextTableCell\n"
    "QTextTable.cellAt(QTextCursor) -> QTextTableCell");

extern "C" {static PyObject *meth_QTextTable_cellAt(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_cellAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            QTextTableCell*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextTableCell(sipCpp->cellAt(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextTableCell,NULL);
        }
    }

    {
        int a0;
        const QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextTable, &sipCpp, &a0))
        {
            QTextTableCell*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextTableCell(sipCpp->cellAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextTableCell,NULL);
        }
    }

    {
        const QTextCursor* a0;
        const QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTable, &sipCpp, sipType_QTextCursor, &a0))
        {
            QTextTableCell*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextTableCell(sipCpp->cellAt(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextTableCell,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_cellAt, doc_QTextTable_cellAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_rowStart, "QTextTable.rowStart(QTextCursor) -> QTextCursor");

extern "C" {static PyObject *meth_QTextTable_rowStart(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_rowStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;
        const QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTable, &sipCpp, sipType_QTextCursor, &a0))
        {
            QTextCursor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCursor(sipCpp->rowStart(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_rowStart, doc_QTextTable_rowStart);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_rowEnd, "QTextTable.rowEnd(QTextCursor) -> QTextCursor");

extern "C" {static PyObject *meth_QTextTable_rowEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_rowEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;
        const QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTable, &sipCpp, sipType_QTextCursor, &a0))
        {
            QTextCursor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCursor(sipCpp->rowEnd(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_rowEnd, doc_QTextTable_rowEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_format, "QTextTable.format() -> QTextTableFormat");

extern "C" {static PyObject *meth_QTextTable_format(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTable, &sipCpp))
        {
            QTextTableFormat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextTableFormat(sipCpp->format());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextTableFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_format, doc_QTextTable_format);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_setFormat, "QTextTable.setFormat(QTextTableFormat)");

extern "C" {static PyObject *meth_QTextTable_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextTableFormat* a0;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTable, &sipCpp, sipType_QTextTableFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_setFormat, doc_QTextTable_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_appendRows, "QTextTable.appendRows(int)");

extern "C" {static PyObject *meth_QTextTable_appendRows(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_appendRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextTable, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendRows(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_appendRows, doc_QTextTable_appendRows);

    return NULL;
}


PyDoc_STRVAR(doc_QTextTable_appendColumns, "QTextTable.appendColumns(int)");

extern "C" {static PyObject *meth_QTextTable_appendColumns(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_appendColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextTable, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendColumns(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_appendColumns, doc_QTextTable_appendColumns);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextTable(void *, const sipTypeDef *);}
static void *cast_QTextTable(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextTable)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextFrame)->ctd_cast((QTextFrame *)(QTextTable *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextTable(void *, int);}
static void release_QTextTable(void *sipCppV,int)
{
    QTextTable *sipCpp = reinterpret_cast<QTextTable *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTextTable(sipSimpleWrapper *);}
static void dealloc_QTextTable(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTextTable *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTextTable(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTextTable(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextTable(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextTable *sipCpp = 0;

    {
        QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextTable(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextTable[] = {{679, 255, 1}};


static PyMethodDef methods_QTextTable[] = {
    {SIP_MLNAME_CAST(sipName_appendColumns), meth_QTextTable_appendColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_appendColumns)},
    {SIP_MLNAME_CAST(sipName_appendRows), meth_QTextTable_appendRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_appendRows)},
    {SIP_MLNAME_CAST(sipName_cellAt), meth_QTextTable_cellAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_cellAt)},
    {SIP_MLNAME_CAST(sipName_columns), meth_QTextTable_columns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_columns)},
    {SIP_MLNAME_CAST(sipName_format), meth_QTextTable_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_format)},
    {SIP_MLNAME_CAST(sipName_insertColumns), meth_QTextTable_insertColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRows), meth_QTextTable_insertRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_insertRows)},
    {SIP_MLNAME_CAST(sipName_mergeCells), meth_QTextTable_mergeCells, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_mergeCells)},
    {SIP_MLNAME_CAST(sipName_removeColumns), meth_QTextTable_removeColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRows), meth_QTextTable_removeRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_removeRows)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QTextTable_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_resize)},
    {SIP_MLNAME_CAST(sipName_rowEnd), meth_QTextTable_rowEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_rowEnd)},
    {SIP_MLNAME_CAST(sipName_rowStart), meth_QTextTable_rowStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_rowStart)},
    {SIP_MLNAME_CAST(sipName_rows), meth_QTextTable_rows, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_rows)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QTextTable_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_setFormat)},
    {SIP_MLNAME_CAST(sipName_splitCell), meth_QTextTable_splitCell, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_splitCell)}
};

PyDoc_STRVAR(doc_QTextTable, "\1QTextTable(QTextDocument)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextTable = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTextTable,
        {0}
    },
    {
        sipNameNr_QTextTable,
        {0, 0, 1},
        16, methods_QTextTable,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextTable,
    -1,
    -1,
    supers_QTextTable,
    0,
    init_type_QTextTable,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextTable,
    0,
    0,
    0,
    release_QTextTable,
    cast_QTextTable,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTextTable::staticMetaObject,
    0,
    0
};
