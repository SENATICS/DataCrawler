/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtreewidgetitemiterator.sip"
#include <qtreewidgetitemiterator.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidgetItemIterator.cpp"

#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtreewidget.sip"
#include <qtreewidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidgetItemIterator.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtreewidgetitemiterator.sip"
#include <qtreewidgetitemiterator.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidgetItemIterator.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtreewidget.sip"
#include <qtreewidget.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidgetItemIterator.cpp"


PyDoc_STRVAR(doc_QTreeWidgetItemIterator_value, "QTreeWidgetItemIterator.value() -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidgetItemIterator_value(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItemIterator_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItemIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItemIterator, &sipCpp))
        {
            QTreeWidgetItem*sipRes = 0;

#line 70 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtreewidgetitemiterator.sip"
        // SIP doesn't support operator* so this is a thin wrapper around it.
        sipRes = sipCpp->operator*();
#line 64 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeWidgetItemIterator.cpp"

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItemIterator, sipName_value, doc_QTreeWidgetItemIterator_value);

    return NULL;
}


extern "C" {static PyObject *slot_QTreeWidgetItemIterator___isub__(PyObject *,PyObject *);}
static PyObject *slot_QTreeWidgetItemIterator___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTreeWidgetItemIterator)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QTreeWidgetItemIterator *sipCpp = reinterpret_cast<QTreeWidgetItemIterator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTreeWidgetItemIterator));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QTreeWidgetItemIterator::operator-=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTreeWidgetItemIterator___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QTreeWidgetItemIterator___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTreeWidgetItemIterator)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QTreeWidgetItemIterator *sipCpp = reinterpret_cast<QTreeWidgetItemIterator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTreeWidgetItemIterator));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QTreeWidgetItemIterator::operator+=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTreeWidgetItemIterator(void *, const sipTypeDef *);}
static void *cast_QTreeWidgetItemIterator(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTreeWidgetItemIterator)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeWidgetItemIterator(void *, int);}
static void release_QTreeWidgetItemIterator(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTreeWidgetItemIterator *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTreeWidgetItemIterator(sipSimpleWrapper *);}
static void dealloc_QTreeWidgetItemIterator(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTreeWidgetItemIterator(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTreeWidgetItemIterator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTreeWidgetItemIterator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTreeWidgetItemIterator *sipCpp = 0;

    {
        const QTreeWidgetItemIterator* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTreeWidgetItemIterator, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTreeWidgetItemIterator(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QTreeWidget* a0;
        QTreeWidgetItemIterator::IteratorFlags a1def = QTreeWidgetItemIterator::All;
        QTreeWidgetItemIterator::IteratorFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1", sipType_QTreeWidget, &a0, sipType_QTreeWidgetItemIterator_IteratorFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTreeWidgetItemIterator(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QTreeWidgetItemIterator_IteratorFlags,a1State);

            return sipCpp;
        }
    }

    {
        QTreeWidgetItem* a0;
        QTreeWidgetItemIterator::IteratorFlags a1def = QTreeWidgetItemIterator::All;
        QTreeWidgetItemIterator::IteratorFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1", sipType_QTreeWidgetItem, &a0, sipType_QTreeWidgetItemIterator_IteratorFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTreeWidgetItemIterator(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QTreeWidgetItemIterator_IteratorFlags,a1State);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTreeWidgetItemIterator[] = {
    {(void *)slot_QTreeWidgetItemIterator___isub__, isub_slot},
    {(void *)slot_QTreeWidgetItemIterator___iadd__, iadd_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTreeWidgetItemIterator[] = {
    {SIP_MLNAME_CAST(sipName_value), meth_QTreeWidgetItemIterator_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItemIterator_value)}
};

static sipEnumMemberDef enummembers_QTreeWidgetItemIterator[] = {
    {sipName_All, static_cast<int>(QTreeWidgetItemIterator::All), 729},
    {sipName_Checked, static_cast<int>(QTreeWidgetItemIterator::Checked), 729},
    {sipName_Disabled, static_cast<int>(QTreeWidgetItemIterator::Disabled), 729},
    {sipName_DragDisabled, static_cast<int>(QTreeWidgetItemIterator::DragDisabled), 729},
    {sipName_DragEnabled, static_cast<int>(QTreeWidgetItemIterator::DragEnabled), 729},
    {sipName_DropDisabled, static_cast<int>(QTreeWidgetItemIterator::DropDisabled), 729},
    {sipName_DropEnabled, static_cast<int>(QTreeWidgetItemIterator::DropEnabled), 729},
    {sipName_Editable, static_cast<int>(QTreeWidgetItemIterator::Editable), 729},
    {sipName_Enabled, static_cast<int>(QTreeWidgetItemIterator::Enabled), 729},
    {sipName_HasChildren, static_cast<int>(QTreeWidgetItemIterator::HasChildren), 729},
    {sipName_Hidden, static_cast<int>(QTreeWidgetItemIterator::Hidden), 729},
    {sipName_NoChildren, static_cast<int>(QTreeWidgetItemIterator::NoChildren), 729},
    {sipName_NotChecked, static_cast<int>(QTreeWidgetItemIterator::NotChecked), 729},
    {sipName_NotEditable, static_cast<int>(QTreeWidgetItemIterator::NotEditable), 729},
    {sipName_NotHidden, static_cast<int>(QTreeWidgetItemIterator::NotHidden), 729},
    {sipName_NotSelectable, static_cast<int>(QTreeWidgetItemIterator::NotSelectable), 729},
    {sipName_Selectable, static_cast<int>(QTreeWidgetItemIterator::Selectable), 729},
    {sipName_Selected, static_cast<int>(QTreeWidgetItemIterator::Selected), 729},
    {sipName_Unselected, static_cast<int>(QTreeWidgetItemIterator::Unselected), 729},
    {sipName_UserFlag, static_cast<int>(QTreeWidgetItemIterator::UserFlag), 729},
};

PyDoc_STRVAR(doc_QTreeWidgetItemIterator, "\1QTreeWidgetItemIterator(QTreeWidgetItemIterator)\n"
    "QTreeWidgetItemIterator(QTreeWidget, QTreeWidgetItemIterator.IteratorFlags flags=QTreeWidgetItemIterator.All)\n"
    "QTreeWidgetItemIterator(QTreeWidgetItem, QTreeWidgetItemIterator.IteratorFlags flags=QTreeWidgetItemIterator.All)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTreeWidgetItemIterator = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTreeWidgetItemIterator,
        {0}
    },
    {
        sipNameNr_QTreeWidgetItemIterator,
        {0, 0, 1},
        1, methods_QTreeWidgetItemIterator,
        20, enummembers_QTreeWidgetItemIterator,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTreeWidgetItemIterator,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QTreeWidgetItemIterator,
    init_type_QTreeWidgetItemIterator,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTreeWidgetItemIterator,
    0,
    0,
    0,
    release_QTreeWidgetItemIterator,
    cast_QTreeWidgetItemIterator,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
