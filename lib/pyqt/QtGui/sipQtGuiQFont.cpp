/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQFont.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQFont.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQFont.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQFont.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQFont.cpp"


PyDoc_STRVAR(doc_QFont_family, "QFont.family() -> QString");

extern "C" {static PyObject *meth_QFont_family(PyObject *, PyObject *);}
static PyObject *meth_QFont_family(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->family());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_family, doc_QFont_family);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setFamily, "QFont.setFamily(QString)");

extern "C" {static PyObject *meth_QFont_setFamily(PyObject *, PyObject *);}
static PyObject *meth_QFont_setFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFont, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFamily(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setFamily, doc_QFont_setFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_pointSize, "QFont.pointSize() -> int");

extern "C" {static PyObject *meth_QFont_pointSize(PyObject *, PyObject *);}
static PyObject *meth_QFont_pointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pointSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_pointSize, doc_QFont_pointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setPointSize, "QFont.setPointSize(int)");

extern "C" {static PyObject *meth_QFont_setPointSize(PyObject *, PyObject *);}
static PyObject *meth_QFont_setPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPointSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setPointSize, doc_QFont_setPointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_pointSizeF, "QFont.pointSizeF() -> float");

extern "C" {static PyObject *meth_QFont_pointSizeF(PyObject *, PyObject *);}
static PyObject *meth_QFont_pointSizeF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pointSizeF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_pointSizeF, doc_QFont_pointSizeF);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setPointSizeF, "QFont.setPointSizeF(float)");

extern "C" {static PyObject *meth_QFont_setPointSizeF(PyObject *, PyObject *);}
static PyObject *meth_QFont_setPointSizeF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPointSizeF(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setPointSizeF, doc_QFont_setPointSizeF);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_pixelSize, "QFont.pixelSize() -> int");

extern "C" {static PyObject *meth_QFont_pixelSize(PyObject *, PyObject *);}
static PyObject *meth_QFont_pixelSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pixelSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_pixelSize, doc_QFont_pixelSize);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setPixelSize, "QFont.setPixelSize(int)");

extern "C" {static PyObject *meth_QFont_setPixelSize(PyObject *, PyObject *);}
static PyObject *meth_QFont_setPixelSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPixelSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setPixelSize, doc_QFont_setPixelSize);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_weight, "QFont.weight() -> int");

extern "C" {static PyObject *meth_QFont_weight(PyObject *, PyObject *);}
static PyObject *meth_QFont_weight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->weight();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_weight, doc_QFont_weight);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setWeight, "QFont.setWeight(int)");

extern "C" {static PyObject *meth_QFont_setWeight(PyObject *, PyObject *);}
static PyObject *meth_QFont_setWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWeight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setWeight, doc_QFont_setWeight);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setStyle, "QFont.setStyle(QFont.Style)");

extern "C" {static PyObject *meth_QFont_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QFont_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::Style a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_Style, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStyle, doc_QFont_setStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_style, "QFont.style() -> QFont.Style");

extern "C" {static PyObject *meth_QFont_style(PyObject *, PyObject *);}
static PyObject *meth_QFont_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QFont::Style sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->style();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFont_Style);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_style, doc_QFont_style);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_underline, "QFont.underline() -> bool");

extern "C" {static PyObject *meth_QFont_underline(PyObject *, PyObject *);}
static PyObject *meth_QFont_underline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->underline();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_underline, doc_QFont_underline);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setUnderline, "QFont.setUnderline(bool)");

extern "C" {static PyObject *meth_QFont_setUnderline(PyObject *, PyObject *);}
static PyObject *meth_QFont_setUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUnderline(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setUnderline, doc_QFont_setUnderline);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_overline, "QFont.overline() -> bool");

extern "C" {static PyObject *meth_QFont_overline(PyObject *, PyObject *);}
static PyObject *meth_QFont_overline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->overline();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_overline, doc_QFont_overline);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setOverline, "QFont.setOverline(bool)");

extern "C" {static PyObject *meth_QFont_setOverline(PyObject *, PyObject *);}
static PyObject *meth_QFont_setOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOverline(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setOverline, doc_QFont_setOverline);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_strikeOut, "QFont.strikeOut() -> bool");

extern "C" {static PyObject *meth_QFont_strikeOut(PyObject *, PyObject *);}
static PyObject *meth_QFont_strikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->strikeOut();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_strikeOut, doc_QFont_strikeOut);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setStrikeOut, "QFont.setStrikeOut(bool)");

extern "C" {static PyObject *meth_QFont_setStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QFont_setStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStrikeOut(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStrikeOut, doc_QFont_setStrikeOut);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_fixedPitch, "QFont.fixedPitch() -> bool");

extern "C" {static PyObject *meth_QFont_fixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QFont_fixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fixedPitch();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_fixedPitch, doc_QFont_fixedPitch);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setFixedPitch, "QFont.setFixedPitch(bool)");

extern "C" {static PyObject *meth_QFont_setFixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QFont_setFixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFixedPitch(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setFixedPitch, doc_QFont_setFixedPitch);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_kerning, "QFont.kerning() -> bool");

extern "C" {static PyObject *meth_QFont_kerning(PyObject *, PyObject *);}
static PyObject *meth_QFont_kerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->kerning();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_kerning, doc_QFont_kerning);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setKerning, "QFont.setKerning(bool)");

extern "C" {static PyObject *meth_QFont_setKerning(PyObject *, PyObject *);}
static PyObject *meth_QFont_setKerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setKerning(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setKerning, doc_QFont_setKerning);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_styleHint, "QFont.styleHint() -> QFont.StyleHint");

extern "C" {static PyObject *meth_QFont_styleHint(PyObject *, PyObject *);}
static PyObject *meth_QFont_styleHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QFont::StyleHint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->styleHint();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFont_StyleHint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_styleHint, doc_QFont_styleHint);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_styleStrategy, "QFont.styleStrategy() -> QFont.StyleStrategy");

extern "C" {static PyObject *meth_QFont_styleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QFont_styleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QFont::StyleStrategy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->styleStrategy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFont_StyleStrategy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_styleStrategy, doc_QFont_styleStrategy);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setStyleHint, "QFont.setStyleHint(QFont.StyleHint, QFont.StyleStrategy strategy=QFont.PreferDefault)");

extern "C" {static PyObject *meth_QFont_setStyleHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFont_setStyleHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::StyleHint a0;
        QFont::StyleStrategy a1 = QFont::PreferDefault;
        QFont *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_strategy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|E", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_StyleHint, &a0, sipType_QFont_StyleStrategy, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStyleHint(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStyleHint, doc_QFont_setStyleHint);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setStyleStrategy, "QFont.setStyleStrategy(QFont.StyleStrategy)");

extern "C" {static PyObject *meth_QFont_setStyleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QFont_setStyleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::StyleStrategy a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_StyleStrategy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStyleStrategy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStyleStrategy, doc_QFont_setStyleStrategy);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_stretch, "QFont.stretch() -> int");

extern "C" {static PyObject *meth_QFont_stretch(PyObject *, PyObject *);}
static PyObject *meth_QFont_stretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->stretch();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_stretch, doc_QFont_stretch);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setStretch, "QFont.setStretch(int)");

extern "C" {static PyObject *meth_QFont_setStretch(PyObject *, PyObject *);}
static PyObject *meth_QFont_setStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStretch(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStretch, doc_QFont_setStretch);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_rawMode, "QFont.rawMode() -> bool");

extern "C" {static PyObject *meth_QFont_rawMode(PyObject *, PyObject *);}
static PyObject *meth_QFont_rawMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rawMode();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_rawMode, doc_QFont_rawMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setRawMode, "QFont.setRawMode(bool)");

extern "C" {static PyObject *meth_QFont_setRawMode(PyObject *, PyObject *);}
static PyObject *meth_QFont_setRawMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRawMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setRawMode, doc_QFont_setRawMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_exactMatch, "QFont.exactMatch() -> bool");

extern "C" {static PyObject *meth_QFont_exactMatch(PyObject *, PyObject *);}
static PyObject *meth_QFont_exactMatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exactMatch();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_exactMatch, doc_QFont_exactMatch);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_isCopyOf, "QFont.isCopyOf(QFont) -> bool");

extern "C" {static PyObject *meth_QFont_isCopyOf(PyObject *, PyObject *);}
static PyObject *meth_QFont_isCopyOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCopyOf(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_isCopyOf, doc_QFont_isCopyOf);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_handle, "QFont.handle() -> int");

extern "C" {static PyObject *meth_QFont_handle(PyObject *, PyObject *);}
static PyObject *meth_QFont_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->handle();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_handle, doc_QFont_handle);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setRawName, "QFont.setRawName(QString)");

extern "C" {static PyObject *meth_QFont_setRawName(PyObject *, PyObject *);}
static PyObject *meth_QFont_setRawName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFont, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRawName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setRawName, doc_QFont_setRawName);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_rawName, "QFont.rawName() -> QString");

extern "C" {static PyObject *meth_QFont_rawName(PyObject *, PyObject *);}
static PyObject *meth_QFont_rawName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->rawName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_rawName, doc_QFont_rawName);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_key, "QFont.key() -> QString");

extern "C" {static PyObject *meth_QFont_key(PyObject *, PyObject *);}
static PyObject *meth_QFont_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->key());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_key, doc_QFont_key);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_toString, "QFont.toString() -> QString");

extern "C" {static PyObject *meth_QFont_toString(PyObject *, PyObject *);}
static PyObject *meth_QFont_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_toString, doc_QFont_toString);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_fromString, "QFont.fromString(QString) -> bool");

extern "C" {static PyObject *meth_QFont_fromString(PyObject *, PyObject *);}
static PyObject *meth_QFont_fromString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFont, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fromString(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_fromString, doc_QFont_fromString);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_substitute, "QFont.substitute(QString) -> QString");

extern "C" {static PyObject *meth_QFont_substitute(PyObject *, PyObject *);}
static PyObject *meth_QFont_substitute(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QFont::substitute(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_substitute, doc_QFont_substitute);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_substitutes, "QFont.substitutes(QString) -> QStringList");

extern "C" {static PyObject *meth_QFont_substitutes(PyObject *, PyObject *);}
static PyObject *meth_QFont_substitutes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QFont::substitutes(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_substitutes, doc_QFont_substitutes);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_substitutions, "QFont.substitutions() -> QStringList");

extern "C" {static PyObject *meth_QFont_substitutions(PyObject *, PyObject *);}
static PyObject *meth_QFont_substitutions(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QFont::substitutions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_substitutions, doc_QFont_substitutions);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_insertSubstitution, "QFont.insertSubstitution(QString, QString)");

extern "C" {static PyObject *meth_QFont_insertSubstitution(PyObject *, PyObject *);}
static PyObject *meth_QFont_insertSubstitution(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            QFont::insertSubstitution(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_insertSubstitution, doc_QFont_insertSubstitution);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_insertSubstitutions, "QFont.insertSubstitutions(QString, QStringList)");

extern "C" {static PyObject *meth_QFont_insertSubstitutions(PyObject *, PyObject *);}
static PyObject *meth_QFont_insertSubstitutions(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QStringList* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            QFont::insertSubstitutions(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_insertSubstitutions, doc_QFont_insertSubstitutions);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_removeSubstitution, "QFont.removeSubstitution(QString)");

extern "C" {static PyObject *meth_QFont_removeSubstitution(PyObject *, PyObject *);}
static PyObject *meth_QFont_removeSubstitution(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QFont::removeSubstitution(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_removeSubstitution, doc_QFont_removeSubstitution);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_initialize, "QFont.initialize()");

extern "C" {static PyObject *meth_QFont_initialize(PyObject *, PyObject *);}
static PyObject *meth_QFont_initialize(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QFont::initialize();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_initialize, doc_QFont_initialize);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_cleanup, "QFont.cleanup()");

extern "C" {static PyObject *meth_QFont_cleanup(PyObject *, PyObject *);}
static PyObject *meth_QFont_cleanup(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QFont::cleanup();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_cleanup, doc_QFont_cleanup);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_cacheStatistics, "QFont.cacheStatistics()");

extern "C" {static PyObject *meth_QFont_cacheStatistics(PyObject *, PyObject *);}
static PyObject *meth_QFont_cacheStatistics(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QFont::cacheStatistics();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_cacheStatistics, doc_QFont_cacheStatistics);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_defaultFamily, "QFont.defaultFamily() -> QString");

extern "C" {static PyObject *meth_QFont_defaultFamily(PyObject *, PyObject *);}
static PyObject *meth_QFont_defaultFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->defaultFamily());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_defaultFamily, doc_QFont_defaultFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_lastResortFamily, "QFont.lastResortFamily() -> QString");

extern "C" {static PyObject *meth_QFont_lastResortFamily(PyObject *, PyObject *);}
static PyObject *meth_QFont_lastResortFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->lastResortFamily());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_lastResortFamily, doc_QFont_lastResortFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_lastResortFont, "QFont.lastResortFont() -> QString");

extern "C" {static PyObject *meth_QFont_lastResortFont(PyObject *, PyObject *);}
static PyObject *meth_QFont_lastResortFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->lastResortFont());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_lastResortFont, doc_QFont_lastResortFont);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_resolve, "QFont.resolve(QFont) -> QFont");

extern "C" {static PyObject *meth_QFont_resolve(PyObject *, PyObject *);}
static PyObject *meth_QFont_resolve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont, &a0))
        {
            QFont*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->resolve(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_resolve, doc_QFont_resolve);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_bold, "QFont.bold() -> bool");

extern "C" {static PyObject *meth_QFont_bold(PyObject *, PyObject *);}
static PyObject *meth_QFont_bold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bold();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_bold, doc_QFont_bold);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setBold, "QFont.setBold(bool)");

extern "C" {static PyObject *meth_QFont_setBold(PyObject *, PyObject *);}
static PyObject *meth_QFont_setBold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBold(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setBold, doc_QFont_setBold);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_italic, "QFont.italic() -> bool");

extern "C" {static PyObject *meth_QFont_italic(PyObject *, PyObject *);}
static PyObject *meth_QFont_italic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->italic();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_italic, doc_QFont_italic);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setItalic, "QFont.setItalic(bool)");

extern "C" {static PyObject *meth_QFont_setItalic(PyObject *, PyObject *);}
static PyObject *meth_QFont_setItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItalic(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setItalic, doc_QFont_setItalic);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_letterSpacing, "QFont.letterSpacing() -> float");

extern "C" {static PyObject *meth_QFont_letterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFont_letterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->letterSpacing();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_letterSpacing, doc_QFont_letterSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_letterSpacingType, "QFont.letterSpacingType() -> QFont.SpacingType");

extern "C" {static PyObject *meth_QFont_letterSpacingType(PyObject *, PyObject *);}
static PyObject *meth_QFont_letterSpacingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QFont::SpacingType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->letterSpacingType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFont_SpacingType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_letterSpacingType, doc_QFont_letterSpacingType);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setLetterSpacing, "QFont.setLetterSpacing(QFont.SpacingType, float)");

extern "C" {static PyObject *meth_QFont_setLetterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFont_setLetterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::SpacingType a0;
        qreal a1;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEd", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_SpacingType, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLetterSpacing(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setLetterSpacing, doc_QFont_setLetterSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_wordSpacing, "QFont.wordSpacing() -> float");

extern "C" {static PyObject *meth_QFont_wordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFont_wordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordSpacing();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_wordSpacing, doc_QFont_wordSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setWordSpacing, "QFont.setWordSpacing(float)");

extern "C" {static PyObject *meth_QFont_setWordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFont_setWordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setWordSpacing, doc_QFont_setWordSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setCapitalization, "QFont.setCapitalization(QFont.Capitalization)");

extern "C" {static PyObject *meth_QFont_setCapitalization(PyObject *, PyObject *);}
static PyObject *meth_QFont_setCapitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::Capitalization a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_Capitalization, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCapitalization(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setCapitalization, doc_QFont_setCapitalization);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_capitalization, "QFont.capitalization() -> QFont.Capitalization");

extern "C" {static PyObject *meth_QFont_capitalization(PyObject *, PyObject *);}
static PyObject *meth_QFont_capitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QFont::Capitalization sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->capitalization();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFont_Capitalization);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_capitalization, doc_QFont_capitalization);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_styleName, "QFont.styleName() -> QString");

extern "C" {static PyObject *meth_QFont_styleName(PyObject *, PyObject *);}
static PyObject *meth_QFont_styleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->styleName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_styleName, doc_QFont_styleName);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setStyleName, "QFont.setStyleName(QString)");

extern "C" {static PyObject *meth_QFont_setStyleName(PyObject *, PyObject *);}
static PyObject *meth_QFont_setStyleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFont, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStyleName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStyleName, doc_QFont_setStyleName);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_setHintingPreference, "QFont.setHintingPreference(QFont.HintingPreference)");

extern "C" {static PyObject *meth_QFont_setHintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QFont_setHintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::HintingPreference a0;
        QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_HintingPreference, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHintingPreference(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setHintingPreference, doc_QFont_setHintingPreference);

    return NULL;
}


PyDoc_STRVAR(doc_QFont_hintingPreference, "QFont.hintingPreference() -> QFont.HintingPreference");

extern "C" {static PyObject *meth_QFont_hintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QFont_hintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            QFont::HintingPreference sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hintingPreference();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFont_HintingPreference);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_hintingPreference, doc_QFont_hintingPreference);

    return NULL;
}


extern "C" {static PyObject *slot_QFont___ge__(PyObject *,PyObject *);}
static PyObject *slot_QFont___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QFont *sipCpp = reinterpret_cast<QFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFont));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFont, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp->QFont::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ge_slot,sipType_QFont,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QFont___lt__(PyObject *,PyObject *);}
static PyObject *slot_QFont___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QFont *sipCpp = reinterpret_cast<QFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFont));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFont, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QFont::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,lt_slot,sipType_QFont,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QFont___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFont___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QFont *sipCpp = reinterpret_cast<QFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFont));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFont, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QFont::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QFont,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QFont___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFont___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QFont *sipCpp = reinterpret_cast<QFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFont));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFont, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QFont::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QFont,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFont(void *, const sipTypeDef *);}
static void *cast_QFont(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QFont)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFont(void *, int);}
static void release_QFont(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QFont *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QFont(void *, SIP_SSIZE_T, const void *);}
static void assign_QFont(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QFont *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QFont *>(sipSrc);
}


extern "C" {static void *array_QFont(SIP_SSIZE_T);}
static void *array_QFont(SIP_SSIZE_T sipNrElem)
{
    return new QFont[sipNrElem];
}


extern "C" {static void *copy_QFont(const void *, SIP_SSIZE_T);}
static void *copy_QFont(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QFont(reinterpret_cast<const QFont *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFont(sipSimpleWrapper *);}
static void dealloc_QFont(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QFont(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QFont(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFont(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QFont *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFont();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        int a1 = -1;
        int a2 = -1;
        bool a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_pointSize,
            sipName_weight,
            sipName_italic,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|iib", sipType_QString,&a0, &a0State, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFont(*a0,a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QFont* a0;
        QPaintDevice* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J8", sipType_QFont, &a0, sipType_QPaintDevice, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFont(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QFont* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFont(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QVariant* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QVariant,&a0, &a0State))
        {
#line 117 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
        #if QT_VERSION >= 0x050000
        sipCpp = new QFont(a0->value<QFont>());
        #else
        sipCpp = new QFont(qVariantValue<QFont>(*a0));
        #endif
#line 2254 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQFont.cpp"
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFont[] = {
    {(void *)slot_QFont___ge__, ge_slot},
    {(void *)slot_QFont___lt__, lt_slot},
    {(void *)slot_QFont___ne__, ne_slot},
    {(void *)slot_QFont___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QFont[] = {
    {SIP_MLNAME_CAST(sipName_bold), meth_QFont_bold, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_bold)},
    {SIP_MLNAME_CAST(sipName_cacheStatistics), meth_QFont_cacheStatistics, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_cacheStatistics)},
    {SIP_MLNAME_CAST(sipName_capitalization), meth_QFont_capitalization, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_capitalization)},
    {SIP_MLNAME_CAST(sipName_cleanup), meth_QFont_cleanup, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_cleanup)},
    {SIP_MLNAME_CAST(sipName_defaultFamily), meth_QFont_defaultFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_defaultFamily)},
    {SIP_MLNAME_CAST(sipName_exactMatch), meth_QFont_exactMatch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_exactMatch)},
    {SIP_MLNAME_CAST(sipName_family), meth_QFont_family, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_family)},
    {SIP_MLNAME_CAST(sipName_fixedPitch), meth_QFont_fixedPitch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_fixedPitch)},
    {SIP_MLNAME_CAST(sipName_fromString), meth_QFont_fromString, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_fromString)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QFont_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_handle)},
    {SIP_MLNAME_CAST(sipName_hintingPreference), meth_QFont_hintingPreference, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_hintingPreference)},
    {SIP_MLNAME_CAST(sipName_initialize), meth_QFont_initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_initialize)},
    {SIP_MLNAME_CAST(sipName_insertSubstitution), meth_QFont_insertSubstitution, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_insertSubstitution)},
    {SIP_MLNAME_CAST(sipName_insertSubstitutions), meth_QFont_insertSubstitutions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_insertSubstitutions)},
    {SIP_MLNAME_CAST(sipName_isCopyOf), meth_QFont_isCopyOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_isCopyOf)},
    {SIP_MLNAME_CAST(sipName_italic), meth_QFont_italic, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_italic)},
    {SIP_MLNAME_CAST(sipName_kerning), meth_QFont_kerning, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_kerning)},
    {SIP_MLNAME_CAST(sipName_key), meth_QFont_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_key)},
    {SIP_MLNAME_CAST(sipName_lastResortFamily), meth_QFont_lastResortFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_lastResortFamily)},
    {SIP_MLNAME_CAST(sipName_lastResortFont), meth_QFont_lastResortFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_lastResortFont)},
    {SIP_MLNAME_CAST(sipName_letterSpacing), meth_QFont_letterSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_letterSpacing)},
    {SIP_MLNAME_CAST(sipName_letterSpacingType), meth_QFont_letterSpacingType, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_letterSpacingType)},
    {SIP_MLNAME_CAST(sipName_overline), meth_QFont_overline, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_overline)},
    {SIP_MLNAME_CAST(sipName_pixelSize), meth_QFont_pixelSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_pixelSize)},
    {SIP_MLNAME_CAST(sipName_pointSize), meth_QFont_pointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_pointSize)},
    {SIP_MLNAME_CAST(sipName_pointSizeF), meth_QFont_pointSizeF, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_pointSizeF)},
    {SIP_MLNAME_CAST(sipName_rawMode), meth_QFont_rawMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_rawMode)},
    {SIP_MLNAME_CAST(sipName_rawName), meth_QFont_rawName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_rawName)},
    {SIP_MLNAME_CAST(sipName_removeSubstitution), meth_QFont_removeSubstitution, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_removeSubstitution)},
    {SIP_MLNAME_CAST(sipName_resolve), meth_QFont_resolve, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_resolve)},
    {SIP_MLNAME_CAST(sipName_setBold), meth_QFont_setBold, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setBold)},
    {SIP_MLNAME_CAST(sipName_setCapitalization), meth_QFont_setCapitalization, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setCapitalization)},
    {SIP_MLNAME_CAST(sipName_setFamily), meth_QFont_setFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setFamily)},
    {SIP_MLNAME_CAST(sipName_setFixedPitch), meth_QFont_setFixedPitch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setFixedPitch)},
    {SIP_MLNAME_CAST(sipName_setHintingPreference), meth_QFont_setHintingPreference, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setHintingPreference)},
    {SIP_MLNAME_CAST(sipName_setItalic), meth_QFont_setItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setItalic)},
    {SIP_MLNAME_CAST(sipName_setKerning), meth_QFont_setKerning, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setKerning)},
    {SIP_MLNAME_CAST(sipName_setLetterSpacing), meth_QFont_setLetterSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setLetterSpacing)},
    {SIP_MLNAME_CAST(sipName_setOverline), meth_QFont_setOverline, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setOverline)},
    {SIP_MLNAME_CAST(sipName_setPixelSize), meth_QFont_setPixelSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setPixelSize)},
    {SIP_MLNAME_CAST(sipName_setPointSize), meth_QFont_setPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setPointSize)},
    {SIP_MLNAME_CAST(sipName_setPointSizeF), meth_QFont_setPointSizeF, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setPointSizeF)},
    {SIP_MLNAME_CAST(sipName_setRawMode), meth_QFont_setRawMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setRawMode)},
    {SIP_MLNAME_CAST(sipName_setRawName), meth_QFont_setRawName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setRawName)},
    {SIP_MLNAME_CAST(sipName_setStretch), meth_QFont_setStretch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setStretch)},
    {SIP_MLNAME_CAST(sipName_setStrikeOut), meth_QFont_setStrikeOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setStrikeOut)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QFont_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setStyle)},
    {SIP_MLNAME_CAST(sipName_setStyleHint), (PyCFunction)meth_QFont_setStyleHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFont_setStyleHint)},
    {SIP_MLNAME_CAST(sipName_setStyleName), meth_QFont_setStyleName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setStyleName)},
    {SIP_MLNAME_CAST(sipName_setStyleStrategy), meth_QFont_setStyleStrategy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setStyleStrategy)},
    {SIP_MLNAME_CAST(sipName_setUnderline), meth_QFont_setUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setUnderline)},
    {SIP_MLNAME_CAST(sipName_setWeight), meth_QFont_setWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setWeight)},
    {SIP_MLNAME_CAST(sipName_setWordSpacing), meth_QFont_setWordSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setWordSpacing)},
    {SIP_MLNAME_CAST(sipName_stretch), meth_QFont_stretch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_stretch)},
    {SIP_MLNAME_CAST(sipName_strikeOut), meth_QFont_strikeOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_strikeOut)},
    {SIP_MLNAME_CAST(sipName_style), meth_QFont_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_style)},
    {SIP_MLNAME_CAST(sipName_styleHint), meth_QFont_styleHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_styleHint)},
    {SIP_MLNAME_CAST(sipName_styleName), meth_QFont_styleName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_styleName)},
    {SIP_MLNAME_CAST(sipName_styleStrategy), meth_QFont_styleStrategy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_styleStrategy)},
    {SIP_MLNAME_CAST(sipName_substitute), meth_QFont_substitute, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_substitute)},
    {SIP_MLNAME_CAST(sipName_substitutes), meth_QFont_substitutes, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_substitutes)},
    {SIP_MLNAME_CAST(sipName_substitutions), meth_QFont_substitutions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_substitutions)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QFont_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_toString)},
    {SIP_MLNAME_CAST(sipName_underline), meth_QFont_underline, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_underline)},
    {SIP_MLNAME_CAST(sipName_weight), meth_QFont_weight, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_weight)},
    {SIP_MLNAME_CAST(sipName_wordSpacing), meth_QFont_wordSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_wordSpacing)}
};

static sipEnumMemberDef enummembers_QFont[] = {
    {sipName_AbsoluteSpacing, static_cast<int>(QFont::AbsoluteSpacing), 122},
    {sipName_AllLowercase, static_cast<int>(QFont::AllLowercase), 120},
    {sipName_AllUppercase, static_cast<int>(QFont::AllUppercase), 120},
    {sipName_AnyStyle, static_cast<int>(QFont::AnyStyle), 125},
    {sipName_Black, static_cast<int>(QFont::Black), 127},
    {sipName_Bold, static_cast<int>(QFont::Bold), 127},
    {sipName_Capitalize, static_cast<int>(QFont::Capitalize), 120},
    {sipName_Condensed, static_cast<int>(QFont::Condensed), 123},
    {sipName_Courier, static_cast<int>(QFont::Courier), 125},
    {sipName_Cursive, static_cast<int>(QFont::Cursive), 125},
    {sipName_Decorative, static_cast<int>(QFont::Decorative), 125},
    {sipName_DemiBold, static_cast<int>(QFont::DemiBold), 127},
    {sipName_Expanded, static_cast<int>(QFont::Expanded), 123},
    {sipName_ExtraCondensed, static_cast<int>(QFont::ExtraCondensed), 123},
    {sipName_ExtraExpanded, static_cast<int>(QFont::ExtraExpanded), 123},
    {sipName_Fantasy, static_cast<int>(QFont::Fantasy), 125},
    {sipName_ForceIntegerMetrics, static_cast<int>(QFont::ForceIntegerMetrics), 126},
    {sipName_ForceOutline, static_cast<int>(QFont::ForceOutline), 126},
    {sipName_Helvetica, static_cast<int>(QFont::Helvetica), 125},
    {sipName_Light, static_cast<int>(QFont::Light), 127},
    {sipName_MixedCase, static_cast<int>(QFont::MixedCase), 120},
    {sipName_Monospace, static_cast<int>(QFont::Monospace), 125},
    {sipName_NoAntialias, static_cast<int>(QFont::NoAntialias), 126},
    {sipName_NoFontMerging, static_cast<int>(QFont::NoFontMerging), 126},
    {sipName_Normal, static_cast<int>(QFont::Normal), 127},
    {sipName_OldEnglish, static_cast<int>(QFont::OldEnglish), 125},
    {sipName_OpenGLCompatible, static_cast<int>(QFont::OpenGLCompatible), 126},
    {sipName_PercentageSpacing, static_cast<int>(QFont::PercentageSpacing), 122},
    {sipName_PreferAntialias, static_cast<int>(QFont::PreferAntialias), 126},
    {sipName_PreferBitmap, static_cast<int>(QFont::PreferBitmap), 126},
    {sipName_PreferDefault, static_cast<int>(QFont::PreferDefault), 126},
    {sipName_PreferDefaultHinting, static_cast<int>(QFont::PreferDefaultHinting), 121},
    {sipName_PreferDevice, static_cast<int>(QFont::PreferDevice), 126},
    {sipName_PreferFullHinting, static_cast<int>(QFont::PreferFullHinting), 121},
    {sipName_PreferMatch, static_cast<int>(QFont::PreferMatch), 126},
    {sipName_PreferNoHinting, static_cast<int>(QFont::PreferNoHinting), 121},
    {sipName_PreferOutline, static_cast<int>(QFont::PreferOutline), 126},
    {sipName_PreferQuality, static_cast<int>(QFont::PreferQuality), 126},
    {sipName_PreferVerticalHinting, static_cast<int>(QFont::PreferVerticalHinting), 121},
    {sipName_SansSerif, static_cast<int>(QFont::SansSerif), 125},
    {sipName_SemiCondensed, static_cast<int>(QFont::SemiCondensed), 123},
    {sipName_SemiExpanded, static_cast<int>(QFont::SemiExpanded), 123},
    {sipName_Serif, static_cast<int>(QFont::Serif), 125},
    {sipName_SmallCaps, static_cast<int>(QFont::SmallCaps), 120},
    {sipName_StyleItalic, static_cast<int>(QFont::StyleItalic), 124},
    {sipName_StyleNormal, static_cast<int>(QFont::StyleNormal), 124},
    {sipName_StyleOblique, static_cast<int>(QFont::StyleOblique), 124},
    {sipName_System, static_cast<int>(QFont::System), 125},
    {sipName_Times, static_cast<int>(QFont::Times), 125},
    {sipName_TypeWriter, static_cast<int>(QFont::TypeWriter), 125},
    {sipName_UltraCondensed, static_cast<int>(QFont::UltraCondensed), 123},
    {sipName_UltraExpanded, static_cast<int>(QFont::UltraExpanded), 123},
    {sipName_Unstretched, static_cast<int>(QFont::Unstretched), 123},
};

PyDoc_STRVAR(doc_QFont, "\1QFont()\n"
    "QFont(QString, int pointSize=-1, int weight=-1, bool italic=False)\n"
    "QFont(QFont, QPaintDevice)\n"
    "QFont(QFont)\n"
    "QFont(QVariant)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QFont = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QFont,
        {0}
    },
    {
        sipNameNr_QFont,
        {0, 0, 1},
        66, methods_QFont,
        53, enummembers_QFont,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QFont,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QFont,
    init_type_QFont,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFont,
    assign_QFont,
    array_QFont,
    copy_QFont,
    release_QFont,
    cast_QFont,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
