/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtreeview.sip"
#include <qtreeview.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 174 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 1135 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 94 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qheaderview.sip"
#include <qheaderview.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 94 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 127 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 233 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 236 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 239 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 242 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 245 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 248 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 251 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 254 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 257 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 260 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 263 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 266 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 269 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 272 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 275 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQTreeView.cpp"


class sipQTreeView : public QTreeView
{
public:
    sipQTreeView(QWidget*);
    virtual ~sipQTreeView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void inputMethodEvent(QInputMethodEvent*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void resizeEvent(QResizeEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    bool event(QEvent*);
    QStyleOptionViewItem viewOptions() const;
    void startDrag(Qt::DropActions);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent*) const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void editorDestroyed(QObject*);
    void commitData(QWidget*);
    void closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void verticalScrollbarAction(int);
    void updateEditorGeometries();
    void updateEditorData();
    int sizeHintForRow(int) const;
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    bool viewportEvent(QEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    bool isIndexHidden(const QModelIndex&) const;
    void horizontalScrollbarAction(int);
    int sizeHintForColumn(int) const;
    void updateGeometries();
    void keyPressEvent(QKeyEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void drawBranches(QPainter*,const QRect&,const QModelIndex&) const;
    void drawRow(QPainter*,const QStyleOptionViewItem&,const QModelIndex&) const;
    void mouseReleaseEvent(QMouseEvent*);
    void timerEvent(QTimerEvent*);
    void paintEvent(QPaintEvent*);
    QModelIndexList selectedIndexes() const;
    QRegion visualRegionForSelection(const QItemSelection&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    int verticalOffset() const;
    int horizontalOffset() const;
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void scrollContentsBy(int,int);
    void selectAll();
    void dataChanged(const QModelIndex&,const QModelIndex&);
    void reset();
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QRect visualRect(const QModelIndex&) const;
    void keyboardSearch(const QString&);
    void setSelectionModel(QItemSelectionModel*);
    void setRootIndex(const QModelIndex&);
    void setModel(QAbstractItemModel*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeView(const sipQTreeView &);
    sipQTreeView &operator = (const sipQTreeView &);

    char sipPyMethods[88];
};

sipQTreeView::sipQTreeView(QWidget*a0): QTreeView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeView::~sipQTreeView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTreeView::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTreeView);
}

int sipQTreeView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTreeView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTreeView,_c,_id,_a);

    return _id;
}

void *sipQTreeView::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTreeView, _clname)) ? this : QTreeView::qt_metacast(_clname);
}

void sipQTreeView::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTreeView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTreeView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTreeView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTreeView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTreeView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QTreeView::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QTreeView::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QTreeView::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QTreeView::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QTreeView::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTreeView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QTreeView::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QTreeView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QTreeView::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QTreeView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QTreeView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QTreeView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QTreeView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QTreeView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QTreeView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QTreeView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQTreeView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QTreeView::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTreeView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QTreeView::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QTreeView::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTreeView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QTreeView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QTreeView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QTreeView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QTreeView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQTreeView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QTreeView::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQTreeView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QTreeView::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QTreeView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QTreeView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQTreeView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QTreeView::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QTreeView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QTreeView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QTreeView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QTreeView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QTreeView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QTreeView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTreeView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStyleOptionViewItem sipQTreeView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return QTreeView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtGui_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_71(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
        QTreeView::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_153(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::DropActions);

    sipVH_QtGui_153(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QItemSelectionModel::SelectionFlags sipQTreeView::selectionCommand(const QModelIndex& a0,const QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return QTreeView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtGui_233(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QEvent*);

    return sipVH_QtGui_233(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTreeView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return QTreeView::edit(a0,a1,a2);

    extern bool sipVH_QtGui_234(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);

    return sipVH_QtGui_234(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::editorDestroyed(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
        QTreeView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_235(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtGui_235(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::commitData(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QTreeView::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::closeEditor(QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
        QTreeView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_236(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_236(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTreeView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTreeView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
        QTreeView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
        QTreeView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
        QTreeView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTreeView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return QTreeView::sizeHintForRow(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
        QTreeView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
        QTreeView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,const QItemSelection&);

    sipVH_QtGui_46(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTreeView::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QTreeView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QTreeView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[56]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return QTreeView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
        QTreeView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTreeView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[58]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return QTreeView::sizeHintForColumn(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
        QTreeView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QTreeView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QTreeView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QTreeView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QTreeView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::drawBranches(QPainter*a0,const QRect& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[64]),sipPySelf,NULL,sipName_drawBranches);

    if (!sipMeth)
    {
        QTreeView::drawBranches(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRect&,const QModelIndex&);

    sipVH_QtGui_47(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::drawRow(QPainter*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[65]),sipPySelf,NULL,sipName_drawRow);

    if (!sipMeth)
    {
        QTreeView::drawRow(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_48(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QTreeView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTreeView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QTreeView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndexList sipQTreeView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[69]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return QTreeView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtGui_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_49(sipGILState, 0, sipPySelf, sipMeth);
}

QRegion sipQTreeView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[70]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return QTreeView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtGui_50(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
        QTreeView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_51(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQTreeView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[72]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return QTreeView::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTreeView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[73]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return QTreeView::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

QModelIndex sipQTreeView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return QTreeView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtGui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemView::CursorAction,Qt::KeyboardModifiers);

    return sipVH_QtGui_52(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
        QTreeView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
        QTreeView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QTreeView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QTreeView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeView::dataChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
        QTreeView::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QTreeView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QModelIndex sipQTreeView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return QTreeView::indexAt(a0);

    extern QModelIndex sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
        QTreeView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtGui_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtGui_55(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QRect sipQTreeView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[83]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return QTreeView::visualRect(a0);

    extern QRect sipVH_QtGui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtGui_56(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
        QTreeView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtGui_QtCore->em_virthandlers[33]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::setSelectionModel(QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
        QTreeView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QItemSelectionModel*);

    sipVH_QtGui_37(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
        QTreeView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeView::setModel(QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
        QTreeView::setModel(a0);
        return;
    }

    extern void sipVH_QtGui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemModel*);

    sipVH_QtGui_36(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTreeView_setModel, "QTreeView.setModel(QAbstractItemModel)");

extern "C" {static PyObject *meth_QTreeView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel* a0;
        PyObject *a0Keep;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTreeView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::setModel(a0) : sipCpp->setModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -69, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setModel, doc_QTreeView_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setRootIndex, "QTreeView.setRootIndex(QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setRootIndex, doc_QTreeView_setRootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setSelectionModel, "QTreeView.setSelectionModel(QItemSelectionModel)");

extern "C" {static PyObject *meth_QTreeView_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel* a0;
        PyObject *a0Keep;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTreeView, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -70, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setSelectionModel, doc_QTreeView_setSelectionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_header, "QTreeView.header() -> QHeaderView");

extern "C" {static PyObject *meth_QTreeView_header(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            QHeaderView*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->header();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHeaderView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_header, doc_QTreeView_header);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setHeader, "QTreeView.setHeader(QHeaderView)");

extern "C" {static PyObject *meth_QTreeView_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QHeaderView, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeader(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setHeader, doc_QTreeView_setHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_indentation, "QTreeView.indentation() -> int");

extern "C" {static PyObject *meth_QTreeView_indentation(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indentation();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indentation, doc_QTreeView_indentation);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setIndentation, "QTreeView.setIndentation(int)");

extern "C" {static PyObject *meth_QTreeView_setIndentation(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setIndentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIndentation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setIndentation, doc_QTreeView_setIndentation);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_rootIsDecorated, "QTreeView.rootIsDecorated() -> bool");

extern "C" {static PyObject *meth_QTreeView_rootIsDecorated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rootIsDecorated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rootIsDecorated();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rootIsDecorated, doc_QTreeView_rootIsDecorated);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setRootIsDecorated, "QTreeView.setRootIsDecorated(bool)");

extern "C" {static PyObject *meth_QTreeView_setRootIsDecorated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRootIsDecorated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRootIsDecorated(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setRootIsDecorated, doc_QTreeView_setRootIsDecorated);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_uniformRowHeights, "QTreeView.uniformRowHeights() -> bool");

extern "C" {static PyObject *meth_QTreeView_uniformRowHeights(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_uniformRowHeights(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->uniformRowHeights();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_uniformRowHeights, doc_QTreeView_uniformRowHeights);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setUniformRowHeights, "QTreeView.setUniformRowHeights(bool)");

extern "C" {static PyObject *meth_QTreeView_setUniformRowHeights(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setUniformRowHeights(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformRowHeights(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setUniformRowHeights, doc_QTreeView_setUniformRowHeights);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_itemsExpandable, "QTreeView.itemsExpandable() -> bool");

extern "C" {static PyObject *meth_QTreeView_itemsExpandable(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_itemsExpandable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemsExpandable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_itemsExpandable, doc_QTreeView_itemsExpandable);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setItemsExpandable, "QTreeView.setItemsExpandable(bool)");

extern "C" {static PyObject *meth_QTreeView_setItemsExpandable(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setItemsExpandable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemsExpandable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setItemsExpandable, doc_QTreeView_setItemsExpandable);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnViewportPosition, "QTreeView.columnViewportPosition(int) -> int");

extern "C" {static PyObject *meth_QTreeView_columnViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnViewportPosition(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnViewportPosition, doc_QTreeView_columnViewportPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnWidth, "QTreeView.columnWidth(int) -> int");

extern "C" {static PyObject *meth_QTreeView_columnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnWidth(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnWidth, doc_QTreeView_columnWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnAt, "QTreeView.columnAt(int) -> int");

extern "C" {static PyObject *meth_QTreeView_columnAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnAt(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnAt, doc_QTreeView_columnAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isColumnHidden, "QTreeView.isColumnHidden(int) -> bool");

extern "C" {static PyObject *meth_QTreeView_isColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isColumnHidden(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isColumnHidden, doc_QTreeView_isColumnHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setColumnHidden, "QTreeView.setColumnHidden(int, bool)");

extern "C" {static PyObject *meth_QTreeView_setColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnHidden(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setColumnHidden, doc_QTreeView_setColumnHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isRowHidden, "QTreeView.isRowHidden(int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRowHidden(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isRowHidden, doc_QTreeView_isRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setRowHidden, "QTreeView.setRowHidden(int, QModelIndex, bool)");

extern "C" {static PyObject *meth_QTreeView_setRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        bool a2;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9b", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRowHidden(a0,*a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setRowHidden, doc_QTreeView_setRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isExpanded, "QTreeView.isExpanded(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isExpanded(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isExpanded, doc_QTreeView_isExpanded);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setExpanded, "QTreeView.setExpanded(QModelIndex, bool)");

extern "C" {static PyObject *meth_QTreeView_setExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        bool a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9b", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExpanded(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setExpanded, doc_QTreeView_setExpanded);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_keyboardSearch, "QTreeView.keyboardSearch(QString)");

extern "C" {static PyObject *meth_QTreeView_keyboardSearch(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_keyboardSearch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::keyboardSearch(*a0) : sipCpp->keyboardSearch(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_keyboardSearch, doc_QTreeView_keyboardSearch);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_visualRect, "QTreeView.visualRect(QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QTreeView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect((sipSelfWasArg ? sipCpp->QTreeView::visualRect(*a0) : sipCpp->visualRect(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_visualRect, doc_QTreeView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_scrollTo, "QTreeView.scrollTo(QModelIndex, QAbstractItemView.ScrollHint hint=QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QTreeView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QTreeView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_scrollTo, doc_QTreeView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_indexAt, "QTreeView.indexAt(QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPoint, &a0))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QTreeView::indexAt(*a0) : sipCpp->indexAt(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexAt, doc_QTreeView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_indexAbove, "QTreeView.indexAbove(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_indexAbove(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexAbove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->indexAbove(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexAbove, doc_QTreeView_indexAbove);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_indexBelow, "QTreeView.indexBelow(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_indexBelow(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexBelow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->indexBelow(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexBelow, doc_QTreeView_indexBelow);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_reset, "QTreeView.reset()");

extern "C" {static PyObject *meth_QTreeView_reset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::reset() : sipCpp->reset());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_reset, doc_QTreeView_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_dataChanged, "QTreeView.dataChanged(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_dataChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::dataChanged(*a0,*a1) : sipCpp->dataChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dataChanged, doc_QTreeView_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_hideColumn, "QTreeView.hideColumn(int)");

extern "C" {static PyObject *meth_QTreeView_hideColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_hideColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->hideColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_hideColumn, doc_QTreeView_hideColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_showColumn, "QTreeView.showColumn(int)");

extern "C" {static PyObject *meth_QTreeView_showColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_showColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_showColumn, doc_QTreeView_showColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_expand, "QTreeView.expand(QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_expand(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->expand(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expand, doc_QTreeView_expand);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_expandAll, "QTreeView.expandAll()");

extern "C" {static PyObject *meth_QTreeView_expandAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->expandAll();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expandAll, doc_QTreeView_expandAll);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_collapse, "QTreeView.collapse(QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_collapse(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_collapse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->collapse(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_collapse, doc_QTreeView_collapse);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_collapseAll, "QTreeView.collapseAll()");

extern "C" {static PyObject *meth_QTreeView_collapseAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_collapseAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->collapseAll();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_collapseAll, doc_QTreeView_collapseAll);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_resizeColumnToContents, "QTreeView.resizeColumnToContents(int)");

extern "C" {static PyObject *meth_QTreeView_resizeColumnToContents(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_resizeColumnToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resizeColumnToContents(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_resizeColumnToContents, doc_QTreeView_resizeColumnToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_sortByColumn, "QTreeView.sortByColumn(int)\n"
    "QTreeView.sortByColumn(int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QTreeView_sortByColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_sortByColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortByColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        Qt::SortOrder a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortByColumn(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_sortByColumn, doc_QTreeView_sortByColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_selectAll, "QTreeView.selectAll()");

extern "C" {static PyObject *meth_QTreeView_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::selectAll() : sipCpp->selectAll());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_selectAll, doc_QTreeView_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnResized, "QTreeView.columnResized(int, int, int)");

extern "C" {static PyObject *meth_QTreeView_columnResized(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnResized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->columnResized(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnResized, doc_QTreeView_columnResized);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnCountChanged, "QTreeView.columnCountChanged(int, int)");

extern "C" {static PyObject *meth_QTreeView_columnCountChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnCountChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->columnCountChanged(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnCountChanged, doc_QTreeView_columnCountChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnMoved, "QTreeView.columnMoved()");

extern "C" {static PyObject *meth_QTreeView_columnMoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->columnMoved();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnMoved, doc_QTreeView_columnMoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_reexpand, "QTreeView.reexpand()");

extern "C" {static PyObject *meth_QTreeView_reexpand(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_reexpand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reexpand();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_reexpand, doc_QTreeView_reexpand);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_rowsRemoved, "QTreeView.rowsRemoved(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTreeView_rowsRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rowsRemoved(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowsRemoved, doc_QTreeView_rowsRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_scrollContentsBy, "QTreeView.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QTreeView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_scrollContentsBy, doc_QTreeView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_rowsInserted, "QTreeView.rowsInserted(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTreeView_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::rowsInserted(*a0,a1,a2) : sipCpp->rowsInserted(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowsInserted, doc_QTreeView_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_rowsAboutToBeRemoved, "QTreeView.rowsAboutToBeRemoved(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTreeView_rowsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::rowsAboutToBeRemoved(*a0,a1,a2) : sipCpp->rowsAboutToBeRemoved(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowsAboutToBeRemoved, doc_QTreeView_rowsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_moveCursor, "QTreeView.moveCursor(QAbstractItemView.CursorAction, Qt.KeyboardModifiers) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView::CursorAction a0;
        Qt::KeyboardModifiers* a1;
        int a1State = 0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QTreeView::moveCursor(a0,*a1) : sipCpp->moveCursor(a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_moveCursor, doc_QTreeView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_horizontalOffset, "QTreeView.horizontalOffset() -> int");

extern "C" {static PyObject *meth_QTreeView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeView::horizontalOffset() : sipCpp->horizontalOffset());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_horizontalOffset, doc_QTreeView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_verticalOffset, "QTreeView.verticalOffset() -> int");

extern "C" {static PyObject *meth_QTreeView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeView::verticalOffset() : sipCpp->verticalOffset());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_verticalOffset, doc_QTreeView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setSelection, "QTreeView.setSelection(QRect, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QTreeView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::setSelection(*a0,*a1) : sipCpp->setSelection(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setSelection, doc_QTreeView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_visualRegionForSelection, "QTreeView.visualRegionForSelection(QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QTreeView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegion((sipSelfWasArg ? sipCpp->QTreeView::visualRegionForSelection(*a0) : sipCpp->visualRegionForSelection(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_visualRegionForSelection, doc_QTreeView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_selectedIndexes, "QTreeView.selectedIndexes() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QTreeView_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            QModelIndexList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList((sipSelfWasArg ? sipCpp->QTreeView::selectedIndexes() : sipCpp->selectedIndexes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_selectedIndexes, doc_QTreeView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_paintEvent, "QTreeView.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QTreeView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_paintEvent, doc_QTreeView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_timerEvent, "QTreeView.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QTreeView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_timerEvent, doc_QTreeView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_mouseReleaseEvent, "QTreeView.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mouseReleaseEvent, doc_QTreeView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_drawRow, "QTreeView.drawRow(QPainter, QStyleOptionViewItem, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_drawRow(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::drawRow(a0,*a1,*a2) : sipCpp->drawRow(a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_drawRow, doc_QTreeView_drawRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_drawBranches, "QTreeView.drawBranches(QPainter, QRect, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_drawBranches(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawBranches(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRect* a1;
        const QModelIndex* a2;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, sipType_QModelIndex, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::drawBranches(a0,*a1,*a2) : sipCpp->drawBranches(a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_drawBranches, doc_QTreeView_drawBranches);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_drawTree, "QTreeView.drawTree(QPainter, QRegion)");

extern "C" {static PyObject *meth_QTreeView_drawTree(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawTree(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        const QRegion* a1;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0, sipType_QRegion, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawTree(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_drawTree, doc_QTreeView_drawTree);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_mousePressEvent, "QTreeView.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mousePressEvent, doc_QTreeView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_mouseMoveEvent, "QTreeView.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mouseMoveEvent, doc_QTreeView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_mouseDoubleClickEvent, "QTreeView.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mouseDoubleClickEvent, doc_QTreeView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_keyPressEvent, "QTreeView.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTreeView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_keyPressEvent, doc_QTreeView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_updateGeometries, "QTreeView.updateGeometries()");

extern "C" {static PyObject *meth_QTreeView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::updateGeometries() : sipCpp->updateGeometries());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_updateGeometries, doc_QTreeView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_sizeHintForColumn, "QTreeView.sizeHintForColumn(int) -> int");

extern "C" {static PyObject *meth_QTreeView_sizeHintForColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeView::sizeHintForColumn(a0) : sipCpp->sizeHintForColumn(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_sizeHintForColumn, doc_QTreeView_sizeHintForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_indexRowSizeHint, "QTreeView.indexRowSizeHint(QModelIndex) -> int");

extern "C" {static PyObject *meth_QTreeView_indexRowSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexRowSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexRowSizeHint(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexRowSizeHint, doc_QTreeView_indexRowSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_horizontalScrollbarAction, "QTreeView.horizontalScrollbarAction(int)");

extern "C" {static PyObject *meth_QTreeView_horizontalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::horizontalScrollbarAction(a0) : sipCpp->horizontalScrollbarAction(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_horizontalScrollbarAction, doc_QTreeView_horizontalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isIndexHidden, "QTreeView.isIndexHidden(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeView::isIndexHidden(*a0) : sipCpp->isIndexHidden(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isIndexHidden, doc_QTreeView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setColumnWidth, "QTreeView.setColumnWidth(int, int)");

extern "C" {static PyObject *meth_QTreeView_setColumnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setColumnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnWidth(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setColumnWidth, doc_QTreeView_setColumnWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setSortingEnabled, "QTreeView.setSortingEnabled(bool)");

extern "C" {static PyObject *meth_QTreeView_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSortingEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setSortingEnabled, doc_QTreeView_setSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isSortingEnabled, "QTreeView.isSortingEnabled() -> bool");

extern "C" {static PyObject *meth_QTreeView_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSortingEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isSortingEnabled, doc_QTreeView_isSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setAnimated, "QTreeView.setAnimated(bool)");

extern "C" {static PyObject *meth_QTreeView_setAnimated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAnimated(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setAnimated, doc_QTreeView_setAnimated);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isAnimated, "QTreeView.isAnimated() -> bool");

extern "C" {static PyObject *meth_QTreeView_isAnimated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAnimated();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isAnimated, doc_QTreeView_isAnimated);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setAllColumnsShowFocus, "QTreeView.setAllColumnsShowFocus(bool)");

extern "C" {static PyObject *meth_QTreeView_setAllColumnsShowFocus(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAllColumnsShowFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAllColumnsShowFocus(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setAllColumnsShowFocus, doc_QTreeView_setAllColumnsShowFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_allColumnsShowFocus, "QTreeView.allColumnsShowFocus() -> bool");

extern "C" {static PyObject *meth_QTreeView_allColumnsShowFocus(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_allColumnsShowFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->allColumnsShowFocus();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_allColumnsShowFocus, doc_QTreeView_allColumnsShowFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_autoExpandDelay, "QTreeView.autoExpandDelay() -> int");

extern "C" {static PyObject *meth_QTreeView_autoExpandDelay(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_autoExpandDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoExpandDelay();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_autoExpandDelay, doc_QTreeView_autoExpandDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setAutoExpandDelay, "QTreeView.setAutoExpandDelay(int)");

extern "C" {static PyObject *meth_QTreeView_setAutoExpandDelay(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAutoExpandDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoExpandDelay(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setAutoExpandDelay, doc_QTreeView_setAutoExpandDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isFirstColumnSpanned, "QTreeView.isFirstColumnSpanned(int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFirstColumnSpanned(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isFirstColumnSpanned, doc_QTreeView_isFirstColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setFirstColumnSpanned, "QTreeView.setFirstColumnSpanned(int, QModelIndex, bool)");

extern "C" {static PyObject *meth_QTreeView_setFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        bool a2;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9b", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFirstColumnSpanned(a0,*a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setFirstColumnSpanned, doc_QTreeView_setFirstColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setWordWrap, "QTreeView.setWordWrap(bool)");

extern "C" {static PyObject *meth_QTreeView_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordWrap(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setWordWrap, doc_QTreeView_setWordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_wordWrap, "QTreeView.wordWrap() -> bool");

extern "C" {static PyObject *meth_QTreeView_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordWrap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_wordWrap, doc_QTreeView_wordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_expandToDepth, "QTreeView.expandToDepth(int)");

extern "C" {static PyObject *meth_QTreeView_expandToDepth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandToDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->expandToDepth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expandToDepth, doc_QTreeView_expandToDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_dragMoveEvent, "QTreeView.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QTreeView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dragMoveEvent, doc_QTreeView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_viewportEvent, "QTreeView.viewportEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QTreeView_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeView::viewportEvent(a0) : sipCpp->viewportEvent(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_viewportEvent, doc_QTreeView_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_rowHeight, "QTreeView.rowHeight(QModelIndex) -> int");

extern "C" {static PyObject *meth_QTreeView_rowHeight(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rowHeight(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowHeight, doc_QTreeView_rowHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_selectionChanged, "QTreeView.selectionChanged(QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QTreeView_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QItemSelection* a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::selectionChanged(*a0,*a1) : sipCpp->selectionChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_selectionChanged, doc_QTreeView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_currentChanged, "QTreeView.currentChanged(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::currentChanged(*a0,*a1) : sipCpp->currentChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_currentChanged, doc_QTreeView_currentChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_expandsOnDoubleClick, "QTreeView.expandsOnDoubleClick() -> bool");

extern "C" {static PyObject *meth_QTreeView_expandsOnDoubleClick(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandsOnDoubleClick(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->expandsOnDoubleClick();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expandsOnDoubleClick, doc_QTreeView_expandsOnDoubleClick);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setExpandsOnDoubleClick, "QTreeView.setExpandsOnDoubleClick(bool)");

extern "C" {static PyObject *meth_QTreeView_setExpandsOnDoubleClick(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setExpandsOnDoubleClick(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExpandsOnDoubleClick(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setExpandsOnDoubleClick, doc_QTreeView_setExpandsOnDoubleClick);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isHeaderHidden, "QTreeView.isHeaderHidden() -> bool");

extern "C" {static PyObject *meth_QTreeView_isHeaderHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isHeaderHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isHeaderHidden();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isHeaderHidden, doc_QTreeView_isHeaderHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setHeaderHidden, "QTreeView.setHeaderHidden(bool)");

extern "C" {static PyObject *meth_QTreeView_setHeaderHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setHeaderHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderHidden(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setHeaderHidden, doc_QTreeView_setHeaderHidden);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTreeView(void *, const sipTypeDef *);}
static void *cast_QTreeView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTreeView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemView)->ctd_cast((QAbstractItemView *)(QTreeView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeView(void *, int);}
static void release_QTreeView(void *sipCppV,int)
{
    QTreeView *sipCpp = reinterpret_cast<QTreeView *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTreeView(sipSimpleWrapper *);}
static void dealloc_QTreeView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTreeView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTreeView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTreeView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTreeView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTreeView *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTreeView[] = {{5, 255, 1}};


static PyMethodDef methods_QTreeView[] = {
    {SIP_MLNAME_CAST(sipName_allColumnsShowFocus), meth_QTreeView_allColumnsShowFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_allColumnsShowFocus)},
    {SIP_MLNAME_CAST(sipName_autoExpandDelay), meth_QTreeView_autoExpandDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_autoExpandDelay)},
    {SIP_MLNAME_CAST(sipName_collapse), meth_QTreeView_collapse, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_collapse)},
    {SIP_MLNAME_CAST(sipName_collapseAll), meth_QTreeView_collapseAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_collapseAll)},
    {SIP_MLNAME_CAST(sipName_columnAt), meth_QTreeView_columnAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_columnAt)},
    {SIP_MLNAME_CAST(sipName_columnCountChanged), meth_QTreeView_columnCountChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_columnCountChanged)},
    {SIP_MLNAME_CAST(sipName_columnMoved), meth_QTreeView_columnMoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_columnMoved)},
    {SIP_MLNAME_CAST(sipName_columnResized), meth_QTreeView_columnResized, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_columnResized)},
    {SIP_MLNAME_CAST(sipName_columnViewportPosition), meth_QTreeView_columnViewportPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_columnViewportPosition)},
    {SIP_MLNAME_CAST(sipName_columnWidth), meth_QTreeView_columnWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_columnWidth)},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QTreeView_currentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_dataChanged), meth_QTreeView_dataChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_dataChanged)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QTreeView_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_drawBranches), meth_QTreeView_drawBranches, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_drawBranches)},
    {SIP_MLNAME_CAST(sipName_drawRow), meth_QTreeView_drawRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_drawRow)},
    {SIP_MLNAME_CAST(sipName_drawTree), meth_QTreeView_drawTree, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_drawTree)},
    {SIP_MLNAME_CAST(sipName_expand), meth_QTreeView_expand, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_expand)},
    {SIP_MLNAME_CAST(sipName_expandAll), meth_QTreeView_expandAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_expandAll)},
    {SIP_MLNAME_CAST(sipName_expandToDepth), meth_QTreeView_expandToDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_expandToDepth)},
    {SIP_MLNAME_CAST(sipName_expandsOnDoubleClick), meth_QTreeView_expandsOnDoubleClick, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_expandsOnDoubleClick)},
    {SIP_MLNAME_CAST(sipName_header), meth_QTreeView_header, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_header)},
    {SIP_MLNAME_CAST(sipName_hideColumn), meth_QTreeView_hideColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_hideColumn)},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QTreeView_horizontalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), meth_QTreeView_horizontalScrollbarAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_horizontalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_indentation), meth_QTreeView_indentation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_indentation)},
    {SIP_MLNAME_CAST(sipName_indexAbove), meth_QTreeView_indexAbove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_indexAbove)},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QTreeView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_indexAt)},
    {SIP_MLNAME_CAST(sipName_indexBelow), meth_QTreeView_indexBelow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_indexBelow)},
    {SIP_MLNAME_CAST(sipName_indexRowSizeHint), meth_QTreeView_indexRowSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_indexRowSizeHint)},
    {SIP_MLNAME_CAST(sipName_isAnimated), meth_QTreeView_isAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isAnimated)},
    {SIP_MLNAME_CAST(sipName_isColumnHidden), meth_QTreeView_isColumnHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isColumnHidden)},
    {SIP_MLNAME_CAST(sipName_isExpanded), meth_QTreeView_isExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isExpanded)},
    {SIP_MLNAME_CAST(sipName_isFirstColumnSpanned), meth_QTreeView_isFirstColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isFirstColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_isHeaderHidden), meth_QTreeView_isHeaderHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isHeaderHidden)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QTreeView_isIndexHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_isRowHidden), meth_QTreeView_isRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isRowHidden)},
    {SIP_MLNAME_CAST(sipName_isSortingEnabled), meth_QTreeView_isSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_itemsExpandable), meth_QTreeView_itemsExpandable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_itemsExpandable)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QTreeView_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyboardSearch), meth_QTreeView_keyboardSearch, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_keyboardSearch)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QTreeView_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QTreeView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QTreeView_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QTreeView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QTreeView_moveCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QTreeView_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_reexpand), meth_QTreeView_reexpand, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_reexpand)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QTreeView_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_reset)},
    {SIP_MLNAME_CAST(sipName_resizeColumnToContents), meth_QTreeView_resizeColumnToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_resizeColumnToContents)},
    {SIP_MLNAME_CAST(sipName_rootIsDecorated), meth_QTreeView_rootIsDecorated, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_rootIsDecorated)},
    {SIP_MLNAME_CAST(sipName_rowHeight), meth_QTreeView_rowHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_rowHeight)},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), meth_QTreeView_rowsAboutToBeRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_rowsAboutToBeRemoved)},
    {SIP_MLNAME_CAST(sipName_rowsInserted), meth_QTreeView_rowsInserted, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_rowsInserted)},
    {SIP_MLNAME_CAST(sipName_rowsRemoved), meth_QTreeView_rowsRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_rowsRemoved)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QTreeView_scrollContentsBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QTreeView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QTreeView_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_selectAll)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QTreeView_selectedIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QTreeView_selectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_selectionChanged)},
    {SIP_MLNAME_CAST(sipName_setAllColumnsShowFocus), meth_QTreeView_setAllColumnsShowFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setAllColumnsShowFocus)},
    {SIP_MLNAME_CAST(sipName_setAnimated), meth_QTreeView_setAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setAnimated)},
    {SIP_MLNAME_CAST(sipName_setAutoExpandDelay), meth_QTreeView_setAutoExpandDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setAutoExpandDelay)},
    {SIP_MLNAME_CAST(sipName_setColumnHidden), meth_QTreeView_setColumnHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setColumnHidden)},
    {SIP_MLNAME_CAST(sipName_setColumnWidth), meth_QTreeView_setColumnWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setColumnWidth)},
    {SIP_MLNAME_CAST(sipName_setExpanded), meth_QTreeView_setExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setExpanded)},
    {SIP_MLNAME_CAST(sipName_setExpandsOnDoubleClick), meth_QTreeView_setExpandsOnDoubleClick, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setExpandsOnDoubleClick)},
    {SIP_MLNAME_CAST(sipName_setFirstColumnSpanned), meth_QTreeView_setFirstColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setFirstColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QTreeView_setHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setHeader)},
    {SIP_MLNAME_CAST(sipName_setHeaderHidden), meth_QTreeView_setHeaderHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setHeaderHidden)},
    {SIP_MLNAME_CAST(sipName_setIndentation), meth_QTreeView_setIndentation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setIndentation)},
    {SIP_MLNAME_CAST(sipName_setItemsExpandable), meth_QTreeView_setItemsExpandable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setItemsExpandable)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QTreeView_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setModel)},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QTreeView_setRootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setRootIndex)},
    {SIP_MLNAME_CAST(sipName_setRootIsDecorated), meth_QTreeView_setRootIsDecorated, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setRootIsDecorated)},
    {SIP_MLNAME_CAST(sipName_setRowHidden), meth_QTreeView_setRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setRowHidden)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QTreeView_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QTreeView_setSelectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setSelectionModel)},
    {SIP_MLNAME_CAST(sipName_setSortingEnabled), meth_QTreeView_setSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_setUniformRowHeights), meth_QTreeView_setUniformRowHeights, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setUniformRowHeights)},
    {SIP_MLNAME_CAST(sipName_setWordWrap), meth_QTreeView_setWordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setWordWrap)},
    {SIP_MLNAME_CAST(sipName_showColumn), meth_QTreeView_showColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_showColumn)},
    {SIP_MLNAME_CAST(sipName_sizeHintForColumn), meth_QTreeView_sizeHintForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_sizeHintForColumn)},
    {SIP_MLNAME_CAST(sipName_sortByColumn), meth_QTreeView_sortByColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_sortByColumn)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTreeView_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_timerEvent)},
    {SIP_MLNAME_CAST(sipName_uniformRowHeights), meth_QTreeView_uniformRowHeights, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_uniformRowHeights)},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QTreeView_updateGeometries, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QTreeView_verticalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_viewportEvent), meth_QTreeView_viewportEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_viewportEvent)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QTreeView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QTreeView_visualRegionForSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_visualRegionForSelection)},
    {SIP_MLNAME_CAST(sipName_wordWrap), meth_QTreeView_wordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_wordWrap)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QTreeView[] = {
    {"collapsed(QModelIndex)", "\1QTreeView.collapsed[QModelIndex]", 0, 0},
    {"expanded(QModelIndex)", "\1QTreeView.expanded[QModelIndex]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTreeView, "\1QTreeView(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTreeView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTreeView,
        {0}
    },
    {
        sipNameNr_QTreeView,
        {0, 0, 1},
        91, methods_QTreeView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTreeView,
    -1,
    -1,
    supers_QTreeView,
    0,
    init_type_QTreeView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTreeView,
    0,
    0,
    0,
    release_QTreeView,
    cast_QTreeView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTreeView::staticMetaObject,
    0,
    signals_QTreeView,
};
