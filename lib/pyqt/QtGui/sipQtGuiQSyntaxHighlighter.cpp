/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsyntaxhighlighter.sip"
#include <qsyntaxhighlighter.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 286 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 336 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"


class sipQSyntaxHighlighter : public QSyntaxHighlighter
{
public:
    sipQSyntaxHighlighter(QTextEdit*);
    sipQSyntaxHighlighter(QTextDocument*);
    sipQSyntaxHighlighter(QObject*);
    virtual ~sipQSyntaxHighlighter();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void highlightBlock(const QString&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSyntaxHighlighter(const sipQSyntaxHighlighter &);
    sipQSyntaxHighlighter &operator = (const sipQSyntaxHighlighter &);

    char sipPyMethods[8];
};

sipQSyntaxHighlighter::sipQSyntaxHighlighter(QTextEdit*a0): QSyntaxHighlighter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSyntaxHighlighter::sipQSyntaxHighlighter(QTextDocument*a0): QSyntaxHighlighter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSyntaxHighlighter::sipQSyntaxHighlighter(QObject*a0): QSyntaxHighlighter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSyntaxHighlighter::~sipQSyntaxHighlighter()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSyntaxHighlighter::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QSyntaxHighlighter);
}

int sipQSyntaxHighlighter::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSyntaxHighlighter::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QSyntaxHighlighter,_c,_id,_a);

    return _id;
}

void *sipQSyntaxHighlighter::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QSyntaxHighlighter, _clname)) ? this : QSyntaxHighlighter::qt_metacast(_clname);
}

void sipQSyntaxHighlighter::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSyntaxHighlighter::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSyntaxHighlighter::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSyntaxHighlighter::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSyntaxHighlighter::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSyntaxHighlighter::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSyntaxHighlighter::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSyntaxHighlighter::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQSyntaxHighlighter::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSyntaxHighlighter::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::highlightBlock(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QSyntaxHighlighter,sipName_highlightBlock);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtGui_QtCore->em_virthandlers[33]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setDocument, "QSyntaxHighlighter.setDocument(QTextDocument)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextDocument* a0;
        PyObject *a0Keep;
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0Keep, sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocument(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -60, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setDocument, doc_QSyntaxHighlighter_setDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_document, "QSyntaxHighlighter.document() -> QTextDocument");

extern "C" {static PyObject *meth_QSyntaxHighlighter_document(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            QTextDocument*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->document();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_document, doc_QSyntaxHighlighter_document);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_rehighlight, "QSyntaxHighlighter.rehighlight()");

extern "C" {static PyObject *meth_QSyntaxHighlighter_rehighlight(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_rehighlight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rehighlight();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_rehighlight, doc_QSyntaxHighlighter_rehighlight);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_rehighlightBlock, "QSyntaxHighlighter.rehighlightBlock(QTextBlock)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_rehighlightBlock(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_rehighlightBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlock* a0;
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QTextBlock, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rehighlightBlock(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_rehighlightBlock, doc_QSyntaxHighlighter_rehighlightBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_highlightBlock, "QSyntaxHighlighter.highlightBlock(QString)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_highlightBlock(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_highlightBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSyntaxHighlighter, sipName_highlightBlock);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->highlightBlock(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_highlightBlock, doc_QSyntaxHighlighter_highlightBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setFormat, "QSyntaxHighlighter.setFormat(int, int, QTextCharFormat)\n"
    "QSyntaxHighlighter.setFormat(int, int, QColor)\n"
    "QSyntaxHighlighter.setFormat(int, int, QFont)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QTextCharFormat* a2;
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piiJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QTextCharFormat, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormat(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QColor* a2;
        int a2State = 0;
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piiJ1", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QColor, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormat(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a2),sipType_QColor,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QFont* a2;
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piiJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QFont, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormat(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setFormat, doc_QSyntaxHighlighter_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_format, "QSyntaxHighlighter.format(int) -> QTextCharFormat");

extern "C" {static PyObject *meth_QSyntaxHighlighter_format(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
            QTextCharFormat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCharFormat(sipCpp->format(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_format, doc_QSyntaxHighlighter_format);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_previousBlockState, "QSyntaxHighlighter.previousBlockState() -> int");

extern "C" {static PyObject *meth_QSyntaxHighlighter_previousBlockState(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_previousBlockState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->previousBlockState();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_previousBlockState, doc_QSyntaxHighlighter_previousBlockState);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_currentBlockState, "QSyntaxHighlighter.currentBlockState() -> int");

extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlockState(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlockState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentBlockState();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlockState, doc_QSyntaxHighlighter_currentBlockState);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setCurrentBlockState, "QSyntaxHighlighter.setCurrentBlockState(int)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setCurrentBlockState(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setCurrentBlockState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentBlockState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setCurrentBlockState, doc_QSyntaxHighlighter_setCurrentBlockState);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setCurrentBlockUserData, "QSyntaxHighlighter.setCurrentBlockUserData(QTextBlockUserData)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setCurrentBlockUserData(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setCurrentBlockUserData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockUserData* a0;
        PyObject *a0Wrapper;
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p@J8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0Wrapper, sipType_QTextBlockUserData, &a0))
        {
            int sipIsErr = 0;

#line 73 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsyntaxhighlighter.sip"
        // Ownership of the user data is with the document not the syntax highlighter.
        
        typedef PyObject *(*helper_func)(QObject *, const sipTypeDef *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qtgui_wrap_ancestors");
        
        QTextDocument *td = sipCpp->document();
        
        if (td)
        {
            PyObject *py_td = (helper ? helper(td, sipType_QTextDocument) : 0);
        
            if (!py_td)
            {
                sipIsErr = 1;
            }
            else
            {
                sipTransferTo(a0Wrapper, py_td);
                Py_DECREF(py_td);
            }
        }
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipCpp->setCurrentBlockUserData(a0);
        #else
        sipCpp->sipProtect_setCurrentBlockUserData(a0);
        #endif
#line 700 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQSyntaxHighlighter.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setCurrentBlockUserData, doc_QSyntaxHighlighter_setCurrentBlockUserData);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_currentBlockUserData, "QSyntaxHighlighter.currentBlockUserData() -> QTextBlockUserData");

extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlockUserData(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlockUserData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            QTextBlockUserData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentBlockUserData();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextBlockUserData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlockUserData, doc_QSyntaxHighlighter_currentBlockUserData);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_currentBlock, "QSyntaxHighlighter.currentBlock() -> QTextBlock");

extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlock(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            QTextBlock*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextBlock(sipCpp->currentBlock());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlock, doc_QSyntaxHighlighter_currentBlock);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSyntaxHighlighter(void *, const sipTypeDef *);}
static void *cast_QSyntaxHighlighter(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSyntaxHighlighter)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSyntaxHighlighter *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSyntaxHighlighter(void *, int);}
static void release_QSyntaxHighlighter(void *sipCppV,int)
{
    QSyntaxHighlighter *sipCpp = reinterpret_cast<QSyntaxHighlighter *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSyntaxHighlighter(sipSimpleWrapper *);}
static void dealloc_QSyntaxHighlighter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSyntaxHighlighter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSyntaxHighlighter(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSyntaxHighlighter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSyntaxHighlighter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSyntaxHighlighter *sipCpp = 0;

    {
        QTextEdit* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QTextEdit, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSyntaxHighlighter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QTextDocument, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSyntaxHighlighter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSyntaxHighlighter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSyntaxHighlighter[] = {{141, 0, 1}};


static PyMethodDef methods_QSyntaxHighlighter[] = {
    {SIP_MLNAME_CAST(sipName_currentBlock), meth_QSyntaxHighlighter_currentBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_currentBlock)},
    {SIP_MLNAME_CAST(sipName_currentBlockState), meth_QSyntaxHighlighter_currentBlockState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_currentBlockState)},
    {SIP_MLNAME_CAST(sipName_currentBlockUserData), meth_QSyntaxHighlighter_currentBlockUserData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_currentBlockUserData)},
    {SIP_MLNAME_CAST(sipName_document), meth_QSyntaxHighlighter_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_document)},
    {SIP_MLNAME_CAST(sipName_format), meth_QSyntaxHighlighter_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_format)},
    {SIP_MLNAME_CAST(sipName_highlightBlock), meth_QSyntaxHighlighter_highlightBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_highlightBlock)},
    {SIP_MLNAME_CAST(sipName_previousBlockState), meth_QSyntaxHighlighter_previousBlockState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_previousBlockState)},
    {SIP_MLNAME_CAST(sipName_rehighlight), meth_QSyntaxHighlighter_rehighlight, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_rehighlight)},
    {SIP_MLNAME_CAST(sipName_rehighlightBlock), meth_QSyntaxHighlighter_rehighlightBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_rehighlightBlock)},
    {SIP_MLNAME_CAST(sipName_setCurrentBlockState), meth_QSyntaxHighlighter_setCurrentBlockState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setCurrentBlockState)},
    {SIP_MLNAME_CAST(sipName_setCurrentBlockUserData), meth_QSyntaxHighlighter_setCurrentBlockUserData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setCurrentBlockUserData)},
    {SIP_MLNAME_CAST(sipName_setDocument), meth_QSyntaxHighlighter_setDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setDocument)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QSyntaxHighlighter_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setFormat)}
};

PyDoc_STRVAR(doc_QSyntaxHighlighter, "\1QSyntaxHighlighter(QTextEdit)\n"
    "QSyntaxHighlighter(QTextDocument)\n"
    "QSyntaxHighlighter(QObject)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QSyntaxHighlighter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSyntaxHighlighter,
        {0}
    },
    {
        sipNameNr_QSyntaxHighlighter,
        {0, 0, 1},
        13, methods_QSyntaxHighlighter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSyntaxHighlighter,
    -1,
    -1,
    supers_QSyntaxHighlighter,
    0,
    init_type_QSyntaxHighlighter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSyntaxHighlighter,
    0,
    0,
    0,
    release_QSyntaxHighlighter,
    cast_QSyntaxHighlighter,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSyntaxHighlighter::staticMetaObject,
    0,
    0
};
