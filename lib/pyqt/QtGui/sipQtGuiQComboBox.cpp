/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcombobox.sip"
#include <qcombobox.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 1585 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcompleter.sip"
#include <qcompleter.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 127 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlineedit.sip"
#include <qlineedit.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 233 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 236 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 239 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 242 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 245 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 248 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 251 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 254 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"


class sipQComboBox : public QComboBox
{
public:
    sipQComboBox(QWidget*);
    virtual ~sipQComboBox();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void paintEvent(QPaintEvent*);
    void resizeEvent(QResizeEvent*);
    void changeEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    bool event(QEvent*);
    void hidePopup();
    void showPopup();
    QSize minimumSizeHint() const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQComboBox(const sipQComboBox &);
    sipQComboBox &operator = (const sipQComboBox &);

    char sipPyMethods[49];
};

sipQComboBox::sipQComboBox(QWidget*a0): QComboBox(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQComboBox::~sipQComboBox()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQComboBox::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QComboBox);
}

int sipQComboBox::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QComboBox::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QComboBox,_c,_id,_a);

    return _id;
}

void *sipQComboBox::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QComboBox, _clname)) ? this : QComboBox::qt_metacast(_clname);
}

void sipQComboBox::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QComboBox::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QComboBox::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QComboBox::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QComboBox::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QComboBox::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQComboBox::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QComboBox::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQComboBox::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QComboBox::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQComboBox::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QComboBox::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QComboBox::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QComboBox::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QComboBox::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQComboBox::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QComboBox::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQComboBox::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QComboBox::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QComboBox::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QComboBox::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QComboBox::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QComboBox::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QComboBox::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QComboBox::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QComboBox::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QComboBox::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QComboBox::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QComboBox::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QComboBox::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QComboBox::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQComboBox::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QComboBox::paintEngine();

    extern QPaintEngine* sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQComboBox::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QComboBox::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QComboBox::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQComboBox::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QComboBox::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

QVariant sipQComboBox::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QComboBox::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QComboBox::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QComboBox::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QComboBox::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QComboBox::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QComboBox::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QComboBox::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QComboBox::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QComboBox::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QComboBox::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QComboBox::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QComboBox::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QComboBox::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QComboBox::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QComboBox::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQComboBox::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QComboBox::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQComboBox::hidePopup()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_hidePopup);

    if (!sipMeth)
    {
        QComboBox::hidePopup();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQComboBox::showPopup()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_showPopup);

    if (!sipMeth)
    {
        QComboBox::showPopup();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQComboBox::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QComboBox::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQComboBox::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[48]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QComboBox::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QComboBox_maxVisibleItems, "QComboBox.maxVisibleItems() -> int");

extern "C" {static PyObject *meth_QComboBox_maxVisibleItems(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_maxVisibleItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maxVisibleItems();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_maxVisibleItems, doc_QComboBox_maxVisibleItems);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setMaxVisibleItems, "QComboBox.setMaxVisibleItems(int)");

extern "C" {static PyObject *meth_QComboBox_setMaxVisibleItems(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setMaxVisibleItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaxVisibleItems(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setMaxVisibleItems, doc_QComboBox_setMaxVisibleItems);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_count, "QComboBox.count() -> int");

extern "C" {static PyObject *meth_QComboBox_count(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_count, doc_QComboBox_count);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setMaxCount, "QComboBox.setMaxCount(int)");

extern "C" {static PyObject *meth_QComboBox_setMaxCount(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setMaxCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaxCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setMaxCount, doc_QComboBox_setMaxCount);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_maxCount, "QComboBox.maxCount() -> int");

extern "C" {static PyObject *meth_QComboBox_maxCount(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_maxCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maxCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_maxCount, doc_QComboBox_maxCount);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_autoCompletion, "QComboBox.autoCompletion() -> bool");

extern "C" {static PyObject *meth_QComboBox_autoCompletion(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_autoCompletion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoCompletion();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_autoCompletion, doc_QComboBox_autoCompletion);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setAutoCompletion, "QComboBox.setAutoCompletion(bool)");

extern "C" {static PyObject *meth_QComboBox_setAutoCompletion(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setAutoCompletion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoCompletion(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setAutoCompletion, doc_QComboBox_setAutoCompletion);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_autoCompletionCaseSensitivity, "QComboBox.autoCompletionCaseSensitivity() -> Qt.CaseSensitivity");

extern "C" {static PyObject *meth_QComboBox_autoCompletionCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_autoCompletionCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            Qt::CaseSensitivity sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoCompletionCaseSensitivity();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_CaseSensitivity);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_autoCompletionCaseSensitivity, doc_QComboBox_autoCompletionCaseSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setAutoCompletionCaseSensitivity, "QComboBox.setAutoCompletionCaseSensitivity(Qt.CaseSensitivity)");

extern "C" {static PyObject *meth_QComboBox_setAutoCompletionCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setAutoCompletionCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CaseSensitivity a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QComboBox, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoCompletionCaseSensitivity(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setAutoCompletionCaseSensitivity, doc_QComboBox_setAutoCompletionCaseSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_duplicatesEnabled, "QComboBox.duplicatesEnabled() -> bool");

extern "C" {static PyObject *meth_QComboBox_duplicatesEnabled(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_duplicatesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->duplicatesEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_duplicatesEnabled, doc_QComboBox_duplicatesEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setDuplicatesEnabled, "QComboBox.setDuplicatesEnabled(bool)");

extern "C" {static PyObject *meth_QComboBox_setDuplicatesEnabled(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setDuplicatesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDuplicatesEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setDuplicatesEnabled, doc_QComboBox_setDuplicatesEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setFrame, "QComboBox.setFrame(bool)");

extern "C" {static PyObject *meth_QComboBox_setFrame(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFrame(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setFrame, doc_QComboBox_setFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_hasFrame, "QComboBox.hasFrame() -> bool");

extern "C" {static PyObject *meth_QComboBox_hasFrame(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_hasFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFrame();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_hasFrame, doc_QComboBox_hasFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_findText, "QComboBox.findText(QString, Qt.MatchFlags flags=Qt.MatchExactly|Qt.MatchCaseSensitive) -> int");

extern "C" {static PyObject *meth_QComboBox_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QComboBox_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Qt::MatchFlags a1def = Qt::MatchExactly|Qt::MatchCaseSensitive;
        Qt::MatchFlags* a1 = &a1def;
        int a1State = 0;
        const QComboBox *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_MatchFlags, &a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->findText(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_findText, doc_QComboBox_findText);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_findData, "QComboBox.findData(QVariant, int role=Qt.UserRole, Qt.MatchFlags flags=Qt.MatchExactly|Qt.MatchCaseSensitive) -> int");

extern "C" {static PyObject *meth_QComboBox_findData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QComboBox_findData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        int a1 = Qt::UserRole;
        Qt::MatchFlags a2def = Qt::MatchExactly|Qt::MatchCaseSensitive;
        Qt::MatchFlags* a2 = &a2def;
        int a2State = 0;
        const QComboBox *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iJ1", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QVariant,&a0, &a0State, &a1, sipType_Qt_MatchFlags, &a2, &a2State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->findData(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
            sipReleaseType(a2,sipType_Qt_MatchFlags,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_findData, doc_QComboBox_findData);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_insertPolicy, "QComboBox.insertPolicy() -> QComboBox.InsertPolicy");

extern "C" {static PyObject *meth_QComboBox_insertPolicy(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_insertPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QComboBox::InsertPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QComboBox_InsertPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_insertPolicy, doc_QComboBox_insertPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setInsertPolicy, "QComboBox.setInsertPolicy(QComboBox.InsertPolicy)");

extern "C" {static PyObject *meth_QComboBox_setInsertPolicy(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setInsertPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QComboBox::InsertPolicy a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QComboBox_InsertPolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setInsertPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setInsertPolicy, doc_QComboBox_setInsertPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_sizeAdjustPolicy, "QComboBox.sizeAdjustPolicy() -> QComboBox.SizeAdjustPolicy");

extern "C" {static PyObject *meth_QComboBox_sizeAdjustPolicy(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_sizeAdjustPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QComboBox::SizeAdjustPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sizeAdjustPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QComboBox_SizeAdjustPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_sizeAdjustPolicy, doc_QComboBox_sizeAdjustPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setSizeAdjustPolicy, "QComboBox.setSizeAdjustPolicy(QComboBox.SizeAdjustPolicy)");

extern "C" {static PyObject *meth_QComboBox_setSizeAdjustPolicy(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setSizeAdjustPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QComboBox::SizeAdjustPolicy a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QComboBox_SizeAdjustPolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSizeAdjustPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setSizeAdjustPolicy, doc_QComboBox_setSizeAdjustPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_minimumContentsLength, "QComboBox.minimumContentsLength() -> int");

extern "C" {static PyObject *meth_QComboBox_minimumContentsLength(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_minimumContentsLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->minimumContentsLength();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_minimumContentsLength, doc_QComboBox_minimumContentsLength);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setMinimumContentsLength, "QComboBox.setMinimumContentsLength(int)");

extern "C" {static PyObject *meth_QComboBox_setMinimumContentsLength(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setMinimumContentsLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMinimumContentsLength(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setMinimumContentsLength, doc_QComboBox_setMinimumContentsLength);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_iconSize, "QComboBox.iconSize() -> QSize");

extern "C" {static PyObject *meth_QComboBox_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->iconSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_iconSize, doc_QComboBox_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setIconSize, "QComboBox.setIconSize(QSize)");

extern "C" {static PyObject *meth_QComboBox_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setIconSize, doc_QComboBox_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_isEditable, "QComboBox.isEditable() -> bool");

extern "C" {static PyObject *meth_QComboBox_isEditable(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_isEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEditable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_isEditable, doc_QComboBox_isEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setEditable, "QComboBox.setEditable(bool)");

extern "C" {static PyObject *meth_QComboBox_setEditable(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEditable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setEditable, doc_QComboBox_setEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setLineEdit, "QComboBox.setLineEdit(QLineEdit)");

extern "C" {static PyObject *meth_QComboBox_setLineEdit(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setLineEdit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QLineEdit, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLineEdit(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setLineEdit, doc_QComboBox_setLineEdit);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_lineEdit, "QComboBox.lineEdit() -> QLineEdit");

extern "C" {static PyObject *meth_QComboBox_lineEdit(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_lineEdit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QLineEdit*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineEdit();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLineEdit,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_lineEdit, doc_QComboBox_lineEdit);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setValidator, "QComboBox.setValidator(QValidator)");

extern "C" {static PyObject *meth_QComboBox_setValidator(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QValidator* a0;
        PyObject *a0Keep;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QComboBox, &sipCpp, &a0Keep, sipType_QValidator, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setValidator(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -15, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setValidator, doc_QComboBox_setValidator);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_validator, "QComboBox.validator() -> QValidator");

extern "C" {static PyObject *meth_QComboBox_validator(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_validator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            const QValidator*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->validator();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QValidator *>(sipRes),sipType_QValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_validator, doc_QComboBox_validator);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_itemDelegate, "QComboBox.itemDelegate() -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QComboBox_itemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_itemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QAbstractItemDelegate*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemDelegate();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_itemDelegate, doc_QComboBox_itemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setItemDelegate, "QComboBox.setItemDelegate(QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QComboBox_setItemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setItemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemDelegate* a0;
        PyObject *a0Keep;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QComboBox, &sipCpp, &a0Keep, sipType_QAbstractItemDelegate, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemDelegate(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -16, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setItemDelegate, doc_QComboBox_setItemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_model, "QComboBox.model() -> QAbstractItemModel");

extern "C" {static PyObject *meth_QComboBox_model(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QAbstractItemModel*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->model();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_model, doc_QComboBox_model);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setModel, "QComboBox.setModel(QAbstractItemModel)");

extern "C" {static PyObject *meth_QComboBox_setModel(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemModel* a0;
        PyObject *a0Keep;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QComboBox, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setModel(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -17, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setModel, doc_QComboBox_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_rootModelIndex, "QComboBox.rootModelIndex() -> QModelIndex");

extern "C" {static PyObject *meth_QComboBox_rootModelIndex(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_rootModelIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->rootModelIndex());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_rootModelIndex, doc_QComboBox_rootModelIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setRootModelIndex, "QComboBox.setRootModelIndex(QModelIndex)");

extern "C" {static PyObject *meth_QComboBox_setRootModelIndex(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setRootModelIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRootModelIndex(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setRootModelIndex, doc_QComboBox_setRootModelIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_modelColumn, "QComboBox.modelColumn() -> int");

extern "C" {static PyObject *meth_QComboBox_modelColumn(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_modelColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->modelColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_modelColumn, doc_QComboBox_modelColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setModelColumn, "QComboBox.setModelColumn(int)");

extern "C" {static PyObject *meth_QComboBox_setModelColumn(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setModelColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setModelColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setModelColumn, doc_QComboBox_setModelColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_currentIndex, "QComboBox.currentIndex() -> int");

extern "C" {static PyObject *meth_QComboBox_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_currentIndex, doc_QComboBox_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setCurrentIndex, "QComboBox.setCurrentIndex(int)");

extern "C" {static PyObject *meth_QComboBox_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentIndex(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setCurrentIndex, doc_QComboBox_setCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_currentText, "QComboBox.currentText() -> QString");

extern "C" {static PyObject *meth_QComboBox_currentText(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_currentText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->currentText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_currentText, doc_QComboBox_currentText);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_itemText, "QComboBox.itemText(int) -> QString");

extern "C" {static PyObject *meth_QComboBox_itemText(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_itemText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->itemText(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_itemText, doc_QComboBox_itemText);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_itemIcon, "QComboBox.itemIcon(int) -> QIcon");

extern "C" {static PyObject *meth_QComboBox_itemIcon(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_itemIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->itemIcon(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_itemIcon, doc_QComboBox_itemIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_itemData, "QComboBox.itemData(int, int role=Qt.UserRole) -> QVariant");

extern "C" {static PyObject *meth_QComboBox_itemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QComboBox_itemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = Qt::UserRole;
        const QComboBox *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QComboBox, &sipCpp, &a0, &a1))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->itemData(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_itemData, doc_QComboBox_itemData);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_addItems, "QComboBox.addItems(QStringList)");

extern "C" {static PyObject *meth_QComboBox_addItems(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_addItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_addItems, doc_QComboBox_addItems);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_addItem, "QComboBox.addItem(QString, QVariant userData=QVariant())\n"
    "QComboBox.addItem(QIcon, QString, QVariant userData=QVariant())");

extern "C" {static PyObject *meth_QComboBox_addItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QComboBox_addItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant& a1def = QVariant();
        const QVariant* a1 = &a1def;
        int a1State = 0;
        QComboBox *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_userData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addItem(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;
        const QVariant& a2def = QVariant();
        const QVariant* a2 = &a2def;
        int a2State = 0;
        QComboBox *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_userData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|J1", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State, sipType_QVariant,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addItem(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_addItem, doc_QComboBox_addItem);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_insertItem, "QComboBox.insertItem(int, QString, QVariant userData=QVariant())\n"
    "QComboBox.insertItem(int, QIcon, QString, QVariant userData=QVariant())");

extern "C" {static PyObject *meth_QComboBox_insertItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QComboBox_insertItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        const QVariant& a2def = QVariant();
        const QVariant* a2 = &a2def;
        int a2State = 0;
        QComboBox *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_userData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ1|J1", &sipSelf, sipType_QComboBox, &sipCpp, &a0, sipType_QString,&a1, &a1State, sipType_QVariant,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertItem(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QIcon* a1;
        const QString* a2;
        int a2State = 0;
        const QVariant& a3def = QVariant();
        const QVariant* a3 = &a3def;
        int a3State = 0;
        QComboBox *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_userData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9J1|J1", &sipSelf, sipType_QComboBox, &sipCpp, &a0, sipType_QIcon, &a1, sipType_QString,&a2, &a2State, sipType_QVariant,&a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertItem(a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QVariant *>(a3),sipType_QVariant,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_insertItem, doc_QComboBox_insertItem);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_insertItems, "QComboBox.insertItems(int, QStringList)");

extern "C" {static PyObject *meth_QComboBox_insertItems(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_insertItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QStringList* a1;
        int a1State = 0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QComboBox, &sipCpp, &a0, sipType_QStringList,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertItems(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_insertItems, doc_QComboBox_insertItems);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_removeItem, "QComboBox.removeItem(int)");

extern "C" {static PyObject *meth_QComboBox_removeItem(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_removeItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_removeItem, doc_QComboBox_removeItem);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setItemText, "QComboBox.setItemText(int, QString)");

extern "C" {static PyObject *meth_QComboBox_setItemText(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setItemText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QComboBox, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemText(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setItemText, doc_QComboBox_setItemText);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setItemIcon, "QComboBox.setItemIcon(int, QIcon)");

extern "C" {static PyObject *meth_QComboBox_setItemIcon(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setItemIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QIcon* a1;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QComboBox, &sipCpp, &a0, sipType_QIcon, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemIcon(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setItemIcon, doc_QComboBox_setItemIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setItemData, "QComboBox.setItemData(int, QVariant, int role=Qt.UserRole)");

extern "C" {static PyObject *meth_QComboBox_setItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QVariant* a1;
        int a1State = 0;
        int a2 = Qt::UserRole;
        QComboBox *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ1|i", &sipSelf, sipType_QComboBox, &sipCpp, &a0, sipType_QVariant,&a1, &a1State, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemData(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setItemData, doc_QComboBox_setItemData);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_view, "QComboBox.view() -> QAbstractItemView");

extern "C" {static PyObject *meth_QComboBox_view(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_view(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QAbstractItemView*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->view();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_view, doc_QComboBox_view);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setView, "QComboBox.setView(QAbstractItemView)");

extern "C" {static PyObject *meth_QComboBox_setView(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QAbstractItemView, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setView(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setView, doc_QComboBox_setView);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_sizeHint, "QComboBox.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QComboBox_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QComboBox::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_sizeHint, doc_QComboBox_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_minimumSizeHint, "QComboBox.minimumSizeHint() -> QSize");

extern "C" {static PyObject *meth_QComboBox_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QComboBox::minimumSizeHint() : sipCpp->minimumSizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_minimumSizeHint, doc_QComboBox_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_showPopup, "QComboBox.showPopup()");

extern "C" {static PyObject *meth_QComboBox_showPopup(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_showPopup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::showPopup() : sipCpp->showPopup());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_showPopup, doc_QComboBox_showPopup);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_hidePopup, "QComboBox.hidePopup()");

extern "C" {static PyObject *meth_QComboBox_hidePopup(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_hidePopup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::hidePopup() : sipCpp->hidePopup());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_hidePopup, doc_QComboBox_hidePopup);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_event, "QComboBox.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QComboBox_event(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QComboBox::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_event, doc_QComboBox_event);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setCompleter, "QComboBox.setCompleter(QCompleter)");

extern "C" {static PyObject *meth_QComboBox_setCompleter(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setCompleter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter* a0;
        PyObject *a0Keep;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QComboBox, &sipCpp, &a0Keep, sipType_QCompleter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCompleter(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -18, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setCompleter, doc_QComboBox_setCompleter);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_completer, "QComboBox.completer() -> QCompleter");

extern "C" {static PyObject *meth_QComboBox_completer(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_completer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            QCompleter*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->completer();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QCompleter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_completer, doc_QComboBox_completer);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_insertSeparator, "QComboBox.insertSeparator(int)");

extern "C" {static PyObject *meth_QComboBox_insertSeparator(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_insertSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QComboBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertSeparator(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_insertSeparator, doc_QComboBox_insertSeparator);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_clear, "QComboBox.clear()");

extern "C" {static PyObject *meth_QComboBox_clear(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_clear, doc_QComboBox_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_clearEditText, "QComboBox.clearEditText()");

extern "C" {static PyObject *meth_QComboBox_clearEditText(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_clearEditText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QComboBox, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearEditText();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_clearEditText, doc_QComboBox_clearEditText);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_setEditText, "QComboBox.setEditText(QString)");

extern "C" {static PyObject *meth_QComboBox_setEditText(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_setEditText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEditText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_setEditText, doc_QComboBox_setEditText);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_initStyleOption, "QComboBox.initStyleOption(QStyleOptionComboBox)");

extern "C" {static PyObject *meth_QComboBox_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyleOptionComboBox* a0;
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QStyleOptionComboBox, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->initStyleOption(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_initStyleOption, doc_QComboBox_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_focusInEvent, "QComboBox.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QComboBox_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_focusInEvent, doc_QComboBox_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_focusOutEvent, "QComboBox.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QComboBox_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_focusOutEvent, doc_QComboBox_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_changeEvent, "QComboBox.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QComboBox_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_changeEvent, doc_QComboBox_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_resizeEvent, "QComboBox.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QComboBox_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_resizeEvent, doc_QComboBox_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_paintEvent, "QComboBox.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QComboBox_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_paintEvent, doc_QComboBox_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_showEvent, "QComboBox.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QComboBox_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_showEvent, doc_QComboBox_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_hideEvent, "QComboBox.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QComboBox_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QHideEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::hideEvent(a0) : sipCpp->hideEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_hideEvent, doc_QComboBox_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_mousePressEvent, "QComboBox.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QComboBox_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_mousePressEvent, doc_QComboBox_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_mouseReleaseEvent, "QComboBox.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QComboBox_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_mouseReleaseEvent, doc_QComboBox_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_keyPressEvent, "QComboBox.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QComboBox_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_keyPressEvent, doc_QComboBox_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_keyReleaseEvent, "QComboBox.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QComboBox_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_keyReleaseEvent, doc_QComboBox_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_wheelEvent, "QComboBox.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QComboBox_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_wheelEvent, doc_QComboBox_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_contextMenuEvent, "QComboBox.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QComboBox_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_contextMenuEvent, doc_QComboBox_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_inputMethodEvent, "QComboBox.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QComboBox_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QComboBox, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QComboBox::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_inputMethodEvent, doc_QComboBox_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QComboBox_inputMethodQuery, "QComboBox.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QComboBox_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QComboBox_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QComboBox, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QComboBox::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QComboBox, sipName_inputMethodQuery, doc_QComboBox_inputMethodQuery);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QComboBox___len__(PyObject *);}
static SIP_SSIZE_T slot_QComboBox___len__(PyObject *sipSelf)
{
    QComboBox *sipCpp = reinterpret_cast<QComboBox *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QComboBox));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 3720 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQComboBox.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QComboBox(void *, const sipTypeDef *);}
static void *cast_QComboBox(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QComboBox)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QComboBox *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QComboBox(void *, int);}
static void release_QComboBox(void *sipCppV,int)
{
    QComboBox *sipCpp = reinterpret_cast<QComboBox *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QComboBox(sipSimpleWrapper *);}
static void dealloc_QComboBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQComboBox *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QComboBox(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QComboBox(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QComboBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQComboBox *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQComboBox(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QComboBox[] = {{755, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QComboBox[] = {
    {(void *)slot_QComboBox___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QComboBox[] = {
    {SIP_MLNAME_CAST(sipName_addItem), (PyCFunction)meth_QComboBox_addItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QComboBox_addItem)},
    {SIP_MLNAME_CAST(sipName_addItems), meth_QComboBox_addItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_addItems)},
    {SIP_MLNAME_CAST(sipName_autoCompletion), meth_QComboBox_autoCompletion, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_autoCompletion)},
    {SIP_MLNAME_CAST(sipName_autoCompletionCaseSensitivity), meth_QComboBox_autoCompletionCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_autoCompletionCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QComboBox_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QComboBox_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_clear)},
    {SIP_MLNAME_CAST(sipName_clearEditText), meth_QComboBox_clearEditText, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_clearEditText)},
    {SIP_MLNAME_CAST(sipName_completer), meth_QComboBox_completer, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_completer)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QComboBox_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_count), meth_QComboBox_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_count)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QComboBox_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_currentIndex)},
    {SIP_MLNAME_CAST(sipName_currentText), meth_QComboBox_currentText, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_currentText)},
    {SIP_MLNAME_CAST(sipName_duplicatesEnabled), meth_QComboBox_duplicatesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_duplicatesEnabled)},
    {SIP_MLNAME_CAST(sipName_event), meth_QComboBox_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_event)},
    {SIP_MLNAME_CAST(sipName_findData), (PyCFunction)meth_QComboBox_findData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QComboBox_findData)},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QComboBox_findText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QComboBox_findText)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QComboBox_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QComboBox_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_hasFrame), meth_QComboBox_hasFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_hasFrame)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QComboBox_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_hideEvent)},
    {SIP_MLNAME_CAST(sipName_hidePopup), meth_QComboBox_hidePopup, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_hidePopup)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QComboBox_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_iconSize)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QComboBox_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QComboBox_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QComboBox_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_insertItem), (PyCFunction)meth_QComboBox_insertItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QComboBox_insertItem)},
    {SIP_MLNAME_CAST(sipName_insertItems), meth_QComboBox_insertItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_insertItems)},
    {SIP_MLNAME_CAST(sipName_insertPolicy), meth_QComboBox_insertPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_insertPolicy)},
    {SIP_MLNAME_CAST(sipName_insertSeparator), meth_QComboBox_insertSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_insertSeparator)},
    {SIP_MLNAME_CAST(sipName_isEditable), meth_QComboBox_isEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_isEditable)},
    {SIP_MLNAME_CAST(sipName_itemData), (PyCFunction)meth_QComboBox_itemData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QComboBox_itemData)},
    {SIP_MLNAME_CAST(sipName_itemDelegate), meth_QComboBox_itemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_itemDelegate)},
    {SIP_MLNAME_CAST(sipName_itemIcon), meth_QComboBox_itemIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_itemIcon)},
    {SIP_MLNAME_CAST(sipName_itemText), meth_QComboBox_itemText, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_itemText)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QComboBox_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QComboBox_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_lineEdit), meth_QComboBox_lineEdit, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_lineEdit)},
    {SIP_MLNAME_CAST(sipName_maxCount), meth_QComboBox_maxCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_maxCount)},
    {SIP_MLNAME_CAST(sipName_maxVisibleItems), meth_QComboBox_maxVisibleItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_maxVisibleItems)},
    {SIP_MLNAME_CAST(sipName_minimumContentsLength), meth_QComboBox_minimumContentsLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_minimumContentsLength)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QComboBox_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_model), meth_QComboBox_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_model)},
    {SIP_MLNAME_CAST(sipName_modelColumn), meth_QComboBox_modelColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_modelColumn)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QComboBox_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QComboBox_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QComboBox_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_paintEvent)},
    {SIP_MLNAME_CAST(sipName_removeItem), meth_QComboBox_removeItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_removeItem)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QComboBox_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_rootModelIndex), meth_QComboBox_rootModelIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_rootModelIndex)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletion), meth_QComboBox_setAutoCompletion, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setAutoCompletion)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletionCaseSensitivity), meth_QComboBox_setAutoCompletionCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setAutoCompletionCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_setCompleter), meth_QComboBox_setCompleter, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setCompleter)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QComboBox_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setDuplicatesEnabled), meth_QComboBox_setDuplicatesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setDuplicatesEnabled)},
    {SIP_MLNAME_CAST(sipName_setEditText), meth_QComboBox_setEditText, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setEditText)},
    {SIP_MLNAME_CAST(sipName_setEditable), meth_QComboBox_setEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setEditable)},
    {SIP_MLNAME_CAST(sipName_setFrame), meth_QComboBox_setFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setFrame)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QComboBox_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setInsertPolicy), meth_QComboBox_setInsertPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setInsertPolicy)},
    {SIP_MLNAME_CAST(sipName_setItemData), (PyCFunction)meth_QComboBox_setItemData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QComboBox_setItemData)},
    {SIP_MLNAME_CAST(sipName_setItemDelegate), meth_QComboBox_setItemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setItemDelegate)},
    {SIP_MLNAME_CAST(sipName_setItemIcon), meth_QComboBox_setItemIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setItemIcon)},
    {SIP_MLNAME_CAST(sipName_setItemText), meth_QComboBox_setItemText, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setItemText)},
    {SIP_MLNAME_CAST(sipName_setLineEdit), meth_QComboBox_setLineEdit, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setLineEdit)},
    {SIP_MLNAME_CAST(sipName_setMaxCount), meth_QComboBox_setMaxCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setMaxCount)},
    {SIP_MLNAME_CAST(sipName_setMaxVisibleItems), meth_QComboBox_setMaxVisibleItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setMaxVisibleItems)},
    {SIP_MLNAME_CAST(sipName_setMinimumContentsLength), meth_QComboBox_setMinimumContentsLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setMinimumContentsLength)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QComboBox_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setModel)},
    {SIP_MLNAME_CAST(sipName_setModelColumn), meth_QComboBox_setModelColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setModelColumn)},
    {SIP_MLNAME_CAST(sipName_setRootModelIndex), meth_QComboBox_setRootModelIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setRootModelIndex)},
    {SIP_MLNAME_CAST(sipName_setSizeAdjustPolicy), meth_QComboBox_setSizeAdjustPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setSizeAdjustPolicy)},
    {SIP_MLNAME_CAST(sipName_setValidator), meth_QComboBox_setValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setValidator)},
    {SIP_MLNAME_CAST(sipName_setView), meth_QComboBox_setView, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_setView)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QComboBox_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_showEvent)},
    {SIP_MLNAME_CAST(sipName_showPopup), meth_QComboBox_showPopup, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_showPopup)},
    {SIP_MLNAME_CAST(sipName_sizeAdjustPolicy), meth_QComboBox_sizeAdjustPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_sizeAdjustPolicy)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QComboBox_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_sizeHint)},
    {SIP_MLNAME_CAST(sipName_validator), meth_QComboBox_validator, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_validator)},
    {SIP_MLNAME_CAST(sipName_view), meth_QComboBox_view, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_view)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QComboBox_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QComboBox_wheelEvent)}
};

static sipEnumMemberDef enummembers_QComboBox[] = {
    {sipName_AdjustToContents, static_cast<int>(QComboBox::AdjustToContents), 64},
    {sipName_AdjustToContentsOnFirstShow, static_cast<int>(QComboBox::AdjustToContentsOnFirstShow), 64},
    {sipName_AdjustToMinimumContentsLength, static_cast<int>(QComboBox::AdjustToMinimumContentsLength), 64},
    {sipName_AdjustToMinimumContentsLengthWithIcon, static_cast<int>(QComboBox::AdjustToMinimumContentsLengthWithIcon), 64},
    {sipName_InsertAfterCurrent, static_cast<int>(QComboBox::InsertAfterCurrent), 63},
    {sipName_InsertAlphabetically, static_cast<int>(QComboBox::InsertAlphabetically), 63},
    {sipName_InsertAtBottom, static_cast<int>(QComboBox::InsertAtBottom), 63},
    {sipName_InsertAtCurrent, static_cast<int>(QComboBox::InsertAtCurrent), 63},
    {sipName_InsertAtTop, static_cast<int>(QComboBox::InsertAtTop), 63},
    {sipName_InsertBeforeCurrent, static_cast<int>(QComboBox::InsertBeforeCurrent), 63},
    {sipName_NoInsert, static_cast<int>(QComboBox::NoInsert), 63},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QComboBox[] = {
    {"highlighted(int)", "\1QComboBox.highlighted[int]", 0, 0},
    {"highlighted(QString)", "\1QComboBox.highlighted[QString]", 0, 0},
    {"currentIndexChanged(int)", "\1QComboBox.currentIndexChanged[int]", 0, 0},
    {"currentIndexChanged(QString)", "\1QComboBox.currentIndexChanged[QString]", 0, 0},
    {"activated(int)", "\1QComboBox.activated[int]", 0, 0},
    {"activated(QString)", "\1QComboBox.activated[QString]", 0, 0},
    {"editTextChanged(QString)", "\1QComboBox.editTextChanged[QString]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QComboBox, "\1QComboBox(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QComboBox = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QComboBox,
        {0}
    },
    {
        sipNameNr_QComboBox,
        {0, 0, 1},
        80, methods_QComboBox,
        11, enummembers_QComboBox,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QComboBox,
    -1,
    -1,
    supers_QComboBox,
    slots_QComboBox,
    init_type_QComboBox,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QComboBox,
    0,
    0,
    0,
    release_QComboBox,
    cast_QComboBox,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QComboBox::staticMetaObject,
    0,
    signals_QComboBox,
};
