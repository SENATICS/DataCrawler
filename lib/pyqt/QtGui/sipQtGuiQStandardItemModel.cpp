/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:19 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 193 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 144 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 144 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qhash.sip"
#include <qhash.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtGui/sipQtGuiQStandardItemModel.cpp"


class sipQStandardItemModel : public QStandardItemModel
{
public:
    sipQStandardItemModel(QObject*);
    sipQStandardItemModel(int,int,QObject*);
    virtual ~sipQStandardItemModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void revert();
    bool submit();
    QSize span(const QModelIndex&) const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QModelIndex buddy(const QModelIndex&) const;
    bool canFetchMore(const QModelIndex&) const;
    void fetchMore(const QModelIndex&);
    bool dropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    QMimeData* mimeData(const QModelIndexList&) const;
    QStringList mimeTypes() const;
    void sort(int,Qt::SortOrder);
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    Qt::DropActions supportedDropActions() const;
    Qt::ItemFlags flags(const QModelIndex&) const;
    bool removeColumns(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    bool insertRows(int,int,const QModelIndex&);
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    QVariant headerData(int,Qt::Orientation,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant data(const QModelIndex&,int) const;
    bool hasChildren(const QModelIndex&) const;
    int columnCount(const QModelIndex&) const;
    int rowCount(const QModelIndex&) const;
    QModelIndex parent(const QModelIndex&) const;
    QModelIndex index(int,int,const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStandardItemModel(const sipQStandardItemModel &);
    sipQStandardItemModel &operator = (const sipQStandardItemModel &);

    char sipPyMethods[35];
};

sipQStandardItemModel::sipQStandardItemModel(QObject*a0): QStandardItemModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItemModel::sipQStandardItemModel(int a0,int a1,QObject*a2): QStandardItemModel(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItemModel::~sipQStandardItemModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQStandardItemModel::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QStandardItemModel);
}

int sipQStandardItemModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QStandardItemModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QStandardItemModel,_c,_id,_a);

    return _id;
}

void *sipQStandardItemModel::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QStandardItemModel, _clname)) ? this : QStandardItemModel::qt_metacast(_clname);
}

void sipQStandardItemModel::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QStandardItemModel::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QStandardItemModel::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QStandardItemModel::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QStandardItemModel::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QStandardItemModel::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QStandardItemModel::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQStandardItemModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QStandardItemModel::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
        QStandardItemModel::revert();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQStandardItemModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return QStandardItemModel::submit();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQStandardItemModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return QStandardItemModel::span(a0);

    typedef QSize (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndexList sipQStandardItemModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return QStandardItemModel::match(a0,a1,a2,a3,a4);

    typedef QList<QModelIndex> (*sipVH_QtCore_48)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return ((sipVH_QtCore_48)(sipModuleAPI_QtGui_QtCore->em_virthandlers[48]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QModelIndex sipQStandardItemModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return QStandardItemModel::buddy(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtGui_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return QStandardItemModel::canFetchMore(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
        QStandardItemModel::fetchMore(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::dropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QStandardItemModel::dropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtGui_QtCore->em_virthandlers[45]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QMimeData* sipQStandardItemModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QStandardItemModel::mimeData(a0);

    typedef QMimeData* (*sipVH_QtCore_54)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QModelIndex>&);

    return ((sipVH_QtCore_54)(sipModuleAPI_QtGui_QtCore->em_virthandlers[54]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStringList sipQStandardItemModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QStandardItemModel::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtGui_QtCore->em_virthandlers[27]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQStandardItemModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
        QStandardItemModel::sort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_49)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);

    ((sipVH_QtCore_49)(sipModuleAPI_QtGui_QtCore->em_virthandlers[49]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQStandardItemModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return QStandardItemModel::setItemData(a0,a1);

    typedef bool (*sipVH_QtCore_55)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QMap<int,QVariant>&);

    return ((sipVH_QtCore_55)(sipModuleAPI_QtGui_QtCore->em_virthandlers[55]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QMap<int,QVariant> sipQStandardItemModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return QStandardItemModel::itemData(a0);

    typedef QMap<int,QVariant> (*sipVH_QtCore_56)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_56)(sipModuleAPI_QtGui_QtCore->em_virthandlers[56]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

Qt::DropActions sipQStandardItemModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QStandardItemModel::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtGui_QtCore->em_virthandlers[53]))(sipGILState, 0, sipPySelf, sipMeth);
}

Qt::ItemFlags sipQStandardItemModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return QStandardItemModel::flags(a0);

    typedef Qt::ItemFlags (*sipVH_QtCore_50)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_50)(sipModuleAPI_QtGui_QtCore->em_virthandlers[50]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return QStandardItemModel::removeColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return QStandardItemModel::removeRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return QStandardItemModel::insertColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return QStandardItemModel::insertRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return QStandardItemModel::setHeaderData(a0,a1,a2,a3);

    typedef bool (*sipVH_QtCore_57)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,const QVariant&,int);

    return ((sipVH_QtCore_57)(sipModuleAPI_QtGui_QtCore->em_virthandlers[57]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QVariant sipQStandardItemModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return QStandardItemModel::headerData(a0,a1,a2);

    typedef QVariant (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,int);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtGui_QtCore->em_virthandlers[58]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return QStandardItemModel::setData(a0,a1,a2);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QVariant&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_QtGui_QtCore->em_virthandlers[59]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipQStandardItemModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QStandardItemModel::data(a0,a1);

    typedef QVariant (*sipVH_QtCore_60)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int);

    return ((sipVH_QtCore_60)(sipModuleAPI_QtGui_QtCore->em_virthandlers[60]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQStandardItemModel::hasChildren(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_hasChildren);

    if (!sipMeth)
        return QStandardItemModel::hasChildren(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQStandardItemModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_columnCount);

    if (!sipMeth)
        return QStandardItemModel::columnCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtGui_QtCore->em_virthandlers[43]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQStandardItemModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return QStandardItemModel::rowCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtGui_QtCore->em_virthandlers[43]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQStandardItemModel::parent(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_parent);

    if (!sipMeth)
        return QStandardItemModel::parent(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtGui_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQStandardItemModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return QStandardItemModel::index(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QStandardItemModel_index, "QStandardItemModel.index(int, int, QModelIndex parent=QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QStandardItemModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        const QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QStandardItemModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_index, doc_QStandardItemModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_parent, "QStandardItemModel.parent(QModelIndex) -> QModelIndex\n"
    "QStandardItemModel.parent() -> QObject");

extern "C" {static PyObject *meth_QStandardItemModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QStandardItemModel::parent(*a0) : sipCpp->parent(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    {
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_parent, doc_QStandardItemModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_rowCount, "QStandardItemModel.rowCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QStandardItemModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_rowCount, doc_QStandardItemModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_columnCount, "QStandardItemModel.columnCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QStandardItemModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::columnCount(*a0) : sipCpp->columnCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_columnCount, doc_QStandardItemModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_hasChildren, "QStandardItemModel.hasChildren(QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_hasChildren, doc_QStandardItemModel_hasChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_data, "QStandardItemModel.data(QModelIndex, int role=Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QStandardItemModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QStandardItemModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_data, doc_QStandardItemModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setData, "QStandardItemModel.setData(QModelIndex, QVariant, int role=Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
        QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant,&a1, &a1State, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setData, doc_QStandardItemModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_headerData, "QStandardItemModel.headerData(int, Qt.Orientation, int role=Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QStandardItemModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiE|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QStandardItemModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_headerData, doc_QStandardItemModel_headerData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setHeaderData, "QStandardItemModel.setHeaderData(int, Qt.Orientation, QVariant, int role=Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        const QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
        QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiEJ1|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant,&a2, &a2State, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setHeaderData, doc_QStandardItemModel_setHeaderData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertRows, "QStandardItemModel.insertRows(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertRows, doc_QStandardItemModel_insertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertColumns, "QStandardItemModel.insertColumns(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertColumns, doc_QStandardItemModel_insertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_removeRows, "QStandardItemModel.removeRows(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_removeRows, doc_QStandardItemModel_removeRows);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_removeColumns, "QStandardItemModel.removeColumns(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_removeColumns, doc_QStandardItemModel_removeColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_flags, "QStandardItemModel.flags(QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QStandardItemModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Qt::ItemFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags((sipSelfWasArg ? sipCpp->QStandardItemModel::flags(*a0) : sipCpp->flags(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_flags, doc_QStandardItemModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_clear, "QStandardItemModel.clear()");

extern "C" {static PyObject *meth_QStandardItemModel_clear(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_clear, doc_QStandardItemModel_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_supportedDropActions, "QStandardItemModel.supportedDropActions() -> Qt.DropActions");

extern "C" {static PyObject *meth_QStandardItemModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            Qt::DropActions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->QStandardItemModel::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_supportedDropActions, doc_QStandardItemModel_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_itemData, "QStandardItemModel.itemData(QModelIndex) -> dict-of-int-QVariant");

extern "C" {static PyObject *meth_QStandardItemModel_itemData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_itemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QMap<int,QVariant>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap<int,QVariant>((sipSelfWasArg ? sipCpp->QStandardItemModel::itemData(*a0) : sipCpp->itemData(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_itemData, doc_QStandardItemModel_itemData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setItemData, "QStandardItemModel.setItemData(QModelIndex, dict-of-int-QVariant) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_setItemData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setItemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QMap<int,QVariant>* a1;
        int a1State = 0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QMap_1800_0100QVariant,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::setItemData(*a0,*a1) : sipCpp->setItemData(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QMap<int,QVariant> *>(a1),sipType_QMap_1800_0100QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setItemData, doc_QStandardItemModel_setItemData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_sort, "QStandardItemModel.sort(int, Qt.SortOrder order=Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QStandardItemModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::SortOrder a1 = Qt::AscendingOrder;
        QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QStandardItemModel::sort(a0,a1) : sipCpp->sort(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_sort, doc_QStandardItemModel_sort);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_itemFromIndex, "QStandardItemModel.itemFromIndex(QModelIndex) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_itemFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_itemFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemFromIndex(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_itemFromIndex, doc_QStandardItemModel_itemFromIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_indexFromItem, "QStandardItemModel.indexFromItem(QStandardItem) -> QModelIndex");

extern "C" {static PyObject *meth_QStandardItemModel_indexFromItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_indexFromItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem* a0;
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStandardItem, &a0))
        {
            QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->indexFromItem(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_indexFromItem, doc_QStandardItemModel_indexFromItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_item, "QStandardItemModel.item(int, int column=0) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_item(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_item(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 0;
        const QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1))
        {
            QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->item(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_item, doc_QStandardItemModel_item);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setItem, "QStandardItemModel.setItem(int, int, QStandardItem)\n"
    "QStandardItemModel.setItem(int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QStandardItem* a2;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QStandardItem, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItem(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QStandardItem* a1;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setItem, doc_QStandardItemModel_setItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_invisibleRootItem, "QStandardItemModel.invisibleRootItem() -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_invisibleRootItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_invisibleRootItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->invisibleRootItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_invisibleRootItem, doc_QStandardItemModel_invisibleRootItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_horizontalHeaderItem, "QStandardItemModel.horizontalHeaderItem(int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_horizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_horizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->horizontalHeaderItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_horizontalHeaderItem, doc_QStandardItemModel_horizontalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setHorizontalHeaderItem, "QStandardItemModel.setHorizontalHeaderItem(int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setHorizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setHorizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItem* a1;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHorizontalHeaderItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setHorizontalHeaderItem, doc_QStandardItemModel_setHorizontalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_verticalHeaderItem, "QStandardItemModel.verticalHeaderItem(int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_verticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_verticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verticalHeaderItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_verticalHeaderItem, doc_QStandardItemModel_verticalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setVerticalHeaderItem, "QStandardItemModel.setVerticalHeaderItem(int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setVerticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setVerticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItem* a1;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVerticalHeaderItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setVerticalHeaderItem, doc_QStandardItemModel_setVerticalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setHorizontalHeaderLabels, "QStandardItemModel.setHorizontalHeaderLabels(QStringList)");

extern "C" {static PyObject *meth_QStandardItemModel_setHorizontalHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setHorizontalHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHorizontalHeaderLabels(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setHorizontalHeaderLabels, doc_QStandardItemModel_setHorizontalHeaderLabels);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setVerticalHeaderLabels, "QStandardItemModel.setVerticalHeaderLabels(QStringList)");

extern "C" {static PyObject *meth_QStandardItemModel_setVerticalHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setVerticalHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVerticalHeaderLabels(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setVerticalHeaderLabels, doc_QStandardItemModel_setVerticalHeaderLabels);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setRowCount, "QStandardItemModel.setRowCount(int)");

extern "C" {static PyObject *meth_QStandardItemModel_setRowCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRowCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setRowCount, doc_QStandardItemModel_setRowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setColumnCount, "QStandardItemModel.setColumnCount(int)");

extern "C" {static PyObject *meth_QStandardItemModel_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setColumnCount, doc_QStandardItemModel_setColumnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_appendRow, "QStandardItemModel.appendRow(list-of-QStandardItem)\n"
    "QStandardItemModel.appendRow(QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_appendRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_appendRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QStandardItem*>* a0;
        int a0State = 0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendRow(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QStandardItem* a0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStandardItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_appendRow, doc_QStandardItemModel_appendRow);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_appendColumn, "QStandardItemModel.appendColumn(list-of-QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_appendColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_appendColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QStandardItem*>* a0;
        int a0State = 0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendColumn(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_appendColumn, doc_QStandardItemModel_appendColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertRow, "QStandardItemModel.insertRow(int, list-of-QStandardItem)\n"
    "QStandardItemModel.insertRow(int, QStandardItem)\n"
    "QStandardItemModel.insertRow(int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList<QStandardItem*>* a1;
        int a1State = 0;
        QStandardItemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QStandardItem* a1;
        QStandardItemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QModelIndex& a1def = QModelIndex();
        const QModelIndex* a1 = &a1def;
        QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertRow(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertRow, doc_QStandardItemModel_insertRow);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertColumn, "QStandardItemModel.insertColumn(int, list-of-QStandardItem)\n"
    "QStandardItemModel.insertColumn(int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList<QStandardItem*>* a1;
        int a1State = 0;
        QStandardItemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertColumn(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QModelIndex& a1def = QModelIndex();
        const QModelIndex* a1 = &a1def;
        QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertColumn(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertColumn, doc_QStandardItemModel_insertColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeItem, "QStandardItemModel.takeItem(int, int column=0) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 0;
        QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1))
        {
            QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeItem(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeItem, doc_QStandardItemModel_takeItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeRow, "QStandardItemModel.takeRow(int) -> list-of-QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            QList<QStandardItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QStandardItem*>(sipCpp->takeRow(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeRow, doc_QStandardItemModel_takeRow);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeColumn, "QStandardItemModel.takeColumn(int) -> list-of-QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            QList<QStandardItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QStandardItem*>(sipCpp->takeColumn(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeColumn, doc_QStandardItemModel_takeColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeHorizontalHeaderItem, "QStandardItemModel.takeHorizontalHeaderItem(int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeHorizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeHorizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeHorizontalHeaderItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeHorizontalHeaderItem, doc_QStandardItemModel_takeHorizontalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeVerticalHeaderItem, "QStandardItemModel.takeVerticalHeaderItem(int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeVerticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeVerticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeVerticalHeaderItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeVerticalHeaderItem, doc_QStandardItemModel_takeVerticalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_itemPrototype, "QStandardItemModel.itemPrototype() -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_itemPrototype(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_itemPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            const QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemPrototype();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QStandardItem *>(sipRes),sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_itemPrototype, doc_QStandardItemModel_itemPrototype);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setItemPrototype, "QStandardItemModel.setItemPrototype(QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setItemPrototype(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setItemPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem* a0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStandardItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemPrototype(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setItemPrototype, doc_QStandardItemModel_setItemPrototype);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_findItems, "QStandardItemModel.findItems(QString, Qt.MatchFlags flags=Qt.MatchExactly, int column=0) -> list-of-QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_findItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_findItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Qt::MatchFlags a1def = Qt::MatchExactly;
        Qt::MatchFlags* a1 = &a1def;
        int a1State = 0;
        int a2 = 0;
        const QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1i", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_MatchFlags, &a1, &a1State, &a2))
        {
            QList<QStandardItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QStandardItem*>(sipCpp->findItems(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_findItems, doc_QStandardItemModel_findItems);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_sortRole, "QStandardItemModel.sortRole() -> int");

extern "C" {static PyObject *meth_QStandardItemModel_sortRole(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_sortRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sortRole();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_sortRole, doc_QStandardItemModel_sortRole);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setSortRole, "QStandardItemModel.setSortRole(int)");

extern "C" {static PyObject *meth_QStandardItemModel_setSortRole(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setSortRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSortRole(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setSortRole, doc_QStandardItemModel_setSortRole);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_mimeTypes, "QStandardItemModel.mimeTypes() -> QStringList");

extern "C" {static PyObject *meth_QStandardItemModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QStandardItemModel::mimeTypes() : sipCpp->mimeTypes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_mimeTypes, doc_QStandardItemModel_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_mimeData, "QStandardItemModel.mimeData(list-of-QModelIndex) -> QMimeData");

extern "C" {static PyObject *meth_QStandardItemModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndexList* a0;
        int a0State = 0;
        const QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
            QMimeData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_mimeData, doc_QStandardItemModel_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_dropMimeData, "QStandardItemModel.dropMimeData(QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        Qt::DropAction a1;
        int a2;
        int a3;
        const QModelIndex* a4;
        QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItemModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_dropMimeData, doc_QStandardItemModel_dropMimeData);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStandardItemModel(void *, const sipTypeDef *);}
static void *cast_QStandardItemModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QStandardItemModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemModel)->ctd_cast((QAbstractItemModel *)(QStandardItemModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStandardItemModel(void *, int);}
static void release_QStandardItemModel(void *sipCppV,int)
{
    QStandardItemModel *sipCpp = reinterpret_cast<QStandardItemModel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QStandardItemModel(sipSimpleWrapper *);}
static void dealloc_QStandardItemModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQStandardItemModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QStandardItemModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QStandardItemModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStandardItemModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQStandardItemModel *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStandardItemModel(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii|JH", &a0, &a1, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStandardItemModel(a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStandardItemModel[] = {{13, 0, 1}};


static PyMethodDef methods_QStandardItemModel[] = {
    {SIP_MLNAME_CAST(sipName_appendColumn), meth_QStandardItemModel_appendColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_appendColumn)},
    {SIP_MLNAME_CAST(sipName_appendRow), meth_QStandardItemModel_appendRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_appendRow)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QStandardItemModel_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_clear)},
    {SIP_MLNAME_CAST(sipName_columnCount), (PyCFunction)meth_QStandardItemModel_columnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_QStandardItemModel_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_data)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QStandardItemModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_findItems), (PyCFunction)meth_QStandardItemModel_findItems, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_findItems)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QStandardItemModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), (PyCFunction)meth_QStandardItemModel_hasChildren, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_headerData), (PyCFunction)meth_QStandardItemModel_headerData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_headerData)},
    {SIP_MLNAME_CAST(sipName_horizontalHeaderItem), meth_QStandardItemModel_horizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_horizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QStandardItemModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_index)},
    {SIP_MLNAME_CAST(sipName_indexFromItem), meth_QStandardItemModel_indexFromItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_indexFromItem)},
    {SIP_MLNAME_CAST(sipName_insertColumn), (PyCFunction)meth_QStandardItemModel_insertColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertColumn)},
    {SIP_MLNAME_CAST(sipName_insertColumns), (PyCFunction)meth_QStandardItemModel_insertColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRow), (PyCFunction)meth_QStandardItemModel_insertRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertRow)},
    {SIP_MLNAME_CAST(sipName_insertRows), (PyCFunction)meth_QStandardItemModel_insertRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_invisibleRootItem), meth_QStandardItemModel_invisibleRootItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_invisibleRootItem)},
    {SIP_MLNAME_CAST(sipName_item), (PyCFunction)meth_QStandardItemModel_item, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_item)},
    {SIP_MLNAME_CAST(sipName_itemData), meth_QStandardItemModel_itemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_itemData)},
    {SIP_MLNAME_CAST(sipName_itemFromIndex), meth_QStandardItemModel_itemFromIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_itemFromIndex)},
    {SIP_MLNAME_CAST(sipName_itemPrototype), meth_QStandardItemModel_itemPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_itemPrototype)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QStandardItemModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QStandardItemModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QStandardItemModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_parent)},
    {SIP_MLNAME_CAST(sipName_removeColumns), (PyCFunction)meth_QStandardItemModel_removeColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRows), (PyCFunction)meth_QStandardItemModel_removeRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QStandardItemModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QStandardItemModel_setColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setColumnCount)},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QStandardItemModel_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_setData)},
    {SIP_MLNAME_CAST(sipName_setHeaderData), (PyCFunction)meth_QStandardItemModel_setHeaderData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_setHeaderData)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeaderItem), meth_QStandardItemModel_setHorizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setHorizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeaderLabels), meth_QStandardItemModel_setHorizontalHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setHorizontalHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_setItem), meth_QStandardItemModel_setItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setItem)},
    {SIP_MLNAME_CAST(sipName_setItemData), meth_QStandardItemModel_setItemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setItemData)},
    {SIP_MLNAME_CAST(sipName_setItemPrototype), meth_QStandardItemModel_setItemPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setItemPrototype)},
    {SIP_MLNAME_CAST(sipName_setRowCount), meth_QStandardItemModel_setRowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setRowCount)},
    {SIP_MLNAME_CAST(sipName_setSortRole), meth_QStandardItemModel_setSortRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setSortRole)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeaderItem), meth_QStandardItemModel_setVerticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setVerticalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeaderLabels), meth_QStandardItemModel_setVerticalHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setVerticalHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_sort), (PyCFunction)meth_QStandardItemModel_sort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_sort)},
    {SIP_MLNAME_CAST(sipName_sortRole), meth_QStandardItemModel_sortRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_sortRole)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QStandardItemModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_supportedDropActions)},
    {SIP_MLNAME_CAST(sipName_takeColumn), meth_QStandardItemModel_takeColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeColumn)},
    {SIP_MLNAME_CAST(sipName_takeHorizontalHeaderItem), meth_QStandardItemModel_takeHorizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeHorizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_takeItem), (PyCFunction)meth_QStandardItemModel_takeItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeItem)},
    {SIP_MLNAME_CAST(sipName_takeRow), meth_QStandardItemModel_takeRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeRow)},
    {SIP_MLNAME_CAST(sipName_takeVerticalHeaderItem), meth_QStandardItemModel_takeVerticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeVerticalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_verticalHeaderItem), meth_QStandardItemModel_verticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_verticalHeaderItem)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QStandardItemModel[] = {
    {"itemChanged(QStandardItem*)", "\1QStandardItemModel.itemChanged[QStandardItem]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QStandardItemModel, "\1QStandardItemModel(QObject parent=None)\n"
    "QStandardItemModel(int, int, QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QStandardItemModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QStandardItemModel,
        {0}
    },
    {
        sipNameNr_QStandardItemModel,
        {0, 0, 1},
        49, methods_QStandardItemModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStandardItemModel,
    -1,
    -1,
    supers_QStandardItemModel,
    0,
    init_type_QStandardItemModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStandardItemModel,
    0,
    0,
    0,
    release_QStandardItemModel,
    cast_QStandardItemModel,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QStandardItemModel::staticMetaObject,
    0,
    signals_QStandardItemModel,
};
