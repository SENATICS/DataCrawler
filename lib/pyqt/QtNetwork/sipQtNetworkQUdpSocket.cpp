/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qudpsocket.sip"
#include <qudpsocket.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 75 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qudpsocket.sip"
#include <qudpsocket.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"


class sipQUdpSocket : public QUdpSocket
{
public:
    sipQUdpSocket(QObject*);
    virtual ~sipQUdpSocket();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool reset();
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    bool open(QIODevice::OpenMode);
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readLineData(char*,qint64);
    qint64 readData(char*,qint64);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool atEnd() const;
    bool isSequential() const;
    void close();
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQUdpSocket(const sipQUdpSocket &);
    sipQUdpSocket &operator = (const sipQUdpSocket &);

    char sipPyMethods[23];
};

sipQUdpSocket::sipQUdpSocket(QObject*a0): QUdpSocket(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQUdpSocket::~sipQUdpSocket()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQUdpSocket::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QUdpSocket);
}

int sipQUdpSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QUdpSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QUdpSocket,_c,_id,_a);

    return _id;
}

void *sipQUdpSocket::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QUdpSocket, _clname)) ? this : QUdpSocket::qt_metacast(_clname);
}

void sipQUdpSocket::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QUdpSocket::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUdpSocket::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QUdpSocket::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUdpSocket::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QUdpSocket::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUdpSocket::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QUdpSocket::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUdpSocket::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QUdpSocket::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QUdpSocket::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQUdpSocket::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QUdpSocket::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QUdpSocket::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQUdpSocket::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QUdpSocket::seek(a0);

    typedef bool (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return ((sipVH_QtCore_32)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[32]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQUdpSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QUdpSocket::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQUdpSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QUdpSocket::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQUdpSocket::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QUdpSocket::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[15]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQUdpSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QUdpSocket::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[20]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQUdpSocket::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QUdpSocket::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQUdpSocket::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QUdpSocket::readData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQUdpSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QUdpSocket::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QUdpSocket::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QUdpSocket::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQUdpSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QUdpSocket::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQUdpSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QUdpSocket::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQUdpSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QUdpSocket::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQUdpSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QUdpSocket::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQUdpSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QUdpSocket::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QUdpSocket_bind, "QUdpSocket.bind(QHostAddress, int) -> bool\n"
    "QUdpSocket.bind(int port=0) -> bool\n"
    "QUdpSocket.bind(QHostAddress, int, QUdpSocket.BindMode) -> bool\n"
    "QUdpSocket.bind(int, QUdpSocket.BindMode) -> bool");

extern "C" {static PyObject *meth_QUdpSocket_bind(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_bind(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        quint16 a1;
        QUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1t", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bind(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        quint16 a0 = 0;
        QUdpSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|t", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bind(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QHostAddress* a0;
        int a0State = 0;
        quint16 a1;
        QUdpSocket::BindMode* a2;
        int a2State = 0;
        QUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1tJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1, sipType_QUdpSocket_BindMode, &a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bind(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);
            sipReleaseType(a2,sipType_QUdpSocket_BindMode,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        quint16 a0;
        QUdpSocket::BindMode* a1;
        int a1State = 0;
        QUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BtJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0, sipType_QUdpSocket_BindMode, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bind(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QUdpSocket_BindMode,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_bind, doc_QUdpSocket_bind);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_hasPendingDatagrams, "QUdpSocket.hasPendingDatagrams() -> bool");

extern "C" {static PyObject *meth_QUdpSocket_hasPendingDatagrams(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_hasPendingDatagrams(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUdpSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasPendingDatagrams();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_hasPendingDatagrams, doc_QUdpSocket_hasPendingDatagrams);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_pendingDatagramSize, "QUdpSocket.pendingDatagramSize() -> int");

extern "C" {static PyObject *meth_QUdpSocket_pendingDatagramSize(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_pendingDatagramSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUdpSocket, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pendingDatagramSize();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_pendingDatagramSize, doc_QUdpSocket_pendingDatagramSize);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_readDatagram, "QUdpSocket.readDatagram(int) -> (str, QHostAddress, int)");

extern "C" {static PyObject *meth_QUdpSocket_readDatagram(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_readDatagram(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QHostAddress* a1;
        quint16 a2;
        QUdpSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bn", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            a1 = new QHostAddress();
            int sipIsErr = 0;

#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qudpsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->readDatagram(s, a0, a1, &a2);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 750 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUdpSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipBuildResult(0,"(RNt)",sipRes,a1,sipType_QHostAddress,NULL,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_readDatagram, doc_QUdpSocket_readDatagram);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_writeDatagram, "QUdpSocket.writeDatagram(str, QHostAddress, int) -> int\n"
    "QUdpSocket.writeDatagram(QByteArray, QHostAddress, int) -> int");

extern "C" {static PyObject *meth_QUdpSocket_writeDatagram(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_writeDatagram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        SIP_SSIZE_T a1;
        const QHostAddress* a2;
        int a2State = 0;
        quint16 a3;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BkJ1t", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0, &a1, sipType_QHostAddress, &a2, &a2State, &a3))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeDatagram(a0,(PY_LONG_LONG)a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a2),sipType_QHostAddress,a2State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        const QHostAddress* a1;
        int a1State = 0;
        quint16 a2;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1t", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QHostAddress, &a1, &a1State, &a2))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeDatagram(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QHostAddress *>(a1),sipType_QHostAddress,a1State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_writeDatagram, doc_QUdpSocket_writeDatagram);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_joinMulticastGroup, "QUdpSocket.joinMulticastGroup(QHostAddress) -> bool\n"
    "QUdpSocket.joinMulticastGroup(QHostAddress, QNetworkInterface) -> bool");

extern "C" {static PyObject *meth_QUdpSocket_joinMulticastGroup(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_joinMulticastGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->joinMulticastGroup(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QHostAddress* a0;
        int a0State = 0;
        const QNetworkInterface* a1;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State, sipType_QNetworkInterface, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->joinMulticastGroup(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_joinMulticastGroup, doc_QUdpSocket_joinMulticastGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_leaveMulticastGroup, "QUdpSocket.leaveMulticastGroup(QHostAddress) -> bool\n"
    "QUdpSocket.leaveMulticastGroup(QHostAddress, QNetworkInterface) -> bool");

extern "C" {static PyObject *meth_QUdpSocket_leaveMulticastGroup(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_leaveMulticastGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->leaveMulticastGroup(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QHostAddress* a0;
        int a0State = 0;
        const QNetworkInterface* a1;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State, sipType_QNetworkInterface, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->leaveMulticastGroup(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_leaveMulticastGroup, doc_QUdpSocket_leaveMulticastGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_multicastInterface, "QUdpSocket.multicastInterface() -> QNetworkInterface");

extern "C" {static PyObject *meth_QUdpSocket_multicastInterface(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_multicastInterface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUdpSocket, &sipCpp))
        {
            QNetworkInterface*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkInterface(sipCpp->multicastInterface());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_multicastInterface, doc_QUdpSocket_multicastInterface);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setMulticastInterface, "QUdpSocket.setMulticastInterface(QNetworkInterface)");

extern "C" {static PyObject *meth_QUdpSocket_setMulticastInterface(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setMulticastInterface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkInterface* a0;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QNetworkInterface, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMulticastInterface(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setMulticastInterface, doc_QUdpSocket_setMulticastInterface);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QUdpSocket(void *, const sipTypeDef *);}
static void *cast_QUdpSocket(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QUdpSocket)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractSocket)->ctd_cast((QAbstractSocket *)(QUdpSocket *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUdpSocket(void *, int);}
static void release_QUdpSocket(void *sipCppV,int)
{
    QUdpSocket *sipCpp = reinterpret_cast<QUdpSocket *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QUdpSocket(sipSimpleWrapper *);}
static void dealloc_QUdpSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQUdpSocket *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QUdpSocket(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QUdpSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUdpSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQUdpSocket *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQUdpSocket(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QUdpSocket[] = {{1, 255, 1}};


static PyMethodDef methods_QUdpSocket[] = {
    {SIP_MLNAME_CAST(sipName_bind), (PyCFunction)meth_QUdpSocket_bind, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUdpSocket_bind)},
    {SIP_MLNAME_CAST(sipName_hasPendingDatagrams), meth_QUdpSocket_hasPendingDatagrams, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_hasPendingDatagrams)},
    {SIP_MLNAME_CAST(sipName_joinMulticastGroup), meth_QUdpSocket_joinMulticastGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_joinMulticastGroup)},
    {SIP_MLNAME_CAST(sipName_leaveMulticastGroup), meth_QUdpSocket_leaveMulticastGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_leaveMulticastGroup)},
    {SIP_MLNAME_CAST(sipName_multicastInterface), meth_QUdpSocket_multicastInterface, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_multicastInterface)},
    {SIP_MLNAME_CAST(sipName_pendingDatagramSize), meth_QUdpSocket_pendingDatagramSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_pendingDatagramSize)},
    {SIP_MLNAME_CAST(sipName_readDatagram), (PyCFunction)meth_QUdpSocket_readDatagram, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUdpSocket_readDatagram)},
    {SIP_MLNAME_CAST(sipName_setMulticastInterface), meth_QUdpSocket_setMulticastInterface, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_setMulticastInterface)},
    {SIP_MLNAME_CAST(sipName_writeDatagram), meth_QUdpSocket_writeDatagram, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_writeDatagram)}
};

static sipEnumMemberDef enummembers_QUdpSocket[] = {
    {sipName_DefaultForPlatform, static_cast<int>(QUdpSocket::DefaultForPlatform), 104},
    {sipName_DontShareAddress, static_cast<int>(QUdpSocket::DontShareAddress), 104},
    {sipName_ReuseAddressHint, static_cast<int>(QUdpSocket::ReuseAddressHint), 104},
    {sipName_ShareAddress, static_cast<int>(QUdpSocket::ShareAddress), 104},
};

PyDoc_STRVAR(doc_QUdpSocket, "\1QUdpSocket(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QUdpSocket = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QUdpSocket,
        {0}
    },
    {
        sipNameNr_QUdpSocket,
        {0, 0, 1},
        9, methods_QUdpSocket,
        4, enummembers_QUdpSocket,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QUdpSocket,
    -1,
    -1,
    supers_QUdpSocket,
    0,
    init_type_QUdpSocket,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QUdpSocket,
    0,
    0,
    0,
    release_QUdpSocket,
    cast_QUdpSocket,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QUdpSocket::staticMetaObject,
    0,
    0
};
