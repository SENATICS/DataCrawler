/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qftp.sip"
#include <qftp.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qurlinfo.sip"
#include <qurlinfo.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"


class sipQFtp : public QFtp
{
public:
    sipQFtp(QObject*);
    virtual ~sipQFtp();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFtp(const sipQFtp &);
    sipQFtp &operator = (const sipQFtp &);

    char sipPyMethods[7];
};

sipQFtp::sipQFtp(QObject*a0): QFtp(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFtp::~sipQFtp()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQFtp::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QFtp);
}

int sipQFtp::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QFtp::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QFtp,_c,_id,_a);

    return _id;
}

void *sipQFtp::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QFtp, _clname)) ? this : QFtp::qt_metacast(_clname);
}

void sipQFtp::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QFtp::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFtp::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QFtp::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFtp::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QFtp::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFtp::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QFtp::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFtp::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QFtp::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQFtp::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QFtp::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQFtp::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QFtp::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QFtp_setProxy, "QFtp.setProxy(QString, int) -> int");

extern "C" {static PyObject *meth_QFtp_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QFtp_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1;
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1t", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setProxy(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_setProxy, doc_QFtp_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_connectToHost, "QFtp.connectToHost(QString, int port=21) -> int");

extern "C" {static PyObject *meth_QFtp_connectToHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFtp_connectToHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1 = 21;
        QFtp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|t", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->connectToHost(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_connectToHost, doc_QFtp_connectToHost);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_login, "QFtp.login(QString user=QString(), QString password=QString()) -> int");

extern "C" {static PyObject *meth_QFtp_login(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFtp_login(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        QFtp *sipCpp;

        static const char *sipKwdList[] = {
            sipName_user,
            sipName_password,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1J1", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->login(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_login, doc_QFtp_login);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_close, "QFtp.close() -> int");

extern "C" {static PyObject *meth_QFtp_close(PyObject *, PyObject *);}
static PyObject *meth_QFtp_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->close();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_close, doc_QFtp_close);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_setTransferMode, "QFtp.setTransferMode(QFtp.TransferMode) -> int");

extern "C" {static PyObject *meth_QFtp_setTransferMode(PyObject *, PyObject *);}
static PyObject *meth_QFtp_setTransferMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFtp::TransferMode a0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFtp, &sipCpp, sipType_QFtp_TransferMode, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setTransferMode(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_setTransferMode, doc_QFtp_setTransferMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_list, "QFtp.list(QString directory=QString()) -> int");

extern "C" {static PyObject *meth_QFtp_list(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFtp_list(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        QFtp *sipCpp;

        static const char *sipKwdList[] = {
            sipName_directory,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->list(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_list, doc_QFtp_list);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_cd, "QFtp.cd(QString) -> int");

extern "C" {static PyObject *meth_QFtp_cd(PyObject *, PyObject *);}
static PyObject *meth_QFtp_cd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cd(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_cd, doc_QFtp_cd);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_get, "QFtp.get(QString, QIODevice device=None, QFtp.TransferType type=QFtp.Binary) -> int");

extern "C" {static PyObject *meth_QFtp_get(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFtp_get(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QIODevice* a1 = 0;
        QFtp::TransferType a2 = QFtp::Binary;
        QFtp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_device,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J8E", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice, &a1, sipType_QFtp_TransferType, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_get, doc_QFtp_get);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_put, "QFtp.put(QByteArray, QString, QFtp.TransferType type=QFtp.Binary) -> int\n"
    "QFtp.put(QIODevice, QString, QFtp.TransferType type=QFtp.Binary) -> int");

extern "C" {static PyObject *meth_QFtp_put(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFtp_put(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QFtp::TransferType a2 = QFtp::Binary;
        QFtp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|E", &sipSelf, sipType_QFtp, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QFtp_TransferType, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->put(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        QIODevice* a0;
        const QString* a1;
        int a1State = 0;
        QFtp::TransferType a2 = QFtp::Binary;
        QFtp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1|E", &sipSelf, sipType_QFtp, &sipCpp, sipType_QIODevice, &a0, sipType_QString,&a1, &a1State, sipType_QFtp_TransferType, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->put(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_put, doc_QFtp_put);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_remove, "QFtp.remove(QString) -> int");

extern "C" {static PyObject *meth_QFtp_remove(PyObject *, PyObject *);}
static PyObject *meth_QFtp_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_remove, doc_QFtp_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_mkdir, "QFtp.mkdir(QString) -> int");

extern "C" {static PyObject *meth_QFtp_mkdir(PyObject *, PyObject *);}
static PyObject *meth_QFtp_mkdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mkdir(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_mkdir, doc_QFtp_mkdir);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_rmdir, "QFtp.rmdir(QString) -> int");

extern "C" {static PyObject *meth_QFtp_rmdir(PyObject *, PyObject *);}
static PyObject *meth_QFtp_rmdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rmdir(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_rmdir, doc_QFtp_rmdir);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_rename, "QFtp.rename(QString, QString) -> int");

extern "C" {static PyObject *meth_QFtp_rename(PyObject *, PyObject *);}
static PyObject *meth_QFtp_rename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rename(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_rename, doc_QFtp_rename);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_rawCommand, "QFtp.rawCommand(QString) -> int");

extern "C" {static PyObject *meth_QFtp_rawCommand(PyObject *, PyObject *);}
static PyObject *meth_QFtp_rawCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFtp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rawCommand(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_rawCommand, doc_QFtp_rawCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_bytesAvailable, "QFtp.bytesAvailable() -> int");

extern "C" {static PyObject *meth_QFtp_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QFtp_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bytesAvailable();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_bytesAvailable, doc_QFtp_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_read, "QFtp.read(int) -> str");

extern "C" {static PyObject *meth_QFtp_read(PyObject *, PyObject *);}
static PyObject *meth_QFtp_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QFtp, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 108 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qftp.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->read(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 856 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQFtp.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_read, doc_QFtp_read);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_readAll, "QFtp.readAll() -> QByteArray");

extern "C" {static PyObject *meth_QFtp_readAll(PyObject *, PyObject *);}
static PyObject *meth_QFtp_readAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->readAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_readAll, doc_QFtp_readAll);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_currentId, "QFtp.currentId() -> int");

extern "C" {static PyObject *meth_QFtp_currentId(PyObject *, PyObject *);}
static PyObject *meth_QFtp_currentId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentId();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_currentId, doc_QFtp_currentId);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_currentDevice, "QFtp.currentDevice() -> QIODevice");

extern "C" {static PyObject *meth_QFtp_currentDevice(PyObject *, PyObject *);}
static PyObject *meth_QFtp_currentDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            QIODevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentDevice();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_currentDevice, doc_QFtp_currentDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_currentCommand, "QFtp.currentCommand() -> QFtp.Command");

extern "C" {static PyObject *meth_QFtp_currentCommand(PyObject *, PyObject *);}
static PyObject *meth_QFtp_currentCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            QFtp::Command sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentCommand();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFtp_Command);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_currentCommand, doc_QFtp_currentCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_hasPendingCommands, "QFtp.hasPendingCommands() -> bool");

extern "C" {static PyObject *meth_QFtp_hasPendingCommands(PyObject *, PyObject *);}
static PyObject *meth_QFtp_hasPendingCommands(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasPendingCommands();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_hasPendingCommands, doc_QFtp_hasPendingCommands);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_clearPendingCommands, "QFtp.clearPendingCommands()");

extern "C" {static PyObject *meth_QFtp_clearPendingCommands(PyObject *, PyObject *);}
static PyObject *meth_QFtp_clearPendingCommands(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearPendingCommands();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_clearPendingCommands, doc_QFtp_clearPendingCommands);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_state, "QFtp.state() -> QFtp.State");

extern "C" {static PyObject *meth_QFtp_state(PyObject *, PyObject *);}
static PyObject *meth_QFtp_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            QFtp::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFtp_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_state, doc_QFtp_state);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_error, "QFtp.error() -> QFtp.Error");

extern "C" {static PyObject *meth_QFtp_error(PyObject *, PyObject *);}
static PyObject *meth_QFtp_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            QFtp::Error sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFtp_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_error, doc_QFtp_error);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_errorString, "QFtp.errorString() -> QString");

extern "C" {static PyObject *meth_QFtp_errorString(PyObject *, PyObject *);}
static PyObject *meth_QFtp_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_errorString, doc_QFtp_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QFtp_abort, "QFtp.abort()");

extern "C" {static PyObject *meth_QFtp_abort(PyObject *, PyObject *);}
static PyObject *meth_QFtp_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFtp, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->abort();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFtp, sipName_abort, doc_QFtp_abort);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFtp(void *, const sipTypeDef *);}
static void *cast_QFtp(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QFtp)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QFtp *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFtp(void *, int);}
static void release_QFtp(void *sipCppV,int)
{
    QFtp *sipCpp = reinterpret_cast<QFtp *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QFtp(sipSimpleWrapper *);}
static void dealloc_QFtp(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQFtp *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QFtp(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QFtp(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFtp(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFtp *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQFtp(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFtp[] = {{141, 0, 1}};


static PyMethodDef methods_QFtp[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QFtp_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_abort)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QFtp_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_cd), meth_QFtp_cd, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_cd)},
    {SIP_MLNAME_CAST(sipName_clearPendingCommands), meth_QFtp_clearPendingCommands, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_clearPendingCommands)},
    {SIP_MLNAME_CAST(sipName_close), meth_QFtp_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_close)},
    {SIP_MLNAME_CAST(sipName_connectToHost), (PyCFunction)meth_QFtp_connectToHost, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFtp_connectToHost)},
    {SIP_MLNAME_CAST(sipName_currentCommand), meth_QFtp_currentCommand, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_currentCommand)},
    {SIP_MLNAME_CAST(sipName_currentDevice), meth_QFtp_currentDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_currentDevice)},
    {SIP_MLNAME_CAST(sipName_currentId), meth_QFtp_currentId, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_currentId)},
    {SIP_MLNAME_CAST(sipName_error), meth_QFtp_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QFtp_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_errorString)},
    {SIP_MLNAME_CAST(sipName_get), (PyCFunction)meth_QFtp_get, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFtp_get)},
    {SIP_MLNAME_CAST(sipName_hasPendingCommands), meth_QFtp_hasPendingCommands, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_hasPendingCommands)},
    {SIP_MLNAME_CAST(sipName_list), (PyCFunction)meth_QFtp_list, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFtp_list)},
    {SIP_MLNAME_CAST(sipName_login), (PyCFunction)meth_QFtp_login, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFtp_login)},
    {SIP_MLNAME_CAST(sipName_mkdir), meth_QFtp_mkdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_mkdir)},
    {SIP_MLNAME_CAST(sipName_put), (PyCFunction)meth_QFtp_put, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFtp_put)},
    {SIP_MLNAME_CAST(sipName_rawCommand), meth_QFtp_rawCommand, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_rawCommand)},
    {SIP_MLNAME_CAST(sipName_read), meth_QFtp_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_read)},
    {SIP_MLNAME_CAST(sipName_readAll), meth_QFtp_readAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_readAll)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QFtp_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_remove)},
    {SIP_MLNAME_CAST(sipName_rename), meth_QFtp_rename, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_rename)},
    {SIP_MLNAME_CAST(sipName_rmdir), meth_QFtp_rmdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_rmdir)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QFtp_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_setProxy)},
    {SIP_MLNAME_CAST(sipName_setTransferMode), meth_QFtp_setTransferMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_setTransferMode)},
    {SIP_MLNAME_CAST(sipName_state), meth_QFtp_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QFtp_state)}
};

static sipEnumMemberDef enummembers_QFtp[] = {
    {sipName_Active, static_cast<int>(QFtp::Active), 12},
    {sipName_Ascii, static_cast<int>(QFtp::Ascii), 13},
    {sipName_Binary, static_cast<int>(QFtp::Binary), 13},
    {sipName_Cd, static_cast<int>(QFtp::Cd), 9},
    {sipName_Close, static_cast<int>(QFtp::Close), 9},
    {sipName_Closing, static_cast<int>(QFtp::Closing), 11},
    {sipName_ConnectToHost, static_cast<int>(QFtp::ConnectToHost), 9},
    {sipName_Connected, static_cast<int>(QFtp::Connected), 11},
    {sipName_Connecting, static_cast<int>(QFtp::Connecting), 11},
    {sipName_ConnectionRefused, static_cast<int>(QFtp::ConnectionRefused), 10},
    {sipName_Get, static_cast<int>(QFtp::Get), 9},
    {sipName_HostLookup, static_cast<int>(QFtp::HostLookup), 11},
    {sipName_HostNotFound, static_cast<int>(QFtp::HostNotFound), 10},
    {sipName_List, static_cast<int>(QFtp::List), 9},
    {sipName_LoggedIn, static_cast<int>(QFtp::LoggedIn), 11},
    {sipName_Login, static_cast<int>(QFtp::Login), 9},
    {sipName_Mkdir, static_cast<int>(QFtp::Mkdir), 9},
    {sipName_NoError, static_cast<int>(QFtp::NoError), 10},
    {sipName_None_, static_cast<int>(QFtp::None), 9},
    {sipName_NotConnected, static_cast<int>(QFtp::NotConnected), 10},
    {sipName_Passive, static_cast<int>(QFtp::Passive), 12},
    {sipName_Put, static_cast<int>(QFtp::Put), 9},
    {sipName_RawCommand, static_cast<int>(QFtp::RawCommand), 9},
    {sipName_Remove, static_cast<int>(QFtp::Remove), 9},
    {sipName_Rename, static_cast<int>(QFtp::Rename), 9},
    {sipName_Rmdir, static_cast<int>(QFtp::Rmdir), 9},
    {sipName_SetProxy, static_cast<int>(QFtp::SetProxy), 9},
    {sipName_SetTransferMode, static_cast<int>(QFtp::SetTransferMode), 9},
    {sipName_Unconnected, static_cast<int>(QFtp::Unconnected), 11},
    {sipName_UnknownError, static_cast<int>(QFtp::UnknownError), 10},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QFtp[] = {
    {"done(bool)", "\1QFtp.done[bool]", 0, 0},
    {"commandFinished(int,bool)", "\1QFtp.commandFinished[int, bool]", 0, 0},
    {"commandStarted(int)", "\1QFtp.commandStarted[int]", 0, 0},
    {"rawCommandReply(int,QString)", "\1QFtp.rawCommandReply[int, QString]", 0, 0},
    {"dataTransferProgress(qint64,qint64)", "\1QFtp.dataTransferProgress[int, int]", 0, 0},
    {"readyRead()", "\1QFtp.readyRead", 0, 0},
    {"listInfo(QUrlInfo)", "\1QFtp.listInfo[QUrlInfo]", 0, 0},
    {"stateChanged(int)", "\1QFtp.stateChanged[int]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QFtp, "\1QFtp(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QFtp = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QFtp,
        {0}
    },
    {
        sipNameNr_QFtp,
        {0, 0, 1},
        26, methods_QFtp,
        30, enummembers_QFtp,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QFtp,
    -1,
    -1,
    supers_QFtp,
    0,
    init_type_QFtp,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFtp,
    0,
    0,
    0,
    release_QFtp,
    cast_QFtp,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QFtp::staticMetaObject,
    0,
    signals_QFtp,
};
