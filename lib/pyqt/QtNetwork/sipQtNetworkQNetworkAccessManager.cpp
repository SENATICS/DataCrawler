/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 190 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 186 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 57 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qhttpmultipart.sip"
#include <qhttpmultipart.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkcookiejar.sip"
#include <qnetworkcookiejar.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"


class sipQNetworkAccessManager : public QNetworkAccessManager
{
public:
    sipQNetworkAccessManager(QObject*);
    virtual ~sipQNetworkAccessManager();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QNetworkReply* createRequest(QNetworkAccessManager::Operation,const QNetworkRequest&,QIODevice*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkAccessManager(const sipQNetworkAccessManager &);
    sipQNetworkAccessManager &operator = (const sipQNetworkAccessManager &);

    char sipPyMethods[8];
};

sipQNetworkAccessManager::sipQNetworkAccessManager(QObject*a0): QNetworkAccessManager(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkAccessManager::~sipQNetworkAccessManager()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkAccessManager::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkAccessManager);
}

int sipQNetworkAccessManager::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkAccessManager::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkAccessManager,_c,_id,_a);

    return _id;
}

void *sipQNetworkAccessManager::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkAccessManager, _clname)) ? this : QNetworkAccessManager::qt_metacast(_clname);
}

void sipQNetworkAccessManager::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QNetworkAccessManager::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QNetworkAccessManager::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QNetworkAccessManager::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QNetworkAccessManager::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QNetworkAccessManager::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQNetworkAccessManager::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QNetworkAccessManager::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkAccessManager::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QNetworkAccessManager::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QNetworkReply* sipQNetworkAccessManager::createRequest(QNetworkAccessManager::Operation a0,const QNetworkRequest& a1,QIODevice*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_createRequest);

    if (!sipMeth)
        return QNetworkAccessManager::createRequest(a0,a1,a2);

    extern QNetworkReply* sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QNetworkAccessManager::Operation,const QNetworkRequest&,QIODevice*);

    return sipVH_QtNetwork_13(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QNetworkAccessManager_proxy, "QNetworkAccessManager.proxy() -> QNetworkProxy");

extern "C" {static PyObject *meth_QNetworkAccessManager_proxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkProxy*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkProxy(sipCpp->proxy());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_proxy, doc_QNetworkAccessManager_proxy);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setProxy, "QNetworkAccessManager.setProxy(QNetworkProxy)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkProxy* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProxy(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setProxy, doc_QNetworkAccessManager_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_cookieJar, "QNetworkAccessManager.cookieJar() -> QNetworkCookieJar");

extern "C" {static PyObject *meth_QNetworkAccessManager_cookieJar(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_cookieJar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkCookieJar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cookieJar();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkCookieJar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_cookieJar, doc_QNetworkAccessManager_cookieJar);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setCookieJar, "QNetworkAccessManager.setCookieJar(QNetworkCookieJar)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setCookieJar(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setCookieJar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkCookieJar* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkCookieJar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCookieJar(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setCookieJar, doc_QNetworkAccessManager_setCookieJar);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_head, "QNetworkAccessManager.head(QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_head(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_head(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->head(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_head, doc_QNetworkAccessManager_head);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_get, "QNetworkAccessManager.get(QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_get(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_get, doc_QNetworkAccessManager_get);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_post, "QNetworkAccessManager.post(QNetworkRequest, QIODevice) -> QNetworkReply\n"
    "QNetworkAccessManager.post(QNetworkRequest, QByteArray) -> QNetworkReply\n"
    "QNetworkAccessManager.post(QNetworkRequest, QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_post(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_post(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QIODevice* a1;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QIODevice, &a1))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->post(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const QNetworkRequest* a0;
        const QByteArray* a1;
        int a1State = 0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->post(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const QNetworkRequest* a0;
        QHttpMultiPart* a1;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QHttpMultiPart, &a1))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->post(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_post, doc_QNetworkAccessManager_post);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_put, "QNetworkAccessManager.put(QNetworkRequest, QIODevice) -> QNetworkReply\n"
    "QNetworkAccessManager.put(QNetworkRequest, QByteArray) -> QNetworkReply\n"
    "QNetworkAccessManager.put(QNetworkRequest, QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_put(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_put(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QIODevice* a1;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QIODevice, &a1))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->put(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const QNetworkRequest* a0;
        const QByteArray* a1;
        int a1State = 0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->put(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const QNetworkRequest* a0;
        QHttpMultiPart* a1;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QHttpMultiPart, &a1))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->put(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_put, doc_QNetworkAccessManager_put);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_createRequest, "QNetworkAccessManager.createRequest(QNetworkAccessManager.Operation, QNetworkRequest, QIODevice device=None) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_createRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_createRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkAccessManager::Operation a0;
        const QNetworkRequest* a1;
        QIODevice* a2 = 0;
        QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_device,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pEJ9|J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0, sipType_QNetworkRequest, &a1, sipType_QIODevice, &a2))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QNetworkAccessManager::createRequest(a0,*a1,a2) : sipCpp->createRequest(a0,*a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_createRequest, doc_QNetworkAccessManager_createRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_proxyFactory, "QNetworkAccessManager.proxyFactory() -> QNetworkProxyFactory");

extern "C" {static PyObject *meth_QNetworkAccessManager_proxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_proxyFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkProxyFactory*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->proxyFactory();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkProxyFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_proxyFactory, doc_QNetworkAccessManager_proxyFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setProxyFactory, "QNetworkAccessManager.setProxyFactory(QNetworkProxyFactory)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setProxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setProxyFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkProxyFactory* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkProxyFactory, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProxyFactory(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setProxyFactory, doc_QNetworkAccessManager_setProxyFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_cache, "QNetworkAccessManager.cache() -> QAbstractNetworkCache");

extern "C" {static PyObject *meth_QNetworkAccessManager_cache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_cache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QAbstractNetworkCache*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cache();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractNetworkCache,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_cache, doc_QNetworkAccessManager_cache);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setCache, "QNetworkAccessManager.setCache(QAbstractNetworkCache)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setCache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractNetworkCache* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QAbstractNetworkCache, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCache(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setCache, doc_QNetworkAccessManager_setCache);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_deleteResource, "QNetworkAccessManager.deleteResource(QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_deleteResource(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_deleteResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->deleteResource(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_deleteResource, doc_QNetworkAccessManager_deleteResource);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_sendCustomRequest, "QNetworkAccessManager.sendCustomRequest(QNetworkRequest, QByteArray, QIODevice data=None) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_sendCustomRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_sendCustomRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        const QByteArray* a1;
        int a1State = 0;
        QIODevice* a2 = 0;
        QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State, sipType_QIODevice, &a2))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sendCustomRequest(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_sendCustomRequest, doc_QNetworkAccessManager_sendCustomRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setConfiguration, "QNetworkAccessManager.setConfiguration(QNetworkConfiguration)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkConfiguration* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkConfiguration, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setConfiguration(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setConfiguration, doc_QNetworkAccessManager_setConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_configuration, "QNetworkAccessManager.configuration() -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkAccessManager_configuration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkConfiguration*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkConfiguration(sipCpp->configuration());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_configuration, doc_QNetworkAccessManager_configuration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_activeConfiguration, "QNetworkAccessManager.activeConfiguration() -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkAccessManager_activeConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_activeConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkConfiguration*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkConfiguration(sipCpp->activeConfiguration());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_activeConfiguration, doc_QNetworkAccessManager_activeConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setNetworkAccessible, "QNetworkAccessManager.setNetworkAccessible(QNetworkAccessManager.NetworkAccessibility)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setNetworkAccessible(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setNetworkAccessible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager::NetworkAccessibility a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_NetworkAccessibility, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNetworkAccessible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setNetworkAccessible, doc_QNetworkAccessManager_setNetworkAccessible);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_networkAccessible, "QNetworkAccessManager.networkAccessible() -> QNetworkAccessManager.NetworkAccessibility");

extern "C" {static PyObject *meth_QNetworkAccessManager_networkAccessible(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_networkAccessible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkAccessManager::NetworkAccessibility sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->networkAccessible();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QNetworkAccessManager_NetworkAccessibility);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_networkAccessible, doc_QNetworkAccessManager_networkAccessible);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkAccessManager(void *, const sipTypeDef *);}
static void *cast_QNetworkAccessManager(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNetworkAccessManager)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QNetworkAccessManager *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkAccessManager(void *, int);}
static void release_QNetworkAccessManager(void *sipCppV,int)
{
    QNetworkAccessManager *sipCpp = reinterpret_cast<QNetworkAccessManager *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QNetworkAccessManager(sipSimpleWrapper *);}
static void dealloc_QNetworkAccessManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkAccessManager *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkAccessManager(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QNetworkAccessManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkAccessManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkAccessManager *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQNetworkAccessManager(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkAccessManager[] = {{141, 0, 1}};


static PyMethodDef methods_QNetworkAccessManager[] = {
    {SIP_MLNAME_CAST(sipName_activeConfiguration), meth_QNetworkAccessManager_activeConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_activeConfiguration)},
    {SIP_MLNAME_CAST(sipName_cache), meth_QNetworkAccessManager_cache, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_cache)},
    {SIP_MLNAME_CAST(sipName_configuration), meth_QNetworkAccessManager_configuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_configuration)},
    {SIP_MLNAME_CAST(sipName_cookieJar), meth_QNetworkAccessManager_cookieJar, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_cookieJar)},
    {SIP_MLNAME_CAST(sipName_createRequest), (PyCFunction)meth_QNetworkAccessManager_createRequest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_createRequest)},
    {SIP_MLNAME_CAST(sipName_deleteResource), meth_QNetworkAccessManager_deleteResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_deleteResource)},
    {SIP_MLNAME_CAST(sipName_get), meth_QNetworkAccessManager_get, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_get)},
    {SIP_MLNAME_CAST(sipName_head), meth_QNetworkAccessManager_head, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_head)},
    {SIP_MLNAME_CAST(sipName_networkAccessible), meth_QNetworkAccessManager_networkAccessible, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_networkAccessible)},
    {SIP_MLNAME_CAST(sipName_post), meth_QNetworkAccessManager_post, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_post)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QNetworkAccessManager_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_proxy)},
    {SIP_MLNAME_CAST(sipName_proxyFactory), meth_QNetworkAccessManager_proxyFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_proxyFactory)},
    {SIP_MLNAME_CAST(sipName_put), meth_QNetworkAccessManager_put, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_put)},
    {SIP_MLNAME_CAST(sipName_sendCustomRequest), (PyCFunction)meth_QNetworkAccessManager_sendCustomRequest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_sendCustomRequest)},
    {SIP_MLNAME_CAST(sipName_setCache), meth_QNetworkAccessManager_setCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setCache)},
    {SIP_MLNAME_CAST(sipName_setConfiguration), meth_QNetworkAccessManager_setConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setConfiguration)},
    {SIP_MLNAME_CAST(sipName_setCookieJar), meth_QNetworkAccessManager_setCookieJar, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setCookieJar)},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessible), meth_QNetworkAccessManager_setNetworkAccessible, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setNetworkAccessible)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QNetworkAccessManager_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setProxy)},
    {SIP_MLNAME_CAST(sipName_setProxyFactory), meth_QNetworkAccessManager_setProxyFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setProxyFactory)}
};

static sipEnumMemberDef enummembers_QNetworkAccessManager[] = {
    {sipName_Accessible, static_cast<int>(QNetworkAccessManager::Accessible), 44},
    {sipName_CustomOperation, static_cast<int>(QNetworkAccessManager::CustomOperation), 45},
    {sipName_DeleteOperation, static_cast<int>(QNetworkAccessManager::DeleteOperation), 45},
    {sipName_GetOperation, static_cast<int>(QNetworkAccessManager::GetOperation), 45},
    {sipName_HeadOperation, static_cast<int>(QNetworkAccessManager::HeadOperation), 45},
    {sipName_NotAccessible, static_cast<int>(QNetworkAccessManager::NotAccessible), 44},
    {sipName_PostOperation, static_cast<int>(QNetworkAccessManager::PostOperation), 45},
    {sipName_PutOperation, static_cast<int>(QNetworkAccessManager::PutOperation), 45},
    {sipName_UnknownAccessibility, static_cast<int>(QNetworkAccessManager::UnknownAccessibility), 44},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QNetworkAccessManager[] = {
    {"networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility)", "\1QNetworkAccessManager.networkAccessibleChanged[QNetworkAccessManager.NetworkAccessibility]", 0, 0},
    {"sslErrors(QNetworkReply*,QList<QSslError>)", "\1QNetworkAccessManager.sslErrors[QNetworkReply, list-of-QSslError]", 0, 0},
    {"finished(QNetworkReply*)", "\1QNetworkAccessManager.finished[QNetworkReply]", 0, 0},
    {"authenticationRequired(QNetworkReply*,QAuthenticator*)", "\1QNetworkAccessManager.authenticationRequired[QNetworkReply, QAuthenticator]", 0, 0},
    {"proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)", "\1QNetworkAccessManager.proxyAuthenticationRequired[QNetworkProxy, QAuthenticator]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QNetworkAccessManager, "\1QNetworkAccessManager(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QNetworkAccessManager = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QNetworkAccessManager,
        {0}
    },
    {
        sipNameNr_QNetworkAccessManager,
        {0, 0, 1},
        20, methods_QNetworkAccessManager,
        9, enummembers_QNetworkAccessManager,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNetworkAccessManager,
    -1,
    -1,
    supers_QNetworkAccessManager,
    0,
    init_type_QNetworkAccessManager,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkAccessManager,
    0,
    0,
    0,
    release_QNetworkAccessManager,
    cast_QNetworkAccessManager,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QNetworkAccessManager::staticMetaObject,
    0,
    signals_QNetworkAccessManager,
};
