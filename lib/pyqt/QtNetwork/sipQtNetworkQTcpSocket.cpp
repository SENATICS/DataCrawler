/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qtcpsocket.sip"
#include <qtcpsocket.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpSocket.cpp"


class sipQTcpSocket : public QTcpSocket
{
public:
    sipQTcpSocket(QObject*);
    virtual ~sipQTcpSocket();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool reset();
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    bool open(QIODevice::OpenMode);
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readLineData(char*,qint64);
    qint64 readData(char*,qint64);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool atEnd() const;
    bool isSequential() const;
    void close();
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTcpSocket(const sipQTcpSocket &);
    sipQTcpSocket &operator = (const sipQTcpSocket &);

    char sipPyMethods[23];
};

sipQTcpSocket::sipQTcpSocket(QObject*a0): QTcpSocket(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTcpSocket::~sipQTcpSocket()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTcpSocket::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QTcpSocket);
}

int sipQTcpSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTcpSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QTcpSocket,_c,_id,_a);

    return _id;
}

void *sipQTcpSocket::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QTcpSocket, _clname)) ? this : QTcpSocket::qt_metacast(_clname);
}

void sipQTcpSocket::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTcpSocket::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTcpSocket::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTcpSocket::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTcpSocket::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTcpSocket::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTcpSocket::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTcpSocket::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTcpSocket::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTcpSocket::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTcpSocket::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTcpSocket::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTcpSocket::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTcpSocket::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTcpSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QTcpSocket::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTcpSocket::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QTcpSocket::seek(a0);

    typedef bool (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return ((sipVH_QtCore_32)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[32]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQTcpSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QTcpSocket::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQTcpSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QTcpSocket::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTcpSocket::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QTcpSocket::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[15]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQTcpSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QTcpSocket::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[20]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQTcpSocket::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QTcpSocket::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQTcpSocket::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QTcpSocket::readData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTcpSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QTcpSocket::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTcpSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QTcpSocket::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTcpSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QTcpSocket::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTcpSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QTcpSocket::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTcpSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QTcpSocket::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTcpSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QTcpSocket::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQTcpSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QTcpSocket::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQTcpSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QTcpSocket::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTcpSocket(void *, const sipTypeDef *);}
static void *cast_QTcpSocket(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTcpSocket)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractSocket)->ctd_cast((QAbstractSocket *)(QTcpSocket *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTcpSocket(void *, int);}
static void release_QTcpSocket(void *sipCppV,int)
{
    QTcpSocket *sipCpp = reinterpret_cast<QTcpSocket *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTcpSocket(sipSimpleWrapper *);}
static void dealloc_QTcpSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTcpSocket *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTcpSocket(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTcpSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTcpSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTcpSocket *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTcpSocket(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTcpSocket[] = {{1, 255, 1}};

PyDoc_STRVAR(doc_QTcpSocket, "\1QTcpSocket(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QTcpSocket = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTcpSocket,
        {0}
    },
    {
        sipNameNr_QTcpSocket,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTcpSocket,
    -1,
    -1,
    supers_QTcpSocket,
    0,
    init_type_QTcpSocket,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTcpSocket,
    0,
    0,
    0,
    release_QTcpSocket,
    cast_QTcpSocket,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTcpSocket::staticMetaObject,
    0,
    0
};
