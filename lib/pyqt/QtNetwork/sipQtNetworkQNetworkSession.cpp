/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworksession.sip"
#include <qnetworksession.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 75 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkSession.cpp"


class sipQNetworkSession : public QNetworkSession
{
public:
    sipQNetworkSession(const QNetworkConfiguration&,QObject*);
    virtual ~sipQNetworkSession();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void disconnectNotify(const char*);
    void connectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkSession(const sipQNetworkSession &);
    sipQNetworkSession &operator = (const sipQNetworkSession &);

    char sipPyMethods[7];
};

sipQNetworkSession::sipQNetworkSession(const QNetworkConfiguration& a0,QObject*a1): QNetworkSession(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkSession::~sipQNetworkSession()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkSession::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkSession);
}

int sipQNetworkSession::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkSession::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkSession,_c,_id,_a);

    return _id;
}

void *sipQNetworkSession::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkSession, _clname)) ? this : QNetworkSession::qt_metacast(_clname);
}

void sipQNetworkSession::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QNetworkSession::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkSession::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QNetworkSession::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkSession::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QNetworkSession::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQNetworkSession::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QNetworkSession::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkSession::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QNetworkSession::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkSession::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QNetworkSession::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkSession::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QNetworkSession::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNetworkSession_isOpen, "QNetworkSession.isOpen() -> bool");

extern "C" {static PyObject *meth_QNetworkSession_isOpen(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_isOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isOpen();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_isOpen, doc_QNetworkSession_isOpen);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_configuration, "QNetworkSession.configuration() -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkSession_configuration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QNetworkConfiguration*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkConfiguration(sipCpp->configuration());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_configuration, doc_QNetworkSession_configuration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_interface, "QNetworkSession.interface() -> QNetworkInterface");

extern "C" {static PyObject *meth_QNetworkSession_interface(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_interface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QNetworkInterface*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkInterface(sipCpp->interface());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_interface, doc_QNetworkSession_interface);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_state, "QNetworkSession.state() -> QNetworkSession.State");

extern "C" {static PyObject *meth_QNetworkSession_state(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QNetworkSession::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QNetworkSession_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_state, doc_QNetworkSession_state);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_error, "QNetworkSession.error() -> QNetworkSession.SessionError");

extern "C" {static PyObject *meth_QNetworkSession_error(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QNetworkSession::SessionError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QNetworkSession_SessionError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_error, doc_QNetworkSession_error);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_errorString, "QNetworkSession.errorString() -> QString");

extern "C" {static PyObject *meth_QNetworkSession_errorString(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_errorString, doc_QNetworkSession_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_sessionProperty, "QNetworkSession.sessionProperty(QString) -> QVariant");

extern "C" {static PyObject *meth_QNetworkSession_sessionProperty(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_sessionProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkSession, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->sessionProperty(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_sessionProperty, doc_QNetworkSession_sessionProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_setSessionProperty, "QNetworkSession.setSessionProperty(QString, QVariant)");

extern "C" {static PyObject *meth_QNetworkSession_setSessionProperty(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_setSessionProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant* a1;
        int a1State = 0;
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QNetworkSession, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSessionProperty(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_setSessionProperty, doc_QNetworkSession_setSessionProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_bytesWritten, "QNetworkSession.bytesWritten() -> int");

extern "C" {static PyObject *meth_QNetworkSession_bytesWritten(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_bytesWritten(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            quint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bytesWritten();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_bytesWritten, doc_QNetworkSession_bytesWritten);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_bytesReceived, "QNetworkSession.bytesReceived() -> int");

extern "C" {static PyObject *meth_QNetworkSession_bytesReceived(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_bytesReceived(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            quint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bytesReceived();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_bytesReceived, doc_QNetworkSession_bytesReceived);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_activeTime, "QNetworkSession.activeTime() -> int");

extern "C" {static PyObject *meth_QNetworkSession_activeTime(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_activeTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            quint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->activeTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_activeTime, doc_QNetworkSession_activeTime);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_waitForOpened, "QNetworkSession.waitForOpened(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QNetworkSession_waitForOpened(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_waitForOpened(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QNetworkSession *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QNetworkSession, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForOpened(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_waitForOpened, doc_QNetworkSession_waitForOpened);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_open, "QNetworkSession.open()");

extern "C" {static PyObject *meth_QNetworkSession_open(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_open, doc_QNetworkSession_open);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_close, "QNetworkSession.close()");

extern "C" {static PyObject *meth_QNetworkSession_close(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->close();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_close, doc_QNetworkSession_close);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_stop, "QNetworkSession.stop()");

extern "C" {static PyObject *meth_QNetworkSession_stop(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_stop, doc_QNetworkSession_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_migrate, "QNetworkSession.migrate()");

extern "C" {static PyObject *meth_QNetworkSession_migrate(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_migrate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->migrate();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_migrate, doc_QNetworkSession_migrate);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_ignore, "QNetworkSession.ignore()");

extern "C" {static PyObject *meth_QNetworkSession_ignore(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_ignore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignore();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_ignore, doc_QNetworkSession_ignore);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_accept, "QNetworkSession.accept()");

extern "C" {static PyObject *meth_QNetworkSession_accept(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->accept();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_accept, doc_QNetworkSession_accept);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_reject, "QNetworkSession.reject()");

extern "C" {static PyObject *meth_QNetworkSession_reject(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_reject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reject();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_reject, doc_QNetworkSession_reject);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_connectNotify, "QNetworkSession.connectNotify(SIGNAL())");

extern "C" {static PyObject *meth_QNetworkSession_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char* a0;
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pG", &sipSelf, sipType_QNetworkSession, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkSession::connectNotify(a0) : sipCpp->connectNotify(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_connectNotify, doc_QNetworkSession_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_disconnectNotify, "QNetworkSession.disconnectNotify(SIGNAL())");

extern "C" {static PyObject *meth_QNetworkSession_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char* a0;
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pG", &sipSelf, sipType_QNetworkSession, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkSession::disconnectNotify(a0) : sipCpp->disconnectNotify(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_disconnectNotify, doc_QNetworkSession_disconnectNotify);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkSession(void *, const sipTypeDef *);}
static void *cast_QNetworkSession(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNetworkSession)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QNetworkSession *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkSession(void *, int);}
static void release_QNetworkSession(void *sipCppV,int)
{
    QNetworkSession *sipCpp = reinterpret_cast<QNetworkSession *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QNetworkSession(sipSimpleWrapper *);}
static void dealloc_QNetworkSession(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkSession *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkSession(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QNetworkSession(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkSession(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkSession *sipCpp = 0;

    {
        const QNetworkConfiguration* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QNetworkConfiguration, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQNetworkSession(*a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkSession[] = {{141, 0, 1}};


static PyMethodDef methods_QNetworkSession[] = {
    {SIP_MLNAME_CAST(sipName_accept), meth_QNetworkSession_accept, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_accept)},
    {SIP_MLNAME_CAST(sipName_activeTime), meth_QNetworkSession_activeTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_activeTime)},
    {SIP_MLNAME_CAST(sipName_bytesReceived), meth_QNetworkSession_bytesReceived, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_bytesReceived)},
    {SIP_MLNAME_CAST(sipName_bytesWritten), meth_QNetworkSession_bytesWritten, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_bytesWritten)},
    {SIP_MLNAME_CAST(sipName_close), meth_QNetworkSession_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_close)},
    {SIP_MLNAME_CAST(sipName_configuration), meth_QNetworkSession_configuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_configuration)},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QNetworkSession_connectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_connectNotify)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QNetworkSession_disconnectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_disconnectNotify)},
    {SIP_MLNAME_CAST(sipName_error), meth_QNetworkSession_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QNetworkSession_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_errorString)},
    {SIP_MLNAME_CAST(sipName_ignore), meth_QNetworkSession_ignore, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_ignore)},
    {SIP_MLNAME_CAST(sipName_interface), meth_QNetworkSession_interface, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_interface)},
    {SIP_MLNAME_CAST(sipName_isOpen), meth_QNetworkSession_isOpen, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_isOpen)},
    {SIP_MLNAME_CAST(sipName_migrate), meth_QNetworkSession_migrate, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_migrate)},
    {SIP_MLNAME_CAST(sipName_open), meth_QNetworkSession_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_open)},
    {SIP_MLNAME_CAST(sipName_reject), meth_QNetworkSession_reject, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_reject)},
    {SIP_MLNAME_CAST(sipName_sessionProperty), meth_QNetworkSession_sessionProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_sessionProperty)},
    {SIP_MLNAME_CAST(sipName_setSessionProperty), meth_QNetworkSession_setSessionProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_setSessionProperty)},
    {SIP_MLNAME_CAST(sipName_state), meth_QNetworkSession_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QNetworkSession_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_stop)},
    {SIP_MLNAME_CAST(sipName_waitForOpened), (PyCFunction)meth_QNetworkSession_waitForOpened, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkSession_waitForOpened)}
};

static sipEnumMemberDef enummembers_QNetworkSession[] = {
    {sipName_Closing, static_cast<int>(QNetworkSession::Closing), 81},
    {sipName_Connected, static_cast<int>(QNetworkSession::Connected), 81},
    {sipName_Connecting, static_cast<int>(QNetworkSession::Connecting), 81},
    {sipName_Disconnected, static_cast<int>(QNetworkSession::Disconnected), 81},
    {sipName_Invalid, static_cast<int>(QNetworkSession::Invalid), 81},
    {sipName_InvalidConfigurationError, static_cast<int>(QNetworkSession::InvalidConfigurationError), 80},
    {sipName_NotAvailable, static_cast<int>(QNetworkSession::NotAvailable), 81},
    {sipName_OperationNotSupportedError, static_cast<int>(QNetworkSession::OperationNotSupportedError), 80},
    {sipName_Roaming, static_cast<int>(QNetworkSession::Roaming), 81},
    {sipName_RoamingError, static_cast<int>(QNetworkSession::RoamingError), 80},
    {sipName_SessionAbortedError, static_cast<int>(QNetworkSession::SessionAbortedError), 80},
    {sipName_UnknownSessionError, static_cast<int>(QNetworkSession::UnknownSessionError), 80},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QNetworkSession[] = {
    {"newConfigurationActivated()", "\1QNetworkSession.newConfigurationActivated", 0, 0},
    {"preferredConfigurationChanged(QNetworkConfiguration,bool)", "\1QNetworkSession.preferredConfigurationChanged[QNetworkConfiguration, bool]", 0, 0},
    {"closed()", "\1QNetworkSession.closed", 0, 0},
    {"opened()", "\1QNetworkSession.opened", 0, 0},
    {"stateChanged(QNetworkSession::State)", "\1QNetworkSession.stateChanged[QNetworkSession.State]", 0, 0},
    {"error(QNetworkSession::SessionError)", "\1QNetworkSession.error[QNetworkSession.SessionError]", &methods_QNetworkSession[8], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QNetworkSession, "\1QNetworkSession(QNetworkConfiguration, QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QNetworkSession = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QNetworkSession,
        {0}
    },
    {
        sipNameNr_QNetworkSession,
        {0, 0, 1},
        21, methods_QNetworkSession,
        12, enummembers_QNetworkSession,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNetworkSession,
    -1,
    -1,
    supers_QNetworkSession,
    0,
    init_type_QNetworkSession,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkSession,
    0,
    0,
    0,
    release_QNetworkSession,
    cast_QNetworkSession,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QNetworkSession::staticMetaObject,
    0,
    signals_QNetworkSession,
};
