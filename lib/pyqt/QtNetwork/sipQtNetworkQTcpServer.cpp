/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qtcpserver.sip"
#include <qtcpserver.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qtcpsocket.sip"
#include <qtcpsocket.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQTcpServer.cpp"


class sipQTcpServer : public QTcpServer
{
public:
    sipQTcpServer(QObject*);
    virtual ~sipQTcpServer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void incomingConnection(int);
    QTcpSocket* nextPendingConnection();
    bool hasPendingConnections() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTcpServer(const sipQTcpServer &);
    sipQTcpServer &operator = (const sipQTcpServer &);

    char sipPyMethods[10];
};

sipQTcpServer::sipQTcpServer(QObject*a0): QTcpServer(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTcpServer::~sipQTcpServer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTcpServer::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QTcpServer);
}

int sipQTcpServer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTcpServer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QTcpServer,_c,_id,_a);

    return _id;
}

void *sipQTcpServer::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QTcpServer, _clname)) ? this : QTcpServer::qt_metacast(_clname);
}

void sipQTcpServer::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTcpServer::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTcpServer::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTcpServer::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTcpServer::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTcpServer::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTcpServer::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTcpServer::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTcpServer::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTcpServer::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTcpServer::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTcpServer::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTcpServer::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTcpServer::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTcpServer::incomingConnection(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_incomingConnection);

    if (!sipMeth)
    {
        QTcpServer::incomingConnection(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QTcpSocket* sipQTcpServer::nextPendingConnection()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nextPendingConnection);

    if (!sipMeth)
        return QTcpServer::nextPendingConnection();

    extern QTcpSocket* sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTcpServer::hasPendingConnections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasPendingConnections);

    if (!sipMeth)
        return QTcpServer::hasPendingConnections();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QTcpServer_listen, "QTcpServer.listen(QHostAddress address=QHostAddress.Any, int port=0) -> bool");

extern "C" {static PyObject *meth_QTcpServer_listen(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_listen(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress& a0def = QHostAddress::Any;
        const QHostAddress* a0 = &a0def;
        int a0State = 0;
        quint16 a1 = 0;
        QTcpServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_address,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1t", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->listen(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_listen, doc_QTcpServer_listen);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_close, "QTcpServer.close()");

extern "C" {static PyObject *meth_QTcpServer_close(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->close();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_close, doc_QTcpServer_close);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_isListening, "QTcpServer.isListening() -> bool");

extern "C" {static PyObject *meth_QTcpServer_isListening(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_isListening(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isListening();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_isListening, doc_QTcpServer_isListening);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_setMaxPendingConnections, "QTcpServer.setMaxPendingConnections(int)");

extern "C" {static PyObject *meth_QTcpServer_setMaxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setMaxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTcpServer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaxPendingConnections(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_setMaxPendingConnections, doc_QTcpServer_setMaxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_maxPendingConnections, "QTcpServer.maxPendingConnections() -> int");

extern "C" {static PyObject *meth_QTcpServer_maxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_maxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maxPendingConnections();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_maxPendingConnections, doc_QTcpServer_maxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_serverPort, "QTcpServer.serverPort() -> int");

extern "C" {static PyObject *meth_QTcpServer_serverPort(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            quint16 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->serverPort();
            Py_END_ALLOW_THREADS

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_serverPort, doc_QTcpServer_serverPort);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_serverAddress, "QTcpServer.serverAddress() -> QHostAddress");

extern "C" {static PyObject *meth_QTcpServer_serverAddress(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QHostAddress*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QHostAddress(sipCpp->serverAddress());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_serverAddress, doc_QTcpServer_serverAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_socketDescriptor, "QTcpServer.socketDescriptor() -> int");

extern "C" {static PyObject *meth_QTcpServer_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->socketDescriptor();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_socketDescriptor, doc_QTcpServer_socketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_setSocketDescriptor, "QTcpServer.setSocketDescriptor(int) -> bool");

extern "C" {static PyObject *meth_QTcpServer_setSocketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTcpServer, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setSocketDescriptor(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_setSocketDescriptor, doc_QTcpServer_setSocketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_waitForNewConnection, "QTcpServer.waitForNewConnection(int msecs=0) -> (bool, bool)");

extern "C" {static PyObject *meth_QTcpServer_waitForNewConnection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_waitForNewConnection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        bool a1;
        QTcpServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QTcpServer, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForNewConnection(a0,&a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_waitForNewConnection, doc_QTcpServer_waitForNewConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_hasPendingConnections, "QTcpServer.hasPendingConnections() -> bool");

extern "C" {static PyObject *meth_QTcpServer_hasPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_hasPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTcpServer::hasPendingConnections() : sipCpp->hasPendingConnections());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_hasPendingConnections, doc_QTcpServer_hasPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_nextPendingConnection, "QTcpServer.nextPendingConnection() -> QTcpSocket");

extern "C" {static PyObject *meth_QTcpServer_nextPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_nextPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QTcpSocket*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTcpServer::nextPendingConnection() : sipCpp->nextPendingConnection());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTcpSocket,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_nextPendingConnection, doc_QTcpServer_nextPendingConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_serverError, "QTcpServer.serverError() -> QAbstractSocket.SocketError");

extern "C" {static PyObject *meth_QTcpServer_serverError(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QAbstractSocket::SocketError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->serverError();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_serverError, doc_QTcpServer_serverError);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_errorString, "QTcpServer.errorString() -> QString");

extern "C" {static PyObject *meth_QTcpServer_errorString(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_errorString, doc_QTcpServer_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_setProxy, "QTcpServer.setProxy(QNetworkProxy)");

extern "C" {static PyObject *meth_QTcpServer_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkProxy* a0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProxy(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_setProxy, doc_QTcpServer_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_proxy, "QTcpServer.proxy() -> QNetworkProxy");

extern "C" {static PyObject *meth_QTcpServer_proxy(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QNetworkProxy*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkProxy(sipCpp->proxy());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_proxy, doc_QTcpServer_proxy);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_incomingConnection, "QTcpServer.incomingConnection(int)");

extern "C" {static PyObject *meth_QTcpServer_incomingConnection(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_incomingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTcpServer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTcpServer::incomingConnection(a0) : sipCpp->incomingConnection(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_incomingConnection, doc_QTcpServer_incomingConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_addPendingConnection, "QTcpServer.addPendingConnection(QTcpSocket)");

extern "C" {static PyObject *meth_QTcpServer_addPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_addPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTcpSocket* a0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QTcpSocket, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addPendingConnection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_addPendingConnection, doc_QTcpServer_addPendingConnection);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTcpServer(void *, const sipTypeDef *);}
static void *cast_QTcpServer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTcpServer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QTcpServer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTcpServer(void *, int);}
static void release_QTcpServer(void *sipCppV,int)
{
    QTcpServer *sipCpp = reinterpret_cast<QTcpServer *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTcpServer(sipSimpleWrapper *);}
static void dealloc_QTcpServer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTcpServer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTcpServer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTcpServer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTcpServer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTcpServer *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTcpServer(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTcpServer[] = {{141, 0, 1}};


static PyMethodDef methods_QTcpServer[] = {
    {SIP_MLNAME_CAST(sipName_addPendingConnection), meth_QTcpServer_addPendingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_addPendingConnection)},
    {SIP_MLNAME_CAST(sipName_close), meth_QTcpServer_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_close)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QTcpServer_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_errorString)},
    {SIP_MLNAME_CAST(sipName_hasPendingConnections), meth_QTcpServer_hasPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_hasPendingConnections)},
    {SIP_MLNAME_CAST(sipName_incomingConnection), meth_QTcpServer_incomingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_incomingConnection)},
    {SIP_MLNAME_CAST(sipName_isListening), meth_QTcpServer_isListening, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_isListening)},
    {SIP_MLNAME_CAST(sipName_listen), (PyCFunction)meth_QTcpServer_listen, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTcpServer_listen)},
    {SIP_MLNAME_CAST(sipName_maxPendingConnections), meth_QTcpServer_maxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_maxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_nextPendingConnection), meth_QTcpServer_nextPendingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_nextPendingConnection)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QTcpServer_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_proxy)},
    {SIP_MLNAME_CAST(sipName_serverAddress), meth_QTcpServer_serverAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_serverAddress)},
    {SIP_MLNAME_CAST(sipName_serverError), meth_QTcpServer_serverError, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_serverError)},
    {SIP_MLNAME_CAST(sipName_serverPort), meth_QTcpServer_serverPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_serverPort)},
    {SIP_MLNAME_CAST(sipName_setMaxPendingConnections), meth_QTcpServer_setMaxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_setMaxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QTcpServer_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_setProxy)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), meth_QTcpServer_setSocketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QTcpServer_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_waitForNewConnection), (PyCFunction)meth_QTcpServer_waitForNewConnection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTcpServer_waitForNewConnection)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QTcpServer[] = {
    {"newConnection()", "\1QTcpServer.newConnection", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTcpServer, "\1QTcpServer(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QTcpServer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTcpServer,
        {0}
    },
    {
        sipNameNr_QTcpServer,
        {0, 0, 1},
        18, methods_QTcpServer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTcpServer,
    -1,
    -1,
    supers_QTcpServer,
    0,
    init_type_QTcpServer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTcpServer,
    0,
    0,
    0,
    release_QTcpServer,
    cast_QTcpServer,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTcpServer::staticMetaObject,
    0,
    signals_QTcpServer,
};
