/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"


class sipQAbstractSocket : public QAbstractSocket
{
public:
    sipQAbstractSocket(QAbstractSocket::SocketType,QObject*);
    virtual ~sipQAbstractSocket();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool reset();
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    bool open(QIODevice::OpenMode);
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readLineData(char*,qint64);
    qint64 readData(char*,qint64);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool atEnd() const;
    bool isSequential() const;
    void close();
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractSocket(const sipQAbstractSocket &);
    sipQAbstractSocket &operator = (const sipQAbstractSocket &);

    char sipPyMethods[23];
};

sipQAbstractSocket::sipQAbstractSocket(QAbstractSocket::SocketType a0,QObject*a1): QAbstractSocket(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractSocket::~sipQAbstractSocket()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractSocket::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QAbstractSocket);
}

int sipQAbstractSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QAbstractSocket,_c,_id,_a);

    return _id;
}

void *sipQAbstractSocket::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QAbstractSocket, _clname)) ? this : QAbstractSocket::qt_metacast(_clname);
}

void sipQAbstractSocket::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractSocket::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractSocket::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractSocket::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractSocket::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractSocket::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSocket::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractSocket::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractSocket::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractSocket::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QAbstractSocket::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractSocket::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QAbstractSocket::seek(a0);

    typedef bool (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return ((sipVH_QtCore_32)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[32]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQAbstractSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QAbstractSocket::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQAbstractSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QAbstractSocket::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractSocket::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QAbstractSocket::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[15]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQAbstractSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QAbstractSocket::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[20]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQAbstractSocket::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QAbstractSocket::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQAbstractSocket::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QAbstractSocket::readData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QAbstractSocket::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QAbstractSocket::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QAbstractSocket::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QAbstractSocket::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QAbstractSocket::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QAbstractSocket::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQAbstractSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QAbstractSocket::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQAbstractSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QAbstractSocket::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QAbstractSocket_connectToHost, "QAbstractSocket.connectToHost(QString, int, QIODevice.OpenMode mode=QIODevice.ReadWrite)\n"
    "QAbstractSocket.connectToHost(QHostAddress, int, QIODevice.OpenMode mode=QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QAbstractSocket_connectToHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_connectToHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1t|J1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToHost(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QHostAddress* a0;
        int a0State = 0;
        quint16 a1;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1t|J1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToHost(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_connectToHost, doc_QAbstractSocket_connectToHost);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_disconnectFromHost, "QAbstractSocket.disconnectFromHost()");

extern "C" {static PyObject *meth_QAbstractSocket_disconnectFromHost(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_disconnectFromHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->disconnectFromHost();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_disconnectFromHost, doc_QAbstractSocket_disconnectFromHost);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_isValid, "QAbstractSocket.isValid() -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_isValid(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_isValid, doc_QAbstractSocket_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_bytesAvailable, "QAbstractSocket.bytesAvailable() -> int");

extern "C" {static PyObject *meth_QAbstractSocket_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSocket::bytesAvailable() : sipCpp->bytesAvailable());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_bytesAvailable, doc_QAbstractSocket_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_bytesToWrite, "QAbstractSocket.bytesToWrite() -> int");

extern "C" {static PyObject *meth_QAbstractSocket_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSocket::bytesToWrite() : sipCpp->bytesToWrite());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_bytesToWrite, doc_QAbstractSocket_bytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_canReadLine, "QAbstractSocket.canReadLine() -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSocket::canReadLine() : sipCpp->canReadLine());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_canReadLine, doc_QAbstractSocket_canReadLine);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_localPort, "QAbstractSocket.localPort() -> int");

extern "C" {static PyObject *meth_QAbstractSocket_localPort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_localPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            quint16 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->localPort();
            Py_END_ALLOW_THREADS

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_localPort, doc_QAbstractSocket_localPort);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_localAddress, "QAbstractSocket.localAddress() -> QHostAddress");

extern "C" {static PyObject *meth_QAbstractSocket_localAddress(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_localAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            QHostAddress*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QHostAddress(sipCpp->localAddress());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_localAddress, doc_QAbstractSocket_localAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_peerPort, "QAbstractSocket.peerPort() -> int");

extern "C" {static PyObject *meth_QAbstractSocket_peerPort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_peerPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            quint16 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->peerPort();
            Py_END_ALLOW_THREADS

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_peerPort, doc_QAbstractSocket_peerPort);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_peerAddress, "QAbstractSocket.peerAddress() -> QHostAddress");

extern "C" {static PyObject *meth_QAbstractSocket_peerAddress(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_peerAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            QHostAddress*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QHostAddress(sipCpp->peerAddress());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_peerAddress, doc_QAbstractSocket_peerAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_peerName, "QAbstractSocket.peerName() -> QString");

extern "C" {static PyObject *meth_QAbstractSocket_peerName(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_peerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->peerName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_peerName, doc_QAbstractSocket_peerName);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_readBufferSize, "QAbstractSocket.readBufferSize() -> int");

extern "C" {static PyObject *meth_QAbstractSocket_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->readBufferSize();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_readBufferSize, doc_QAbstractSocket_readBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setReadBufferSize, "QAbstractSocket.setReadBufferSize(int)");

extern "C" {static PyObject *meth_QAbstractSocket_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadBufferSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setReadBufferSize, doc_QAbstractSocket_setReadBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_abort, "QAbstractSocket.abort()");

extern "C" {static PyObject *meth_QAbstractSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->abort();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_abort, doc_QAbstractSocket_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_socketDescriptor, "QAbstractSocket.socketDescriptor() -> int");

extern "C" {static PyObject *meth_QAbstractSocket_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->socketDescriptor();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_socketDescriptor, doc_QAbstractSocket_socketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setSocketDescriptor, "QAbstractSocket.setSocketDescriptor(int, QAbstractSocket.SocketState state=QAbstractSocket.ConnectedState, QIODevice.OpenMode mode=QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_setSocketDescriptor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractSocket::SocketState a1 = QAbstractSocket::ConnectedState;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_state,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|EJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0, sipType_QAbstractSocket_SocketState, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setSocketDescriptor(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setSocketDescriptor, doc_QAbstractSocket_setSocketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_socketType, "QAbstractSocket.socketType() -> QAbstractSocket.SocketType");

extern "C" {static PyObject *meth_QAbstractSocket_socketType(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_socketType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            QAbstractSocket::SocketType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->socketType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_socketType, doc_QAbstractSocket_socketType);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_state, "QAbstractSocket.state() -> QAbstractSocket.SocketState");

extern "C" {static PyObject *meth_QAbstractSocket_state(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            QAbstractSocket::SocketState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_state, doc_QAbstractSocket_state);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_error, "QAbstractSocket.error() -> QAbstractSocket.SocketError");

extern "C" {static PyObject *meth_QAbstractSocket_error(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            QAbstractSocket::SocketError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_error, doc_QAbstractSocket_error);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_close, "QAbstractSocket.close()");

extern "C" {static PyObject *meth_QAbstractSocket_close(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractSocket::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_close, doc_QAbstractSocket_close);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_isSequential, "QAbstractSocket.isSequential() -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSocket::isSequential() : sipCpp->isSequential());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_isSequential, doc_QAbstractSocket_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_atEnd, "QAbstractSocket.atEnd() -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSocket::atEnd() : sipCpp->atEnd());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_atEnd, doc_QAbstractSocket_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_flush, "QAbstractSocket.flush() -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_flush(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flush();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_flush, doc_QAbstractSocket_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_waitForConnected, "QAbstractSocket.waitForConnected(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_waitForConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_waitForConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForConnected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_waitForConnected, doc_QAbstractSocket_waitForConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_waitForReadyRead, "QAbstractSocket.waitForReadyRead(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSocket::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_waitForReadyRead, doc_QAbstractSocket_waitForReadyRead);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_waitForBytesWritten, "QAbstractSocket.waitForBytesWritten(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSocket::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_waitForBytesWritten, doc_QAbstractSocket_waitForBytesWritten);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_waitForDisconnected, "QAbstractSocket.waitForDisconnected(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_waitForDisconnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_waitForDisconnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForDisconnected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_waitForDisconnected, doc_QAbstractSocket_waitForDisconnected);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setProxy, "QAbstractSocket.setProxy(QNetworkProxy)");

extern "C" {static PyObject *meth_QAbstractSocket_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkProxy* a0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProxy(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setProxy, doc_QAbstractSocket_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_proxy, "QAbstractSocket.proxy() -> QNetworkProxy");

extern "C" {static PyObject *meth_QAbstractSocket_proxy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            QNetworkProxy*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkProxy(sipCpp->proxy());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_proxy, doc_QAbstractSocket_proxy);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_connectToHostImplementation, "QAbstractSocket.connectToHostImplementation(QString, int, QIODevice.OpenMode mode=QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QAbstractSocket_connectToHostImplementation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_connectToHostImplementation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ1t|J1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToHostImplementation(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_connectToHostImplementation, doc_QAbstractSocket_connectToHostImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_disconnectFromHostImplementation, "QAbstractSocket.disconnectFromHostImplementation()");

extern "C" {static PyObject *meth_QAbstractSocket_disconnectFromHostImplementation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_disconnectFromHostImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->disconnectFromHostImplementation();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_disconnectFromHostImplementation, doc_QAbstractSocket_disconnectFromHostImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_readData, "QAbstractSocket.readData(int) -> str");

extern "C" {static PyObject *meth_QAbstractSocket_readData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 309 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qabstractsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QAbstractSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1582 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_readData, doc_QAbstractSocket_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_readLineData, "QAbstractSocket.readLineData(int) -> str");

extern "C" {static PyObject *meth_QAbstractSocket_readLineData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_readLineData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 347 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qabstractsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QAbstractSocket::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1650 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQAbstractSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_readLineData, doc_QAbstractSocket_readLineData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_writeData, "QAbstractSocket.writeData(str) -> int");

extern "C" {static PyObject *meth_QAbstractSocket_writeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSocket::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_writeData, doc_QAbstractSocket_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setSocketState, "QAbstractSocket.setSocketState(QAbstractSocket.SocketState)");

extern "C" {static PyObject *meth_QAbstractSocket_setSocketState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setSocketState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::SocketState a0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QAbstractSocket_SocketState, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSocketState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setSocketState, doc_QAbstractSocket_setSocketState);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setSocketError, "QAbstractSocket.setSocketError(QAbstractSocket.SocketError)");

extern "C" {static PyObject *meth_QAbstractSocket_setSocketError(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setSocketError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::SocketError a0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QAbstractSocket_SocketError, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSocketError(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setSocketError, doc_QAbstractSocket_setSocketError);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setLocalPort, "QAbstractSocket.setLocalPort(int)");

extern "C" {static PyObject *meth_QAbstractSocket_setLocalPort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setLocalPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pt", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLocalPort(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setLocalPort, doc_QAbstractSocket_setLocalPort);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setLocalAddress, "QAbstractSocket.setLocalAddress(QHostAddress)");

extern "C" {static PyObject *meth_QAbstractSocket_setLocalAddress(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setLocalAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLocalAddress(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setLocalAddress, doc_QAbstractSocket_setLocalAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setPeerPort, "QAbstractSocket.setPeerPort(int)");

extern "C" {static PyObject *meth_QAbstractSocket_setPeerPort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setPeerPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pt", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPeerPort(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setPeerPort, doc_QAbstractSocket_setPeerPort);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setPeerAddress, "QAbstractSocket.setPeerAddress(QHostAddress)");

extern "C" {static PyObject *meth_QAbstractSocket_setPeerAddress(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setPeerAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPeerAddress(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setPeerAddress, doc_QAbstractSocket_setPeerAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setPeerName, "QAbstractSocket.setPeerName(QString)");

extern "C" {static PyObject *meth_QAbstractSocket_setPeerName(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setPeerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPeerName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setPeerName, doc_QAbstractSocket_setPeerName);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_setSocketOption, "QAbstractSocket.setSocketOption(QAbstractSocket.SocketOption, QVariant)");

extern "C" {static PyObject *meth_QAbstractSocket_setSocketOption(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setSocketOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::SocketOption a0;
        const QVariant* a1;
        int a1State = 0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QAbstractSocket_SocketOption, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSocketOption(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setSocketOption, doc_QAbstractSocket_setSocketOption);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSocket_socketOption, "QAbstractSocket.socketOption(QAbstractSocket.SocketOption) -> QVariant");

extern "C" {static PyObject *meth_QAbstractSocket_socketOption(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_socketOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::SocketOption a0;
        QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QAbstractSocket_SocketOption, &a0))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->socketOption(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_socketOption, doc_QAbstractSocket_socketOption);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractSocket(void *, const sipTypeDef *);}
static void *cast_QAbstractSocket(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractSocket)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QIODevice)->ctd_cast((QIODevice *)(QAbstractSocket *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractSocket(void *, int);}
static void release_QAbstractSocket(void *sipCppV,int)
{
    QAbstractSocket *sipCpp = reinterpret_cast<QAbstractSocket *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractSocket(sipSimpleWrapper *);}
static void dealloc_QAbstractSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractSocket *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractSocket(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractSocket *sipCpp = 0;

    {
        QAbstractSocket::SocketType a0;
        QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "EJH", sipType_QAbstractSocket_SocketType, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractSocket(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractSocket[] = {{81, 0, 1}};


static PyMethodDef methods_QAbstractSocket[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QAbstractSocket_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_abort)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QAbstractSocket_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_atEnd)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QAbstractSocket_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QAbstractSocket_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QAbstractSocket_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_canReadLine)},
    {SIP_MLNAME_CAST(sipName_close), meth_QAbstractSocket_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_close)},
    {SIP_MLNAME_CAST(sipName_connectToHost), (PyCFunction)meth_QAbstractSocket_connectToHost, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_connectToHost)},
    {SIP_MLNAME_CAST(sipName_connectToHostImplementation), (PyCFunction)meth_QAbstractSocket_connectToHostImplementation, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_connectToHostImplementation)},
    {SIP_MLNAME_CAST(sipName_disconnectFromHost), meth_QAbstractSocket_disconnectFromHost, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_disconnectFromHost)},
    {SIP_MLNAME_CAST(sipName_disconnectFromHostImplementation), meth_QAbstractSocket_disconnectFromHostImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_disconnectFromHostImplementation)},
    {SIP_MLNAME_CAST(sipName_error), meth_QAbstractSocket_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_error)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QAbstractSocket_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_flush)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QAbstractSocket_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_isSequential)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QAbstractSocket_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_isValid)},
    {SIP_MLNAME_CAST(sipName_localAddress), meth_QAbstractSocket_localAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_localAddress)},
    {SIP_MLNAME_CAST(sipName_localPort), meth_QAbstractSocket_localPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_localPort)},
    {SIP_MLNAME_CAST(sipName_peerAddress), meth_QAbstractSocket_peerAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_peerAddress)},
    {SIP_MLNAME_CAST(sipName_peerName), meth_QAbstractSocket_peerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_peerName)},
    {SIP_MLNAME_CAST(sipName_peerPort), meth_QAbstractSocket_peerPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_peerPort)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QAbstractSocket_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_proxy)},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QAbstractSocket_readBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_readBufferSize)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QAbstractSocket_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_readData)},
    {SIP_MLNAME_CAST(sipName_readLineData), meth_QAbstractSocket_readLineData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_readLineData)},
    {SIP_MLNAME_CAST(sipName_setLocalAddress), meth_QAbstractSocket_setLocalAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setLocalAddress)},
    {SIP_MLNAME_CAST(sipName_setLocalPort), meth_QAbstractSocket_setLocalPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setLocalPort)},
    {SIP_MLNAME_CAST(sipName_setPeerAddress), meth_QAbstractSocket_setPeerAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setPeerAddress)},
    {SIP_MLNAME_CAST(sipName_setPeerName), meth_QAbstractSocket_setPeerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setPeerName)},
    {SIP_MLNAME_CAST(sipName_setPeerPort), meth_QAbstractSocket_setPeerPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setPeerPort)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QAbstractSocket_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setProxy)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QAbstractSocket_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), (PyCFunction)meth_QAbstractSocket_setSocketDescriptor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_setSocketError), meth_QAbstractSocket_setSocketError, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setSocketError)},
    {SIP_MLNAME_CAST(sipName_setSocketOption), meth_QAbstractSocket_setSocketOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setSocketOption)},
    {SIP_MLNAME_CAST(sipName_setSocketState), meth_QAbstractSocket_setSocketState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setSocketState)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QAbstractSocket_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_socketOption), meth_QAbstractSocket_socketOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_socketOption)},
    {SIP_MLNAME_CAST(sipName_socketType), meth_QAbstractSocket_socketType, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_socketType)},
    {SIP_MLNAME_CAST(sipName_state), meth_QAbstractSocket_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_state)},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), (PyCFunction)meth_QAbstractSocket_waitForBytesWritten, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForConnected), (PyCFunction)meth_QAbstractSocket_waitForConnected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_waitForConnected)},
    {SIP_MLNAME_CAST(sipName_waitForDisconnected), (PyCFunction)meth_QAbstractSocket_waitForDisconnected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_waitForDisconnected)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), (PyCFunction)meth_QAbstractSocket_waitForReadyRead, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QAbstractSocket_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_writeData)}
};

static sipEnumMemberDef enummembers_QAbstractSocket[] = {
    {sipName_AddressInUseError, static_cast<int>(QAbstractSocket::AddressInUseError), 3},
    {sipName_BoundState, static_cast<int>(QAbstractSocket::BoundState), 5},
    {sipName_ClosingState, static_cast<int>(QAbstractSocket::ClosingState), 5},
    {sipName_ConnectedState, static_cast<int>(QAbstractSocket::ConnectedState), 5},
    {sipName_ConnectingState, static_cast<int>(QAbstractSocket::ConnectingState), 5},
    {sipName_ConnectionRefusedError, static_cast<int>(QAbstractSocket::ConnectionRefusedError), 3},
    {sipName_DatagramTooLargeError, static_cast<int>(QAbstractSocket::DatagramTooLargeError), 3},
    {sipName_HostLookupState, static_cast<int>(QAbstractSocket::HostLookupState), 5},
    {sipName_HostNotFoundError, static_cast<int>(QAbstractSocket::HostNotFoundError), 3},
    {sipName_IPv4Protocol, static_cast<int>(QAbstractSocket::IPv4Protocol), 2},
    {sipName_IPv6Protocol, static_cast<int>(QAbstractSocket::IPv6Protocol), 2},
    {sipName_KeepAliveOption, static_cast<int>(QAbstractSocket::KeepAliveOption), 4},
    {sipName_ListeningState, static_cast<int>(QAbstractSocket::ListeningState), 5},
    {sipName_LowDelayOption, static_cast<int>(QAbstractSocket::LowDelayOption), 4},
    {sipName_MulticastLoopbackOption, static_cast<int>(QAbstractSocket::MulticastLoopbackOption), 4},
    {sipName_MulticastTtlOption, static_cast<int>(QAbstractSocket::MulticastTtlOption), 4},
    {sipName_NetworkError, static_cast<int>(QAbstractSocket::NetworkError), 3},
    {sipName_ProxyAuthenticationRequiredError, static_cast<int>(QAbstractSocket::ProxyAuthenticationRequiredError), 3},
    {sipName_ProxyConnectionClosedError, static_cast<int>(QAbstractSocket::ProxyConnectionClosedError), 3},
    {sipName_ProxyConnectionRefusedError, static_cast<int>(QAbstractSocket::ProxyConnectionRefusedError), 3},
    {sipName_ProxyConnectionTimeoutError, static_cast<int>(QAbstractSocket::ProxyConnectionTimeoutError), 3},
    {sipName_ProxyNotFoundError, static_cast<int>(QAbstractSocket::ProxyNotFoundError), 3},
    {sipName_ProxyProtocolError, static_cast<int>(QAbstractSocket::ProxyProtocolError), 3},
    {sipName_RemoteHostClosedError, static_cast<int>(QAbstractSocket::RemoteHostClosedError), 3},
    {sipName_SocketAccessError, static_cast<int>(QAbstractSocket::SocketAccessError), 3},
    {sipName_SocketAddressNotAvailableError, static_cast<int>(QAbstractSocket::SocketAddressNotAvailableError), 3},
    {sipName_SocketResourceError, static_cast<int>(QAbstractSocket::SocketResourceError), 3},
    {sipName_SocketTimeoutError, static_cast<int>(QAbstractSocket::SocketTimeoutError), 3},
    {sipName_SslHandshakeFailedError, static_cast<int>(QAbstractSocket::SslHandshakeFailedError), 3},
    {sipName_TcpSocket, static_cast<int>(QAbstractSocket::TcpSocket), 6},
    {sipName_UdpSocket, static_cast<int>(QAbstractSocket::UdpSocket), 6},
    {sipName_UnconnectedState, static_cast<int>(QAbstractSocket::UnconnectedState), 5},
    {sipName_UnfinishedSocketOperationError, static_cast<int>(QAbstractSocket::UnfinishedSocketOperationError), 3},
    {sipName_UnknownNetworkLayerProtocol, static_cast<int>(QAbstractSocket::UnknownNetworkLayerProtocol), 2},
    {sipName_UnknownSocketError, static_cast<int>(QAbstractSocket::UnknownSocketError), 3},
    {sipName_UnknownSocketType, static_cast<int>(QAbstractSocket::UnknownSocketType), 6},
    {sipName_UnsupportedSocketOperationError, static_cast<int>(QAbstractSocket::UnsupportedSocketOperationError), 3},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QAbstractSocket[] = {
    {"proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)", "\1QAbstractSocket.proxyAuthenticationRequired[QNetworkProxy, QAuthenticator]", 0, 0},
    {"stateChanged(QAbstractSocket::SocketState)", "\1QAbstractSocket.stateChanged[QAbstractSocket.SocketState]", 0, 0},
    {"disconnected()", "\1QAbstractSocket.disconnected", 0, 0},
    {"connected()", "\1QAbstractSocket.connected", 0, 0},
    {"hostFound()", "\1QAbstractSocket.hostFound", 0, 0},
    {"error(QAbstractSocket::SocketError)", "\1QAbstractSocket.error[QAbstractSocket.SocketError]", &methods_QAbstractSocket[10], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractSocket, "\1QAbstractSocket(QAbstractSocket.SocketType, QObject)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QAbstractSocket = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractSocket,
        {0}
    },
    {
        sipNameNr_QAbstractSocket,
        {0, 0, 1},
        43, methods_QAbstractSocket,
        37, enummembers_QAbstractSocket,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractSocket,
    -1,
    -1,
    supers_QAbstractSocket,
    0,
    init_type_QAbstractSocket,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractSocket,
    0,
    0,
    0,
    release_QAbstractSocket,
    cast_QAbstractSocket,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractSocket::staticMetaObject,
    0,
    signals_QAbstractSocket,
};
