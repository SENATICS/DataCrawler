/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qurlinfo.sip"
#include <qurlinfo.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUrlInfo.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUrlInfo.cpp"
#line 406 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUrlInfo.cpp"
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQUrlInfo.cpp"


class sipQUrlInfo : public QUrlInfo
{
public:
    sipQUrlInfo();
    sipQUrlInfo(const QUrlInfo&);
    sipQUrlInfo(const QString&,int,const QString&,const QString&,qint64,const QDateTime&,const QDateTime&,bool,bool,bool,bool,bool,bool);
    sipQUrlInfo(const QUrl&,int,const QString&,const QString&,qint64,const QDateTime&,const QDateTime&,bool,bool,bool,bool,bool,bool);
    virtual ~sipQUrlInfo();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setLastModified(const QDateTime&);
    void setPermissions(int);
    void setReadable(bool);
    void setWritable(bool);
    void setSize(qint64);
    void setGroup(const QString&);
    void setOwner(const QString&);
    void setSymLink(bool);
    void setFile(bool);
    void setDir(bool);
    void setName(const QString&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQUrlInfo(const sipQUrlInfo &);
    sipQUrlInfo &operator = (const sipQUrlInfo &);

    char sipPyMethods[11];
};

sipQUrlInfo::sipQUrlInfo(): QUrlInfo(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQUrlInfo::sipQUrlInfo(const QUrlInfo& a0): QUrlInfo(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQUrlInfo::sipQUrlInfo(const QString& a0,int a1,const QString& a2,const QString& a3,qint64 a4,const QDateTime& a5,const QDateTime& a6,bool a7,bool a8,bool a9,bool a10,bool a11,bool a12): QUrlInfo(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQUrlInfo::sipQUrlInfo(const QUrl& a0,int a1,const QString& a2,const QString& a3,qint64 a4,const QDateTime& a5,const QDateTime& a6,bool a7,bool a8,bool a9,bool a10,bool a11,bool a12): QUrlInfo(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQUrlInfo::~sipQUrlInfo()
{
    sipCommonDtor(sipPySelf);
}

void sipQUrlInfo::setLastModified(const QDateTime& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setLastModified);

    if (!sipMeth)
    {
        QUrlInfo::setLastModified(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QDateTime&);

    sipVH_QtNetwork_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUrlInfo::setPermissions(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setPermissions);

    if (!sipMeth)
    {
        QUrlInfo::setPermissions(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUrlInfo::setReadable(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setReadable);

    if (!sipMeth)
    {
        QUrlInfo::setReadable(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtNetwork_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUrlInfo::setWritable(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setWritable);

    if (!sipMeth)
    {
        QUrlInfo::setWritable(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtNetwork_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUrlInfo::setSize(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_setSize);

    if (!sipMeth)
    {
        QUrlInfo::setSize(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    sipVH_QtNetwork_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUrlInfo::setGroup(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setGroup);

    if (!sipMeth)
    {
        QUrlInfo::setGroup(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[33]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUrlInfo::setOwner(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setOwner);

    if (!sipMeth)
    {
        QUrlInfo::setOwner(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[33]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUrlInfo::setSymLink(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setSymLink);

    if (!sipMeth)
    {
        QUrlInfo::setSymLink(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtNetwork_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUrlInfo::setFile(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setFile);

    if (!sipMeth)
    {
        QUrlInfo::setFile(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtNetwork_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUrlInfo::setDir(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setDir);

    if (!sipMeth)
    {
        QUrlInfo::setDir(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtNetwork_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQUrlInfo::setName(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setName);

    if (!sipMeth)
    {
        QUrlInfo::setName(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[33]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QUrlInfo_setName, "QUrlInfo.setName(QString)");

extern "C" {static PyObject *meth_QUrlInfo_setName(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrlInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setName(*a0) : sipCpp->setName(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setName, doc_QUrlInfo_setName);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setDir, "QUrlInfo.setDir(bool)");

extern "C" {static PyObject *meth_QUrlInfo_setDir(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QUrlInfo, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setDir(a0) : sipCpp->setDir(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setDir, doc_QUrlInfo_setDir);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setFile, "QUrlInfo.setFile(bool)");

extern "C" {static PyObject *meth_QUrlInfo_setFile(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QUrlInfo, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setFile(a0) : sipCpp->setFile(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setFile, doc_QUrlInfo_setFile);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setSymLink, "QUrlInfo.setSymLink(bool)");

extern "C" {static PyObject *meth_QUrlInfo_setSymLink(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setSymLink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QUrlInfo, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setSymLink(a0) : sipCpp->setSymLink(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setSymLink, doc_QUrlInfo_setSymLink);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setOwner, "QUrlInfo.setOwner(QString)");

extern "C" {static PyObject *meth_QUrlInfo_setOwner(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setOwner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrlInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setOwner(*a0) : sipCpp->setOwner(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setOwner, doc_QUrlInfo_setOwner);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setGroup, "QUrlInfo.setGroup(QString)");

extern "C" {static PyObject *meth_QUrlInfo_setGroup(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrlInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setGroup(*a0) : sipCpp->setGroup(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setGroup, doc_QUrlInfo_setGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setSize, "QUrlInfo.setSize(int)");

extern "C" {static PyObject *meth_QUrlInfo_setSize(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QUrlInfo, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setSize(a0) : sipCpp->setSize(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setSize, doc_QUrlInfo_setSize);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setWritable, "QUrlInfo.setWritable(bool)");

extern "C" {static PyObject *meth_QUrlInfo_setWritable(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QUrlInfo, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setWritable(a0) : sipCpp->setWritable(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setWritable, doc_QUrlInfo_setWritable);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setReadable, "QUrlInfo.setReadable(bool)");

extern "C" {static PyObject *meth_QUrlInfo_setReadable(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QUrlInfo, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setReadable(a0) : sipCpp->setReadable(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setReadable, doc_QUrlInfo_setReadable);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setPermissions, "QUrlInfo.setPermissions(int)");

extern "C" {static PyObject *meth_QUrlInfo_setPermissions(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setPermissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUrlInfo, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setPermissions(a0) : sipCpp->setPermissions(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setPermissions, doc_QUrlInfo_setPermissions);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setLastModified, "QUrlInfo.setLastModified(QDateTime)");

extern "C" {static PyObject *meth_QUrlInfo_setLastModified(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setLastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QDateTime* a0;
        int a0State = 0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrlInfo, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QUrlInfo::setLastModified(*a0) : sipCpp->setLastModified(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setLastModified, doc_QUrlInfo_setLastModified);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_isValid, "QUrlInfo.isValid() -> bool");

extern "C" {static PyObject *meth_QUrlInfo_isValid(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_isValid, doc_QUrlInfo_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_name, "QUrlInfo.name() -> QString");

extern "C" {static PyObject *meth_QUrlInfo_name(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_name, doc_QUrlInfo_name);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_permissions, "QUrlInfo.permissions() -> int");

extern "C" {static PyObject *meth_QUrlInfo_permissions(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_permissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->permissions();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_permissions, doc_QUrlInfo_permissions);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_owner, "QUrlInfo.owner() -> QString");

extern "C" {static PyObject *meth_QUrlInfo_owner(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_owner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->owner());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_owner, doc_QUrlInfo_owner);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_group, "QUrlInfo.group() -> QString");

extern "C" {static PyObject *meth_QUrlInfo_group(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->group());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_group, doc_QUrlInfo_group);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_size, "QUrlInfo.size() -> int");

extern "C" {static PyObject *meth_QUrlInfo_size(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->size();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_size, doc_QUrlInfo_size);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_lastModified, "QUrlInfo.lastModified() -> QDateTime");

extern "C" {static PyObject *meth_QUrlInfo_lastModified(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_lastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->lastModified());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_lastModified, doc_QUrlInfo_lastModified);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_lastRead, "QUrlInfo.lastRead() -> QDateTime");

extern "C" {static PyObject *meth_QUrlInfo_lastRead(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_lastRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->lastRead());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_lastRead, doc_QUrlInfo_lastRead);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_isDir, "QUrlInfo.isDir() -> bool");

extern "C" {static PyObject *meth_QUrlInfo_isDir(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_isDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDir();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_isDir, doc_QUrlInfo_isDir);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_isFile, "QUrlInfo.isFile() -> bool");

extern "C" {static PyObject *meth_QUrlInfo_isFile(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_isFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFile();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_isFile, doc_QUrlInfo_isFile);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_isSymLink, "QUrlInfo.isSymLink() -> bool");

extern "C" {static PyObject *meth_QUrlInfo_isSymLink(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_isSymLink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSymLink();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_isSymLink, doc_QUrlInfo_isSymLink);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_isWritable, "QUrlInfo.isWritable() -> bool");

extern "C" {static PyObject *meth_QUrlInfo_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isWritable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_isWritable, doc_QUrlInfo_isWritable);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_isReadable, "QUrlInfo.isReadable() -> bool");

extern "C" {static PyObject *meth_QUrlInfo_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_isReadable, doc_QUrlInfo_isReadable);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_isExecutable, "QUrlInfo.isExecutable() -> bool");

extern "C" {static PyObject *meth_QUrlInfo_isExecutable(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_isExecutable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isExecutable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_isExecutable, doc_QUrlInfo_isExecutable);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_greaterThan, "QUrlInfo.greaterThan(QUrlInfo, QUrlInfo, int) -> bool");

extern "C" {static PyObject *meth_QUrlInfo_greaterThan(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_greaterThan(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo* a0;
        const QUrlInfo* a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9i", sipType_QUrlInfo, &a0, sipType_QUrlInfo, &a1, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QUrlInfo::greaterThan(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_greaterThan, doc_QUrlInfo_greaterThan);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_lessThan, "QUrlInfo.lessThan(QUrlInfo, QUrlInfo, int) -> bool");

extern "C" {static PyObject *meth_QUrlInfo_lessThan(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_lessThan(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo* a0;
        const QUrlInfo* a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9i", sipType_QUrlInfo, &a0, sipType_QUrlInfo, &a1, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QUrlInfo::lessThan(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_lessThan, doc_QUrlInfo_lessThan);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_equal, "QUrlInfo.equal(QUrlInfo, QUrlInfo, int) -> bool");

extern "C" {static PyObject *meth_QUrlInfo_equal(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_equal(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo* a0;
        const QUrlInfo* a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9i", sipType_QUrlInfo, &a0, sipType_QUrlInfo, &a1, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QUrlInfo::equal(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_equal, doc_QUrlInfo_equal);

    return NULL;
}


PyDoc_STRVAR(doc_QUrlInfo_setLastRead, "QUrlInfo.setLastRead(QDateTime)");

extern "C" {static PyObject *meth_QUrlInfo_setLastRead(PyObject *, PyObject *);}
static PyObject *meth_QUrlInfo_setLastRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDateTime* a0;
        int a0State = 0;
        QUrlInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrlInfo, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLastRead(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlInfo, sipName_setLastRead, doc_QUrlInfo_setLastRead);

    return NULL;
}


extern "C" {static PyObject *slot_QUrlInfo___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUrlInfo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QUrlInfo *sipCpp = reinterpret_cast<QUrlInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrlInfo));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrlInfo, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QUrlInfo::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,ne_slot,sipType_QUrlInfo,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QUrlInfo___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUrlInfo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QUrlInfo *sipCpp = reinterpret_cast<QUrlInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrlInfo));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QUrlInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrlInfo, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QUrlInfo::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,eq_slot,sipType_QUrlInfo,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QUrlInfo(void *, const sipTypeDef *);}
static void *cast_QUrlInfo(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QUrlInfo)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUrlInfo(void *, int);}
static void release_QUrlInfo(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQUrlInfo *>(sipCppV);
    else
        delete reinterpret_cast<QUrlInfo *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QUrlInfo(void *, SIP_SSIZE_T, const void *);}
static void assign_QUrlInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QUrlInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QUrlInfo *>(sipSrc);
}


extern "C" {static void *array_QUrlInfo(SIP_SSIZE_T);}
static void *array_QUrlInfo(SIP_SSIZE_T sipNrElem)
{
    return new QUrlInfo[sipNrElem];
}


extern "C" {static void *copy_QUrlInfo(const void *, SIP_SSIZE_T);}
static void *copy_QUrlInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QUrlInfo(reinterpret_cast<const QUrlInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QUrlInfo(sipSimpleWrapper *);}
static void dealloc_QUrlInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQUrlInfo *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QUrlInfo(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QUrlInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUrlInfo(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQUrlInfo *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQUrlInfo();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QUrlInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QUrlInfo, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQUrlInfo(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        int a1;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        qint64 a4;
        const QDateTime* a5;
        int a5State = 0;
        const QDateTime* a6;
        int a6State = 0;
        bool a7;
        bool a8;
        bool a9;
        bool a10;
        bool a11;
        bool a12;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1iJ1J1nJ1J1bbbbbb", sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, &a4, sipType_QDateTime, &a5, &a5State, sipType_QDateTime, &a6, &a6State, &a7, &a8, &a9, &a10, &a11, &a12))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQUrlInfo(*a0,a1,*a2,*a3,a4,*a5,*a6,a7,a8,a9,a10,a11,a12);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QDateTime *>(a5),sipType_QDateTime,a5State);
            sipReleaseType(const_cast<QDateTime *>(a6),sipType_QDateTime,a6State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QUrl* a0;
        int a1;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        qint64 a4;
        const QDateTime* a5;
        int a5State = 0;
        const QDateTime* a6;
        int a6State = 0;
        bool a7;
        bool a8;
        bool a9;
        bool a10;
        bool a11;
        bool a12;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9iJ1J1nJ1J1bbbbbb", sipType_QUrl, &a0, &a1, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, &a4, sipType_QDateTime, &a5, &a5State, sipType_QDateTime, &a6, &a6State, &a7, &a8, &a9, &a10, &a11, &a12))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQUrlInfo(*a0,a1,*a2,*a3,a4,*a5,*a6,a7,a8,a9,a10,a11,a12);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QDateTime *>(a5),sipType_QDateTime,a5State);
            sipReleaseType(const_cast<QDateTime *>(a6),sipType_QDateTime,a6State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUrlInfo[] = {
    {(void *)slot_QUrlInfo___ne__, ne_slot},
    {(void *)slot_QUrlInfo___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QUrlInfo[] = {
    {SIP_MLNAME_CAST(sipName_equal), meth_QUrlInfo_equal, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_equal)},
    {SIP_MLNAME_CAST(sipName_greaterThan), meth_QUrlInfo_greaterThan, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_greaterThan)},
    {SIP_MLNAME_CAST(sipName_group), meth_QUrlInfo_group, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_group)},
    {SIP_MLNAME_CAST(sipName_isDir), meth_QUrlInfo_isDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_isDir)},
    {SIP_MLNAME_CAST(sipName_isExecutable), meth_QUrlInfo_isExecutable, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_isExecutable)},
    {SIP_MLNAME_CAST(sipName_isFile), meth_QUrlInfo_isFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_isFile)},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QUrlInfo_isReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_isReadable)},
    {SIP_MLNAME_CAST(sipName_isSymLink), meth_QUrlInfo_isSymLink, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_isSymLink)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QUrlInfo_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_isValid)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QUrlInfo_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_isWritable)},
    {SIP_MLNAME_CAST(sipName_lastModified), meth_QUrlInfo_lastModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_lastModified)},
    {SIP_MLNAME_CAST(sipName_lastRead), meth_QUrlInfo_lastRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_lastRead)},
    {SIP_MLNAME_CAST(sipName_lessThan), meth_QUrlInfo_lessThan, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_lessThan)},
    {SIP_MLNAME_CAST(sipName_name), meth_QUrlInfo_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_name)},
    {SIP_MLNAME_CAST(sipName_owner), meth_QUrlInfo_owner, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_owner)},
    {SIP_MLNAME_CAST(sipName_permissions), meth_QUrlInfo_permissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_permissions)},
    {SIP_MLNAME_CAST(sipName_setDir), meth_QUrlInfo_setDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setDir)},
    {SIP_MLNAME_CAST(sipName_setFile), meth_QUrlInfo_setFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setFile)},
    {SIP_MLNAME_CAST(sipName_setGroup), meth_QUrlInfo_setGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setGroup)},
    {SIP_MLNAME_CAST(sipName_setLastModified), meth_QUrlInfo_setLastModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setLastModified)},
    {SIP_MLNAME_CAST(sipName_setLastRead), meth_QUrlInfo_setLastRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setLastRead)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QUrlInfo_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setName)},
    {SIP_MLNAME_CAST(sipName_setOwner), meth_QUrlInfo_setOwner, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setOwner)},
    {SIP_MLNAME_CAST(sipName_setPermissions), meth_QUrlInfo_setPermissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setPermissions)},
    {SIP_MLNAME_CAST(sipName_setReadable), meth_QUrlInfo_setReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setReadable)},
    {SIP_MLNAME_CAST(sipName_setSize), meth_QUrlInfo_setSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setSize)},
    {SIP_MLNAME_CAST(sipName_setSymLink), meth_QUrlInfo_setSymLink, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setSymLink)},
    {SIP_MLNAME_CAST(sipName_setWritable), meth_QUrlInfo_setWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_setWritable)},
    {SIP_MLNAME_CAST(sipName_size), meth_QUrlInfo_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlInfo_size)}
};

static sipEnumMemberDef enummembers_QUrlInfo[] = {
    {sipName_ExeGroup, static_cast<int>(QUrlInfo::ExeGroup), 107},
    {sipName_ExeOther, static_cast<int>(QUrlInfo::ExeOther), 107},
    {sipName_ExeOwner, static_cast<int>(QUrlInfo::ExeOwner), 107},
    {sipName_ReadGroup, static_cast<int>(QUrlInfo::ReadGroup), 107},
    {sipName_ReadOther, static_cast<int>(QUrlInfo::ReadOther), 107},
    {sipName_ReadOwner, static_cast<int>(QUrlInfo::ReadOwner), 107},
    {sipName_WriteGroup, static_cast<int>(QUrlInfo::WriteGroup), 107},
    {sipName_WriteOther, static_cast<int>(QUrlInfo::WriteOther), 107},
    {sipName_WriteOwner, static_cast<int>(QUrlInfo::WriteOwner), 107},
};

PyDoc_STRVAR(doc_QUrlInfo, "\1QUrlInfo()\n"
    "QUrlInfo(QUrlInfo)\n"
    "QUrlInfo(QString, int, QString, QString, int, QDateTime, QDateTime, bool, bool, bool, bool, bool, bool)\n"
    "QUrlInfo(QUrl, int, QString, QString, int, QDateTime, QDateTime, bool, bool, bool, bool, bool, bool)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QUrlInfo = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QUrlInfo,
        {0}
    },
    {
        sipNameNr_QUrlInfo,
        {0, 0, 1},
        29, methods_QUrlInfo,
        9, enummembers_QUrlInfo,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QUrlInfo,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QUrlInfo,
    init_type_QUrlInfo,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QUrlInfo,
    assign_QUrlInfo,
    array_QUrlInfo,
    copy_QUrlInfo,
    release_QUrlInfo,
    cast_QUrlInfo,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
