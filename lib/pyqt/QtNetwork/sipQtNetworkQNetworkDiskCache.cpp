/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkdiskcache.sip"
#include <qnetworkdiskcache.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 148 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"


class sipQNetworkDiskCache : public QNetworkDiskCache
{
public:
    sipQNetworkDiskCache(QObject*);
    virtual ~sipQNetworkDiskCache();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    qint64 expire();
    void clear();
    void insert(QIODevice*);
    QIODevice* prepare(const QNetworkCacheMetaData&);
    bool remove(const QUrl&);
    QIODevice* data(const QUrl&);
    void updateMetaData(const QNetworkCacheMetaData&);
    QNetworkCacheMetaData metaData(const QUrl&);
    qint64 cacheSize() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkDiskCache(const sipQNetworkDiskCache &);
    sipQNetworkDiskCache &operator = (const sipQNetworkDiskCache &);

    char sipPyMethods[16];
};

sipQNetworkDiskCache::sipQNetworkDiskCache(QObject*a0): QNetworkDiskCache(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkDiskCache::~sipQNetworkDiskCache()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkDiskCache::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkDiskCache);
}

int sipQNetworkDiskCache::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkDiskCache::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkDiskCache,_c,_id,_a);

    return _id;
}

void *sipQNetworkDiskCache::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkDiskCache, _clname)) ? this : QNetworkDiskCache::qt_metacast(_clname);
}

void sipQNetworkDiskCache::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QNetworkDiskCache::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QNetworkDiskCache::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QNetworkDiskCache::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QNetworkDiskCache::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QNetworkDiskCache::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQNetworkDiskCache::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QNetworkDiskCache::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkDiskCache::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QNetworkDiskCache::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQNetworkDiskCache::expire()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_expire);

    if (!sipMeth)
        return QNetworkDiskCache::expire();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQNetworkDiskCache::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
        QNetworkDiskCache::clear();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQNetworkDiskCache::insert(QIODevice*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_insert);

    if (!sipMeth)
    {
        QNetworkDiskCache::insert(a0);
        return;
    }

    extern void sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice*);

    sipVH_QtNetwork_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QIODevice* sipQNetworkDiskCache::prepare(const QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_prepare);

    if (!sipMeth)
        return QNetworkDiskCache::prepare(a0);

    extern QIODevice* sipVH_QtNetwork_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QNetworkCacheMetaData&);

    return sipVH_QtNetwork_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQNetworkDiskCache::remove(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_remove);

    if (!sipMeth)
        return QNetworkDiskCache::remove(a0);

    extern bool sipVH_QtNetwork_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    return sipVH_QtNetwork_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QIODevice* sipQNetworkDiskCache::data(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QNetworkDiskCache::data(a0);

    extern QIODevice* sipVH_QtNetwork_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    return sipVH_QtNetwork_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::updateMetaData(const QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_updateMetaData);

    if (!sipMeth)
    {
        QNetworkDiskCache::updateMetaData(a0);
        return;
    }

    extern void sipVH_QtNetwork_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QNetworkCacheMetaData&);

    sipVH_QtNetwork_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QNetworkCacheMetaData sipQNetworkDiskCache::metaData(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_metaData);

    if (!sipMeth)
        return QNetworkDiskCache::metaData(a0);

    extern QNetworkCacheMetaData sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    return sipVH_QtNetwork_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQNetworkDiskCache::cacheSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_cacheSize);

    if (!sipMeth)
        return QNetworkDiskCache::cacheSize();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QNetworkDiskCache_cacheDirectory, "QNetworkDiskCache.cacheDirectory() -> QString");

extern "C" {static PyObject *meth_QNetworkDiskCache_cacheDirectory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_cacheDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->cacheDirectory());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_cacheDirectory, doc_QNetworkDiskCache_cacheDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_setCacheDirectory, "QNetworkDiskCache.setCacheDirectory(QString)");

extern "C" {static PyObject *meth_QNetworkDiskCache_setCacheDirectory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_setCacheDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCacheDirectory(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_setCacheDirectory, doc_QNetworkDiskCache_setCacheDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_maximumCacheSize, "QNetworkDiskCache.maximumCacheSize() -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_maximumCacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_maximumCacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maximumCacheSize();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_maximumCacheSize, doc_QNetworkDiskCache_maximumCacheSize);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_setMaximumCacheSize, "QNetworkDiskCache.setMaximumCacheSize(int)");

extern "C" {static PyObject *meth_QNetworkDiskCache_setMaximumCacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_setMaximumCacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaximumCacheSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_setMaximumCacheSize, doc_QNetworkDiskCache_setMaximumCacheSize);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_cacheSize, "QNetworkDiskCache.cacheSize() -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_cacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_cacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QNetworkDiskCache::cacheSize() : sipCpp->cacheSize());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_cacheSize, doc_QNetworkDiskCache_cacheSize);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_metaData, "QNetworkDiskCache.metaData(QUrl) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QNetworkDiskCache_metaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
            QNetworkCacheMetaData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkCacheMetaData((sipSelfWasArg ? sipCpp->QNetworkDiskCache::metaData(*a0) : sipCpp->metaData(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_metaData, doc_QNetworkDiskCache_metaData);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_updateMetaData, "QNetworkDiskCache.updateMetaData(QNetworkCacheMetaData)");

extern "C" {static PyObject *meth_QNetworkDiskCache_updateMetaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_updateMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QNetworkCacheMetaData* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkDiskCache::updateMetaData(*a0) : sipCpp->updateMetaData(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_updateMetaData, doc_QNetworkDiskCache_updateMetaData);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_data, "QNetworkDiskCache.data(QUrl) -> QIODevice");

extern "C" {static PyObject *meth_QNetworkDiskCache_data(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
            QIODevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QNetworkDiskCache::data(*a0) : sipCpp->data(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_data, doc_QNetworkDiskCache_data);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_remove, "QNetworkDiskCache.remove(QUrl) -> bool");

extern "C" {static PyObject *meth_QNetworkDiskCache_remove(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QNetworkDiskCache::remove(*a0) : sipCpp->remove(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_remove, doc_QNetworkDiskCache_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_prepare, "QNetworkDiskCache.prepare(QNetworkCacheMetaData) -> QIODevice");

extern "C" {static PyObject *meth_QNetworkDiskCache_prepare(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QNetworkCacheMetaData* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            QIODevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QNetworkDiskCache::prepare(*a0) : sipCpp->prepare(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_prepare, doc_QNetworkDiskCache_prepare);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_insert, "QNetworkDiskCache.insert(QIODevice)");

extern "C" {static PyObject *meth_QNetworkDiskCache_insert(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkDiskCache::insert(a0) : sipCpp->insert(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_insert, doc_QNetworkDiskCache_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_fileMetaData, "QNetworkDiskCache.fileMetaData(QString) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QNetworkDiskCache_fileMetaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_fileMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QNetworkCacheMetaData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkCacheMetaData(sipCpp->fileMetaData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_fileMetaData, doc_QNetworkDiskCache_fileMetaData);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_clear, "QNetworkDiskCache.clear()");

extern "C" {static PyObject *meth_QNetworkDiskCache_clear(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkDiskCache::clear() : sipCpp->clear());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_clear, doc_QNetworkDiskCache_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_expire, "QNetworkDiskCache.expire() -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_expire(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_expire(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QNetworkDiskCache::expire() : sipCpp->expire());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_expire, doc_QNetworkDiskCache_expire);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkDiskCache(void *, const sipTypeDef *);}
static void *cast_QNetworkDiskCache(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNetworkDiskCache)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractNetworkCache)->ctd_cast((QAbstractNetworkCache *)(QNetworkDiskCache *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkDiskCache(void *, int);}
static void release_QNetworkDiskCache(void *sipCppV,int)
{
    QNetworkDiskCache *sipCpp = reinterpret_cast<QNetworkDiskCache *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QNetworkDiskCache(sipSimpleWrapper *);}
static void dealloc_QNetworkDiskCache(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkDiskCache *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkDiskCache(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QNetworkDiskCache(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkDiskCache(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkDiskCache *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQNetworkDiskCache(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkDiskCache[] = {{0, 255, 1}};


static PyMethodDef methods_QNetworkDiskCache[] = {
    {SIP_MLNAME_CAST(sipName_cacheDirectory), meth_QNetworkDiskCache_cacheDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_cacheDirectory)},
    {SIP_MLNAME_CAST(sipName_cacheSize), meth_QNetworkDiskCache_cacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_cacheSize)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QNetworkDiskCache_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_clear)},
    {SIP_MLNAME_CAST(sipName_data), meth_QNetworkDiskCache_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_data)},
    {SIP_MLNAME_CAST(sipName_expire), meth_QNetworkDiskCache_expire, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_expire)},
    {SIP_MLNAME_CAST(sipName_fileMetaData), meth_QNetworkDiskCache_fileMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_fileMetaData)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QNetworkDiskCache_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_insert)},
    {SIP_MLNAME_CAST(sipName_maximumCacheSize), meth_QNetworkDiskCache_maximumCacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_maximumCacheSize)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QNetworkDiskCache_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_metaData)},
    {SIP_MLNAME_CAST(sipName_prepare), meth_QNetworkDiskCache_prepare, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_prepare)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QNetworkDiskCache_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_remove)},
    {SIP_MLNAME_CAST(sipName_setCacheDirectory), meth_QNetworkDiskCache_setCacheDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_setCacheDirectory)},
    {SIP_MLNAME_CAST(sipName_setMaximumCacheSize), meth_QNetworkDiskCache_setMaximumCacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_setMaximumCacheSize)},
    {SIP_MLNAME_CAST(sipName_updateMetaData), meth_QNetworkDiskCache_updateMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_updateMetaData)}
};

PyDoc_STRVAR(doc_QNetworkDiskCache, "\1QNetworkDiskCache(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QNetworkDiskCache = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QNetworkDiskCache,
        {0}
    },
    {
        sipNameNr_QNetworkDiskCache,
        {0, 0, 1},
        14, methods_QNetworkDiskCache,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNetworkDiskCache,
    -1,
    -1,
    supers_QNetworkDiskCache,
    0,
    init_type_QNetworkDiskCache,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkDiskCache,
    0,
    0,
    0,
    release_QNetworkDiskCache,
    cast_QNetworkDiskCache,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QNetworkDiskCache::staticMetaObject,
    0,
    0
};
