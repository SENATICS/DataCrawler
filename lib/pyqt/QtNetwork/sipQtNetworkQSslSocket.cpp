/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:23 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qsslsocket.sip"
#include <qsslsocket.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qsslcertificate.sip"
#include <qsslcertificate.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 40 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qssl.sip"
#include <qssl.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qsslcipher.sip"
#include <qsslcipher.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qsslkey.sip"
#include <qsslkey.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"


class sipQSslSocket : public QSslSocket
{
public:
    sipQSslSocket(QObject*);
    virtual ~sipQSslSocket();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool reset();
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    bool open(QIODevice::OpenMode);
    qint64 readLineData(char*,qint64);
    bool isSequential() const;
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readData(char*,qint64);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool atEnd() const;
    void close();
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSslSocket(const sipQSslSocket &);
    sipQSslSocket &operator = (const sipQSslSocket &);

    char sipPyMethods[23];
};

sipQSslSocket::sipQSslSocket(QObject*a0): QSslSocket(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSslSocket::~sipQSslSocket()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSslSocket::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QSslSocket);
}

int sipQSslSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSslSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QSslSocket,_c,_id,_a);

    return _id;
}

void *sipQSslSocket::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QSslSocket, _clname)) ? this : QSslSocket::qt_metacast(_clname);
}

void sipQSslSocket::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSslSocket::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSslSocket::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSslSocket::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSslSocket::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSslSocket::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSslSocket::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSslSocket::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSslSocket::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSslSocket::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSslSocket::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSslSocket::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQSslSocket::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSslSocket::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSslSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QSslSocket::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSslSocket::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QSslSocket::seek(a0);

    typedef bool (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return ((sipVH_QtCore_32)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[32]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQSslSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QSslSocket::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQSslSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QSslSocket::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSslSocket::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QSslSocket::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[15]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQSslSocket::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QSslSocket::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQSslSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QSslSocket::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQSslSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QSslSocket::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[20]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQSslSocket::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QSslSocket::readData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQSslSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QSslSocket::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSslSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QSslSocket::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSslSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QSslSocket::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQSslSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QSslSocket::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSslSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QSslSocket::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQSslSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QSslSocket::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQSslSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QSslSocket::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSslSocket_connectToHostEncrypted, "QSslSocket.connectToHostEncrypted(QString, int, QIODevice.OpenMode mode=QIODevice.ReadWrite)\n"
    "QSslSocket.connectToHostEncrypted(QString, int, QString, QIODevice.OpenMode mode=QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QSslSocket_connectToHostEncrypted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_connectToHostEncrypted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1t|J1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToHostEncrypted(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1;
        const QString* a2;
        int a2State = 0;
        QIODevice::OpenMode a3def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a3 = &a3def;
        int a3State = 0;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1tJ1|J1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State, sipType_QIODevice_OpenMode, &a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToHostEncrypted(*a0,a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QIODevice_OpenMode,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_connectToHostEncrypted, doc_QSslSocket_connectToHostEncrypted);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setSocketDescriptor, "QSslSocket.setSocketDescriptor(int, QAbstractSocket.SocketState state=QAbstractSocket.ConnectedState, QIODevice.OpenMode mode=QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QSslSocket_setSocketDescriptor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractSocket::SocketState a1 = QAbstractSocket::ConnectedState;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_state,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|EJ1", &sipSelf, sipType_QSslSocket, &sipCpp, &a0, sipType_QAbstractSocket_SocketState, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setSocketDescriptor(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setSocketDescriptor, doc_QSslSocket_setSocketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_mode, "QSslSocket.mode() -> QSslSocket.SslMode");

extern "C" {static PyObject *meth_QSslSocket_mode(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_mode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslSocket::SslMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSslSocket_SslMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_mode, doc_QSslSocket_mode);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_isEncrypted, "QSslSocket.isEncrypted() -> bool");

extern "C" {static PyObject *meth_QSslSocket_isEncrypted(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_isEncrypted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEncrypted();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_isEncrypted, doc_QSslSocket_isEncrypted);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_protocol, "QSslSocket.protocol() -> QSsl.SslProtocol");

extern "C" {static PyObject *meth_QSslSocket_protocol(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_protocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSsl::SslProtocol sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->protocol();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSsl_SslProtocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_protocol, doc_QSslSocket_protocol);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setProtocol, "QSslSocket.setProtocol(QSsl.SslProtocol)");

extern "C" {static PyObject *meth_QSslSocket_setProtocol(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSsl::SslProtocol a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSsl_SslProtocol, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProtocol(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setProtocol, doc_QSslSocket_setProtocol);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_bytesAvailable, "QSslSocket.bytesAvailable() -> int");

extern "C" {static PyObject *meth_QSslSocket_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::bytesAvailable() : sipCpp->bytesAvailable());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_bytesAvailable, doc_QSslSocket_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_bytesToWrite, "QSslSocket.bytesToWrite() -> int");

extern "C" {static PyObject *meth_QSslSocket_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::bytesToWrite() : sipCpp->bytesToWrite());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_bytesToWrite, doc_QSslSocket_bytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_canReadLine, "QSslSocket.canReadLine() -> bool");

extern "C" {static PyObject *meth_QSslSocket_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::canReadLine() : sipCpp->canReadLine());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_canReadLine, doc_QSslSocket_canReadLine);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_close, "QSslSocket.close()");

extern "C" {static PyObject *meth_QSslSocket_close(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSslSocket::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_close, doc_QSslSocket_close);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_atEnd, "QSslSocket.atEnd() -> bool");

extern "C" {static PyObject *meth_QSslSocket_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::atEnd() : sipCpp->atEnd());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_atEnd, doc_QSslSocket_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_flush, "QSslSocket.flush() -> bool");

extern "C" {static PyObject *meth_QSslSocket_flush(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flush();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_flush, doc_QSslSocket_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_abort, "QSslSocket.abort()");

extern "C" {static PyObject *meth_QSslSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->abort();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_abort, doc_QSslSocket_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setLocalCertificate, "QSslSocket.setLocalCertificate(QSslCertificate)\n"
    "QSslSocket.setLocalCertificate(QString, QSsl.EncodingFormat format=QSsl.Pem)");

extern "C" {static PyObject *meth_QSslSocket_setLocalCertificate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setLocalCertificate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate* a0;
        QSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSslCertificate, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLocalCertificate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QSsl::EncodingFormat a1 = QSsl::Pem;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSsl_EncodingFormat, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLocalCertificate(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setLocalCertificate, doc_QSslSocket_setLocalCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_localCertificate, "QSslSocket.localCertificate() -> QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_localCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_localCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslCertificate*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSslCertificate(sipCpp->localCertificate());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_localCertificate, doc_QSslSocket_localCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_peerCertificate, "QSslSocket.peerCertificate() -> QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_peerCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_peerCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslCertificate*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSslCertificate(sipCpp->peerCertificate());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_peerCertificate, doc_QSslSocket_peerCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_peerCertificateChain, "QSslSocket.peerCertificateChain() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_peerCertificateChain(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_peerCertificateChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QList<QSslCertificate>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QSslCertificate>(sipCpp->peerCertificateChain());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_peerCertificateChain, doc_QSslSocket_peerCertificateChain);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sessionCipher, "QSslSocket.sessionCipher() -> QSslCipher");

extern "C" {static PyObject *meth_QSslSocket_sessionCipher(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sessionCipher(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslCipher*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSslCipher(sipCpp->sessionCipher());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSslCipher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sessionCipher, doc_QSslSocket_sessionCipher);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPrivateKey, "QSslSocket.setPrivateKey(QSslKey)\n"
    "QSslSocket.setPrivateKey(QString, QSsl.KeyAlgorithm algorithm=QSsl.Rsa, QSsl.EncodingFormat format=QSsl.Pem, QByteArray passPhrase=QByteArray())");

extern "C" {static PyObject *meth_QSslSocket_setPrivateKey(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPrivateKey(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslKey* a0;
        QSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSslKey, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrivateKey(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QSsl::KeyAlgorithm a1 = QSsl::Rsa;
        QSsl::EncodingFormat a2 = QSsl::Pem;
        const QByteArray& a3def = QByteArray();
        const QByteArray* a3 = &a3def;
        int a3State = 0;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_algorithm,
            sipName_format,
            sipName_passPhrase,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EEJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSsl_KeyAlgorithm, &a1, sipType_QSsl_EncodingFormat, &a2, sipType_QByteArray, &a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrivateKey(*a0,a1,a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a3),sipType_QByteArray,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPrivateKey, doc_QSslSocket_setPrivateKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_privateKey, "QSslSocket.privateKey() -> QSslKey");

extern "C" {static PyObject *meth_QSslSocket_privateKey(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_privateKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslKey*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSslKey(sipCpp->privateKey());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSslKey,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_privateKey, doc_QSslSocket_privateKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_ciphers, "QSslSocket.ciphers() -> list-of-QSslCipher");

extern "C" {static PyObject *meth_QSslSocket_ciphers(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_ciphers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QList<QSslCipher>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QSslCipher>(sipCpp->ciphers());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCipher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_ciphers, doc_QSslSocket_ciphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setCiphers, "QSslSocket.setCiphers(list-of-QSslCipher)\n"
    "QSslSocket.setCiphers(QString)");

extern "C" {static PyObject *meth_QSslSocket_setCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setCiphers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCipher>* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QList_0100QSslCipher,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCiphers(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QSslCipher> *>(a0),sipType_QList_0100QSslCipher,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCiphers(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setCiphers, doc_QSslSocket_setCiphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setDefaultCiphers, "QSslSocket.setDefaultCiphers(list-of-QSslCipher)");

extern "C" {static PyObject *meth_QSslSocket_setDefaultCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setDefaultCiphers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCipher>* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QList_0100QSslCipher,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QSslSocket::setDefaultCiphers(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QSslCipher> *>(a0),sipType_QList_0100QSslCipher,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setDefaultCiphers, doc_QSslSocket_setDefaultCiphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_defaultCiphers, "QSslSocket.defaultCiphers() -> list-of-QSslCipher");

extern "C" {static PyObject *meth_QSslSocket_defaultCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_defaultCiphers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QSslCipher>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QSslCipher>(QSslSocket::defaultCiphers());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCipher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_defaultCiphers, doc_QSslSocket_defaultCiphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_supportedCiphers, "QSslSocket.supportedCiphers() -> list-of-QSslCipher");

extern "C" {static PyObject *meth_QSslSocket_supportedCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_supportedCiphers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QSslCipher>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QSslCipher>(QSslSocket::supportedCiphers());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCipher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_supportedCiphers, doc_QSslSocket_supportedCiphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_addCaCertificates, "QSslSocket.addCaCertificates(QString, QSsl.EncodingFormat format=QSsl.Pem, QRegExp.PatternSyntax syntax=QRegExp.FixedString) -> bool\n"
    "QSslSocket.addCaCertificates(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_addCaCertificates(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_addCaCertificates(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSsl::EncodingFormat a1 = QSsl::Pem;
        QRegExp::PatternSyntax a2 = QRegExp::FixedString;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_syntax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EE", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSsl_EncodingFormat, &a1, sipType_QRegExp_PatternSyntax, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addCaCertificates(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addCaCertificates(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_addCaCertificates, doc_QSslSocket_addCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_addCaCertificate, "QSslSocket.addCaCertificate(QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_addCaCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_addCaCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate* a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSslCertificate, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addCaCertificate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_addCaCertificate, doc_QSslSocket_addCaCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setCaCertificates, "QSslSocket.setCaCertificates(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_setCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setCaCertificates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCaCertificates(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setCaCertificates, doc_QSslSocket_setCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_caCertificates, "QSslSocket.caCertificates() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_caCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_caCertificates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QList<QSslCertificate>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QSslCertificate>(sipCpp->caCertificates());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_caCertificates, doc_QSslSocket_caCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_addDefaultCaCertificates, "QSslSocket.addDefaultCaCertificates(QString, QSsl.EncodingFormat format=QSsl.Pem, QRegExp.PatternSyntax syntax=QRegExp.FixedString) -> bool\n"
    "QSslSocket.addDefaultCaCertificates(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_addDefaultCaCertificates(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_addDefaultCaCertificates(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSsl::EncodingFormat a1 = QSsl::Pem;
        QRegExp::PatternSyntax a2 = QRegExp::FixedString;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_syntax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|EE", sipType_QString,&a0, &a0State, sipType_QSsl_EncodingFormat, &a1, sipType_QRegExp_PatternSyntax, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QSslSocket::addDefaultCaCertificates(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1", sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QSslSocket::addDefaultCaCertificates(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_addDefaultCaCertificates, doc_QSslSocket_addDefaultCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_addDefaultCaCertificate, "QSslSocket.addDefaultCaCertificate(QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_addDefaultCaCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_addDefaultCaCertificate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QSslCertificate, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QSslSocket::addDefaultCaCertificate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_addDefaultCaCertificate, doc_QSslSocket_addDefaultCaCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setDefaultCaCertificates, "QSslSocket.setDefaultCaCertificates(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_setDefaultCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setDefaultCaCertificates(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QSslSocket::setDefaultCaCertificates(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setDefaultCaCertificates, doc_QSslSocket_setDefaultCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_defaultCaCertificates, "QSslSocket.defaultCaCertificates() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_defaultCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_defaultCaCertificates(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QSslCertificate>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QSslCertificate>(QSslSocket::defaultCaCertificates());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_defaultCaCertificates, doc_QSslSocket_defaultCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_systemCaCertificates, "QSslSocket.systemCaCertificates() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_systemCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_systemCaCertificates(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QSslCertificate>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QSslCertificate>(QSslSocket::systemCaCertificates());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_systemCaCertificates, doc_QSslSocket_systemCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_waitForConnected, "QSslSocket.waitForConnected(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QSslSocket_waitForConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_waitForConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForConnected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_waitForConnected, doc_QSslSocket_waitForConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_waitForEncrypted, "QSslSocket.waitForEncrypted(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QSslSocket_waitForEncrypted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_waitForEncrypted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForEncrypted(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_waitForEncrypted, doc_QSslSocket_waitForEncrypted);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_waitForReadyRead, "QSslSocket.waitForReadyRead(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QSslSocket_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_waitForReadyRead, doc_QSslSocket_waitForReadyRead);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_waitForBytesWritten, "QSslSocket.waitForBytesWritten(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QSslSocket_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_waitForBytesWritten, doc_QSslSocket_waitForBytesWritten);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_waitForDisconnected, "QSslSocket.waitForDisconnected(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QSslSocket_waitForDisconnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_waitForDisconnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForDisconnected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_waitForDisconnected, doc_QSslSocket_waitForDisconnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sslErrors, "QSslSocket.sslErrors() -> list-of-QSslError");

extern "C" {static PyObject *meth_QSslSocket_sslErrors(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QList<QSslError>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QSslError>(sipCpp->sslErrors());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sslErrors, doc_QSslSocket_sslErrors);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_supportsSsl, "QSslSocket.supportsSsl() -> bool");

extern "C" {static PyObject *meth_QSslSocket_supportsSsl(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_supportsSsl(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QSslSocket::supportsSsl();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_supportsSsl, doc_QSslSocket_supportsSsl);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_startClientEncryption, "QSslSocket.startClientEncryption()");

extern "C" {static PyObject *meth_QSslSocket_startClientEncryption(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_startClientEncryption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->startClientEncryption();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_startClientEncryption, doc_QSslSocket_startClientEncryption);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_startServerEncryption, "QSslSocket.startServerEncryption()");

extern "C" {static PyObject *meth_QSslSocket_startServerEncryption(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_startServerEncryption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->startServerEncryption();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_startServerEncryption, doc_QSslSocket_startServerEncryption);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_ignoreSslErrors, "QSslSocket.ignoreSslErrors()\n"
    "QSslSocket.ignoreSslErrors(list-of-QSslError)");

extern "C" {static PyObject *meth_QSslSocket_ignoreSslErrors(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_ignoreSslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignoreSslErrors();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList<QSslError>* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QList_0100QSslError,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignoreSslErrors(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QSslError> *>(a0),sipType_QList_0100QSslError,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_ignoreSslErrors, doc_QSslSocket_ignoreSslErrors);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_connectToHostImplementation, "QSslSocket.connectToHostImplementation(QString, int, QIODevice.OpenMode)");

extern "C" {static PyObject *meth_QSslSocket_connectToHostImplementation(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_connectToHostImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1;
        QIODevice::OpenMode* a2;
        int a2State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1tJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToHostImplementation(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_connectToHostImplementation, doc_QSslSocket_connectToHostImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_disconnectFromHostImplementation, "QSslSocket.disconnectFromHostImplementation()");

extern "C" {static PyObject *meth_QSslSocket_disconnectFromHostImplementation(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_disconnectFromHostImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->disconnectFromHostImplementation();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_disconnectFromHostImplementation, doc_QSslSocket_disconnectFromHostImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_readData, "QSslSocket.readData(int) -> str");

extern "C" {static PyObject *meth_QSslSocket_readData(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qsslsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QSslSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 2180 "/home/desa2/PyQt-x11-gpl-4.10.4/QtNetwork/sipQtNetworkQSslSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_readData, doc_QSslSocket_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_writeData, "QSslSocket.writeData(str) -> int");

extern "C" {static PyObject *meth_QSslSocket_writeData(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QSslSocket, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_writeData, doc_QSslSocket_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_peerVerifyMode, "QSslSocket.peerVerifyMode() -> QSslSocket.PeerVerifyMode");

extern "C" {static PyObject *meth_QSslSocket_peerVerifyMode(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_peerVerifyMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslSocket::PeerVerifyMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->peerVerifyMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSslSocket_PeerVerifyMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_peerVerifyMode, doc_QSslSocket_peerVerifyMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPeerVerifyMode, "QSslSocket.setPeerVerifyMode(QSslSocket.PeerVerifyMode)");

extern "C" {static PyObject *meth_QSslSocket_setPeerVerifyMode(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPeerVerifyMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket::PeerVerifyMode a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSslSocket_PeerVerifyMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPeerVerifyMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPeerVerifyMode, doc_QSslSocket_setPeerVerifyMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_peerVerifyDepth, "QSslSocket.peerVerifyDepth() -> int");

extern "C" {static PyObject *meth_QSslSocket_peerVerifyDepth(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_peerVerifyDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->peerVerifyDepth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_peerVerifyDepth, doc_QSslSocket_peerVerifyDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPeerVerifyDepth, "QSslSocket.setPeerVerifyDepth(int)");

extern "C" {static PyObject *meth_QSslSocket_setPeerVerifyDepth(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPeerVerifyDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPeerVerifyDepth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPeerVerifyDepth, doc_QSslSocket_setPeerVerifyDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setReadBufferSize, "QSslSocket.setReadBufferSize(int)");

extern "C" {static PyObject *meth_QSslSocket_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadBufferSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setReadBufferSize, doc_QSslSocket_setReadBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_encryptedBytesAvailable, "QSslSocket.encryptedBytesAvailable() -> int");

extern "C" {static PyObject *meth_QSslSocket_encryptedBytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_encryptedBytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->encryptedBytesAvailable();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_encryptedBytesAvailable, doc_QSslSocket_encryptedBytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_encryptedBytesToWrite, "QSslSocket.encryptedBytesToWrite() -> int");

extern "C" {static PyObject *meth_QSslSocket_encryptedBytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_encryptedBytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->encryptedBytesToWrite();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_encryptedBytesToWrite, doc_QSslSocket_encryptedBytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sslConfiguration, "QSslSocket.sslConfiguration() -> QSslConfiguration");

extern "C" {static PyObject *meth_QSslSocket_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslConfiguration*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSslConfiguration(sipCpp->sslConfiguration());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sslConfiguration, doc_QSslSocket_sslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setSslConfiguration, "QSslSocket.setSslConfiguration(QSslConfiguration)");

extern "C" {static PyObject *meth_QSslSocket_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSslConfiguration(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setSslConfiguration, doc_QSslSocket_setSslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setSocketOption, "QSslSocket.setSocketOption(QAbstractSocket.SocketOption, QVariant)");

extern "C" {static PyObject *meth_QSslSocket_setSocketOption(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setSocketOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::SocketOption a0;
        const QVariant* a1;
        int a1State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QAbstractSocket_SocketOption, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSocketOption(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setSocketOption, doc_QSslSocket_setSocketOption);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_socketOption, "QSslSocket.socketOption(QAbstractSocket.SocketOption) -> QVariant");

extern "C" {static PyObject *meth_QSslSocket_socketOption(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_socketOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::SocketOption a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QAbstractSocket_SocketOption, &a0))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->socketOption(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_socketOption, doc_QSslSocket_socketOption);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_peerVerifyName, "QSslSocket.peerVerifyName() -> QString");

extern "C" {static PyObject *meth_QSslSocket_peerVerifyName(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_peerVerifyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->peerVerifyName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_peerVerifyName, doc_QSslSocket_peerVerifyName);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPeerVerifyName, "QSslSocket.setPeerVerifyName(QString)");

extern "C" {static PyObject *meth_QSslSocket_setPeerVerifyName(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPeerVerifyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPeerVerifyName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPeerVerifyName, doc_QSslSocket_setPeerVerifyName);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSslSocket(void *, const sipTypeDef *);}
static void *cast_QSslSocket(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSslSocket)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTcpSocket)->ctd_cast((QTcpSocket *)(QSslSocket *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSslSocket(void *, int);}
static void release_QSslSocket(void *sipCppV,int)
{
    QSslSocket *sipCpp = reinterpret_cast<QSslSocket *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSslSocket(sipSimpleWrapper *);}
static void dealloc_QSslSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSslSocket *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSslSocket(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSslSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSslSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSslSocket *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSslSocket(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSslSocket[] = {{102, 255, 1}};


static PyMethodDef methods_QSslSocket[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QSslSocket_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_abort)},
    {SIP_MLNAME_CAST(sipName_addCaCertificate), meth_QSslSocket_addCaCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_addCaCertificate)},
    {SIP_MLNAME_CAST(sipName_addCaCertificates), (PyCFunction)meth_QSslSocket_addCaCertificates, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_addCaCertificates)},
    {SIP_MLNAME_CAST(sipName_addDefaultCaCertificate), meth_QSslSocket_addDefaultCaCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_addDefaultCaCertificate)},
    {SIP_MLNAME_CAST(sipName_addDefaultCaCertificates), (PyCFunction)meth_QSslSocket_addDefaultCaCertificates, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_addDefaultCaCertificates)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QSslSocket_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_atEnd)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QSslSocket_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QSslSocket_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_caCertificates), meth_QSslSocket_caCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_caCertificates)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QSslSocket_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_canReadLine)},
    {SIP_MLNAME_CAST(sipName_ciphers), meth_QSslSocket_ciphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_ciphers)},
    {SIP_MLNAME_CAST(sipName_close), meth_QSslSocket_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_close)},
    {SIP_MLNAME_CAST(sipName_connectToHostEncrypted), (PyCFunction)meth_QSslSocket_connectToHostEncrypted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_connectToHostEncrypted)},
    {SIP_MLNAME_CAST(sipName_connectToHostImplementation), meth_QSslSocket_connectToHostImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_connectToHostImplementation)},
    {SIP_MLNAME_CAST(sipName_defaultCaCertificates), meth_QSslSocket_defaultCaCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_defaultCaCertificates)},
    {SIP_MLNAME_CAST(sipName_defaultCiphers), meth_QSslSocket_defaultCiphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_defaultCiphers)},
    {SIP_MLNAME_CAST(sipName_disconnectFromHostImplementation), meth_QSslSocket_disconnectFromHostImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_disconnectFromHostImplementation)},
    {SIP_MLNAME_CAST(sipName_encryptedBytesAvailable), meth_QSslSocket_encryptedBytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_encryptedBytesAvailable)},
    {SIP_MLNAME_CAST(sipName_encryptedBytesToWrite), meth_QSslSocket_encryptedBytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_encryptedBytesToWrite)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QSslSocket_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_flush)},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrors), meth_QSslSocket_ignoreSslErrors, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_ignoreSslErrors)},
    {SIP_MLNAME_CAST(sipName_isEncrypted), meth_QSslSocket_isEncrypted, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_isEncrypted)},
    {SIP_MLNAME_CAST(sipName_localCertificate), meth_QSslSocket_localCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_localCertificate)},
    {SIP_MLNAME_CAST(sipName_mode), meth_QSslSocket_mode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_mode)},
    {SIP_MLNAME_CAST(sipName_peerCertificate), meth_QSslSocket_peerCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_peerCertificate)},
    {SIP_MLNAME_CAST(sipName_peerCertificateChain), meth_QSslSocket_peerCertificateChain, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_peerCertificateChain)},
    {SIP_MLNAME_CAST(sipName_peerVerifyDepth), meth_QSslSocket_peerVerifyDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_peerVerifyDepth)},
    {SIP_MLNAME_CAST(sipName_peerVerifyMode), meth_QSslSocket_peerVerifyMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_peerVerifyMode)},
    {SIP_MLNAME_CAST(sipName_peerVerifyName), meth_QSslSocket_peerVerifyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_peerVerifyName)},
    {SIP_MLNAME_CAST(sipName_privateKey), meth_QSslSocket_privateKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_privateKey)},
    {SIP_MLNAME_CAST(sipName_protocol), meth_QSslSocket_protocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_protocol)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QSslSocket_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_readData)},
    {SIP_MLNAME_CAST(sipName_sessionCipher), meth_QSslSocket_sessionCipher, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sessionCipher)},
    {SIP_MLNAME_CAST(sipName_setCaCertificates), meth_QSslSocket_setCaCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setCaCertificates)},
    {SIP_MLNAME_CAST(sipName_setCiphers), meth_QSslSocket_setCiphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setCiphers)},
    {SIP_MLNAME_CAST(sipName_setDefaultCaCertificates), meth_QSslSocket_setDefaultCaCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setDefaultCaCertificates)},
    {SIP_MLNAME_CAST(sipName_setDefaultCiphers), meth_QSslSocket_setDefaultCiphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setDefaultCiphers)},
    {SIP_MLNAME_CAST(sipName_setLocalCertificate), (PyCFunction)meth_QSslSocket_setLocalCertificate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_setLocalCertificate)},
    {SIP_MLNAME_CAST(sipName_setPeerVerifyDepth), meth_QSslSocket_setPeerVerifyDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setPeerVerifyDepth)},
    {SIP_MLNAME_CAST(sipName_setPeerVerifyMode), meth_QSslSocket_setPeerVerifyMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setPeerVerifyMode)},
    {SIP_MLNAME_CAST(sipName_setPeerVerifyName), meth_QSslSocket_setPeerVerifyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setPeerVerifyName)},
    {SIP_MLNAME_CAST(sipName_setPrivateKey), (PyCFunction)meth_QSslSocket_setPrivateKey, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_setPrivateKey)},
    {SIP_MLNAME_CAST(sipName_setProtocol), meth_QSslSocket_setProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setProtocol)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QSslSocket_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), (PyCFunction)meth_QSslSocket_setSocketDescriptor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_setSocketOption), meth_QSslSocket_setSocketOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setSocketOption)},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QSslSocket_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_socketOption), meth_QSslSocket_socketOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_socketOption)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QSslSocket_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_sslErrors), meth_QSslSocket_sslErrors, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sslErrors)},
    {SIP_MLNAME_CAST(sipName_startClientEncryption), meth_QSslSocket_startClientEncryption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_startClientEncryption)},
    {SIP_MLNAME_CAST(sipName_startServerEncryption), meth_QSslSocket_startServerEncryption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_startServerEncryption)},
    {SIP_MLNAME_CAST(sipName_supportedCiphers), meth_QSslSocket_supportedCiphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_supportedCiphers)},
    {SIP_MLNAME_CAST(sipName_supportsSsl), meth_QSslSocket_supportsSsl, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_supportsSsl)},
    {SIP_MLNAME_CAST(sipName_systemCaCertificates), meth_QSslSocket_systemCaCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_systemCaCertificates)},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), (PyCFunction)meth_QSslSocket_waitForBytesWritten, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForConnected), (PyCFunction)meth_QSslSocket_waitForConnected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_waitForConnected)},
    {SIP_MLNAME_CAST(sipName_waitForDisconnected), (PyCFunction)meth_QSslSocket_waitForDisconnected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_waitForDisconnected)},
    {SIP_MLNAME_CAST(sipName_waitForEncrypted), (PyCFunction)meth_QSslSocket_waitForEncrypted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_waitForEncrypted)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), (PyCFunction)meth_QSslSocket_waitForReadyRead, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QSslSocket_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_writeData)}
};

static sipEnumMemberDef enummembers_QSslSocket[] = {
    {sipName_AutoVerifyPeer, static_cast<int>(QSslSocket::AutoVerifyPeer), 99},
    {sipName_QueryPeer, static_cast<int>(QSslSocket::QueryPeer), 99},
    {sipName_SslClientMode, static_cast<int>(QSslSocket::SslClientMode), 100},
    {sipName_SslServerMode, static_cast<int>(QSslSocket::SslServerMode), 100},
    {sipName_UnencryptedMode, static_cast<int>(QSslSocket::UnencryptedMode), 100},
    {sipName_VerifyNone, static_cast<int>(QSslSocket::VerifyNone), 99},
    {sipName_VerifyPeer, static_cast<int>(QSslSocket::VerifyPeer), 99},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QSslSocket[] = {
    {"encryptedBytesWritten(qint64)", "\1QSslSocket.encryptedBytesWritten[int]", 0, 0},
    {"peerVerifyError(QSslError)", "\1QSslSocket.peerVerifyError[QSslError]", 0, 0},
    {"modeChanged(QSslSocket::SslMode)", "\1QSslSocket.modeChanged[QSslSocket.SslMode]", 0, 0},
    {"encrypted()", "\1QSslSocket.encrypted", 0, 0},
    {"sslErrors(QList<QSslError>)", "\1QSslSocket.sslErrors[list-of-QSslError]", &methods_QSslSocket[49], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QSslSocket, "\1QSslSocket(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QSslSocket = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSslSocket,
        {0}
    },
    {
        sipNameNr_QSslSocket,
        {0, 0, 1},
        61, methods_QSslSocket,
        7, enummembers_QSslSocket,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSslSocket,
    -1,
    -1,
    supers_QSslSocket,
    0,
    init_type_QSslSocket,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSslSocket,
    0,
    0,
    0,
    release_QSslSocket,
    cast_QSslSocket,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSslSocket::staticMetaObject,
    0,
    signals_QSslSocket,
};
