/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:33 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSql/qsqlindex.sip"
#include <qsqlindex.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlIndex.cpp"

#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlIndex.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSql/qsqlfield.sip"
#include <qsqlfield.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlIndex.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlIndex.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlIndex.cpp"


PyDoc_STRVAR(doc_QSqlIndex_setCursorName, "QSqlIndex.setCursorName(QString)");

extern "C" {static PyObject *meth_QSqlIndex_setCursorName(PyObject *, PyObject *);}
static PyObject *meth_QSqlIndex_setCursorName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlIndex, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCursorName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlIndex, sipName_setCursorName, doc_QSqlIndex_setCursorName);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlIndex_cursorName, "QSqlIndex.cursorName() -> QString");

extern "C" {static PyObject *meth_QSqlIndex_cursorName(PyObject *, PyObject *);}
static PyObject *meth_QSqlIndex_cursorName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlIndex, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->cursorName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlIndex, sipName_cursorName, doc_QSqlIndex_cursorName);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlIndex_setName, "QSqlIndex.setName(QString)");

extern "C" {static PyObject *meth_QSqlIndex_setName(PyObject *, PyObject *);}
static PyObject *meth_QSqlIndex_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlIndex, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlIndex, sipName_setName, doc_QSqlIndex_setName);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlIndex_name, "QSqlIndex.name() -> QString");

extern "C" {static PyObject *meth_QSqlIndex_name(PyObject *, PyObject *);}
static PyObject *meth_QSqlIndex_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlIndex, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlIndex, sipName_name, doc_QSqlIndex_name);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlIndex_append, "QSqlIndex.append(QSqlField)\n"
    "QSqlIndex.append(QSqlField, bool)");

extern "C" {static PyObject *meth_QSqlIndex_append(PyObject *, PyObject *);}
static PyObject *meth_QSqlIndex_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlField* a0;
        QSqlIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSqlIndex, &sipCpp, sipType_QSqlField, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->append(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QSqlField* a0;
        bool a1;
        QSqlIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9b", &sipSelf, sipType_QSqlIndex, &sipCpp, sipType_QSqlField, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->append(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlIndex, sipName_append, doc_QSqlIndex_append);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlIndex_isDescending, "QSqlIndex.isDescending(int) -> bool");

extern "C" {static PyObject *meth_QSqlIndex_isDescending(PyObject *, PyObject *);}
static PyObject *meth_QSqlIndex_isDescending(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QSqlIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlIndex, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDescending(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlIndex, sipName_isDescending, doc_QSqlIndex_isDescending);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlIndex_setDescending, "QSqlIndex.setDescending(int, bool)");

extern "C" {static PyObject *meth_QSqlIndex_setDescending(PyObject *, PyObject *);}
static PyObject *meth_QSqlIndex_setDescending(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QSqlIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QSqlIndex, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDescending(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlIndex, sipName_setDescending, doc_QSqlIndex_setDescending);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlIndex(void *, const sipTypeDef *);}
static void *cast_QSqlIndex(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSqlIndex)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QSqlRecord)->ctd_cast((QSqlRecord *)(QSqlIndex *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlIndex(void *, int);}
static void release_QSqlIndex(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QSqlIndex *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QSqlIndex(void *, SIP_SSIZE_T, const void *);}
static void assign_QSqlIndex(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSqlIndex *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSqlIndex *>(sipSrc);
}


extern "C" {static void *array_QSqlIndex(SIP_SSIZE_T);}
static void *array_QSqlIndex(SIP_SSIZE_T sipNrElem)
{
    return new QSqlIndex[sipNrElem];
}


extern "C" {static void *copy_QSqlIndex(const void *, SIP_SSIZE_T);}
static void *copy_QSqlIndex(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSqlIndex(reinterpret_cast<const QSqlIndex *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSqlIndex(sipSimpleWrapper *);}
static void dealloc_QSqlIndex(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlIndex(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QSqlIndex(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlIndex(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSqlIndex *sipCpp = 0;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_cursorName,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSqlIndex(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const QSqlIndex* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSqlIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSqlIndex(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSqlIndex[] = {{20, 255, 1}};


static PyMethodDef methods_QSqlIndex[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QSqlIndex_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlIndex_append)},
    {SIP_MLNAME_CAST(sipName_cursorName), meth_QSqlIndex_cursorName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlIndex_cursorName)},
    {SIP_MLNAME_CAST(sipName_isDescending), meth_QSqlIndex_isDescending, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlIndex_isDescending)},
    {SIP_MLNAME_CAST(sipName_name), meth_QSqlIndex_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlIndex_name)},
    {SIP_MLNAME_CAST(sipName_setCursorName), meth_QSqlIndex_setCursorName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlIndex_setCursorName)},
    {SIP_MLNAME_CAST(sipName_setDescending), meth_QSqlIndex_setDescending, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlIndex_setDescending)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QSqlIndex_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlIndex_setName)}
};

PyDoc_STRVAR(doc_QSqlIndex, "\1QSqlIndex(QString cursorName=QString(), QString name=QString())\n"
    "QSqlIndex(QSqlIndex)");


pyqt4ClassTypeDef sipTypeDef_QtSql_QSqlIndex = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QSqlIndex,
        {0}
    },
    {
        sipNameNr_QSqlIndex,
        {0, 0, 1},
        7, methods_QSqlIndex,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSqlIndex,
    -1,
    -1,
    supers_QSqlIndex,
    0,
    init_type_QSqlIndex,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlIndex,
    assign_QSqlIndex,
    array_QSqlIndex,
    copy_QSqlIndex,
    release_QSqlIndex,
    cast_QSqlIndex,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
