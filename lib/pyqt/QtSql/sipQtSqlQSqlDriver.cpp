/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:33 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSql/qsqldriver.sip"
#include <qsqldriver.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSql/qsql.sip"
#include <qsql.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSql/qsqlresult.sip"
#include <qsqlresult.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSql/qsqlfield.sip"
#include <qsqlfield.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSql/qsqlindex.sip"
#include <qsqlindex.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSql/sipQtSqlQSqlDriver.cpp"


class sipQSqlDriver : public QSqlDriver
{
public:
    sipQSqlDriver(QObject*);
    virtual ~sipQSqlDriver();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void setLastError(const QSqlError&);
    void setOpenError(bool);
    void setOpen(bool);
    bool open(const QString&,const QString&,const QString&,const QString&,int,const QString&);
    QSqlResult* createResult() const;
    void close();
    bool hasFeature(QSqlDriver::DriverFeature) const;
    QVariant handle() const;
    QString sqlStatement(QSqlDriver::StatementType,const QString&,const QSqlRecord&,bool) const;
    QString escapeIdentifier(const QString&,QSqlDriver::IdentifierType) const;
    QString formatValue(const QSqlField&,bool) const;
    QSqlRecord record(const QString&) const;
    QSqlIndex primaryIndex(const QString&) const;
    QStringList tables(QSql::TableType) const;
    bool rollbackTransaction();
    bool commitTransaction();
    bool beginTransaction();
    bool isOpen() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlDriver(const sipQSqlDriver &);
    sipQSqlDriver &operator = (const sipQSqlDriver &);

    char sipPyMethods[25];
};

sipQSqlDriver::sipQSqlDriver(QObject*a0): QSqlDriver(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlDriver::~sipQSqlDriver()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSqlDriver::metaObject() const
{
    return sip_QtSql_qt_metaobject(sipPySelf,sipType_QSqlDriver);
}

int sipQSqlDriver::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSqlDriver::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSql_qt_metacall(sipPySelf,sipType_QSqlDriver,_c,_id,_a);

    return _id;
}

void *sipQSqlDriver::qt_metacast(const char *_clname)
{
    return (sip_QtSql_qt_metacast(sipPySelf, sipType_QSqlDriver, _clname)) ? this : QSqlDriver::qt_metacast(_clname);
}

void sipQSqlDriver::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSqlDriver::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtSql_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSqlDriver::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtSql_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSqlDriver::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtSql_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSqlDriver::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtSql_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSqlDriver::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtSql_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSqlDriver::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtSql_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQSqlDriver::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSqlDriver::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtSql_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::setLastError(const QSqlError& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setLastError);

    if (!sipMeth)
    {
        QSqlDriver::setLastError(a0);
        return;
    }

    extern void sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QSqlError&);

    sipVH_QtSql_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::setOpenError(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setOpenError);

    if (!sipMeth)
    {
        QSqlDriver::setOpenError(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtSql_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::setOpen(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setOpen);

    if (!sipMeth)
    {
        QSqlDriver::setOpen(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtSql_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::open(const QString& a0,const QString& a1,const QString& a2,const QString& a3,int a4,const QString& a5)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QSqlDriver,sipName_open);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,const QString&,const QString&,const QString&,int,const QString&);

    return sipVH_QtSql_10(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4, a5);
}

QSqlResult* sipQSqlDriver::createResult() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_QSqlDriver,sipName_createResult);

    if (!sipMeth)
        return 0;

    extern QSqlResult* sipVH_QtSql_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_11(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQSqlDriver::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_QSqlDriver,sipName_close);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtSql_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlDriver::hasFeature(QSqlDriver::DriverFeature a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,sipName_QSqlDriver,sipName_hasFeature);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSqlDriver::DriverFeature);

    return sipVH_QtSql_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQSqlDriver::handle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_handle);

    if (!sipMeth)
        return QSqlDriver::handle();

    extern QVariant sipVH_QtSql_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_3(sipGILState, 0, sipPySelf, sipMeth);
}

QString sipQSqlDriver::sqlStatement(QSqlDriver::StatementType a0,const QString& a1,const QSqlRecord& a2,bool a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_sqlStatement);

    if (!sipMeth)
        return QSqlDriver::sqlStatement(a0,a1,a2,a3);

    extern QString sipVH_QtSql_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSqlDriver::StatementType,const QString&,const QSqlRecord&,bool);

    return sipVH_QtSql_13(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QString sipQSqlDriver::escapeIdentifier(const QString& a0,QSqlDriver::IdentifierType a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_escapeIdentifier);

    if (!sipMeth)
        return QSqlDriver::escapeIdentifier(a0,a1);

    extern QString sipVH_QtSql_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,QSqlDriver::IdentifierType);

    return sipVH_QtSql_14(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QString sipQSqlDriver::formatValue(const QSqlField& a0,bool a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_formatValue);

    if (!sipMeth)
        return QSqlDriver::formatValue(a0,a1);

    extern QString sipVH_QtSql_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QSqlField&,bool);

    return sipVH_QtSql_15(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QSqlRecord sipQSqlDriver::record(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_record);

    if (!sipMeth)
        return QSqlDriver::record(a0);

    extern QSqlRecord sipVH_QtSql_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtSql_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSqlIndex sipQSqlDriver::primaryIndex(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_primaryIndex);

    if (!sipMeth)
        return QSqlDriver::primaryIndex(a0);

    extern QSqlIndex sipVH_QtSql_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtSql_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStringList sipQSqlDriver::tables(QSql::TableType a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_tables);

    if (!sipMeth)
        return QSqlDriver::tables(a0);

    extern QStringList sipVH_QtSql_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSql::TableType);

    return sipVH_QtSql_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::rollbackTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_rollbackTransaction);

    if (!sipMeth)
        return QSqlDriver::rollbackTransaction();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlDriver::commitTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_commitTransaction);

    if (!sipMeth)
        return QSqlDriver::commitTransaction();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlDriver::beginTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_beginTransaction);

    if (!sipMeth)
        return QSqlDriver::beginTransaction();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlDriver::isOpen() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_isOpen);

    if (!sipMeth)
        return QSqlDriver::isOpen();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSqlDriver_isOpen, "QSqlDriver.isOpen() -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isOpen(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::isOpen() : sipCpp->isOpen());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isOpen, doc_QSqlDriver_isOpen);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_isOpenError, "QSqlDriver.isOpenError() -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isOpenError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isOpenError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isOpenError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isOpenError, doc_QSqlDriver_isOpenError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_beginTransaction, "QSqlDriver.beginTransaction() -> bool");

extern "C" {static PyObject *meth_QSqlDriver_beginTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_beginTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::beginTransaction() : sipCpp->beginTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_beginTransaction, doc_QSqlDriver_beginTransaction);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_commitTransaction, "QSqlDriver.commitTransaction() -> bool");

extern "C" {static PyObject *meth_QSqlDriver_commitTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_commitTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::commitTransaction() : sipCpp->commitTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_commitTransaction, doc_QSqlDriver_commitTransaction);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_rollbackTransaction, "QSqlDriver.rollbackTransaction() -> bool");

extern "C" {static PyObject *meth_QSqlDriver_rollbackTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_rollbackTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::rollbackTransaction() : sipCpp->rollbackTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_rollbackTransaction, doc_QSqlDriver_rollbackTransaction);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_tables, "QSqlDriver.tables(QSql.TableType) -> QStringList");

extern "C" {static PyObject *meth_QSqlDriver_tables(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_tables(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSql::TableType a0;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSql_TableType, &a0))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QSqlDriver::tables(a0) : sipCpp->tables(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_tables, doc_QSqlDriver_tables);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_primaryIndex, "QSqlDriver.primaryIndex(QString) -> QSqlIndex");

extern "C" {static PyObject *meth_QSqlDriver_primaryIndex(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_primaryIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QSqlIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlIndex((sipSelfWasArg ? sipCpp->QSqlDriver::primaryIndex(*a0) : sipCpp->primaryIndex(*a0)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_primaryIndex, doc_QSqlDriver_primaryIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_record, "QSqlDriver.record(QString) -> QSqlRecord");

extern "C" {static PyObject *meth_QSqlDriver_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QSqlRecord*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlRecord((sipSelfWasArg ? sipCpp->QSqlDriver::record(*a0) : sipCpp->record(*a0)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_record, doc_QSqlDriver_record);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_formatValue, "QSqlDriver.formatValue(QSqlField, bool trimStrings=False) -> QString");

extern "C" {static PyObject *meth_QSqlDriver_formatValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_formatValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlField* a0;
        bool a1 = 0;
        const QSqlDriver *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_trimStrings,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlField, &a0, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlDriver::formatValue(*a0,a1) : sipCpp->formatValue(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_formatValue, doc_QSqlDriver_formatValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_escapeIdentifier, "QSqlDriver.escapeIdentifier(QString, QSqlDriver.IdentifierType) -> QString");

extern "C" {static PyObject *meth_QSqlDriver_escapeIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_escapeIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver::IdentifierType a1;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlDriver::escapeIdentifier(*a0,a1) : sipCpp->escapeIdentifier(*a0,a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_escapeIdentifier, doc_QSqlDriver_escapeIdentifier);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_sqlStatement, "QSqlDriver.sqlStatement(QSqlDriver.StatementType, QString, QSqlRecord, bool) -> QString");

extern "C" {static PyObject *meth_QSqlDriver_sqlStatement(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_sqlStatement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver::StatementType a0;
        const QString* a1;
        int a1State = 0;
        const QSqlRecord* a2;
        bool a3;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1J9b", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlDriver_StatementType, &a0, sipType_QString,&a1, &a1State, sipType_QSqlRecord, &a2, &a3))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlDriver::sqlStatement(a0,*a1,*a2,a3) : sipCpp->sqlStatement(a0,*a1,*a2,a3)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_sqlStatement, doc_QSqlDriver_sqlStatement);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_lastError, "QSqlDriver.lastError() -> QSqlError");

extern "C" {static PyObject *meth_QSqlDriver_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QSqlError*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlError(sipCpp->lastError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_lastError, doc_QSqlDriver_lastError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_handle, "QSqlDriver.handle() -> QVariant");

extern "C" {static PyObject *meth_QSqlDriver_handle(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QSqlDriver::handle() : sipCpp->handle()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_handle, doc_QSqlDriver_handle);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_hasFeature, "QSqlDriver.hasFeature(QSqlDriver.DriverFeature) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlDriver::DriverFeature a0;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlDriver_DriverFeature, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_hasFeature);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFeature(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_hasFeature, doc_QSqlDriver_hasFeature);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_close, "QSqlDriver.close()");

extern "C" {static PyObject *meth_QSqlDriver_close(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_close);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->close();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_close, doc_QSqlDriver_close);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_createResult, "QSqlDriver.createResult() -> QSqlResult");

extern "C" {static PyObject *meth_QSqlDriver_createResult(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_createResult(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QSqlResult*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_createResult);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createResult();
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_createResult, doc_QSqlDriver_createResult);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_open, "QSqlDriver.open(QString, QString user=QString(), QString password=QString(), QString host=QString(), int port=-1, QString options=QString()) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_open(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_open(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString* a3 = &a3def;
        int a3State = 0;
        int a4 = -1;
        const QString& a5def = QString();
        const QString* a5 = &a5def;
        int a5State = 0;
        QSqlDriver *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_user,
            sipName_password,
            sipName_host,
            sipName_port,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J1J1iJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, &a4, sipType_QString,&a5, &a5State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_open);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open(*a0,*a1,*a2,*a3,a4,*a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_open, doc_QSqlDriver_open);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_setOpen, "QSqlDriver.setOpen(bool)");

extern "C" {static PyObject *meth_QSqlDriver_setOpen(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QSqlDriver, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlDriver::setOpen(a0) : sipCpp->setOpen(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setOpen, doc_QSqlDriver_setOpen);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_setOpenError, "QSqlDriver.setOpenError(bool)");

extern "C" {static PyObject *meth_QSqlDriver_setOpenError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setOpenError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QSqlDriver, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlDriver::setOpenError(a0) : sipCpp->setOpenError(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setOpenError, doc_QSqlDriver_setOpenError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_setLastError, "QSqlDriver.setLastError(QSqlError)");

extern "C" {static PyObject *meth_QSqlDriver_setLastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setLastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlError* a0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlError, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlDriver::setLastError(*a0) : sipCpp->setLastError(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setLastError, doc_QSqlDriver_setLastError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_subscribeToNotification, "QSqlDriver.subscribeToNotification(QString) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_subscribeToNotification(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribeToNotification(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->subscribeToNotification(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_subscribeToNotification, doc_QSqlDriver_subscribeToNotification);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_unsubscribeFromNotification, "QSqlDriver.unsubscribeFromNotification(QString) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_unsubscribeFromNotification(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_unsubscribeFromNotification(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unsubscribeFromNotification(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_unsubscribeFromNotification, doc_QSqlDriver_unsubscribeFromNotification);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_subscribedToNotifications, "QSqlDriver.subscribedToNotifications() -> QStringList");

extern "C" {static PyObject *meth_QSqlDriver_subscribedToNotifications(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribedToNotifications(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->subscribedToNotifications());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_subscribedToNotifications, doc_QSqlDriver_subscribedToNotifications);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_subscribeToNotificationImplementation, "QSqlDriver.subscribeToNotificationImplementation(QString) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_subscribeToNotificationImplementation(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribeToNotificationImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->subscribeToNotificationImplementation(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_subscribeToNotificationImplementation, doc_QSqlDriver_subscribeToNotificationImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_unsubscribeFromNotificationImplementation, "QSqlDriver.unsubscribeFromNotificationImplementation(QString) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_unsubscribeFromNotificationImplementation(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_unsubscribeFromNotificationImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unsubscribeFromNotificationImplementation(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_unsubscribeFromNotificationImplementation, doc_QSqlDriver_unsubscribeFromNotificationImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_subscribedToNotificationsImplementation, "QSqlDriver.subscribedToNotificationsImplementation() -> QStringList");

extern "C" {static PyObject *meth_QSqlDriver_subscribedToNotificationsImplementation(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribedToNotificationsImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->subscribedToNotificationsImplementation());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_subscribedToNotificationsImplementation, doc_QSqlDriver_subscribedToNotificationsImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_isIdentifierEscapedImplementation, "QSqlDriver.isIdentifierEscapedImplementation(QString, QSqlDriver.IdentifierType) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isIdentifierEscapedImplementation(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isIdentifierEscapedImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver::IdentifierType a1;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isIdentifierEscapedImplementation(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isIdentifierEscapedImplementation, doc_QSqlDriver_isIdentifierEscapedImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_stripDelimitersImplementation, "QSqlDriver.stripDelimitersImplementation(QString, QSqlDriver.IdentifierType) -> QString");

extern "C" {static PyObject *meth_QSqlDriver_stripDelimitersImplementation(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_stripDelimitersImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver::IdentifierType a1;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->stripDelimitersImplementation(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_stripDelimitersImplementation, doc_QSqlDriver_stripDelimitersImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_isIdentifierEscaped, "QSqlDriver.isIdentifierEscaped(QString, QSqlDriver.IdentifierType) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isIdentifierEscaped(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isIdentifierEscaped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver::IdentifierType a1;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isIdentifierEscaped(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isIdentifierEscaped, doc_QSqlDriver_isIdentifierEscaped);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_stripDelimiters, "QSqlDriver.stripDelimiters(QString, QSqlDriver.IdentifierType) -> QString");

extern "C" {static PyObject *meth_QSqlDriver_stripDelimiters(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_stripDelimiters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver::IdentifierType a1;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->stripDelimiters(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_stripDelimiters, doc_QSqlDriver_stripDelimiters);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_setNumericalPrecisionPolicy, "QSqlDriver.setNumericalPrecisionPolicy(QSql.NumericalPrecisionPolicy)");

extern "C" {static PyObject *meth_QSqlDriver_setNumericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setNumericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSql::NumericalPrecisionPolicy a0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSql_NumericalPrecisionPolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNumericalPrecisionPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setNumericalPrecisionPolicy, doc_QSqlDriver_setNumericalPrecisionPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_numericalPrecisionPolicy, "QSqlDriver.numericalPrecisionPolicy() -> QSql.NumericalPrecisionPolicy");

extern "C" {static PyObject *meth_QSqlDriver_numericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_numericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QSql::NumericalPrecisionPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numericalPrecisionPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSql_NumericalPrecisionPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_numericalPrecisionPolicy, doc_QSqlDriver_numericalPrecisionPolicy);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlDriver(void *, const sipTypeDef *);}
static void *cast_QSqlDriver(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSqlDriver)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSqlDriver *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlDriver(void *, int);}
static void release_QSqlDriver(void *sipCppV,int)
{
    QSqlDriver *sipCpp = reinterpret_cast<QSqlDriver *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSqlDriver(sipSimpleWrapper *);}
static void dealloc_QSqlDriver(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSqlDriver *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlDriver(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSqlDriver(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlDriver(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSqlDriver *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSqlDriver(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSqlDriver[] = {{141, 0, 1}};


static PyMethodDef methods_QSqlDriver[] = {
    {SIP_MLNAME_CAST(sipName_beginTransaction), meth_QSqlDriver_beginTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_beginTransaction)},
    {SIP_MLNAME_CAST(sipName_close), meth_QSqlDriver_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_close)},
    {SIP_MLNAME_CAST(sipName_commitTransaction), meth_QSqlDriver_commitTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_commitTransaction)},
    {SIP_MLNAME_CAST(sipName_createResult), meth_QSqlDriver_createResult, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_createResult)},
    {SIP_MLNAME_CAST(sipName_escapeIdentifier), meth_QSqlDriver_escapeIdentifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_escapeIdentifier)},
    {SIP_MLNAME_CAST(sipName_formatValue), (PyCFunction)meth_QSqlDriver_formatValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlDriver_formatValue)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QSqlDriver_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_handle)},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QSqlDriver_hasFeature, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_hasFeature)},
    {SIP_MLNAME_CAST(sipName_isIdentifierEscaped), meth_QSqlDriver_isIdentifierEscaped, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_isIdentifierEscaped)},
    {SIP_MLNAME_CAST(sipName_isIdentifierEscapedImplementation), meth_QSqlDriver_isIdentifierEscapedImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_isIdentifierEscapedImplementation)},
    {SIP_MLNAME_CAST(sipName_isOpen), meth_QSqlDriver_isOpen, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_isOpen)},
    {SIP_MLNAME_CAST(sipName_isOpenError), meth_QSqlDriver_isOpenError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_isOpenError)},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QSqlDriver_lastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_lastError)},
    {SIP_MLNAME_CAST(sipName_numericalPrecisionPolicy), meth_QSqlDriver_numericalPrecisionPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_numericalPrecisionPolicy)},
    {SIP_MLNAME_CAST(sipName_open), (PyCFunction)meth_QSqlDriver_open, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlDriver_open)},
    {SIP_MLNAME_CAST(sipName_primaryIndex), meth_QSqlDriver_primaryIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_primaryIndex)},
    {SIP_MLNAME_CAST(sipName_record), meth_QSqlDriver_record, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_record)},
    {SIP_MLNAME_CAST(sipName_rollbackTransaction), meth_QSqlDriver_rollbackTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_rollbackTransaction)},
    {SIP_MLNAME_CAST(sipName_setLastError), meth_QSqlDriver_setLastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_setLastError)},
    {SIP_MLNAME_CAST(sipName_setNumericalPrecisionPolicy), meth_QSqlDriver_setNumericalPrecisionPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_setNumericalPrecisionPolicy)},
    {SIP_MLNAME_CAST(sipName_setOpen), meth_QSqlDriver_setOpen, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_setOpen)},
    {SIP_MLNAME_CAST(sipName_setOpenError), meth_QSqlDriver_setOpenError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_setOpenError)},
    {SIP_MLNAME_CAST(sipName_sqlStatement), meth_QSqlDriver_sqlStatement, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_sqlStatement)},
    {SIP_MLNAME_CAST(sipName_stripDelimiters), meth_QSqlDriver_stripDelimiters, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_stripDelimiters)},
    {SIP_MLNAME_CAST(sipName_stripDelimitersImplementation), meth_QSqlDriver_stripDelimitersImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_stripDelimitersImplementation)},
    {SIP_MLNAME_CAST(sipName_subscribeToNotification), meth_QSqlDriver_subscribeToNotification, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_subscribeToNotification)},
    {SIP_MLNAME_CAST(sipName_subscribeToNotificationImplementation), meth_QSqlDriver_subscribeToNotificationImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_subscribeToNotificationImplementation)},
    {SIP_MLNAME_CAST(sipName_subscribedToNotifications), meth_QSqlDriver_subscribedToNotifications, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_subscribedToNotifications)},
    {SIP_MLNAME_CAST(sipName_subscribedToNotificationsImplementation), meth_QSqlDriver_subscribedToNotificationsImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_subscribedToNotificationsImplementation)},
    {SIP_MLNAME_CAST(sipName_tables), meth_QSqlDriver_tables, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_tables)},
    {SIP_MLNAME_CAST(sipName_unsubscribeFromNotification), meth_QSqlDriver_unsubscribeFromNotification, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_unsubscribeFromNotification)},
    {SIP_MLNAME_CAST(sipName_unsubscribeFromNotificationImplementation), meth_QSqlDriver_unsubscribeFromNotificationImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_unsubscribeFromNotificationImplementation)}
};

static sipEnumMemberDef enummembers_QSqlDriver[] = {
    {sipName_BLOB, static_cast<int>(QSqlDriver::BLOB), 8},
    {sipName_BatchOperations, static_cast<int>(QSqlDriver::BatchOperations), 8},
    {sipName_DeleteStatement, static_cast<int>(QSqlDriver::DeleteStatement), 10},
    {sipName_EventNotifications, static_cast<int>(QSqlDriver::EventNotifications), 8},
    {sipName_FieldName, static_cast<int>(QSqlDriver::FieldName), 9},
    {sipName_FinishQuery, static_cast<int>(QSqlDriver::FinishQuery), 8},
    {sipName_InsertStatement, static_cast<int>(QSqlDriver::InsertStatement), 10},
    {sipName_LastInsertId, static_cast<int>(QSqlDriver::LastInsertId), 8},
    {sipName_LowPrecisionNumbers, static_cast<int>(QSqlDriver::LowPrecisionNumbers), 8},
    {sipName_MultipleResultSets, static_cast<int>(QSqlDriver::MultipleResultSets), 8},
    {sipName_NamedPlaceholders, static_cast<int>(QSqlDriver::NamedPlaceholders), 8},
    {sipName_PositionalPlaceholders, static_cast<int>(QSqlDriver::PositionalPlaceholders), 8},
    {sipName_PreparedQueries, static_cast<int>(QSqlDriver::PreparedQueries), 8},
    {sipName_QuerySize, static_cast<int>(QSqlDriver::QuerySize), 8},
    {sipName_SelectStatement, static_cast<int>(QSqlDriver::SelectStatement), 10},
    {sipName_SimpleLocking, static_cast<int>(QSqlDriver::SimpleLocking), 8},
    {sipName_TableName, static_cast<int>(QSqlDriver::TableName), 9},
    {sipName_Transactions, static_cast<int>(QSqlDriver::Transactions), 8},
    {sipName_Unicode, static_cast<int>(QSqlDriver::Unicode), 8},
    {sipName_UpdateStatement, static_cast<int>(QSqlDriver::UpdateStatement), 10},
    {sipName_WhereStatement, static_cast<int>(QSqlDriver::WhereStatement), 10},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QSqlDriver[] = {
    {"notification(QString)", "\1QSqlDriver.notification[QString]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QSqlDriver, "\1QSqlDriver(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtSql_QSqlDriver = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSqlDriver,
        {0}
    },
    {
        sipNameNr_QSqlDriver,
        {0, 0, 1},
        32, methods_QSqlDriver,
        21, enummembers_QSqlDriver,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSqlDriver,
    -1,
    -1,
    supers_QSqlDriver,
    0,
    init_type_QSqlDriver,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlDriver,
    0,
    0,
    0,
    release_QSqlDriver,
    cast_QSqlDriver,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSqlDriver::staticMetaObject,
    0,
    signals_QSqlDriver,
};
