/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:15 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 29 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qpydeclarativelistproperty.sip"
#include <QDeclarativeListProperty>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeListProperty0100QObject.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeListProperty0100QObject.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qpydeclarativelistproperty.sip"
#if defined(SIP_USE_PYCAPSULE)
extern "C" {
static void qpydeclarative_QPyDeclarativeListProperty_delete(PyObject *capsule)
{
    delete reinterpret_cast<QDeclarativeListProperty<QObject> *>(PyCapsule_GetPointer(capsule, 0));
}
}
#else
extern "C" {
static void qpydeclarative_QPyDeclarativeListProperty_delete(void *ptr)
{
    delete reinterpret_cast<QDeclarativeListProperty<QObject> *>(ptr);
}
}
#endif
#line 55 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeListProperty0100QObject.cpp"


extern "C" {static void assign_QDeclarativeListProperty_0100QObject(void *, SIP_SSIZE_T, const void *);}
static void assign_QDeclarativeListProperty_0100QObject(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDeclarativeListProperty<QObject> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDeclarativeListProperty<QObject> *>(sipSrc);
}


extern "C" {static void *array_QDeclarativeListProperty_0100QObject(SIP_SSIZE_T);}
static void *array_QDeclarativeListProperty_0100QObject(SIP_SSIZE_T sipNrElem)
{
    return new QDeclarativeListProperty<QObject>[sipNrElem];
}


extern "C" {static void *copy_QDeclarativeListProperty_0100QObject(const void *, SIP_SSIZE_T);}
static void *copy_QDeclarativeListProperty_0100QObject(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDeclarativeListProperty<QObject>(reinterpret_cast<const QDeclarativeListProperty<QObject> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QDeclarativeListProperty_0100QObject(void *, int);}
static void release_QDeclarativeListProperty_0100QObject(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QDeclarativeListProperty<QObject> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QDeclarativeListProperty_0100QObject(PyObject *, void **, int *, PyObject *);}
static int convertTo_QDeclarativeListProperty_0100QObject(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *)
{
    QDeclarativeListProperty<QObject> **sipCppPtr = reinterpret_cast<QDeclarativeListProperty<QObject> **>(sipCppPtrV);

#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qpydeclarativelistproperty.sip"
    if (sipIsErr == NULL)
    {
#if defined(SIP_USE_PYCAPSULE)
        return PyCapsule_CheckExact(sipPy);
#else
        return PyCObject_Check(sipPy);
#endif
    }

#if defined(SIP_USE_PYCAPSULE)
    *sipCppPtr = reinterpret_cast<QDeclarativeListProperty<QObject> *>(
            PyCapsule_GetPointer(sipPy, 0));
#else
    *sipCppPtr = reinterpret_cast<QDeclarativeListProperty<QObject> *>(
            PyCObject_AsVoidPtr(sipPy));
#endif

    // It isn't a temporary copy.
    return 0;
#line 115 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeListProperty0100QObject.cpp"
}


extern "C" {static PyObject *convertFrom_QDeclarativeListProperty_0100QObject(void *, PyObject *);}
static PyObject *convertFrom_QDeclarativeListProperty_0100QObject(void *sipCppV, PyObject *)
{
   QDeclarativeListProperty<QObject> *sipCpp = reinterpret_cast<QDeclarativeListProperty<QObject> *>(sipCppV);

#line 51 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qpydeclarativelistproperty.sip"
#if defined(SIP_USE_PYCAPSULE)
    return PyCapsule_New(sipCpp, 0,
            qpydeclarative_QPyDeclarativeListProperty_delete);
#else
    return PyCObject_FromVoidPtr(sipCpp,
            qpydeclarative_QPyDeclarativeListProperty_delete);
#endif
#line 132 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeListProperty0100QObject.cpp"
}


sipMappedTypeDef sipTypeDef_QtDeclarative_QDeclarativeListProperty_0100QObject = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_190,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QDeclarativeListProperty_0100QObject,
    array_QDeclarativeListProperty_0100QObject,
    copy_QDeclarativeListProperty_0100QObject,
    release_QDeclarativeListProperty_0100QObject,
    convertTo_QDeclarativeListProperty_0100QObject,
    convertFrom_QDeclarativeListProperty_0100QObject
};
