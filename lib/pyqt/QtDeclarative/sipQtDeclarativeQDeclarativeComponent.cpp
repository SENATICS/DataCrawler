/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:15 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativecomponent.sip"
#include <qdeclarativecomponent.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativeengine.sip"
#include <qdeclarativeengine.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativecontext.sip"
#include <qdeclarativecontext.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativeerror.sip"
#include <qdeclarativeerror.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeComponent.cpp"


class sipQDeclarativeComponent : public QDeclarativeComponent
{
public:
    sipQDeclarativeComponent(QDeclarativeEngine*,QObject*);
    sipQDeclarativeComponent(QDeclarativeEngine*,const QString&,QObject*);
    sipQDeclarativeComponent(QDeclarativeEngine*,const QUrl&,QObject*);
    virtual ~sipQDeclarativeComponent();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void completeCreate();
    QObject* beginCreate(QDeclarativeContext*);
    QObject* create(QDeclarativeContext*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDeclarativeComponent(const sipQDeclarativeComponent &);
    sipQDeclarativeComponent &operator = (const sipQDeclarativeComponent &);

    char sipPyMethods[10];
};

sipQDeclarativeComponent::sipQDeclarativeComponent(QDeclarativeEngine*a0,QObject*a1): QDeclarativeComponent(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeComponent::sipQDeclarativeComponent(QDeclarativeEngine*a0,const QString& a1,QObject*a2): QDeclarativeComponent(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeComponent::sipQDeclarativeComponent(QDeclarativeEngine*a0,const QUrl& a1,QObject*a2): QDeclarativeComponent(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeComponent::~sipQDeclarativeComponent()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDeclarativeComponent::metaObject() const
{
    return sip_QtDeclarative_qt_metaobject(sipPySelf,sipType_QDeclarativeComponent);
}

int sipQDeclarativeComponent::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDeclarativeComponent::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtDeclarative_qt_metacall(sipPySelf,sipType_QDeclarativeComponent,_c,_id,_a);

    return _id;
}

void *sipQDeclarativeComponent::qt_metacast(const char *_clname)
{
    return (sip_QtDeclarative_qt_metacast(sipPySelf, sipType_QDeclarativeComponent, _clname)) ? this : QDeclarativeComponent::qt_metacast(_clname);
}

void sipQDeclarativeComponent::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QDeclarativeComponent::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeComponent::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QDeclarativeComponent::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeComponent::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QDeclarativeComponent::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeComponent::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QDeclarativeComponent::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeComponent::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QDeclarativeComponent::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDeclarativeComponent::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QDeclarativeComponent::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDeclarativeComponent::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QDeclarativeComponent::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeComponent::completeCreate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_completeCreate);

    if (!sipMeth)
    {
        QDeclarativeComponent::completeCreate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QObject* sipQDeclarativeComponent::beginCreate(QDeclarativeContext*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_beginCreate);

    if (!sipMeth)
        return QDeclarativeComponent::beginCreate(a0);

    extern QObject* sipVH_QtDeclarative_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDeclarativeContext*);

    return sipVH_QtDeclarative_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QObject* sipQDeclarativeComponent::create(QDeclarativeContext*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_create);

    if (!sipMeth)
        return QDeclarativeComponent::create(a0);

    extern QObject* sipVH_QtDeclarative_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDeclarativeContext*);

    return sipVH_QtDeclarative_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDeclarativeComponent_status, "QDeclarativeComponent.status() -> QDeclarativeComponent.Status");

extern "C" {static PyObject *meth_QDeclarativeComponent_status(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeComponent, &sipCpp))
        {
            QDeclarativeComponent::Status sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->status();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDeclarativeComponent_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_status, doc_QDeclarativeComponent_status);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_isNull, "QDeclarativeComponent.isNull() -> bool");

extern "C" {static PyObject *meth_QDeclarativeComponent_isNull(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeComponent, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_isNull, doc_QDeclarativeComponent_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_isReady, "QDeclarativeComponent.isReady() -> bool");

extern "C" {static PyObject *meth_QDeclarativeComponent_isReady(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_isReady(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeComponent, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReady();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_isReady, doc_QDeclarativeComponent_isReady);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_isError, "QDeclarativeComponent.isError() -> bool");

extern "C" {static PyObject *meth_QDeclarativeComponent_isError(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_isError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeComponent, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_isError, doc_QDeclarativeComponent_isError);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_isLoading, "QDeclarativeComponent.isLoading() -> bool");

extern "C" {static PyObject *meth_QDeclarativeComponent_isLoading(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_isLoading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeComponent, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLoading();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_isLoading, doc_QDeclarativeComponent_isLoading);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_errors, "QDeclarativeComponent.errors() -> list-of-QDeclarativeError");

extern "C" {static PyObject *meth_QDeclarativeComponent_errors(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_errors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeComponent, &sipCpp))
        {
            QList<QDeclarativeError>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QDeclarativeError>(sipCpp->errors());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDeclarativeError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_errors, doc_QDeclarativeComponent_errors);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_progress, "QDeclarativeComponent.progress() -> float");

extern "C" {static PyObject *meth_QDeclarativeComponent_progress(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_progress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeComponent, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->progress();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_progress, doc_QDeclarativeComponent_progress);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_url, "QDeclarativeComponent.url() -> QUrl");

extern "C" {static PyObject *meth_QDeclarativeComponent_url(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeComponent, &sipCpp))
        {
            QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_url, doc_QDeclarativeComponent_url);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_create, "QDeclarativeComponent.create(QDeclarativeContext context=None) -> QObject");

extern "C" {static PyObject *meth_QDeclarativeComponent_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDeclarativeContext* a0 = 0;
        QDeclarativeComponent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_context,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J8", &sipSelf, sipType_QDeclarativeComponent, &sipCpp, sipType_QDeclarativeContext, &a0))
        {
            QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDeclarativeComponent::create(a0) : sipCpp->create(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_create, doc_QDeclarativeComponent_create);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_beginCreate, "QDeclarativeComponent.beginCreate(QDeclarativeContext) -> QObject");

extern "C" {static PyObject *meth_QDeclarativeComponent_beginCreate(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_beginCreate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDeclarativeContext* a0;
        QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDeclarativeComponent, &sipCpp, sipType_QDeclarativeContext, &a0))
        {
            QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDeclarativeComponent::beginCreate(a0) : sipCpp->beginCreate(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_beginCreate, doc_QDeclarativeComponent_beginCreate);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_completeCreate, "QDeclarativeComponent.completeCreate()");

extern "C" {static PyObject *meth_QDeclarativeComponent_completeCreate(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_completeCreate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeComponent, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QDeclarativeComponent::completeCreate() : sipCpp->completeCreate());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_completeCreate, doc_QDeclarativeComponent_completeCreate);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_loadUrl, "QDeclarativeComponent.loadUrl(QUrl)");

extern "C" {static PyObject *meth_QDeclarativeComponent_loadUrl(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_loadUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDeclarativeComponent, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->loadUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_loadUrl, doc_QDeclarativeComponent_loadUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_setData, "QDeclarativeComponent.setData(QByteArray, QUrl)");

extern "C" {static PyObject *meth_QDeclarativeComponent_setData(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QUrl* a1;
        QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QDeclarativeComponent, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QUrl, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setData(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_setData, doc_QDeclarativeComponent_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeComponent_creationContext, "QDeclarativeComponent.creationContext() -> QDeclarativeContext");

extern "C" {static PyObject *meth_QDeclarativeComponent_creationContext(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeComponent_creationContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeComponent, &sipCpp))
        {
            QDeclarativeContext*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->creationContext();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeComponent, sipName_creationContext, doc_QDeclarativeComponent_creationContext);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDeclarativeComponent(void *, const sipTypeDef *);}
static void *cast_QDeclarativeComponent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDeclarativeComponent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QDeclarativeComponent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeComponent(void *, int);}
static void release_QDeclarativeComponent(void *sipCppV,int)
{
    QDeclarativeComponent *sipCpp = reinterpret_cast<QDeclarativeComponent *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDeclarativeComponent(sipSimpleWrapper *);}
static void dealloc_QDeclarativeComponent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDeclarativeComponent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDeclarativeComponent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QDeclarativeComponent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDeclarativeComponent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDeclarativeComponent *sipCpp = 0;

    {
        QDeclarativeEngine* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QDeclarativeEngine, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeComponent(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QDeclarativeEngine* a0;
        const QString* a1;
        int a1State = 0;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J1|JH", sipType_QDeclarativeEngine, &a0, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeComponent(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QDeclarativeEngine* a0;
        const QUrl* a1;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J9|JH", sipType_QDeclarativeEngine, &a0, sipType_QUrl, &a1, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeComponent(a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDeclarativeComponent[] = {{141, 0, 1}};


static PyMethodDef methods_QDeclarativeComponent[] = {
    {SIP_MLNAME_CAST(sipName_beginCreate), meth_QDeclarativeComponent_beginCreate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_beginCreate)},
    {SIP_MLNAME_CAST(sipName_completeCreate), meth_QDeclarativeComponent_completeCreate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_completeCreate)},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QDeclarativeComponent_create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_create)},
    {SIP_MLNAME_CAST(sipName_creationContext), meth_QDeclarativeComponent_creationContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_creationContext)},
    {SIP_MLNAME_CAST(sipName_errors), meth_QDeclarativeComponent_errors, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_errors)},
    {SIP_MLNAME_CAST(sipName_isError), meth_QDeclarativeComponent_isError, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_isError)},
    {SIP_MLNAME_CAST(sipName_isLoading), meth_QDeclarativeComponent_isLoading, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_isLoading)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QDeclarativeComponent_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_isNull)},
    {SIP_MLNAME_CAST(sipName_isReady), meth_QDeclarativeComponent_isReady, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_isReady)},
    {SIP_MLNAME_CAST(sipName_loadUrl), meth_QDeclarativeComponent_loadUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_loadUrl)},
    {SIP_MLNAME_CAST(sipName_progress), meth_QDeclarativeComponent_progress, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_progress)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QDeclarativeComponent_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_setData)},
    {SIP_MLNAME_CAST(sipName_status), meth_QDeclarativeComponent_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_status)},
    {SIP_MLNAME_CAST(sipName_url), meth_QDeclarativeComponent_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeComponent_url)}
};

static sipEnumMemberDef enummembers_QDeclarativeComponent[] = {
    {sipName_Error, static_cast<int>(QDeclarativeComponent::Error), 1},
    {sipName_Loading, static_cast<int>(QDeclarativeComponent::Loading), 1},
    {sipName_Null, static_cast<int>(QDeclarativeComponent::Null), 1},
    {sipName_Ready, static_cast<int>(QDeclarativeComponent::Ready), 1},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDeclarativeComponent[] = {
    {"progressChanged(qreal)", "\1QDeclarativeComponent.progressChanged[float]", 0, 0},
    {"statusChanged(QDeclarativeComponent::Status)", "\1QDeclarativeComponent.statusChanged[QDeclarativeComponent.Status]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QDeclarativeComponent, "\1QDeclarativeComponent(QDeclarativeEngine, QObject parent=None)\n"
    "QDeclarativeComponent(QDeclarativeEngine, QString, QObject parent=None)\n"
    "QDeclarativeComponent(QDeclarativeEngine, QUrl, QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeComponent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeComponent,
        {0}
    },
    {
        sipNameNr_QDeclarativeComponent,
        {0, 0, 1},
        14, methods_QDeclarativeComponent,
        4, enummembers_QDeclarativeComponent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDeclarativeComponent,
    -1,
    -1,
    supers_QDeclarativeComponent,
    0,
    init_type_QDeclarativeComponent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeComponent,
    0,
    0,
    0,
    release_QDeclarativeComponent,
    cast_QDeclarativeComponent,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QDeclarativeComponent::staticMetaObject,
    0,
    signals_QDeclarativeComponent,
};
