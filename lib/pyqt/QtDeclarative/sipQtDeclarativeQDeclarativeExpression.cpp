/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:15 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativeexpression.sip"
#include <qdeclarativeexpression.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativecontext.sip"
#include <qdeclarativecontext.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativeerror.sip"
#include <qdeclarativeerror.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativeengine.sip"
#include <qdeclarativeengine.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"


class sipQDeclarativeExpression : public QDeclarativeExpression
{
public:
    sipQDeclarativeExpression();
    sipQDeclarativeExpression(QDeclarativeContext*,QObject*,const QString&,QObject*);
    virtual ~sipQDeclarativeExpression();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDeclarativeExpression(const sipQDeclarativeExpression &);
    sipQDeclarativeExpression &operator = (const sipQDeclarativeExpression &);

    char sipPyMethods[7];
};

sipQDeclarativeExpression::sipQDeclarativeExpression(): QDeclarativeExpression(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeExpression::sipQDeclarativeExpression(QDeclarativeContext*a0,QObject*a1,const QString& a2,QObject*a3): QDeclarativeExpression(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeExpression::~sipQDeclarativeExpression()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDeclarativeExpression::metaObject() const
{
    return sip_QtDeclarative_qt_metaobject(sipPySelf,sipType_QDeclarativeExpression);
}

int sipQDeclarativeExpression::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDeclarativeExpression::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtDeclarative_qt_metacall(sipPySelf,sipType_QDeclarativeExpression,_c,_id,_a);

    return _id;
}

void *sipQDeclarativeExpression::qt_metacast(const char *_clname)
{
    return (sip_QtDeclarative_qt_metacast(sipPySelf, sipType_QDeclarativeExpression, _clname)) ? this : QDeclarativeExpression::qt_metacast(_clname);
}

void sipQDeclarativeExpression::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QDeclarativeExpression::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeExpression::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QDeclarativeExpression::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeExpression::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QDeclarativeExpression::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeExpression::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QDeclarativeExpression::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeExpression::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QDeclarativeExpression::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDeclarativeExpression::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QDeclarativeExpression::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDeclarativeExpression::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QDeclarativeExpression::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDeclarativeExpression_engine, "QDeclarativeExpression.engine() -> QDeclarativeEngine");

extern "C" {static PyObject *meth_QDeclarativeExpression_engine(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            QDeclarativeEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->engine();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_engine, doc_QDeclarativeExpression_engine);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_context, "QDeclarativeExpression.context() -> QDeclarativeContext");

extern "C" {static PyObject *meth_QDeclarativeExpression_context(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_context(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            QDeclarativeContext*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->context();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_context, doc_QDeclarativeExpression_context);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_expression, "QDeclarativeExpression.expression() -> QString");

extern "C" {static PyObject *meth_QDeclarativeExpression_expression(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_expression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->expression());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_expression, doc_QDeclarativeExpression_expression);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_setExpression, "QDeclarativeExpression.setExpression(QString)");

extern "C" {static PyObject *meth_QDeclarativeExpression_setExpression(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_setExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeExpression, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExpression(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_setExpression, doc_QDeclarativeExpression_setExpression);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_notifyOnValueChanged, "QDeclarativeExpression.notifyOnValueChanged() -> bool");

extern "C" {static PyObject *meth_QDeclarativeExpression_notifyOnValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_notifyOnValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->notifyOnValueChanged();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_notifyOnValueChanged, doc_QDeclarativeExpression_notifyOnValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_setNotifyOnValueChanged, "QDeclarativeExpression.setNotifyOnValueChanged(bool)");

extern "C" {static PyObject *meth_QDeclarativeExpression_setNotifyOnValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_setNotifyOnValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDeclarativeExpression, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNotifyOnValueChanged(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_setNotifyOnValueChanged, doc_QDeclarativeExpression_setNotifyOnValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_sourceFile, "QDeclarativeExpression.sourceFile() -> QString");

extern "C" {static PyObject *meth_QDeclarativeExpression_sourceFile(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_sourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sourceFile());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_sourceFile, doc_QDeclarativeExpression_sourceFile);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_lineNumber, "QDeclarativeExpression.lineNumber() -> int");

extern "C" {static PyObject *meth_QDeclarativeExpression_lineNumber(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_lineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_lineNumber, doc_QDeclarativeExpression_lineNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_setSourceLocation, "QDeclarativeExpression.setSourceLocation(QString, int)");

extern "C" {static PyObject *meth_QDeclarativeExpression_setSourceLocation(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_setSourceLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        int a1;
        QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QDeclarativeExpression, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSourceLocation(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_setSourceLocation, doc_QDeclarativeExpression_setSourceLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_scopeObject, "QDeclarativeExpression.scopeObject() -> QObject");

extern "C" {static PyObject *meth_QDeclarativeExpression_scopeObject(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_scopeObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scopeObject();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_scopeObject, doc_QDeclarativeExpression_scopeObject);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_hasError, "QDeclarativeExpression.hasError() -> bool");

extern "C" {static PyObject *meth_QDeclarativeExpression_hasError(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_hasError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_hasError, doc_QDeclarativeExpression_hasError);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_clearError, "QDeclarativeExpression.clearError()");

extern "C" {static PyObject *meth_QDeclarativeExpression_clearError(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_clearError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearError();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_clearError, doc_QDeclarativeExpression_clearError);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_error, "QDeclarativeExpression.error() -> QDeclarativeError");

extern "C" {static PyObject *meth_QDeclarativeExpression_error(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            QDeclarativeError*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDeclarativeError(sipCpp->error());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDeclarativeError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_error, doc_QDeclarativeExpression_error);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_evaluate, "QDeclarativeExpression.evaluate() -> (QVariant, bool)");

extern "C" {static PyObject *meth_QDeclarativeExpression_evaluate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_evaluate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QDeclarativeExpression *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->evaluate(&a0));
            Py_END_ALLOW_THREADS

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_evaluate, doc_QDeclarativeExpression_evaluate);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDeclarativeExpression(void *, const sipTypeDef *);}
static void *cast_QDeclarativeExpression(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDeclarativeExpression)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QDeclarativeExpression *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeExpression(void *, int);}
static void release_QDeclarativeExpression(void *sipCppV,int)
{
    QDeclarativeExpression *sipCpp = reinterpret_cast<QDeclarativeExpression *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDeclarativeExpression(sipSimpleWrapper *);}
static void dealloc_QDeclarativeExpression(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDeclarativeExpression *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDeclarativeExpression(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QDeclarativeExpression(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDeclarativeExpression(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDeclarativeExpression *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeExpression();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QDeclarativeContext* a0;
        QObject* a1;
        const QString* a2;
        int a2State = 0;
        QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J8J1|JH", sipType_QDeclarativeContext, &a0, sipType_QObject, &a1, sipType_QString,&a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeExpression(a0,a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDeclarativeExpression[] = {{141, 0, 1}};


static PyMethodDef methods_QDeclarativeExpression[] = {
    {SIP_MLNAME_CAST(sipName_clearError), meth_QDeclarativeExpression_clearError, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_clearError)},
    {SIP_MLNAME_CAST(sipName_context), meth_QDeclarativeExpression_context, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_context)},
    {SIP_MLNAME_CAST(sipName_engine), meth_QDeclarativeExpression_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_engine)},
    {SIP_MLNAME_CAST(sipName_error), meth_QDeclarativeExpression_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_error)},
    {SIP_MLNAME_CAST(sipName_evaluate), (PyCFunction)meth_QDeclarativeExpression_evaluate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_evaluate)},
    {SIP_MLNAME_CAST(sipName_expression), meth_QDeclarativeExpression_expression, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_expression)},
    {SIP_MLNAME_CAST(sipName_hasError), meth_QDeclarativeExpression_hasError, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_hasError)},
    {SIP_MLNAME_CAST(sipName_lineNumber), meth_QDeclarativeExpression_lineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_lineNumber)},
    {SIP_MLNAME_CAST(sipName_notifyOnValueChanged), meth_QDeclarativeExpression_notifyOnValueChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_notifyOnValueChanged)},
    {SIP_MLNAME_CAST(sipName_scopeObject), meth_QDeclarativeExpression_scopeObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_scopeObject)},
    {SIP_MLNAME_CAST(sipName_setExpression), meth_QDeclarativeExpression_setExpression, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_setExpression)},
    {SIP_MLNAME_CAST(sipName_setNotifyOnValueChanged), meth_QDeclarativeExpression_setNotifyOnValueChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_setNotifyOnValueChanged)},
    {SIP_MLNAME_CAST(sipName_setSourceLocation), meth_QDeclarativeExpression_setSourceLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_setSourceLocation)},
    {SIP_MLNAME_CAST(sipName_sourceFile), meth_QDeclarativeExpression_sourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_sourceFile)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDeclarativeExpression[] = {
    {"valueChanged()", "\1QDeclarativeExpression.valueChanged", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QDeclarativeExpression, "\1QDeclarativeExpression()\n"
    "QDeclarativeExpression(QDeclarativeContext, QObject, QString, QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeExpression = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeExpression,
        {0}
    },
    {
        sipNameNr_QDeclarativeExpression,
        {0, 0, 1},
        14, methods_QDeclarativeExpression,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDeclarativeExpression,
    -1,
    -1,
    supers_QDeclarativeExpression,
    0,
    init_type_QDeclarativeExpression,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeExpression,
    0,
    0,
    0,
    release_QDeclarativeExpression,
    cast_QDeclarativeExpression,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QDeclarativeExpression::staticMetaObject,
    0,
    signals_QDeclarativeExpression,
};
