/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:15 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativeproperty.sip"
#include <qdeclarativeproperty.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeProperty.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeProperty.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativecontext.sip"
#include <qdeclarativecontext.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeProperty.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativeengine.sip"
#include <qdeclarativeengine.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeProperty.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeProperty.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeProperty.cpp"
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeProperty.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeProperty.cpp"


PyDoc_STRVAR(doc_QDeclarativeProperty_type, "QDeclarativeProperty.type() -> QDeclarativeProperty.Type");

extern "C" {static PyObject *meth_QDeclarativeProperty_type(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            QDeclarativeProperty::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDeclarativeProperty_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_type, doc_QDeclarativeProperty_type);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_isValid, "QDeclarativeProperty.isValid() -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_isValid(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_isValid, doc_QDeclarativeProperty_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_isProperty, "QDeclarativeProperty.isProperty() -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_isProperty(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_isProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isProperty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_isProperty, doc_QDeclarativeProperty_isProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_isSignalProperty, "QDeclarativeProperty.isSignalProperty() -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_isSignalProperty(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_isSignalProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSignalProperty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_isSignalProperty, doc_QDeclarativeProperty_isSignalProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_propertyType, "QDeclarativeProperty.propertyType() -> int");

extern "C" {static PyObject *meth_QDeclarativeProperty_propertyType(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_propertyType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->propertyType();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_propertyType, doc_QDeclarativeProperty_propertyType);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_propertyTypeCategory, "QDeclarativeProperty.propertyTypeCategory() -> QDeclarativeProperty.PropertyTypeCategory");

extern "C" {static PyObject *meth_QDeclarativeProperty_propertyTypeCategory(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_propertyTypeCategory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            QDeclarativeProperty::PropertyTypeCategory sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->propertyTypeCategory();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDeclarativeProperty_PropertyTypeCategory);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_propertyTypeCategory, doc_QDeclarativeProperty_propertyTypeCategory);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_propertyTypeName, "QDeclarativeProperty.propertyTypeName() -> str");

extern "C" {static PyObject *meth_QDeclarativeProperty_propertyTypeName(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_propertyTypeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            const char*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->propertyTypeName();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_propertyTypeName, doc_QDeclarativeProperty_propertyTypeName);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_name, "QDeclarativeProperty.name() -> QString");

extern "C" {static PyObject *meth_QDeclarativeProperty_name(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_name, doc_QDeclarativeProperty_name);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_read, "QDeclarativeProperty.read() -> QVariant\n"
    "QDeclarativeProperty.read(QObject, QString) -> QVariant\n"
    "QDeclarativeProperty.read(QObject, QString, QDeclarativeContext) -> QVariant\n"
    "QDeclarativeProperty.read(QObject, QString, QDeclarativeEngine) -> QVariant");

extern "C" {static PyObject *meth_QDeclarativeProperty_read(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->read());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    {
        QObject* a0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1", sipType_QObject, &a0, sipType_QString,&a1, &a1State))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(QDeclarativeProperty::read(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    {
        QObject* a0;
        const QString* a1;
        int a1State = 0;
        QDeclarativeContext* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QDeclarativeContext, &a2))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(QDeclarativeProperty::read(a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    {
        QObject* a0;
        const QString* a1;
        int a1State = 0;
        QDeclarativeEngine* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QDeclarativeEngine, &a2))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(QDeclarativeProperty::read(a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_read, doc_QDeclarativeProperty_read);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_write, "QDeclarativeProperty.write(QVariant) -> bool\n"
    "QDeclarativeProperty.write(QObject, QString, QVariant) -> bool\n"
    "QDeclarativeProperty.write(QObject, QString, QVariant, QDeclarativeContext) -> bool\n"
    "QDeclarativeProperty.write(QObject, QString, QVariant, QDeclarativeEngine) -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_write(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeProperty, &sipCpp, sipType_QVariant,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->write(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QObject* a0;
        const QString* a1;
        int a1State = 0;
        const QVariant* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J1", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QVariant,&a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDeclarativeProperty::write(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QObject* a0;
        const QString* a1;
        int a1State = 0;
        const QVariant* a2;
        int a2State = 0;
        QDeclarativeContext* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QVariant,&a2, &a2State, sipType_QDeclarativeContext, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDeclarativeProperty::write(a0,*a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QObject* a0;
        const QString* a1;
        int a1State = 0;
        const QVariant* a2;
        int a2State = 0;
        QDeclarativeEngine* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QVariant,&a2, &a2State, sipType_QDeclarativeEngine, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDeclarativeProperty::write(a0,*a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_write, doc_QDeclarativeProperty_write);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_reset, "QDeclarativeProperty.reset() -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_reset(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->reset();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_reset, doc_QDeclarativeProperty_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_hasNotifySignal, "QDeclarativeProperty.hasNotifySignal() -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_hasNotifySignal(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_hasNotifySignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasNotifySignal();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_hasNotifySignal, doc_QDeclarativeProperty_hasNotifySignal);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_needsNotifySignal, "QDeclarativeProperty.needsNotifySignal() -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_needsNotifySignal(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_needsNotifySignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->needsNotifySignal();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_needsNotifySignal, doc_QDeclarativeProperty_needsNotifySignal);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_connectNotifySignal, "QDeclarativeProperty.connectNotifySignal(QObject, SLOT()) -> bool\n"
    "QDeclarativeProperty.connectNotifySignal(callable) -> bool\n"
    "QDeclarativeProperty.connectNotifySignal(QObject, int) -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_connectNotifySignal(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_connectNotifySignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        char* a1;
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BqS", &sipSelf, sipType_QDeclarativeProperty, &sipCpp, "()", &a0, &a1, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->connectNotifySignal(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QObject* a0;
        char* a1;
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "By", &sipSelf, sipType_QDeclarativeProperty, &sipCpp, "()", &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->connectNotifySignal(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QObject* a0;
        int a1;
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QDeclarativeProperty, &sipCpp, sipType_QObject, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->connectNotifySignal(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_connectNotifySignal, doc_QDeclarativeProperty_connectNotifySignal);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_isWritable, "QDeclarativeProperty.isWritable() -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isWritable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_isWritable, doc_QDeclarativeProperty_isWritable);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_isDesignable, "QDeclarativeProperty.isDesignable() -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_isDesignable(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_isDesignable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDesignable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_isDesignable, doc_QDeclarativeProperty_isDesignable);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_isResettable, "QDeclarativeProperty.isResettable() -> bool");

extern "C" {static PyObject *meth_QDeclarativeProperty_isResettable(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_isResettable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isResettable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_isResettable, doc_QDeclarativeProperty_isResettable);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_object, "QDeclarativeProperty.object() -> QObject");

extern "C" {static PyObject *meth_QDeclarativeProperty_object(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_object(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->object();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_object, doc_QDeclarativeProperty_object);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_index, "QDeclarativeProperty.index() -> int");

extern "C" {static PyObject *meth_QDeclarativeProperty_index(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_index(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->index();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_index, doc_QDeclarativeProperty_index);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_property, "QDeclarativeProperty.property() -> QMetaProperty");

extern "C" {static PyObject *meth_QDeclarativeProperty_property(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            QMetaProperty*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMetaProperty(sipCpp->property());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMetaProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_property, doc_QDeclarativeProperty_property);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeProperty_method, "QDeclarativeProperty.method() -> QMetaMethod");

extern "C" {static PyObject *meth_QDeclarativeProperty_method(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeProperty_method(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeProperty, &sipCpp))
        {
            QMetaMethod*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMetaMethod(sipCpp->method());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMetaMethod,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeProperty, sipName_method, doc_QDeclarativeProperty_method);

    return NULL;
}


extern "C" {static PyObject *slot_QDeclarativeProperty___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDeclarativeProperty___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QDeclarativeProperty *sipCpp = reinterpret_cast<QDeclarativeProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeclarativeProperty));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeclarativeProperty, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp->QDeclarativeProperty::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtDeclarative,ne_slot,sipType_QDeclarativeProperty,sipSelf,sipArg);
}


extern "C" {static long slot_QDeclarativeProperty___hash__(PyObject *);}
static long slot_QDeclarativeProperty___hash__(PyObject *sipSelf)
{
    QDeclarativeProperty *sipCpp = reinterpret_cast<QDeclarativeProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeclarativeProperty));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtDeclarative/qdeclarativeproperty.sip"
        sipRes = qHash(*sipCpp);
#line 891 "/home/desa2/PyQt-x11-gpl-4.10.4/QtDeclarative/sipQtDeclarativeQDeclarativeProperty.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDeclarativeProperty___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDeclarativeProperty___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QDeclarativeProperty *sipCpp = reinterpret_cast<QDeclarativeProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeclarativeProperty));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDeclarativeProperty* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeclarativeProperty, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QDeclarativeProperty::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtDeclarative,eq_slot,sipType_QDeclarativeProperty,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDeclarativeProperty(void *, const sipTypeDef *);}
static void *cast_QDeclarativeProperty(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDeclarativeProperty)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeProperty(void *, int);}
static void release_QDeclarativeProperty(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QDeclarativeProperty *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QDeclarativeProperty(void *, SIP_SSIZE_T, const void *);}
static void assign_QDeclarativeProperty(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDeclarativeProperty *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDeclarativeProperty *>(sipSrc);
}


extern "C" {static void *array_QDeclarativeProperty(SIP_SSIZE_T);}
static void *array_QDeclarativeProperty(SIP_SSIZE_T sipNrElem)
{
    return new QDeclarativeProperty[sipNrElem];
}


extern "C" {static void *copy_QDeclarativeProperty(const void *, SIP_SSIZE_T);}
static void *copy_QDeclarativeProperty(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDeclarativeProperty(reinterpret_cast<const QDeclarativeProperty *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDeclarativeProperty(sipSimpleWrapper *);}
static void dealloc_QDeclarativeProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDeclarativeProperty(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QDeclarativeProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDeclarativeProperty(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDeclarativeProperty *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDeclarativeProperty();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDeclarativeProperty(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QObject* a0;
        QDeclarativeContext* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J8", sipType_QObject, &a0, sipType_QDeclarativeContext, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDeclarativeProperty(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QObject* a0;
        QDeclarativeEngine* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J8", sipType_QObject, &a0, sipType_QDeclarativeEngine, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDeclarativeProperty(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QObject* a0;
        const QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J1", sipType_QObject, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDeclarativeProperty(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        QObject* a0;
        const QString* a1;
        int a1State = 0;
        QDeclarativeContext* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QDeclarativeContext, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDeclarativeProperty(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        QObject* a0;
        const QString* a1;
        int a1State = 0;
        QDeclarativeEngine* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QDeclarativeEngine, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDeclarativeProperty(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const QDeclarativeProperty* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDeclarativeProperty, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDeclarativeProperty(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDeclarativeProperty[] = {
    {(void *)slot_QDeclarativeProperty___ne__, ne_slot},
    {(void *)slot_QDeclarativeProperty___hash__, hash_slot},
    {(void *)slot_QDeclarativeProperty___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDeclarativeProperty[] = {
    {SIP_MLNAME_CAST(sipName_connectNotifySignal), meth_QDeclarativeProperty_connectNotifySignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_connectNotifySignal)},
    {SIP_MLNAME_CAST(sipName_hasNotifySignal), meth_QDeclarativeProperty_hasNotifySignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_hasNotifySignal)},
    {SIP_MLNAME_CAST(sipName_index), meth_QDeclarativeProperty_index, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_index)},
    {SIP_MLNAME_CAST(sipName_isDesignable), meth_QDeclarativeProperty_isDesignable, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_isDesignable)},
    {SIP_MLNAME_CAST(sipName_isProperty), meth_QDeclarativeProperty_isProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_isProperty)},
    {SIP_MLNAME_CAST(sipName_isResettable), meth_QDeclarativeProperty_isResettable, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_isResettable)},
    {SIP_MLNAME_CAST(sipName_isSignalProperty), meth_QDeclarativeProperty_isSignalProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_isSignalProperty)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QDeclarativeProperty_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_isValid)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QDeclarativeProperty_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_isWritable)},
    {SIP_MLNAME_CAST(sipName_method), meth_QDeclarativeProperty_method, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_method)},
    {SIP_MLNAME_CAST(sipName_name), meth_QDeclarativeProperty_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_name)},
    {SIP_MLNAME_CAST(sipName_needsNotifySignal), meth_QDeclarativeProperty_needsNotifySignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_needsNotifySignal)},
    {SIP_MLNAME_CAST(sipName_object), meth_QDeclarativeProperty_object, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_object)},
    {SIP_MLNAME_CAST(sipName_property), meth_QDeclarativeProperty_property, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_property)},
    {SIP_MLNAME_CAST(sipName_propertyType), meth_QDeclarativeProperty_propertyType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_propertyType)},
    {SIP_MLNAME_CAST(sipName_propertyTypeCategory), meth_QDeclarativeProperty_propertyTypeCategory, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_propertyTypeCategory)},
    {SIP_MLNAME_CAST(sipName_propertyTypeName), meth_QDeclarativeProperty_propertyTypeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_propertyTypeName)},
    {SIP_MLNAME_CAST(sipName_read), meth_QDeclarativeProperty_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_read)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QDeclarativeProperty_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_reset)},
    {SIP_MLNAME_CAST(sipName_type), meth_QDeclarativeProperty_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_type)},
    {SIP_MLNAME_CAST(sipName_write), meth_QDeclarativeProperty_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeProperty_write)}
};

static sipEnumMemberDef enummembers_QDeclarativeProperty[] = {
    {sipName_Invalid, static_cast<int>(QDeclarativeProperty::Invalid), 18},
    {sipName_InvalidCategory, static_cast<int>(QDeclarativeProperty::InvalidCategory), 17},
    {sipName_List, static_cast<int>(QDeclarativeProperty::List), 17},
    {sipName_Normal, static_cast<int>(QDeclarativeProperty::Normal), 17},
    {sipName_Object, static_cast<int>(QDeclarativeProperty::Object), 17},
    {sipName_Property, static_cast<int>(QDeclarativeProperty::Property), 18},
    {sipName_SignalProperty, static_cast<int>(QDeclarativeProperty::SignalProperty), 18},
};

PyDoc_STRVAR(doc_QDeclarativeProperty, "\1QDeclarativeProperty()\n"
    "QDeclarativeProperty(QObject)\n"
    "QDeclarativeProperty(QObject, QDeclarativeContext)\n"
    "QDeclarativeProperty(QObject, QDeclarativeEngine)\n"
    "QDeclarativeProperty(QObject, QString)\n"
    "QDeclarativeProperty(QObject, QString, QDeclarativeContext)\n"
    "QDeclarativeProperty(QObject, QString, QDeclarativeEngine)\n"
    "QDeclarativeProperty(QDeclarativeProperty)");


pyqt4ClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeProperty = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeProperty,
        {0}
    },
    {
        sipNameNr_QDeclarativeProperty,
        {0, 0, 1},
        21, methods_QDeclarativeProperty,
        7, enummembers_QDeclarativeProperty,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDeclarativeProperty,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDeclarativeProperty,
    init_type_QDeclarativeProperty,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeProperty,
    assign_QDeclarativeProperty,
    array_QDeclarativeProperty,
    copy_QDeclarativeProperty,
    release_QDeclarativeProperty,
    cast_QDeclarativeProperty,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
