/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:36 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSvg.h"

#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtSvg/qsvgrenderer.sip"
#include <qsvgrenderer.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 342 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 168 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtSvg/sipQtSvgQSvgRenderer.cpp"


class sipQSvgRenderer : public QSvgRenderer
{
public:
    sipQSvgRenderer(QObject*);
    sipQSvgRenderer(const QString&,QObject*);
    sipQSvgRenderer(const QByteArray&,QObject*);
    sipQSvgRenderer(QXmlStreamReader*,QObject*);
    virtual ~sipQSvgRenderer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSvgRenderer(const sipQSvgRenderer &);
    sipQSvgRenderer &operator = (const sipQSvgRenderer &);

    char sipPyMethods[7];
};

sipQSvgRenderer::sipQSvgRenderer(QObject*a0): QSvgRenderer(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::sipQSvgRenderer(const QString& a0,QObject*a1): QSvgRenderer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::sipQSvgRenderer(const QByteArray& a0,QObject*a1): QSvgRenderer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::sipQSvgRenderer(QXmlStreamReader*a0,QObject*a1): QSvgRenderer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::~sipQSvgRenderer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSvgRenderer::metaObject() const
{
    return sip_QtSvg_qt_metaobject(sipPySelf,sipType_QSvgRenderer);
}

int sipQSvgRenderer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSvgRenderer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSvg_qt_metacall(sipPySelf,sipType_QSvgRenderer,_c,_id,_a);

    return _id;
}

void *sipQSvgRenderer::qt_metacast(const char *_clname)
{
    return (sip_QtSvg_qt_metacast(sipPySelf, sipType_QSvgRenderer, _clname)) ? this : QSvgRenderer::qt_metacast(_clname);
}

void sipQSvgRenderer::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSvgRenderer::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtSvg_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSvgRenderer::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtSvg_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSvgRenderer::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtSvg_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSvgRenderer::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtSvg_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSvgRenderer::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtSvg_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSvgRenderer::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSvgRenderer::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtSvg_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQSvgRenderer::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSvgRenderer::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtSvg_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSvgRenderer_isValid, "QSvgRenderer.isValid() -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_isValid, doc_QSvgRenderer_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_matrixForElement, "QSvgRenderer.matrixForElement(QString) -> QMatrix");

extern "C" {static PyObject *meth_QSvgRenderer_matrixForElement(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_matrixForElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QMatrix*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(sipCpp->matrixForElement(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_matrixForElement, doc_QSvgRenderer_matrixForElement);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_defaultSize, "QSvgRenderer.defaultSize() -> QSize");

extern "C" {static PyObject *meth_QSvgRenderer_defaultSize(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_defaultSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->defaultSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_defaultSize, doc_QSvgRenderer_defaultSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_elementExists, "QSvgRenderer.elementExists(QString) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_elementExists(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_elementExists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->elementExists(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_elementExists, doc_QSvgRenderer_elementExists);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_viewBox, "QSvgRenderer.viewBox() -> QRect");

extern "C" {static PyObject *meth_QSvgRenderer_viewBox(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_viewBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->viewBox());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_viewBox, doc_QSvgRenderer_viewBox);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_viewBoxF, "QSvgRenderer.viewBoxF() -> QRectF");

extern "C" {static PyObject *meth_QSvgRenderer_viewBoxF(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_viewBoxF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->viewBoxF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_viewBoxF, doc_QSvgRenderer_viewBoxF);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_setViewBox, "QSvgRenderer.setViewBox(QRect)\n"
    "QSvgRenderer.setViewBox(QRectF)");

extern "C" {static PyObject *meth_QSvgRenderer_setViewBox(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_setViewBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewBox(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF* a0;
        QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewBox(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_setViewBox, doc_QSvgRenderer_setViewBox);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_animated, "QSvgRenderer.animated() -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_animated(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_animated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->animated();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_animated, doc_QSvgRenderer_animated);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_boundsOnElement, "QSvgRenderer.boundsOnElement(QString) -> QRectF");

extern "C" {static PyObject *meth_QSvgRenderer_boundsOnElement(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_boundsOnElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->boundsOnElement(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_boundsOnElement, doc_QSvgRenderer_boundsOnElement);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_framesPerSecond, "QSvgRenderer.framesPerSecond() -> int");

extern "C" {static PyObject *meth_QSvgRenderer_framesPerSecond(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_framesPerSecond(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->framesPerSecond();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_framesPerSecond, doc_QSvgRenderer_framesPerSecond);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_setFramesPerSecond, "QSvgRenderer.setFramesPerSecond(int)");

extern "C" {static PyObject *meth_QSvgRenderer_setFramesPerSecond(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_setFramesPerSecond(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSvgRenderer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFramesPerSecond(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_setFramesPerSecond, doc_QSvgRenderer_setFramesPerSecond);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_currentFrame, "QSvgRenderer.currentFrame() -> int");

extern "C" {static PyObject *meth_QSvgRenderer_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentFrame();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_currentFrame, doc_QSvgRenderer_currentFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_setCurrentFrame, "QSvgRenderer.setCurrentFrame(int)");

extern "C" {static PyObject *meth_QSvgRenderer_setCurrentFrame(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_setCurrentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSvgRenderer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentFrame(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_setCurrentFrame, doc_QSvgRenderer_setCurrentFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_animationDuration, "QSvgRenderer.animationDuration() -> int");

extern "C" {static PyObject *meth_QSvgRenderer_animationDuration(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_animationDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->animationDuration();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_animationDuration, doc_QSvgRenderer_animationDuration);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_load, "QSvgRenderer.load(QString) -> bool\n"
    "QSvgRenderer.load(QByteArray) -> bool\n"
    "QSvgRenderer.load(QXmlStreamReader) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_load(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QXmlStreamReader* a0;
        QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QXmlStreamReader, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_load, doc_QSvgRenderer_load);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_render, "QSvgRenderer.render(QPainter)\n"
    "QSvgRenderer.render(QPainter, QRectF)\n"
    "QSvgRenderer.render(QPainter, QString, QRectF bounds=QRectF())");

extern "C" {static PyObject *meth_QSvgRenderer_render(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_render(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        QSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QPainter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPainter* a0;
        const QRectF* a1;
        QSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPainter* a0;
        const QString* a1;
        int a1State = 0;
        const QRectF& a2def = QRectF();
        const QRectF* a2 = &a2def;
        QSvgRenderer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_bounds,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1|J9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QPainter, &a0, sipType_QString,&a1, &a1State, sipType_QRectF, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_render, doc_QSvgRenderer_render);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSvgRenderer(void *, const sipTypeDef *);}
static void *cast_QSvgRenderer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSvgRenderer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSvgRenderer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSvgRenderer(void *, int);}
static void release_QSvgRenderer(void *sipCppV,int)
{
    QSvgRenderer *sipCpp = reinterpret_cast<QSvgRenderer *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSvgRenderer(sipSimpleWrapper *);}
static void dealloc_QSvgRenderer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSvgRenderer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSvgRenderer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSvgRenderer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSvgRenderer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSvgRenderer *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgRenderer(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgRenderer(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QByteArray, &a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgRenderer(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QXmlStreamReader* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QXmlStreamReader, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgRenderer(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSvgRenderer[] = {{141, 0, 1}};


static PyMethodDef methods_QSvgRenderer[] = {
    {SIP_MLNAME_CAST(sipName_animated), meth_QSvgRenderer_animated, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_animated)},
    {SIP_MLNAME_CAST(sipName_animationDuration), meth_QSvgRenderer_animationDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_animationDuration)},
    {SIP_MLNAME_CAST(sipName_boundsOnElement), meth_QSvgRenderer_boundsOnElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_boundsOnElement)},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QSvgRenderer_currentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_currentFrame)},
    {SIP_MLNAME_CAST(sipName_defaultSize), meth_QSvgRenderer_defaultSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_defaultSize)},
    {SIP_MLNAME_CAST(sipName_elementExists), meth_QSvgRenderer_elementExists, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_elementExists)},
    {SIP_MLNAME_CAST(sipName_framesPerSecond), meth_QSvgRenderer_framesPerSecond, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_framesPerSecond)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSvgRenderer_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_isValid)},
    {SIP_MLNAME_CAST(sipName_load), meth_QSvgRenderer_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_load)},
    {SIP_MLNAME_CAST(sipName_matrixForElement), meth_QSvgRenderer_matrixForElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_matrixForElement)},
    {SIP_MLNAME_CAST(sipName_render), (PyCFunction)meth_QSvgRenderer_render, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSvgRenderer_render)},
    {SIP_MLNAME_CAST(sipName_setCurrentFrame), meth_QSvgRenderer_setCurrentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_setCurrentFrame)},
    {SIP_MLNAME_CAST(sipName_setFramesPerSecond), meth_QSvgRenderer_setFramesPerSecond, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_setFramesPerSecond)},
    {SIP_MLNAME_CAST(sipName_setViewBox), meth_QSvgRenderer_setViewBox, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_setViewBox)},
    {SIP_MLNAME_CAST(sipName_viewBox), meth_QSvgRenderer_viewBox, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_viewBox)},
    {SIP_MLNAME_CAST(sipName_viewBoxF), meth_QSvgRenderer_viewBoxF, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_viewBoxF)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QSvgRenderer[] = {
    {"repaintNeeded()", "\1QSvgRenderer.repaintNeeded", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QSvgRenderer, "\1QSvgRenderer(QObject parent=None)\n"
    "QSvgRenderer(QString, QObject parent=None)\n"
    "QSvgRenderer(QByteArray, QObject parent=None)\n"
    "QSvgRenderer(QXmlStreamReader, QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtSvg_QSvgRenderer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSvgRenderer,
        {0}
    },
    {
        sipNameNr_QSvgRenderer,
        {0, 0, 1},
        16, methods_QSvgRenderer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSvgRenderer,
    -1,
    -1,
    supers_QSvgRenderer,
    0,
    init_type_QSvgRenderer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSvgRenderer,
    0,
    0,
    0,
    release_QSvgRenderer,
    cast_QSvgRenderer,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSvgRenderer::staticMetaObject,
    0,
    signals_QSvgRenderer,
};
