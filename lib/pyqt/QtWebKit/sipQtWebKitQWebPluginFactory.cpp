/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:43 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"

#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 78 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 43 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 85 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 48 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 54 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 57 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 57 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"


class sipQWebPluginFactory : public QWebPluginFactory
{
public:
    sipQWebPluginFactory(QObject*);
    virtual ~sipQWebPluginFactory();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool supportsExtension(QWebPluginFactory::Extension) const;
    bool extension(QWebPluginFactory::Extension,const QWebPluginFactory::ExtensionOption*,QWebPluginFactory::ExtensionReturn*);
    QObject* create(const QString&,const QUrl&,const QStringList&,const QStringList&) const;
    void refreshPlugins();
    QList<QWebPluginFactory::Plugin> plugins() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebPluginFactory(const sipQWebPluginFactory &);
    sipQWebPluginFactory &operator = (const sipQWebPluginFactory &);

    char sipPyMethods[12];
};

sipQWebPluginFactory::sipQWebPluginFactory(QObject*a0): QWebPluginFactory(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebPluginFactory::~sipQWebPluginFactory()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebPluginFactory::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QWebPluginFactory);
}

int sipQWebPluginFactory::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebPluginFactory::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QWebPluginFactory,_c,_id,_a);

    return _id;
}

void *sipQWebPluginFactory::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast(sipPySelf, sipType_QWebPluginFactory, _clname)) ? this : QWebPluginFactory::qt_metacast(_clname);
}

void sipQWebPluginFactory::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebPluginFactory::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebPluginFactory::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebPluginFactory::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebPluginFactory::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebPluginFactory::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebPluginFactory::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebPluginFactory::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQWebPluginFactory::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebPluginFactory::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebPluginFactory::supportsExtension(QWebPluginFactory::Extension a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_supportsExtension);

    if (!sipMeth)
        return QWebPluginFactory::supportsExtension(a0);

    extern bool sipVH_QtWebKit_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebPluginFactory::Extension);

    return sipVH_QtWebKit_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebPluginFactory::extension(QWebPluginFactory::Extension a0,const QWebPluginFactory::ExtensionOption*a1,QWebPluginFactory::ExtensionReturn*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_extension);

    if (!sipMeth)
        return QWebPluginFactory::extension(a0,a1,a2);

    extern bool sipVH_QtWebKit_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebPluginFactory::Extension,const QWebPluginFactory::ExtensionOption*,QWebPluginFactory::ExtensionReturn*);

    return sipVH_QtWebKit_2(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QObject* sipQWebPluginFactory::create(const QString& a0,const QUrl& a1,const QStringList& a2,const QStringList& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_QWebPluginFactory,sipName_create);

    if (!sipMeth)
        return 0;

    extern QObject* sipVH_QtWebKit_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,const QUrl&,const QStringList&,const QStringList&);

    return sipVH_QtWebKit_3(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQWebPluginFactory::refreshPlugins()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_refreshPlugins);

    if (!sipMeth)
    {
        QWebPluginFactory::refreshPlugins();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QList<QWebPluginFactory::Plugin> sipQWebPluginFactory::plugins() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_QWebPluginFactory,sipName_plugins);

    if (!sipMeth)
        return QList<QWebPluginFactory::Plugin>();

    extern QList<QWebPluginFactory::Plugin> sipVH_QtWebKit_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_4(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QWebPluginFactory_plugins, "QWebPluginFactory.plugins() -> list-of-QWebPluginFactory.Plugin");

extern "C" {static PyObject *meth_QWebPluginFactory_plugins(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_plugins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            QList<QWebPluginFactory::Plugin>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QWebPluginFactory, sipName_plugins);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QWebPluginFactory::Plugin>(sipCpp->plugins());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebPluginFactory_Plugin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_plugins, doc_QWebPluginFactory_plugins);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_refreshPlugins, "QWebPluginFactory.refreshPlugins()");

extern "C" {static PyObject *meth_QWebPluginFactory_refreshPlugins(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_refreshPlugins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebPluginFactory::refreshPlugins() : sipCpp->refreshPlugins());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_refreshPlugins, doc_QWebPluginFactory_refreshPlugins);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_create, "QWebPluginFactory.create(QString, QUrl, QStringList, QStringList) -> QObject");

extern "C" {static PyObject *meth_QWebPluginFactory_create(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        const QUrl* a1;
        const QStringList* a2;
        int a2State = 0;
        const QStringList* a3;
        int a3State = 0;
        const QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9J1J1", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1, sipType_QStringList,&a2, &a2State, sipType_QStringList,&a3, &a3State))
        {
            QObject*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QWebPluginFactory, sipName_create);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->create(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a2),sipType_QStringList,a2State);
            sipReleaseType(const_cast<QStringList *>(a3),sipType_QStringList,a3State);

            return sipConvertFromNewType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_create, doc_QWebPluginFactory_create);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_extension, "QWebPluginFactory.extension(QWebPluginFactory.Extension, QWebPluginFactory.ExtensionOption option=None, QWebPluginFactory.ExtensionReturn output=None) -> bool");

extern "C" {static PyObject *meth_QWebPluginFactory_extension(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_extension(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPluginFactory::Extension a0;
        const QWebPluginFactory::ExtensionOption* a1 = 0;
        QWebPluginFactory::ExtensionReturn* a2 = 0;
        QWebPluginFactory *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_output,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QWebPluginFactory_Extension, &a0, sipType_QWebPluginFactory_ExtensionOption, &a1, sipType_QWebPluginFactory_ExtensionReturn, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebPluginFactory::extension(a0,a1,a2) : sipCpp->extension(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_extension, doc_QWebPluginFactory_extension);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_supportsExtension, "QWebPluginFactory.supportsExtension(QWebPluginFactory.Extension) -> bool");

extern "C" {static PyObject *meth_QWebPluginFactory_supportsExtension(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_supportsExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPluginFactory::Extension a0;
        const QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QWebPluginFactory_Extension, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebPluginFactory::supportsExtension(a0) : sipCpp->supportsExtension(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_supportsExtension, doc_QWebPluginFactory_supportsExtension);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebPluginFactory(void *, const sipTypeDef *);}
static void *cast_QWebPluginFactory(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebPluginFactory)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWebPluginFactory *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebPluginFactory(void *, int);}
static void release_QWebPluginFactory(void *sipCppV,int)
{
    QWebPluginFactory *sipCpp = reinterpret_cast<QWebPluginFactory *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebPluginFactory(sipSimpleWrapper *);}
static void dealloc_QWebPluginFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebPluginFactory *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebPluginFactory(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebPluginFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebPluginFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebPluginFactory *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWebPluginFactory(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebPluginFactory[] = {{141, 0, 1}};


static PyMethodDef methods_QWebPluginFactory[] = {
    {SIP_MLNAME_CAST(sipName_create), meth_QWebPluginFactory_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_create)},
    {SIP_MLNAME_CAST(sipName_extension), (PyCFunction)meth_QWebPluginFactory_extension, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPluginFactory_extension)},
    {SIP_MLNAME_CAST(sipName_plugins), meth_QWebPluginFactory_plugins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_plugins)},
    {SIP_MLNAME_CAST(sipName_refreshPlugins), meth_QWebPluginFactory_refreshPlugins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_refreshPlugins)},
    {SIP_MLNAME_CAST(sipName_supportsExtension), meth_QWebPluginFactory_supportsExtension, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_supportsExtension)}
};

PyDoc_STRVAR(doc_QWebPluginFactory, "\1QWebPluginFactory(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebPluginFactory = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebPluginFactory,
        {0}
    },
    {
        sipNameNr_QWebPluginFactory,
        {0, 0, 1},
        5, methods_QWebPluginFactory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebPluginFactory,
    -1,
    -1,
    supers_QWebPluginFactory,
    0,
    init_type_QWebPluginFactory,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebPluginFactory,
    0,
    0,
    0,
    release_QWebPluginFactory,
    cast_QWebPluginFactory,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebPluginFactory::staticMetaObject,
    0,
    0
};
