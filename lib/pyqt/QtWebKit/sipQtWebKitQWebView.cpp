/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.2 on Wed Sep  3 09:36:43 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebview.sip"
#include <qwebview.h>
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"

#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 36 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 44 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 47 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 656 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 50 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 514 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 53 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 748 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 774 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 59 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 801 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 790 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 483 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 356 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 71 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 627 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 261 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 533 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 83 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 570 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 86 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 89 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 92 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 95 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 98 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 101 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 274 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 104 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 107 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 110 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 113 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 116 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 67 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 119 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 37 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 122 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 125 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 128 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 131 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 134 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 137 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 140 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 143 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 146 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 149 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 152 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 155 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 158 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 161 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 164 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 167 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 170 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 173 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 176 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 616 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 605 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 182 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 863 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 185 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 412 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 188 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 583 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 191 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 557 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 194 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 197 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 61 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 200 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 39 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 203 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 206 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 209 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 212 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 215 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 218 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 221 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 224 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 227 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 355 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 230 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 338 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 233 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 34 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 236 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 33 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 239 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 120 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 242 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 245 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 35 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 248 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"
#line 31 "/home/desa2/PyQt-x11-gpl-4.10.4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 251 "/home/desa2/PyQt-x11-gpl-4.10.4/QtWebKit/sipQtWebKitQWebView.cpp"


class sipQWebView : public QWebView
{
public:
    sipQWebView(QWidget*);
    virtual ~sipQWebView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    void setVisible(bool);
    int devType() const;
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QDropEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void changeEvent(QEvent*);
    void paintEvent(QPaintEvent*);
    void resizeEvent(QResizeEvent*);
    QWebView* createWindow(QWebPage::WebWindowType);
    bool event(QEvent*);
    QSize sizeHint() const;
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebView(const sipQWebView &);
    sipQWebView &operator = (const sipQWebView &);

    char sipPyMethods[48];
};

sipQWebView::sipQWebView(QWidget*a0): QWebView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebView::~sipQWebView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebView::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QWebView);
}

int sipQWebView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QWebView,_c,_id,_a);

    return _id;
}

void *sipQWebView::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast(sipPySelf, sipType_QWebView, _clname)) ? this : QWebView::qt_metacast(_clname);
}

void sipQWebView::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQWebView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QWebView::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQWebView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QWebView::windowActivationChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QWebView::fontChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QWebView::paletteChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_10)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    ((sipVH_QtGui_10)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[10]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QWebView::enabledChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQWebView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QWebView::metric(a0);

    typedef int (*sipVH_QtGui_14)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_14)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[14]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QWebView::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[0]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QWebView::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_1)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[1]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QWebView::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_19)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    ((sipVH_QtGui_19)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[19]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QWebView::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_20)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[20]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QWebView::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QWebView::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_23)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QWebView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QWebView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQWebView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QWebView::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_27)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[27]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQWebView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QWebView::heightForWidth(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[28]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQWebView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QWebView::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_4)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQWebView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QWebView::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQWebView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QWebView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQWebView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QWebView::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtGui_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return ((sipVH_QtGui_11)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QWebView::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_13)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    ((sipVH_QtGui_13)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[13]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QWebView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QWebView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QWebView::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    ((sipVH_QtGui_15)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[15]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QWebView::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QWebView::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_16)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    ((sipVH_QtGui_16)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[16]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QWebView::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    ((sipVH_QtGui_18)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QWebView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_25)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QWebView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_25)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QWebView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QWebView::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    ((sipVH_QtGui_21)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QWebView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QWebView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QWebView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QWebView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QWebView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QWebView::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QWebView::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[2]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QWebView* sipQWebView::createWindow(QWebPage::WebWindowType a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_createWindow);

    if (!sipMeth)
        return QWebView::createWindow(a0);

    extern QWebView* sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebPage::WebWindowType);

    return sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQWebView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QWebView::sizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_4)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth);
}

QVariant sipQWebView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QWebView::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QWebView_page, "QWebView.page() -> QWebPage");

extern "C" {static PyObject *meth_QWebView_page(PyObject *, PyObject *);}
static PyObject *meth_QWebView_page(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QWebPage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->page();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_page, doc_QWebView_page);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setPage, "QWebView.setPage(QWebPage)");

extern "C" {static PyObject *meth_QWebView_setPage(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage* a0;
        PyObject *a0Keep;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebView, &sipCpp, &a0Keep, sipType_QWebPage, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPage(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -8, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setPage, doc_QWebView_setPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_load, "QWebView.load(QUrl)\n"
    "QWebView.load(QNetworkRequest, QNetworkAccessManager.Operation operation=QNetworkAccessManager.GetOperation, QByteArray body=QByteArray())");

extern "C" {static PyObject *meth_QWebView_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QNetworkRequest* a0;
        QNetworkAccessManager::Operation a1 = QNetworkAccessManager::GetOperation;
        const QByteArray& a2def = QByteArray();
        const QByteArray* a2 = &a2def;
        int a2State = 0;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
            sipName_body,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EJ1", &sipSelf, sipType_QWebView, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QNetworkAccessManager_Operation, &a1, sipType_QByteArray, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a2),sipType_QByteArray,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_load, doc_QWebView_load);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setHtml, "QWebView.setHtml(QString, QUrl baseUrl=QUrl())");

extern "C" {static PyObject *meth_QWebView_setHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_setHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QUrl& a1def = QUrl();
        const QUrl* a1 = &a1def;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHtml(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setHtml, doc_QWebView_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setContent, "QWebView.setContent(QByteArray, QString mimeType=QString(), QUrl baseUrl=QUrl())");

extern "C" {static PyObject *meth_QWebView_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QUrl& a2def = QUrl();
        const QUrl* a2 = &a2def;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContent(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setContent, doc_QWebView_setContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_history, "QWebView.history() -> QWebHistory");

extern "C" {static PyObject *meth_QWebView_history(PyObject *, PyObject *);}
static PyObject *meth_QWebView_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QWebHistory*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->history();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_history, doc_QWebView_history);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_settings, "QWebView.settings() -> QWebSettings");

extern "C" {static PyObject *meth_QWebView_settings(PyObject *, PyObject *);}
static PyObject *meth_QWebView_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QWebSettings*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->settings();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_settings, doc_QWebView_settings);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_title, "QWebView.title() -> QString");

extern "C" {static PyObject *meth_QWebView_title(PyObject *, PyObject *);}
static PyObject *meth_QWebView_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->title());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_title, doc_QWebView_title);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setUrl, "QWebView.setUrl(QUrl)");

extern "C" {static PyObject *meth_QWebView_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setUrl, doc_QWebView_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_url, "QWebView.url() -> QUrl");

extern "C" {static PyObject *meth_QWebView_url(PyObject *, PyObject *);}
static PyObject *meth_QWebView_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_url, doc_QWebView_url);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_icon, "QWebView.icon() -> QIcon");

extern "C" {static PyObject *meth_QWebView_icon(PyObject *, PyObject *);}
static PyObject *meth_QWebView_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_icon, doc_QWebView_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_selectedText, "QWebView.selectedText() -> QString");

extern "C" {static PyObject *meth_QWebView_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QWebView_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->selectedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_selectedText, doc_QWebView_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_pageAction, "QWebView.pageAction(QWebPage.WebAction) -> QAction");

extern "C" {static PyObject *meth_QWebView_pageAction(PyObject *, PyObject *);}
static PyObject *meth_QWebView_pageAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::WebAction a0;
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWebPage_WebAction, &a0))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageAction(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_pageAction, doc_QWebView_pageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_triggerPageAction, "QWebView.triggerPageAction(QWebPage.WebAction, bool checked=False)");

extern "C" {static PyObject *meth_QWebView_triggerPageAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_triggerPageAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::WebAction a0;
        bool a1 = 0;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWebPage_WebAction, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->triggerPageAction(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_triggerPageAction, doc_QWebView_triggerPageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_isModified, "QWebView.isModified() -> bool");

extern "C" {static PyObject *meth_QWebView_isModified(PyObject *, PyObject *);}
static PyObject *meth_QWebView_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isModified();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_isModified, doc_QWebView_isModified);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_inputMethodQuery, "QWebView.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QWebView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QWebView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QWebView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_inputMethodQuery, doc_QWebView_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_sizeHint, "QWebView.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QWebView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QWebView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QWebView::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_sizeHint, doc_QWebView_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setTextSizeMultiplier, "QWebView.setTextSizeMultiplier(float)");

extern "C" {static PyObject *meth_QWebView_setTextSizeMultiplier(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setTextSizeMultiplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextSizeMultiplier(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setTextSizeMultiplier, doc_QWebView_setTextSizeMultiplier);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_textSizeMultiplier, "QWebView.textSizeMultiplier() -> float");

extern "C" {static PyObject *meth_QWebView_textSizeMultiplier(PyObject *, PyObject *);}
static PyObject *meth_QWebView_textSizeMultiplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textSizeMultiplier();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_textSizeMultiplier, doc_QWebView_textSizeMultiplier);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_findText, "QWebView.findText(QString, QWebPage.FindFlags options=0) -> bool");

extern "C" {static PyObject *meth_QWebView_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebPage::FindFlags a1def = 0;
        QWebPage::FindFlags* a1 = &a1def;
        int a1State = 0;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebPage_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->findText(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebPage_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_findText, doc_QWebView_findText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_event, "QWebView.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QWebView_event(PyObject *, PyObject *);}
static PyObject *meth_QWebView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebView::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_event, doc_QWebView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_stop, "QWebView.stop()");

extern "C" {static PyObject *meth_QWebView_stop(PyObject *, PyObject *);}
static PyObject *meth_QWebView_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_stop, doc_QWebView_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_back, "QWebView.back()");

extern "C" {static PyObject *meth_QWebView_back(PyObject *, PyObject *);}
static PyObject *meth_QWebView_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->back();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_back, doc_QWebView_back);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_forward, "QWebView.forward()");

extern "C" {static PyObject *meth_QWebView_forward(PyObject *, PyObject *);}
static PyObject *meth_QWebView_forward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->forward();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_forward, doc_QWebView_forward);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_reload, "QWebView.reload()");

extern "C" {static PyObject *meth_QWebView_reload(PyObject *, PyObject *);}
static PyObject *meth_QWebView_reload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reload();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_reload, doc_QWebView_reload);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_print_, "QWebView.print_(QPrinter)");

extern "C" {static PyObject *meth_QWebView_print_(PyObject *, PyObject *);}
static PyObject *meth_QWebView_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter* a0;
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPrinter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_print_, doc_QWebView_print_);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_print, "QWebView.print(QPrinter)");

extern "C" {static PyObject *meth_QWebView_print(PyObject *, PyObject *);}
static PyObject *meth_QWebView_print(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter* a0;
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPrinter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_print, doc_QWebView_print);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_createWindow, "QWebView.createWindow(QWebPage.WebWindowType) -> QWebView");

extern "C" {static PyObject *meth_QWebView_createWindow(PyObject *, PyObject *);}
static PyObject *meth_QWebView_createWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage::WebWindowType a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWebPage_WebWindowType, &a0))
        {
            QWebView*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebView::createWindow(a0) : sipCpp->createWindow(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_createWindow, doc_QWebView_createWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_resizeEvent, "QWebView.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QWebView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_resizeEvent, doc_QWebView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_paintEvent, "QWebView.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QWebView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_paintEvent, doc_QWebView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_changeEvent, "QWebView.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QWebView_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_changeEvent, doc_QWebView_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_mouseMoveEvent, "QWebView.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWebView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mouseMoveEvent, doc_QWebView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_mousePressEvent, "QWebView.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWebView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mousePressEvent, doc_QWebView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_mouseDoubleClickEvent, "QWebView.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWebView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mouseDoubleClickEvent, doc_QWebView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_mouseReleaseEvent, "QWebView.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWebView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mouseReleaseEvent, doc_QWebView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_contextMenuEvent, "QWebView.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QWebView_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_contextMenuEvent, doc_QWebView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_wheelEvent, "QWebView.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QWebView_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_wheelEvent, doc_QWebView_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_keyPressEvent, "QWebView.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QWebView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_keyPressEvent, doc_QWebView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_keyReleaseEvent, "QWebView.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QWebView_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_keyReleaseEvent, doc_QWebView_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_dragEnterEvent, "QWebView.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QWebView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dragEnterEvent, doc_QWebView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_dragLeaveEvent, "QWebView.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QWebView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dragLeaveEvent, doc_QWebView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_dragMoveEvent, "QWebView.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QWebView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dragMoveEvent, doc_QWebView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_dropEvent, "QWebView.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QWebView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dropEvent, doc_QWebView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_focusInEvent, "QWebView.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QWebView_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusInEvent, doc_QWebView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_focusOutEvent, "QWebView.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QWebView_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusOutEvent, doc_QWebView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_inputMethodEvent, "QWebView.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QWebView_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebView::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_inputMethodEvent, doc_QWebView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_focusNextPrevChild, "QWebView.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QWebView_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebView::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusNextPrevChild, doc_QWebView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_zoomFactor, "QWebView.zoomFactor() -> float");

extern "C" {static PyObject *meth_QWebView_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebView_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->zoomFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_zoomFactor, doc_QWebView_zoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setZoomFactor, "QWebView.setZoomFactor(float)");

extern "C" {static PyObject *meth_QWebView_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setZoomFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setZoomFactor, doc_QWebView_setZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_renderHints, "QWebView.renderHints() -> QPainter.RenderHints");

extern "C" {static PyObject *meth_QWebView_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QWebView_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QPainter::RenderHints*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPainter::RenderHints(sipCpp->renderHints());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_renderHints, doc_QWebView_renderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setRenderHints, "QWebView.setRenderHints(QPainter.RenderHints)");

extern "C" {static PyObject *meth_QWebView_setRenderHints(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setRenderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHints* a0;
        int a0State = 0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPainter_RenderHints, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHints(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setRenderHints, doc_QWebView_setRenderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setRenderHint, "QWebView.setRenderHint(QPainter.RenderHint, bool enabled=True)");

extern "C" {static PyObject *meth_QWebView_setRenderHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_setRenderHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHint a0;
        bool a1 = 1;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPainter_RenderHint, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHint(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setRenderHint, doc_QWebView_setRenderHint);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_hasSelection, "QWebView.hasSelection() -> bool");

extern "C" {static PyObject *meth_QWebView_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QWebView_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasSelection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_hasSelection, doc_QWebView_hasSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_selectedHtml, "QWebView.selectedHtml() -> QString");

extern "C" {static PyObject *meth_QWebView_selectedHtml(PyObject *, PyObject *);}
static PyObject *meth_QWebView_selectedHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->selectedHtml());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_selectedHtml, doc_QWebView_selectedHtml);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebView(void *, const sipTypeDef *);}
static void *cast_QWebView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QWebView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebView(void *, int);}
static void release_QWebView(void *sipCppV,int)
{
    QWebView *sipCpp = reinterpret_cast<QWebView *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebView(sipSimpleWrapper *);}
static void dealloc_QWebView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebView *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWebView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebView[] = {{755, 2, 1}};


static PyMethodDef methods_QWebView[] = {
    {SIP_MLNAME_CAST(sipName_back), meth_QWebView_back, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_back)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QWebView_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_changeEvent)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QWebView_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_createWindow), meth_QWebView_createWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_createWindow)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QWebView_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QWebView_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QWebView_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QWebView_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_event)},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QWebView_findText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_findText)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QWebView_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QWebView_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QWebView_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_forward), meth_QWebView_forward, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_forward)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QWebView_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_hasSelection)},
    {SIP_MLNAME_CAST(sipName_history), meth_QWebView_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_history)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWebView_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_icon)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QWebView_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QWebView_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QWebView_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_isModified)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QWebView_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QWebView_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QWebView_load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_load)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QWebView_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QWebView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QWebView_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QWebView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_page), meth_QWebView_page, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_page)},
    {SIP_MLNAME_CAST(sipName_pageAction), meth_QWebView_pageAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_pageAction)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QWebView_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_print), meth_QWebView_print, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_print)},
    {SIP_MLNAME_CAST(sipName_print_), meth_QWebView_print_, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_print_)},
    {SIP_MLNAME_CAST(sipName_reload), meth_QWebView_reload, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_reload)},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QWebView_renderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_renderHints)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QWebView_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_selectedHtml), meth_QWebView_selectedHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_selectedHtml)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QWebView_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_selectedText)},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QWebView_setContent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_setContent)},
    {SIP_MLNAME_CAST(sipName_setHtml), (PyCFunction)meth_QWebView_setHtml, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_setHtml)},
    {SIP_MLNAME_CAST(sipName_setPage), meth_QWebView_setPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_setPage)},
    {SIP_MLNAME_CAST(sipName_setRenderHint), (PyCFunction)meth_QWebView_setRenderHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_setRenderHint)},
    {SIP_MLNAME_CAST(sipName_setRenderHints), meth_QWebView_setRenderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_setRenderHints)},
    {SIP_MLNAME_CAST(sipName_setTextSizeMultiplier), meth_QWebView_setTextSizeMultiplier, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_setTextSizeMultiplier)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QWebView_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_setUrl)},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QWebView_setZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_setZoomFactor)},
    {SIP_MLNAME_CAST(sipName_settings), meth_QWebView_settings, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_settings)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QWebView_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_sizeHint)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QWebView_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_stop)},
    {SIP_MLNAME_CAST(sipName_textSizeMultiplier), meth_QWebView_textSizeMultiplier, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_textSizeMultiplier)},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebView_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_title)},
    {SIP_MLNAME_CAST(sipName_triggerPageAction), (PyCFunction)meth_QWebView_triggerPageAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_triggerPageAction)},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebView_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_url)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QWebView_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QWebView_zoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_zoomFactor)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QWebView[] = {
    {"urlChanged(QUrl)", "\1QWebView.urlChanged[QUrl]", 0, 0},
    {"iconChanged()", "\1QWebView.iconChanged", 0, 0},
    {"selectionChanged()", "\1QWebView.selectionChanged", 0, 0},
    {"linkClicked(QUrl)", "\1QWebView.linkClicked[QUrl]", 0, 0},
    {"statusBarMessage(QString)", "\1QWebView.statusBarMessage[QString]", 0, 0},
    {"titleChanged(QString)", "\1QWebView.titleChanged[QString]", 0, 0},
    {"loadFinished(bool)", "\1QWebView.loadFinished[bool]", 0, 0},
    {"loadProgress(int)", "\1QWebView.loadProgress[int]", 0, 0},
    {"loadStarted()", "\1QWebView.loadStarted", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWebView, "\1QWebView(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebView,
        {0}
    },
    {
        sipNameNr_QWebView,
        {0, 0, 1},
        54, methods_QWebView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebView,
    -1,
    -1,
    supers_QWebView,
    0,
    init_type_QWebView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebView,
    0,
    0,
    0,
    release_QWebView,
    cast_QWebView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebView::staticMetaObject,
    0,
    signals_QWebView,
};
